chapter#	sectionfloat	isextra	paragraph
4	0.583333	0	A gyakorlatban a genetikus algoritmusoknak nagy hatása volt az olyan optimalizációs problémákra, mint például az áramkör elrendezéstervezés és a gyártósor-ütemezés. Jelenleg nem világos, hogy a genetikus algoritmusok vonzereje a hatékonyságuk vagy az evolúció elméletében rejlő esztétikus eredetük eredménye. Sok munka van még hátra, hogy azokat a körülményeket azonosítsuk, amikor a genetikus algoritmusok igazán jól teljesítenek.
24	0.166667	1	Egy nemzetközi szabvány, amely megalapozta a filmnélküli radiológia széleskörű elterjedését, és elősegítette, hogy a különböző gyártók eszközei, rendszerei egymással könnyen összekapcsolhatók, egymásra építhetők legyenek. A DICOM szabvány megalkotása azért vált szükségessé hogy lehetővé váljon több gyártótól származó diagnosztikai eszköz, számítástechnikai hardverek összekapcsolását. A DICOM fájlok szabványos és szabad felhasználású mezőkből („tag”-ból) álló fejrészből és a képi adattartalomból épülnek fel. Egyetlen DICOM fájl egy vagy több képet tartalmazhat, kötegek, vagy animációk tárolását oldja meg.
5	0	0	A 3. és a  fejezetben azt az elképzelést jártuk körbe, hogy a problémákat állapottérbeli kereséssel lehet megoldani. A tárgyterületre jellemző heurisztikák segítségével értékelhetjük ezeket az állapotokat és ellenőrizhetjük, hogy nem járunk-e célállapotban. A keresési algoritmus szempontjából azonban mindegyik állapot egy megkülönböztetés nélküli belső struktúrájú fekete doboz (black box). Az állapotokat egy tetszőleges adatstruktúra reprezentálja, amelyhez a problémára jellemző rutinokkal lehet hozzáférni: az állapotátmenet- és a heurisztikafüggvénnyel, valamint a célállapotteszttel.
6	0.1	1	A CHINOOK először 1990-ben nyerte el a jogot, hogy indulhasson egy valódi- emberek elleni világbajnokságon. Itt el is jutott a döntőig, de Tinsley-től kikapott. Legközelebb a már sokkal fejlettebb CHINOOK 1992-ben állt Tinsley-vel szembe, ekkor már egy döntetlenben sikerült kiegyezniük. A legutolsó összecsapás 1994-ben zajlott. Egészségügyi okokra hivatkozva Tinsley-nek félbe kellett hagynia a játékot. Sajnálatos módon a világbajnok pár hónap múlva elhunyt. Lényegében sosem derült ki, hogy a CHINOOK akkori még nem teljes tudásával legyőzte-e volna a valaha élt legnagyobb játékost. 2002 óta pedig nem is engedik, hogy a világbajnokságon gépek is részt vegyenek, mert a nézőközönség számára unalmassá vált, hogy mindig gépek diadalmaskodnak emberek felett [4][5].
9	0.931034	0	Az automata programszintézisről szóló korai munkákat Simon (Simon, 1963), Green (Green, 1969a), valamint Manna és Waldinger (Manna és Waldinger, 1971) készítették. Burstall és Darlington transzformációs rendszere (Burstall és Darlington, 1977) egyenlőség következtetést használt a rekurzív programszintézishez. A Kids (Smith, 1990, 1996) az egyik legerősebb modern rendszer; amely egy szakértő segédeszközként működik. Manna és Waldinger (Manna és Waldinger, 1992) egy áttekintő bevezetést adtak a témakör aktuális helyzetéről fókuszba állítva a saját deduktív megközelítésüket. Az Automating Software Design (Lowry és McCartney, 1991) számos, a témáról szóló tanulmányt gyűjtött össze. A logikának a hardvertervezésben való felhasználásáról Kern és Greenstreet (Kern és Greenstreet, 1999) adott egy áttekintést; Clarke (Clarke és társai, 1999) műve pedig a modellellenőrzéssel foglalkozik a hardververifikálásban.
9	0.448276	0	A  ábra egy egyszerű hátrafelé láncolási algoritmust mutat be, az ERL-HL-Kérdez-t. Az algoritmust célok listájával hívjuk meg, amely kezdetben egy elemet tartalmaz, az eredeti lekérdezést, és az eljárás visszaadja az összes olyan helyettesítéshalmazt, amelyek kielégítik a lekérdezést. A célok listáját úgy tekinthetjük, mint egy feldolgozásra váró „vermet”. A bizonyítás aktuális ága akkor lesz sikeres, ha a verem összes elemét ki tudjuk elégíteni. Az algoritmus először veszi a lista első célját, és megtalálja az öszszes olyan klózt a tudásbázisban, amelynek a pozitív literálja, vagyis a feje (head) egyesíthető a céllal. Minden ilyen klóz létrehóz egy új rekurzív hívást, amelyben a premissza, vagyis a klóz törzse (body) hozzá lesz adva a célveremhez. Emlékezzünk, hogy a tények olyan klózok, amelyeknek fejük van, de törzsük nincs, így amikor egy cél egyesül egy ismert ténnyel, nem adunk új alcélokat a veremhez, és így a célt megoldjuk. A  ábra a Bűnöző(West) származtatásának a bizonyítási fáját mutatja be, a   mondataiból kiindulva a  -en keresztül.  ábra - Egy egyszerű hátrafelé láncolási algoritmus Egy egyszerű hátrafelé láncolási algoritmus  ábra - Egy hátrafelé láncolással létrehozott bizonyítási fa, annak bizonyítására, hogy West egy bűnöző. A fát mélységi kereséssel kell kiértékelni, balról jobbra. Hogy bebizonyítsuk a Bűnöző(West) klózt, be kell bizonyítanunk az alatta elhelyezkedő négy konjunktot is. Néhányan közülük megtalálhatók a tudásbázisban, míg mások további hátrafelé láncolást igényelnek. Mindegy egyes sikeres egyesítés lekötéseit láthatjuk a megfelelő részcél mellett. Jegyezzük meg, hogy mihelyt egy konjunkcióban egy részcél sikeres, helyettesítéseit a következő részcélokhoz alkalmazzuk. Így tehát, mire az ERL-HL-Kérdez eljut az utolsó konjunkcióig, az eredetileg Ellenséges(z)-ig, az már a Nono-hoz lesz lekötve. Egy hátrafelé láncolással létrehozott bizonyítási fa, annak bizonyítására, hogy West egy bűnöző. A fát mélységi kereséssel kell kiértékelni, balról jobbra. Hogy bebizonyítsuk a Bűnöző(West) klózt, be kell bizonyítanunk az alatta elhelyezkedő négy konjunktot is. Néhányan közülük megtalálhatók a tudásbázisban, míg mások további hátrafelé láncolást igényelnek. Mindegy egyes sikeres egyesítés lekötéseit láthatjuk a megfelelő részcél mellett. Jegyezzük meg, hogy mihelyt egy konjunkcióban egy részcél sikeres, helyettesítéseit a következő részcélokhoz alkalmazzuk. Így tehát, mire az ERL-HL-Kérdez eljut az utolsó konjunkcióig, az eredetileg Ellenséges(z)-ig, az már a Nono-hoz lesz lekötve.
3	0.083333	1	Főtárgyszavak (deszkriptorok) száma és több ezerre az utalószavak (nemdeszkriptorok) száma, melyek segítenek a megfelelő tárgyszó megkeresésében, pl. B[6]- vitamin ld. Piridoxin. A szinonimák, rövidítések, eltérő írásmódok beillesztésével, az utaló rendszer kidolgozásával a felhasználó könnyebben jut el a MeSH-hez.
19	0.909091	1	A laboratórium munkaszervezési szempontból egy főműszakban működő és egy másik három műszakos, nonstop módon működtetett „sürgősségi” egységből áll, melyekben a végzett vizsgálatok milyensége és mennyisége döntően a műszerpark és a kórház munkaszervezésének, illetve szervezetének filozófiája szerint tér el.
3	0.958333	0	 Megjegyzés A 3. szakasz - Iteratívan mélyülő mélységi keresés részben az iteratívan megnyúló keresést (iterative lengthening search) említettük, amely az egyenletes költségű keresés iteratív változata. Az ötlet az útköltségre vonatkozó növekvő korlát használata. Egy újonnan generált csomópontot eldobunk, ha az útköltsége a korlátnál nagyobb. A következő iterációban a korlátot az előző iterációban eldobott csomópontok közül a legkisebb útköltségre állítjuk be. a. Mutassa meg, hogy ez az algoritmus általános útköltségek esetén optimális. b. Tekintsen egy homogén fát b elágazási tényezővel, d megoldásmélységgel és egységnyi lépésköltséggel. Hány iterációra lesz szüksége az iteratívan megnyúló keresésnek? c. Most tekintsen egy olyan lépésköltséget, amit a [0, 1] folytonos tartományból sorsolnak, egy minimális pozitív ε költséggel. Hány iterációra lesz szükség a legrosszabb esetben? d. Implementálja az algoritmust és alkalmazza a 8-as játék és az utazó ügynök probléma konkrét eseteire. Hasonlítsa össze az algoritmus hatékonyságát az egyenletes költségű algoritmus hatékonyságával, és értelmezze az eredményeit.
1	0.068966	1	Feltehetjük a kérdést, hogy milyen számításokat lehet elvégezni egy sejtautomata segítségével. Igen érdekes választ kapunk, ha figyelembe vesszük a Wireworld nevű sejtautomatát. Ezt 1987-ben Brian Silverman mutatta be, Phantom Fish Tank nevű programjának részeként. A Wireworld elektronikus logikai elemeket, kapukat szimulál. Tudjuk, hogy a mai számítógépek alapjai ezek a kapuk, és ebből következik, hogy összeállíthatunk egy ilyen számítógépet, amivel tetszőleges számítást elvégezhetünk. Persze ne feledkezzünk meg arról, hogy ez soha nem lesz megfelelő teljesítményű [PWW].
24	0.583333	0	Az eljárás általánosítható. Nem szükséges, hogy a felület Lambert-féle legyen, és az sem, hogy a fényforrás pontszerű legyen. Lényegében ugyanez a módszer használható, ha sikerül a felület R(n) reflektanciatérképét (reflectance map) meghatározni, amely a felületelem fényességét annak n normálisa függvényében fejezi ki.
13	0.272727	0	Az összetett állítások létrehozásához az olyan elemi állítások, mint a Lyuk = igaz vagy a Fogfájás = hamis, bármely szokásos logikai kapcsolat felhasználásával kombinálhatók. Például a Lyuk = igaz ∧ Fogfájás = hamis egy olyan állítás, amelyhez valamilyen hihetőségi (hihetetlenségi) mértéket rendelhetünk. Ahogy az előző bekezdésben leírtuk, a fenti állítást úgy is jelölhetjük, hogy fogszuvasodás ∧ ¬fogfájás.
1	0.793103	0	Ez a folyamat a beszédfelismerés területén jól látható. Az 1970-es években igen sok különböző architektúrát és megközelítést próbáltak ki. Ezek közül sok ad hoc jellegű és gyenge volt, amelyek működését csupán néhány, erre a célra megválasztott példán demonstrálták. A legutóbbi években a rejtett Markov-modelleken (hidden Markov models, HMM) alapuló megközelítések uralják e területet. A HMM-ek két aspektusa lényeges. Először is szigorú matematikai elméleten alapulnak. Ez lehetővé tette, hogy a beszédkutatók a más területeken kifejlesztett több évtizedes matematikai eredményekre építsenek. Másodszor, e modelleket valós és nagyméretű beszédgyűjteményt felhasználó tanulási folyamat során hozzák létre. Ez biztosítja robusztus működésüket. A szigorú vaktesztek a rejtett Markov-modellek folyamatos javulását mutatják. A beszédtechnológia és a vele rokon kézírás-felismerés útban van a széles körű ipari és fogyasztói alkalmazások felé.
2	0.526316	1	Több internal action-t is definiálhatnánk (ezeket mind a src/java/adamant könyvtáron belül), lehetne több ágensünk is (például adamant_master.asl, adamant_slave.asl stb. neveken), de maradjunk az egyszerű példánál és tegyük fel, hogy elégedettek vagyunk az ágensünk működésével. Szeretnénk beadni a megoldást. Ehhez a következőket kell tennünk: 1. Készítsünk elő egy tetszőleges üres mappát (pl. c:\temp)! 2. Hozzunk létre ezen belül egy asl almappát, és másoljuk ebbe bele az ágensek .asl fájljait. (Tehát lesz egy c:\temp\asl mappánk, és azon belül egy c:\temp\adamant_.asl fájlunk.) 3. Hozzunk létre az eredeti mappán belül egy java mappát és másoljuk bele az AgentGame src/java/adamant könyvtárát! (Magát a könyvtárat is másoljuk, ne csak a tartalmát! Így tehát lesz egy c:\temp\java\adamant könyvtárunk, illetve egy c:\temp\java\adamant\AlwaysTrue.java fájlunk.) 4. Hozzunk létre egy config.txt fájlt és másoljuk bele az AgentGame.mas2j fájlból az "adamant_ [verbose=0] #5;" sort! (Így tehát lesz egy c:\temp\config.txt fájlunk.) 5. Tömörítsük össze a mappa tartalmát (figyelve arra, hogy a tömörített fájlba a gyökérkönyvtár ne kerüljön bele), és töltsük fel a megoldást a szerverre!
12	0.714286	0	Ez az alfejezet a megfelelő együttes tervek megalkotására fókuszál, elodázva egyelőre a koordinációs kérdéskört. Ezt többtestű tervkészítésnek (multibody plannining) nevezzük, és tulajdonképpen az a tervkészítési probléma, mellyel egy egyedülálló centralizált ágens áll szemben, mely cselekvéseket diktálhat minden fizikai entitásnak. Egy valóban multiágens esetben ez lehetővé teszi minden ágens számára, hogy felderítse melyek a lehetséges együttes tervek, melyek együttes végrehajtása sikeres lenne.
10	0.606061	0	Ebben az alfejezetben az internetes bevásárlással kapcsolatos tudás egy részét fogjuk kódolni. Egy olyan vásárló-kutató ágenst fogunk tervezni, amely segíti a vásárlónak az interneten megtalálni a termékek ajánlatait. A vásárló ágens a vásárlótól a termék leírását kapja és feladata a termék eladását hirdető weblapok listáját előállítani. Egyes esetekben a vásárló leírása pontos lesz, mint amilyen például a Coolpix 995 digitális fényképezőgép – a feladat ekkor a legjobb ajánlatot tevő boltot megtalálni. Más esetekben a leírás csak részben lesz specifikált, mint például a 300 dollárnál olcsóbb digitális fényképezőgép, és az ágens kénytelen lesz különböző termékeket összehasonlítani.
11	0.461538	0	Bár ez a példa nagyon egyszerű, jól szemlélteti a részben rendezett tervkészítés erősségét. Először is az okozati kapcsolatok a keresési tér (fa) egy korai szűkítéséhez metszéséhez vezettek, mert kizártak olyan területeket, amelyek a feloldhatatlan ütközések miatt nem tartalmaznak megoldásokat. Másodszor a  ábra megoldása egy részben rendezett terv. Ebben az esetben ennek előnye nem nagy, mert csak két lehetséges sorba rendezés létezik, mégis egy ágens számára előnyös lehet ez a rugalmasság, például ha a kereket sűrű forgalomban kellene lecserélni.
9	0.724138	0	A bizonyítás képes megválaszolni a „A Kíváncsiság ölte meg a macskát?” kérdést, de gyakran ennél általánosabb kérdéseket akarunk feltenni, mint például: „Ki ölte meg a macskát?” A rezolúció meg tudja válaszolni ezt is, de ennek a válasznak a levezetése egy kicsit több munkát igényel. A célállítás a ∃w Megöli(w, Tuna), amely negáláskor CNF-ben ¬Megöli(w, Tuna) lesz. Megismételve a bizonyítást a  ábrán az új negált céllal, hasonló bizonyítási fát kapunk, de a következő helyettesítéssel: {w/Kíváncsiság} az egyik lépésben. Így ebben az esetben, annak a kiderítése, hogy ki ölte meg a macskát, nem áll másból, mint a lekérdezés változóiban lévő lekötések nyomon követése a bizonyításban.
2	0.105263	1	Vezessük be az érzet-történetek O^T={O^T: T → O} halmazát, ahol O^T az ágens egy érzet-története, egy függvény, amely minden időpillanathoz hozzárendel egy-egy érzetet. Adott O^T érzet-történet t időpillanatig vett prefixét O^t jelölje. Ez tehát a t időpillanatig beérkezett érzetek története (az O^T függvény [0..t] intervallumra való leszűkítése). A lehetséges érzettörténet-prefixek halmazát ekkor ennek megfelelően O t ={ O t |t∈T és  O T ∈ O T }  jelöli. Ezekből képez tehát az ágens-függvény a cselekvésekbe. Vegyük észre, hogy itt nem foglalkozunk azzal, hogy aktuálisan (pl. a lefutás során) mi a jelen, a múlt, vagy a jövő. Ennek oka egyszerű: a bevezetett leírások nem igénylik a „jelen” bevezetését. Az ágensről egy-egy teljes lefutás kapcsán beszélünk most.
25	0.814815	0	Egy másik fontos, modern programozási nyelv (és hozzá tartozó architektúra) a Firby (Firby, 1994) által megalkotott reaktív akciótervrendszer (reactive action plan system, RAPS). A RAPS lehetővé teszi, hogy a programozók célokat és ezekhez tartozó terveket (vagy részleges stratégiákat) definiáljanak, valamint feltételeket, amelyek esetén az adott terv nagy valószínűséggel sikeres lesz. Ami nagyon fontos, hogy a RAPS lehetőséget ad az esetleges kudarc kezelésére is, ami szükségszerű velejárója a valódi robotikai rendszereknek. A programozó számos érzékelő rutint specifikálhat a különböző típusú kudarcok esetére, és mindegyikhez definiálhat egy kivételkezelési rutint. Háromrétegű architektúráknál gyakran használják a RAPS-ot a végrehajtó rétegben, az újratervezést nem igénylő kis eltérések, váratlan események kezelésére.
3	0.916667	1	b) A 3 × 3 világban alkalmazza a megválasztott algoritmust az optimális cselekvési szekvencia kiszámítására egy olyan kezdeti állapottal, ahol a felső három négyzet mindegyikében található piszok, és az ágens a középső négyzetben tartózkodik.
6	0.95	0	Állítsa elő az alfa-béta nyesés helyességének formális bizonyítását. Ehhez tekintse a  ábrán bemutatott helyzetet. A kérdés az, hogy az algoritmus lenyesse-e az n[j ]csomópontot, ami egy max-csomópont és az n[1] leszármazottja. Az alapötlet, hogy akkor és csak akkor nyessük le, ha n[1] minimax értéke igazolhatóan független n[j] értékétől. a. n[1 ]értékét az alábbi képlet adja meg:
14	0.130435	1	Ezt az eljárást faktorizációnak, az egyes tagokat pedig faktoroknak nevezzük. Látható, hogy egy adott változó faktora csak az adott változó szülőit tartalmazza a feltételes valószínűség feltétel részében.
14	0.826087	1	Az orvosi döntéstámogatás gépi eszközökkel való segítésére alkalmasak az * integrált kórházi információrendszerek, valamint a * mesterséges intelligencia alkalmazások, * tudásgazdálkodás, ismeretszervezés (knowledge engineering)
23	0.055556	0	A valószínűségi nyelvi modell (probabilistic language model) valószínűségi eloszlást definiál egy (esetleg végtelen) karakterfüzér-halmaz felett. Példaként állhatnak a  alfejezetben beszédmegértésre használt bi- és trigram nyelvi modellek. Az unigram modell P(w) valószínűséget rendel a szókincs minden egyes szavához. A modell feltételezi, hogy a szavak függetlenül lettek kiválasztva, azaz a karakterfüzér valószínűsége egyszerűen a szavak valószínűségének szorzata:  . A következő húszszavas szekvenciát véletlen módon generáltuk, a könyv szavainak unigram modellje alapján:^[236]
5	0.181818	1	Nézzük most a másik, 14-es korlátot. Eszerint tejet a középső, 3-as számú isznak. Az előbbiekhez hasonlóan tejet ivó személy házát reprezentáló változónak írjuk elő a 3-as házat, mint egyetlen lehetséges értéket.
1	0.068966	1	A legutóbbi CAM változat a CAM-8, amelyet szintén az MIT fejlesztett ki. A hardver lelkét a STEP nevű ASIC chip adta. A STEP egy skálázható, fizikai rendszer szimulációkra optimalizált multiprocesszor architektúra [HTF]. Egy STEP kártya, ami 16 db processzort tartalmazott, CBus-on keresztül kapcsolódott a rendszer többi eszközéhez. Egy CBus panelbe 8 db kártya fért, így maximum 128 CAM-8 processzorból állhatott egy számítógép.
9	0.965517	1	Az adminisztrációs terület igénye alapvető kérdés, mivel a betegfelvételtől az elbocsátásig biztosítani kell az adatok bevitelét, az alkalmazott gyógymódok és leletek értékelését, az adatok archiválását stb. Ily módon a betegek vizsgálatra történő besorolása, a betegellátással kapcsolatos adatok gyűjtése, a diétás beteg étrendjének összeállítása, a zárójelentés elkészítése, a betegforgalom alakulásának nyomonkövetése stb. „optimálisan” oldható meg, a szükséges statisztikák gyorsan és egyszerűen elkészíthetők. Az egészségügyi intézmények számítóközpontjának elegendő tartalékkal kell rendelkeznie ahhoz, hogy a nagy mennyiségű adat a memóriában tárolható legyen, ugyanakkor biztosítsa a gyors keresést, illetve adatszolgáltatást is.
22	0.259259	0	Még ha lenne is egy tökéletes heurisztikánk, amely lehetővé tenné az irreleváns kitérők nélküli keresést, ezek az algoritmusok akkor sem lennének hatékonyak, mivel bizonyos mondatoknak exponenciálisan sok levezetési fája van. A következő alfejezet megmutatja, hogy mit kezdhetünk ezzel a problémával.
10	0.515152	1	Ha a világ A1 (és szimmetrikusan B1) állapotban lenne, akkor a B (ill. az A), a király figyelmeztetése alapján, meg tudná nevezni kalapja színét. Mégsem teszi. Akkor a világ ezekben az állapotokban nem lehet. A tapasztalt hallgatás (mint egyfajta cselekvés) hatására C hiedelmi állapota következőképpen módosul:
2	0.526316	1	A forráskód legnagyobb része a grafikus komponensek létrehozásával és frissítésével foglalkozik. Ezen kívül mindössze két fontos részlet található a forráskódban. Az első a DebugAction által hívott debugFrame.add():
14	0.869565	1	A változókat egyszerű megnevezéssel és/vagy érték-hozzárendeléssel adjuk meg. Az így meghatározott változók (és a valós hozzárendelt értékük) a továbbiakban bármilyen matematikai összefüggésben szerepelhetnek. Az egyszer meghatározott (nevesített) változók a munkafolyamat végéig (a "quit", az "exit" vagy a "clear" utasításokig) rezidensen maradnak a MATLAB munkaterületen, tehát bármikor előhívhatók a munkafelületen (workspace, ami menthető, és vele mentődnek a változóértékek is, ha szükség van rá!).
13	0.772727	0	Ezzel ugyanarra az információigényre jutottunk, mint a minden egyes tényt külön használó következtetésnél: a keresés változójának P(Lyuk) a priori valószínűségét, valamint minden egyes okozat saját okának fennállása esetén igaz feltételes valószínűségét kell ismernünk.
14	0.869565	1	A MATLAB interaktív programcsomag, amely tudományos, mérnöki és matematikai feladatok megoldására egyaránt jól alkalmazható. Az alapcsomag továbbiakkal (Toolbox-okkal) kiegészítve számos alkalmazási területen számítások elősegítésére készült. Gyártója a The MathWorks Inc. (USA, www.mathworks.com). Nevét a MATrix LABoratory szóösszetétel rövidítéséből kapta, ami utal arra, hogy a legtöbb műveletet, feladatot mátrix formájában rögzített adatokkal végzi. Eredetileg FORTRAN-ban készült, később teljes egészében átíródott C nyelvre és bővíthető a modern programozási környezetben megírt modulokkal, azaz "nyitott".
4	0.958333	0	 Megjegyzés Hasonlítsa össze az A^* és a RLEK keresés hatékonyságát véletlen módon generált problémahalmazokon a 8-as kirakójáték (Manhattan-távolsággal) és a TSP-(MFH-vel, lásd  feladat) problémakörben. Értelmezze az eredményeket. Mi történik az RLEK hatékonyságával, ha a 8-as kirakójáték problémakörben a heurisztika értékeihez egy kis véletlen számot adunk hozzá?
4	0.916667	1	A módosítás tehát azt jelenti, hogy megkeressük az összes csúcsot, amely az aktuálistól legfeljebb k távolságra van, és ebből a halmazból választjuk ki a legjobbat, majd az ehhez vezető első csúcsot választjuk ki következő lépéshez.
6	0.55	0	Hasonlóan a minimaxhoz, a várhatóminimax esetén is alkalmazhatjuk a nyilvánvaló közelítést, vagyis valamilyen ponton levághatjuk a keresést, és a levelekre egy kiértékelő függvényt alkalmazhatunk. Úgy gondolhatnánk, hogy egy olyan játék esetén, mint az ostábla, a kiértékelő függvény elvben semmiben sem tér el a sakknál alkalmazott kiértékelő függvényektől, melyeknek most is magasabb pontot kell adniuk a jobb állásokra. Valójában azonban a véletlen csomópontok jelenléte azt jelenti, hogy sokkal körültekintőbbnek kell lennünk abban a tekintetben, hogy a kiértékelő függvény értékei mit jelentenek. A  ábra mutatja a problémát: ha a kiértékelő függvény a levelekhez az [1, 2, 3, 4] értékeket rendeli hozzá, az A[1] lépés lesz a legjobb, az [1, 20, 30, 400] értékekkel az A[2] lesz a legjobb. Ebből adódóan egy program teljesen másként viselkedik, ha átskálázzuk a kiértékelő függvény értékeket! Kiderül, hogy ha el akarjuk kerülni ezt az érzékenységet, akkor a kiértékelő függvény az egy adott állásból való győzelem valószínűségének (vagy általánosabban az állás várható hasznosságának) csak egy pozitív lineáris transzformációja lehet. Ez a bizonytalanságot is tartalmazó helyzetek fontos és általános tulajdonsága. A  fejezetben tovább foglalkozunk ezzel a kérdéssel.
6	0.1	1	A minimax keresés belátható, hogy helyes eredményt ad (azaz a keresés teljes), de az is belátható, hogy lassú. Olyan ágakat is megvizsgál, ahol már az első lépéstől egyértelmű, hogy jó nem sülhet ki belőle. Ezen próbál az Alfa-béta vágás segíteni [1]. Az alapötlet, hogy ha a lépésünkre az ellenfélnek már van egy nagyon erős lépése, akkor azt inkább ne is vizsgáljuk tovább.
13	0.590909	0	Vegyük észre, hogy a fenti két számításban az 1/P(fogfájás) konstans értékű marad függetlenül attól, hogy a Lyuk mely értékét számítjuk. Valójában ez egy, a P(Lyuk∣fogfájás)-t normalizálás (normalization) konstansnak tekinthető, amely biztosítja, hogy a feltételes valószínűségek összege 1 lesz. A valószínűségekkel foglalkozó fejezetekben az ilyen konstansokat a-val fogjuk jelölni. E jelölés segítségével a két előző kifejezés egybefoglalható:
17	0.666667	0	[730-1.png] Fontos Erre a játékra nincs domináns stratégiai egyensúly, de létezik két Nash-egyensúly: (dvd, dvd) és (cd, cd). Tudjuk, hogy ezek Nash-egyensúlyok, mivel akármelyik játékos is vált egyoldalúan egy különböző stratégiára, az rosszabbul fog állni. Most az ágenseknek a problémája a következő: több elfogadható megoldás is létezik, de ha az egyes ágensek különböző megoldást választanak, akkor a kiadódó stratégiaprofil egyáltalán nem lesz megoldás, és mindkét ágens veszteséget fog elszenvedni. Hogyan egyezhetnek meg egy megoldásban? Egy válasz erre, hogy mindkettőnek a Pareto-optimális megoldást kell választania (dvd, dvd); azaz leszűkíthetjük a „megoldás” definícióját az egyértelmű Pareto-optimális Nash-egyensúlyokra, feltéve, hogy létezik ilyen. Minden játéknak van legalább egy Pareto-optimális megoldása, de egy játéknak lehet több egyensúlyi pontja, de lehet, hogy ezek nem egyensúlyi pontok. Például beállíthatjuk a jutalmakat a (dvd, dvd)-nél 5-re 9 helyett. Ebben az esetben két egyenlő Pareto-optimális egyensúlyi pont létezik. A közöttük való választáshoz az ágensek vagy találgatnak, vagy kommunikálnak, ami vagy egy megállapodás kimondását jelenti, ami sorrendezi a megoldásokat a játék megkezdődése előtt, vagy tárgyalást jelent, hogy egy kölcsönösen előnyös megoldás alakuljon ki a játék folyamán (ami egy többlépéses játék részeként megjelenő kommunikációs cselekvések létét jelentené). A kommunikáció így pontosan ugyanazokból az okokból jelenik meg, mint a többágenses tervezésnél a  fejezetben. Az ilyen játékokat, ahol a játékosoknak szükséges kommunikálniuk, koordinációs játékoknak (coordination games) nevezzük.
6	0.1	1	A játékosoknak a stratégiája immár nem egy-egy eloszlás, amely a tiszta stratégiákhoz rendel valószínűségeket, hanem most már minden típusnak van egy-egy ilyen eloszlása. A típusokhoz kevert stratégiákat rendelő fi leképezéseket stratégia-profilnak nevezik. A Bayes-i játékokban tehát a játékosoknak immár stratégia-profilja van, és e szerint játszanak. Nyilván, amennyiben egy játékos típusa adott, úgy ez egyértelműen meghatározza a játékos által játszott kevert stratégiát, viszont a játékosok feltevésünk szerint a többi játékos típusával kapcsolatban csak hiedelmekkel rendelkeznek, nem ismerik pontosan. Ezért van tehát szükség stratégia-profilokra.
1	0.275862	1	Az fMR még a morfológiai eltérések előtt jelezheti a kezdődő Alzheimer-kórt. Egyes vizsgálatok eredményei szerint az fMR segítségével követhetjük a dementia kezelésének hatékonyságát. Az fMR segítségével nyomon követhetjük a Parkinson-kór gyógyszeres és funkcionális idegsebészeti terápiáját, és segít a terápiás hatás megértésében.
6	0.1	1	Látható, hogy ez a szabály egyértelműen kiegyenlítetté teszi a játékot, mivel a kezdő játékos nem fog olyan lépést tenni, amellyel nagy előnyre tenne szert, mivel ekkor lényegében saját magát helyezné hátrányos helyzetbe.
5	0.181818	1	A rekurzió előző szintjén, a 8. lépésben, ahol a Q változónak kerestünk és adtuk a BLUE értéket, most hamis érték adódott az algoritmus ön-meghívása eredményeképpen. Ezért tehát azon a rekurziós szinten a FOR ciklus egyel tovább próbál lépni, és a Q változónak a BLUE értéken túl egy további újabb értéket adni. Sajnos azonban ezen a szinten már a Q változó esetében is minden lehetséges értéket kipróbáltunk, így itt is a FOR ciklus végére érünk. Előtte még természetesen töröljük a legutóbbi Q=BLUE értékadást, kilépünk a FOR ciklusból, és a kód utolsó sorára kerül a vezérlés, ami hamis visszatérési értéket eredményez a rekurzió még egyel fentebbi szintjén, ahol az NT változónak kerestünk, és adtunk legutóbb GREEN értéket (lásd. 4. lépés).
24	0.791667	1	A körülvevő világ vizuális információinak adekvát észlelése kulcskérdés a túlélés szempontjából – nem véletlen tehát, hogy a látás az ember vezető szenzoros modalitása. Az emberi szem számára a fény sugárzó energiája adott hullámhossz-intervallumban fordítható át idegimpulzusokba, azaz látható.
8	0.064516	1	A PUFF feladata az, hogy értelmezze a légzésfunkciós (PF) vizsgálati eredményeket, a kapott eredményeket értelmezze, értékelje, jelentést készítsen azokról. Segítségével a diagnózis könnyebben felállítható, ezen túl a tudományos kutatásokhoz is segítséget nyújt.
22	0.444444	0	E szerint egy karaktersorozat, amely egy x szemantikájú számjegyből és egy azt követő y szemantikájú számjegyből áll, egy [x, y] szemantikával rendelkező NP-t formál, amely a háló egy négyzetére alkalmazott jelölésünk.
11	0.461538	1	A fenyegetettség feloldása csakis azáltal lehetséges, hogy a fent említett veszélytől tartva, a fenyegető cselekvést olyan helyre tesszük, ahol - akármilyen későbbi sorba rakás szempontjából – bajt nem tud okozni. Mivel a tervben létező rendezéseket megváltoztatni nem szabad, egyetlen lehetőség új rendező kényszereket a tervhez hozzáadni. Ezt nevezzük hátramozdítással (amikor a fenyegető cselekvést a védett szakaszt megelőző helyre kényszerítjük a tervben (középső ábra), ill. előremozdítással (amikor a fenyegető cselekvést a védett szakasz utáni helyre kényszerítjük a tervben (jobboldali ábra).
7	0.48	0	 ábra - Előrefelé láncolás algoritmus az ítéletkalkulus számára. Az agenda tartalmazza azokat a szimbólumokat, amelyek ismerten igazak, de még nem „dolgozták fel” őket. A számol tábla követi, hogy az egyes implikációknak hány premisszája ismeretlen. Ha az agendáról egy új p szimbólumot feldolgozunk, minden olyan implikáció számlálója csökken eggyel, amelynek premisszájában p megjelenik. (Ez megoldható konstans időben, ha a TB megfelelően indexelt.) Ha a számláló eléri a nullát, azaz az implikáció minden premisszája ismert, akkor az implikáció konklúzióját hozzá lehet adni az agendához. Végül szükségünk van arra, hogy kövessük melyik szimbólumot dolgoztuk már fel; egy kikövetkeztetett szimbólumot nem kell hozzáadni az agendához, ha azt már korábban sikeresen feldolgoztuk. Így elkerülhető a redundáns munka, és megakadályozza a végtelen ciklusok kialakulását, amelyet olyan implikációk okozhatnak, mint a P ⇒ Q és Q ⇒ P. Előrefelé láncolás algoritmus az ítéletkalkulus számára. Az agenda tartalmazza azokat a szimbólumokat, amelyek ismerten igazak, de még nem „dolgozták fel” őket. A számol tábla követi, hogy az egyes implikációknak hány premisszája ismeretlen. Ha az agendáról egy új p szimbólumot feldolgozunk, minden olyan implikáció számlálója csökken eggyel, amelynek premisszájában p megjelenik. (Ez megoldható konstans időben, ha a TB megfelelően indexelt.) Ha a számláló eléri a nullát, azaz az implikáció minden premisszája ismert, akkor az implikáció konklúzióját hozzá lehet adni az agendához. Végül szükségünk van arra, hogy kövessük melyik szimbólumot dolgoztuk már fel; egy kikövetkeztetett szimbólumot nem kell hozzáadni az agendához, ha azt már korábban sikeresen feldolgoztuk. Így elkerülhető a redundáns munka, és megakadályozza a végtelen ciklusok kialakulását, amelyet olyan implikációk okozhatnak, mint a P ⇒ Q és Q ⇒ P.
24	0.166667	1	A Sketchpad Ivan E. Sutherland 1963-ban készített PhD disszertációjában megszületett szoftver. [2] [3] A programot a CAD (Computer Aided Design) alkalmazások úttörőjeként szokás emlegetni. A Sketchpad nem csupán az első ablakban futó, grafikus, virtuális (papír)lapot használó szoftver volt, de a megszületésével világra jött az objektum orientált programozási technika. Az alkalmazás segítségével grafikus objektumok adhatók meg bizonyos fontos pontok (csúcsok, középpontok) megadásával, melyekre a számítógép alkalmazza az ismert törvényszerűségeket – párhuzamos oldalak, derékszögben találkozó élek, stb. – így állítva elő a kívánt végeredményt. A Sketchpad az MIT Lincoln Laboratories 1956-ban épített TX-2 nevű számítógépén futott, mely az utolsó, saját tetővel rendelkező szuperszámítógép volt. 460 kbyte adatot tudott tárolni és 400 000 műveletet végzett másodpercenként, mely egy 1987-es asztali Mac számítógép teljesítményével volt egyenértékű. [1] A felhasználó egy fényceruza segítségével kommunikált a programmal, mely használatával szintén úttörő volt Sutherland fejlesztése, ám később ez a beviteli eszköz nem bizonyult megfelelőnek. Egyszer megkérdezték tőle, hogy hogyan tudta megcsinálni az első interaktív grafikus programot, az első nem procedurális programozási nyelvet és az első objektum orientált szoftvert, mindezt 1 éven belül. Erre azt válaszolta, „Nem tudtam, hogy nehéz”.
6	0.1	1	Egyértelmű előnyt jelentett a kisebb keresési fa, ám a megvalósítás korántsem volt ilyen kézenfekvő. A fő problémát az jelentette, hogy a programra bízta annak eldöntését, hogy melyik lépés minősül jónak, és éri meg a fáradtságot, hogy végigjárják a lehetséges állásokat. Jóval nehezebb volt a feladat, mint az „A típus” esetében komolyabb hardvereket fejleszteni és keresési algoritmusokat bővíteni.
12	0.952381	0	Tekintsük a következő indoklást: egy bizonytalan kiinduló állapotot megengedő keretrendszerbe a diszjunktív következmények (disconjuctive effects) csak jelölési könnyebbséget jelentenek, és nem a kifejezőképesség növelésére szolgálnak. Egy P ∨ Q diszjunktív következményt tartalmazó a cselekvéssémát mindig helyettesíthetünk a when R: P ∧ when ¬R: Q feltételes következményekkel, ami cserében két hagyományos cselekvésre redukálható. Az R kifejezés egy a kiinduló állapotban ismeretlen véletlen állítást takar, melyhez nem tartozik érzékelő cselekvés. Helyes ez az indoklás? Vegyünk külön két esetet, egyet, melyben csak egy a cselekvésséma szerepel a tervben, és egy másikat, melyben több mint egy példány van.
1	0.896552	0	* Ebben a könyvben azt a nézetet fogadjuk el, hogy az intelligencia lényegében a racionális cselekvéssel kapcsolatos. Egy intelligens ágens, ideális esetben, az adott szituációban a legjobb cselekvéshez folyamodik. Az ilyen értelemben vett intelligens ágensek építési problémáit fogjuk tanulmányozni. * A filozófusok (i. e. 400-ig visszamenőleg) tették lehetővé az MI kialakulását azáltal, hogy felvetették: az elme bizonyos értelemben gépszerű, hogy valamilyen belső nyelvezetben kódolt tudásanyagon operál, és hogy a gondolat a helyes cselekvés megválasztásának eszköze. * A matematikusok megadták a logikailag biztos, valamint a bizonytalan valószínűségi állítások manipulálásának eszközét. Megadták annak az alapjait is, hogy megértsük a számításokat és az algoritmusokról következtethessünk. * A közgazdászok formalizálták a döntéshozatal folyamatát, hogy a döntéshozónak maximális várható hasznot biztosítson. * A pszichológusok megerősítették azt a gondolatot, hogy az ember és az állatok információprocesszáló gépezetnek tekinthetők. A nyelvészek azt mutatták ki, hogy a nyelvhasználat ezzel a modellel összhangban van. * A számítógép-technika biztosította az MI alkalmazását lehetővé tevő „műterméket”. Az MI-programok nagyok, a működésük lehetetlen lenne a memóriának és a sebességnek a számítógépes ipar biztosította nagyfokú fejlődése nélkül. * Az MI történetében voltak sikeres időszakok, de megtalálhatók a téves optimizmus és a lelkesedés, valamint a finanszírozás elapadása következtében beálló hanyatlás ciklusai is. Voltak időszakok, amelyek során új kreatív megközelítések bevezetése és a legjobb ötletek szisztematikus finomítása történt meg. * Az MI fejlődése az utolsó évtizedben a tudományos módszereknek a kísérletezésben és a megközelítések összehasonlításában való szélesebb körű alkalmazása következtében felgyorsult. * Az intelligencia elméleti alapjainak megértésében bekövetkezett jelenlegi fejlődés kéz a kézben együtt járt a valós rendszerek képességeinek javulásával. Az MI egyes részterületei jobban integrálódtak, és az MI és más tudományágak megtalálták a közös alapjukat.
24	0.666667	0	Az alak felhasználása az objektumfelismerésben sokkal bonyolultabbnak bizonyult. Nagyjából két irányzatot különböztethetünk meg: fényességalapú felismerést (brightness-based recognition), ahol a képpontok fényességértékeit direkt módon használjuk, és jellemzőalapú felismerést (feature-based recognition), ahol kiemelt jellemzők, mint például az élek vagy a kulcspontok részleges elrendezését használjuk. Miután részletesebben megvizsgáltuk e két megközelítést, tárgyalni fogjuk a pozícióbecslést (pose estimation), azaz az objektum helyzetét és irányát a jelenetben.
8	0.741935	0	Ezután megvizsgáljuk a végpontokat (be- és kimeneteket). Egy kapunak vagy áramkörnek egy vagy több bemenete, és egy vagy több kimenete lehet. Mindegyiket elnevezhetnénk egyszerűen egy konstanssal, mint ahogy azt a kapukkal tettük. Így az X[1 ]kapunak olyan végpontjai lennének, mint az X[1]Be[1], az X[1]Be[2] és az X[1]Ki[1]. A hosszú, összetett elnevezéseket azonban célszerű kerülni. Az, hogy valamit X[1]Be[1]-nek nevezünk, nem jelenti azt, hogy ez az X[1] első bemenete; még ekkor is hozzá kell tennünk valamit egy explicit állítást használva. Valószínűleg szerencsésebb egy függvénnyel leírni egy kaput, hasonlóan mint, ahogy János király bal lábát elneveztük BalLáb(János)-nak. Így tehát jelöljük az X[1] kapu első bemenetét úgy, hogy: Be(1, X[1]). Egy hasonló Ki függvényt használunk a kimenetekre.
6	0.1	1	Sajnos ugyanez a „logikája” számos valós életbeli helyzetnek is. Például a legtöbb környezetvédelmi szituáció is hasonló: az egyéni érdek ellentmond a közösség érdekének. Ha pl. szemetelünk, akkor azzal megspóroljuk a szemét kidobásához szükséges időt és energiát, továbbá számottevő mértékben nem rongáljuk környezetünket, viszont ha ilyen alapon mindenki szemetelne, úgy várhatóan igen rossz helyzet adódna. A közösségi normák, társadalmi konvenciók, vagy központi irányítás/szabályozás bevezetése segíthet (és segít is) ezeken a helyzeteken. E nélkül azonban sajnos az egyéni érdek eltiporná a közérdeket, pedig valahol a közérdeket is célszerű lenne mérlegelni az egyéni érdek megfogalmazásakor. Ennek kutatása, modellezése a mai játékelmélet egyik legnagyobb kihívása, de a racionalitással foglalkozó filozófiának is talán ez az egyik legrégebbi talánya: hogyan fér/függ össze egyén és közösség érdeke?
7	0.92	1	A DPLL algoritmus egy konjunktív normál formájú mondatot kap bemenetként, és ebből állít elő további állításokat. Bemenetként odaadjuk neki a fenti formában megadott állítást, majd az algoritmus felsorolja a lehetséges modelleket. A felsorolt modellek alapján eldönthető, hogy egy adott mezőn van-e akna, amennyiben a neki megfelelő koordinátát reprezentáló szimbólum minden modellben igaz, vagy minden modellben hamis. Amennyiben akad igaz és hamis értéket felvevő modell is, abban az esetben az aknáról nem dönthető el a tudásbázis alapján, hogy az adott mezőn van-e akna, vagy sem.
1	0.275862	1	Kezdetben a mágneses rezonanciás képalkotást (MR) pusztán az agy anatómiai és patológiás struktúráinak feltérképezésére, strukturális elváltozások keresésére és azok vizsgálatára használták. Ogawa és munkatársai felfedezésének köszönhetően azonban újabb lehetőséggel bővült az MR felhasználásának köre. Az MR-rel nemcsak az adott agyterület struktúrája vizsgálható, hanem a funkciója is. Ezt az eljárást „funkcionális” MR-nek (fMR) nevezik. Az fMR-t nemcsak az alapkutatásban az agy „funkcionális” feltérképezésére használhatjuk, hanem a klinikumban is számos területen fontos szerepet játszhat a beteg állapotának felmérésében, például az epilepszia kivizsgálásában és az idegsebészeti műtétek előtti tervezésben.
9	0.931034	1	 Adja meg az alábbi atomi mondatpárok legáltalánosabb egyesítőjét, ha egyáltalán létezik ilyen: a. P(A, B, B), P(x, y, z) b. Q(y, G(A, B)), Q(G(x, x), y) c. Idősebb(Apja(y), y), Idősebb(Apja(x), János) d. Ismeri(Apja(y), y), Ismeri(x, x)
26	0.571429	0	Mindannyian csak intuíciónk alapján tudunk érvelni. Először vegyük észre, ahhoz, hogy a külső viselkedés változatlan maradjon, mialatt a kísérlet alanya fokozatosan elveszti a tudatát, az akaratnak egyik pillanatról a másikra hirtelen és teljesen kell eltűnnie; különben a tudat zsugorodása befolyásolná a külső viselkedést – például ilyesmi szavak hangzanának el: „Segítség, eltűnőben vagyok!” Elég valószínűtlenül hangzik azonban, hogy a neuronok egyenkénti lecserélése az akarat hirtelen, egyik lépésről a másikra történő teljes eltűnéséhez vezetne.
19	0.363636	0	Ha a tudásbázis rendelkezik egy ilyen szabállyal, akkor minden új eset, ami a szabály egy példánya, azonnal megoldható. Fontos Természetesen ez csupán egy triviális példa egy igen általános jelenségre. Ha egyszer megértettünk valamit, azt általánosítva más körülmények között is felhasználhatjuk. Egy „nyilvánvaló” megoldási lépést kapunk, amely építőkockaként felhasználható bonyolultabb problémák megoldásában. Alfred North Whitehead, aki Bertrand Russell-lel együtt a Principia Mathematica társszerzője – talán a Zog felfedezése jellegű események megértéséhez saját magára alkalmazva a MAT elvét – azt írta, hogy „A civilizáció azáltal halad előre, hogy szaporítja azoknak a fontos cselekvéseknek a számát, amelyeket gondolkodás nélkül véghezvihetünk” (Whitehead, 1911). Ha ön, kedves olvasó, a deriválási példa lényegét megértette, akkor az agya már buzgón azon dolgozik, hogy megkísérelje a magyarázatalapú tanulás általános elvét kinyerni ebből a példából. Figyelje meg, hogy hacsak nem lényegesen okosabb a szerzőknél, a magyarázatalapú példa bemutatása előtt még nem ismerte fel a MAT-ot. A Zogot figyelő ősemberekhez hasonlóan önnek (és nekünk is) egy példát kellett látnunk, mielőtt az alapelvet meg tudtuk fogalmazni. Ez azért van így, mert megmagyarázni, hogy miért jó egy ötlet, sokkal könnyebb, mint magát az ötletet megfogalmazni.
5	0.090909	0	Könnyű észrevenni, hogy egy kényszerkielégítési problémára adható egy inkrementális megfogalmazás (incremental formulation), amely a kényszerkielégítési problémát szabályos keresési problémaként tekinti: * Kiinduló állapot (initial state): az üres hozzárendelés {}, ahol egyik változónak sincs értéke. * Állapotátmenet-függvény (successor function): bármelyik hozzárendelés nélküli változó értéket kaphat, amennyiben ez nem ütközik a korábbi értékadásokkal. * Célteszt (goal test): az aktuális hozzárendelés teljes. * Az út költsége (path cost): egy konstans költség (például 1) mindegyik lépésre. Fontos Mindegyik megoldásnak egy teljes hozzárendelésnek kell lennie, tehát n változó esetén az n-edik mélységi szinten jelenik meg. A keresési fa pedig csak n mélységű. Emiatt a korlátkielégítési problémák esetén a mélységi keresési algoritmusok népszerűek (lásd  alfejezet). Az is igaz, hogy a megoldáshoz vezető út nem lényeges. Ezért használható a teljes állapotleírás (complete-state formulation) is, amelyben minden egyes állapot egy teljes változó-hozzárendelés, akár kielégíti a kényszereket, akár nem. Ebben a felírásban a lokális keresési eljárások is használhatók.
4	0.583333	0	A (d)-ben az utódok generálását látjuk, a szülő füzéreket a keresztezési pontoknál keresztezve. Az első pár első gyereke például az első szülőtől az első három számjegyét kapja és a másik szülőtől a többit. A második gyerek pedig az első három számjegyét a második szülőtől kapja és az első szülőtől a többit. Az ennél a reprodukciós lépésnél szereplő 8-királynő állapotokat a  ábra mutatja. A példa azt a tényt szemlélteti, hogy ha a két szülő állapot igen különböző, a keresztezés eredménye mindkét szülőtől igen távol eshet. Sokszor előfordul, hogy a keresési folyamat elején a populáció eléggé változatos, és a keresztezés (a szimulált lehűtéshez hasonlóan) nagy léptekkel halad előre, majd később, ha az egyedek többsége már igen hasonlít egymásra, kisebb lépések jönnek.
2	0.526316	1	Az ágens minden csapattársára rendelkezik egy ilyen érzékeléssel, mely a csapattárs (érzékelésekkor és cselekvéskor használt) numerikus azonosítóját és (az üzenetküldéshez használható) nevét kapcsolja össze.
24	0.333333	0	Miután ezzel az algoritmussal megjelöltük az élek képpontjait, a következő lépés az azonos élekhez tartozó képpontok összekötése. Ez megtehető, ha feltételezzük, hogy bármely két szomszédos képpont, amely élpont és konzisztens irányítottságú, szükségszerűen ugyanahhoz az élhez tartozik. Ezt a folyamatot Canny-féle éldetektornak (Canny edge detection) nevezzük, kitalálója, John Canny után.
26	0.642857	0	Searle megengedi azt a logikai lehetőséget, hogy az agy éppenséggel egy hagyományos típusú logikai programot valósít meg; de ugyanazt a programot egy rosszfajta gépen futtatva nem kapnánk elmét. Searle tagadja, hogy azt gondolná, „a gépeknek nem lehet elméje”, sőt azt állítja, hogy bizonyos gépeknek igenis van elméje: az emberek elmével rendelkező biológiai gépek. Nem hagy azonban túl sok útmutatást afelől, hogy az elmével rendelkezés a gépek milyen csoportjára terjed ki.
15	0.962963	0	Mutassa meg, hogyan reprezentálna egy RMM-et egy rekurzív relációs valószínűségi modellként, amint azt a  fejezetben javasoltuk.  ábra - Egy váltó Kalman-szűrő Bayes-háló reprezentációja. Az S[t]váltó változó egy diszkrét állapotváltozó, aminek az értéke meghatározza az X[t] folytonos állapotváltozók átmeneti modelljét. Minden i diszkrét állapotra a P(X[t+1]|X[t], S[t] = i) állapotátmenet-modell egy lineáris Gauss-modell, pontosan úgy, mint egy szabályos Kalman-szűrőben. A diszkrét állapotok közti P(S[t+1]|S[t]) állapotátmenet-modellt egy mátrixnak tekinthetjük, ahogyan egy rejtett Markov-modellben. Egy váltó Kalman-szűrő Bayes-háló reprezentációja. Az St váltó változó egy diszkrét állapotváltozó, aminek az értéke meghatározza az Xt folytonos állapotváltozók átmeneti modelljét. Minden i diszkrét állapotra a P(Xt+1|Xt, St = i) állapotátmenet-modell egy lineáris Gauss-modell, pontosan úgy, mint egy szabályos Kalman-szűrőben. A diszkrét állapotok közti P(St+1|St) állapotátmenet-modellt egy mátrixnak tekinthetjük, ahogyan egy rejtett Markov-modellben.
14	0.782609	1	További probléma megoldása: olyan betegségek esetén, mint az influenza, ahol csaknem teljes a gyógyulás, fordított irányban is kell kategorizálni, az illető státusza fordítva változik a nyilvántartásokban. Nyoma azonban marad annyiban, hogy az illető, bár visszakaphatja a teljesen egészséges státuszát az adott évben, de egy róla megnyitott élettörténeti eseménylapon minden rögzítésre kerül. Ez a második nyilvántartás gyakorlatilag a páciens új, fuzzy-rendszerű anamnézise lesz, melyben nemcsak az állapotváltozását jegyezzük fel, hanem az élettörténetét is. Minden megtörtént esemény naplózásra kerül, ez lesz az élettörténet fájl, mely bármilyen utólagos adatbányászati eljárással elemezhető, míg az orvos-beteg találkozások számát közelítő becslés megtételére használják.
16	0.304348	0	Kísérleti vizsgálatok nagy része mutatta ki, hogy súlyos hiányosságok vannak a becslési protokollban. A kísérleti személyek kicsiben hajlamosak túlságosan kockázatkerülővé válni és ezért… az illesztett hasznosságfüggvények elfogadhatatlanul nagy kockázati prémiumot mutatnak a nagy tartományú szerencsejátékokra. …A kísérleti személyek azonban rendezni tudják az inkonzisztenciájukat, és úgy érzik, hogy valami fontosat tanultak arról, hogyan akarnak viselkedni. Eredményképpen néhányan lemondták a gépjármű baleseti biztosításukat és több időszakos életbiztosítást kötöttek meg.
11	0.5	0	okozati kapcsolatra is szükség van. Ha van egy M[2] cselekvés ¬Rajta(A, z) következménnyel, akkor ez csak akkor okoz ütközést, ha a z értéke B. Hogy kezeljük ezt a lehetőséget, kiterjesztjük a tervek reprezentációját, hogy tartalmazzanak z ≠ X alakú egyenlőtlenségi kényszereket (inequality constraints), ahol z egy változó és X egy változó vagy egy konstansszimbólum. Ebben az esetben az ütközést a z ≠ B hozzáadásával oldhatjuk fel, ami azt jelenti hogy a terv később B kivételével bármire behelyettesítheti z-t. Bármikor amikor egy behelyettesítést hajtunk végre a tervben, ellenőriznünk kell, hogy az nem ellenkezik-e az egyenlőtlenségi korlátokkal. Például egy x/y behelyettesítés ütközik az x ≠ y kényszerrel. Az ilyen ellentétek nem oldhatók fel, ezért a tervkészítő visszalépésre kényszerül.
7	0.12	0	Az előző példa nem csak illusztrálja a maga után vonzást, hanem megmutatja, hogy a vonzat definícióját fel lehet használni a következmények levezetésére, azaz, hogy logikai következtetést (logical inference) végezzünk. A  ábrán illusztrált következtetési algoritmust modellellenőrzésnek (model checking) hívjuk, mivel számba vesz minden lehetséges modellt annak megvizsgálására, hogy α igaz-e minden modellben, amelyben a TB igaz.  ábra - Lehetséges modelljei a csapda jelenlétének az [1, 2], [2, 2] és [3, 1]-ben, ha adott a megfigyelés, hogy az [1, 1]-ben semmi és a [2, 1]-ben szellő érezhető. (a) A tudásbázis és α1(nincs csapda[1, 2]-ben) modelljei. (b) A tudásbázis és α2(nincs csapda[2, 2]-ben) modelljei. Lehetséges modelljei a csapda jelenlétének az [1, 2], [2, 2] és [3, 1]-ben, ha adott a megfigyelés, hogy az [1, 1]-ben semmi és a [2, 1]-ben szellő érezhető. (a) A tudásbázis és α1(nincs csapda[1, 2]-ben) modelljei. (b) A tudásbázis és α2(nincs csapda[2, 2]-ben) modelljei.
6	0.95	0	Gondosan tekintse át a  feladat minden egyes játékában a véletlen események és a részleges információk összefüggéseit. a. Melyikre lesz jó a standard várhatóminimax modell? Implementálja az algoritmust és futtassa le a játékágensében a játékkörnyezet szükséges módosításaival. b. Melyekre lenne jó a  feladatban leírt séma? c. Vitassa meg, hogyan kellene kezelni azt a tényt, hogy egyes játékokban a játékosok nem rendelkeznek ugyanazzal az információval az aktuális állapotról.
2	0.526316	1	Az ágens kódjának első terve arról gondoskodik, hogy amennyiben az ágensnek 25 egységnél kevesebb az energiája, akkor ne tegyen semmit, pontosabban a várakozás cselekvést hajtsa végre. A terv felépítése a következő: * a +time(_) jelentése, hogy a tervet a time hiedelem megjelenése triggereli tetszőleges paraméterezéssel. A time hiedelmet a szimulátor minden körben érzékelésként adja át az ágensnek. * a : myenergy(Energy) & Energy<25 jelentése, hogy az ágens saját energiáját Energy értékűnek hiszi, és ez az Energy értéke 25-nél kevesebb * a <- wait. jelentése, hogy amennyiben az adott terv aktiválódik, és a feltételei teljesülnek (tehát ez a terv kerül végrehajtásra), akkor a wait cselekvést kell az ágensnek végrehajtania.
2	0.578947	0	Vegyük észre, hogy az ágensprogram igen kicsi a megfelelő táblázathoz képest. A legnyilvánvalóbb méretcsökkentés az észlelési történet figyelmen kívül hagyásából következik, amely a lehetőségek számát 4^T-ről 4-re csökkenti. Egy további, kisebb csökkenés abból a tényből fakad, hogy amikor az aktuális négyzet piszkos, az akció nem függ a helyszíntől.  ábra - Egy egyszerű reflexszerű ágens programja a kétállapotú porszívókörnyezetben. A  ábrán megadott ágensfüggvényt valósítja meg. Egy egyszerű reflexszerű ágens programja a kétállapotú porszívókörnyezetben. A  ábrán megadott ágensfüggvényt valósítja meg.
4	0.5	1	* albinizmus: autoszomális recesszív öröklődésű betegség, melyet a bőrben, hajban stb. előforduló melanin nevű pigment részleges vagy teljes hiánya okoz. * fenilketonúria: Egy enzimhiány (PAH-phenylalanin-hydroxylase) okozta betegség, amelyben a fenil-alanin nevű aminosav nem tud tirozinná alakulni, így felhalmozódik, különböző ketotesteket képez és a vizeletben is jól kimutatható. Mentális retardációt okoz, illetve a gyermek a testi fejlődésben visszamarad, éppen ezért fontos a korai felismerés és a megfelelő, fenil-alanin-mentes diéta, mellyel a betegség jól kordában tartható.
20	0.178571	0	Tehát az átlag maximum-likelihood becslése a mintaátlag, a szórás maximum-likelihood becslése pedig a minta átlagos szórásnégyzetének négyzetgyöke. Ezek ismét kedvező eredmények, mivel megerősítik a „józan ésszel” követett gyakorlatot.
22	0.666667	0	E szerint van egy olyan x entitás, amely azonos a Chryslerrel, és van egy másik m entitás, amelyik a bejelentést tette, és a kettő metonímiai relációban áll egymással. A következő lépés annak meghatározása, hogy milyen metonímiarelációk fordulhatnak elő. A legegyszerűbb eset az, amikor nincs semmilyen metonímia – az x szó szerinti objektum és az m metonímiai objektum azonos:
3	0.916667	1	Kezdetben a maximális költség 0. Az első iterációban megvizsgáljuk az összes gyökérből közvetlenül elérhető b csúcsot, ezek költsége mind 1, tehát eldobjuk őket, és megjegyezzük, hogy a következő költség-korlát 1 lesz. Mivel nem találtunk megoldást, növeljük a költség-korlátot 1-re. A második iterációban megint megvizsgáljuk a gyökérből közvetlenül elérhető b csúcsot, kifejtjük őket, és azt látjuk, hogy minden újabb csúcs (b*b új csúcs) költsége 2 (1+1), tehát ezeket is eldobjuk, a költség-maximumot pedig növeljük 2-re. Ez folytatódik egészen addig, amíg a lépésköltség el nem éri d-t, ez pedig a d+1-edik iterációban lesz. Ekkor az algoritmus talál egy megoldást, és ezzel leáll.
24	0.416667	0	A tárgy alakja bizonyos manipulációs feladatok szempontjából fontos, pl. ahhoz, hogy eldöntsük, hogy a tárgyat hol fogjuk meg. Legfontosabb szerepe azonban a tárgyak felismerésében van, ahol a geometriai alak a színnel és a textúrával egyetemben a legjellemzőbb vonást jelenti, hogy a tárgyakat azonosíthassuk, a kép tartalmát a korábban látott osztályokba besoroljuk és így tovább.
19	0.136364	0	Tegyük fel, hogy van valamilyen hipotézisünk, például H[r], amit már meglehetősen megkedveltünk. Amíg egy új példával sincs ellentmondásban, semmit sem kell tennünk. Aztán egyszer csak egy hamis negatív példa (X[13]) érkezik. Mit csináljunk? A  (a) ábra sematikusan úgy mutatja be H[r]-t, mint egy területet, a négyszögön belül minden H[r] kiterjedésébe tartozik. Az eddig látott példákat „+” vagy „–” jelöli, és látható, hogy H[r] jól sorolja be az összes példát, mint VárjunkE pozitív vagy negatív példáit. A  (b) ábrán egy új – hamis negatív – példa jelenik meg (bekarikázva): a hipotézis azt állítja, hogy negatív, pedig valójában pozitív példa. A hipotézis kiterjedését növelni kell ahhoz, hogy tartalmazza ezt a példát is. Ezt a lépést általánosításnak (generalization) nevezzük: egy lehetséges általánosítás a  (c) ábrán látható. Ezután a  (d) ábrán egy hamis pozitív példát látunk: a hipotézis azt állítja, hogy pozitív, pedig valójában negatív. A hipotézis kiterjedését csökkenteni kell ahhoz, hogy kizárjuk ezt a példát. Ezt szűkítésnek (specialization) nevezzük; a  (e) ábrán a hipotézis egy lehetséges szűkítését látjuk.  ábra - (a) Egy konzisztens hipotézis. (b) Egy hamis negatív példa. (c) A hipotézist általánosítottuk. (d) Egy hamis pozitív példa. (e) A hipotézist szűkítettük. (a) Egy konzisztens hipotézis. (b) Egy hamis negatív példa. (c) A hipotézist általánosítottuk. (d) Egy hamis pozitív példa. (e) A hipotézist szűkítettük.
14	0.565217	0	Azaz, az esemény valószínűsége megbecsülhető a mintavételi folyamat által generált összes teljes esemény azon hányadával, amelyek illeszkednek a részlegesen meghatározott eseményre. Például ha generálunk 1000 mintát a locsolós hálóból, és 511-ben közülük az Eső = igaz, akkor az eső becsült valószínűsége  .
20	0.964286	0	Vizsgálja meg az EM alkalmazását arra a problémára, amikor a  (a) ábrán látható háló paramétereit akarjuk tanulni, miközben az igazi paraméterértékeketa   egyenlet adja. a. Magyarázza meg, hogy miért nem működne az EM algoritmus, ha csak két attribútum volna, és nem három. b. Végezze el az első iterációra vonatkozó számítást a   egyenletből kiindulva. c. Mi történik, ha induláskor az összes paramétert ugyanarra a p értékre állítjuk? (Segítség: hasznos lehet, ha empirikusan megvizsgálja, mielőtt az általános eredményt megpróbálná levezetni.) d. Írja fel a 20. szakasz - Rejtett változókkal felépített Bayes-hálók tanulása részben található adattáblázatra a log likelihoodnak a paraméterekkel kifejezett összefüggését. Számítsa ki minden egyes paraméterre a parciális derivált értékét! Vizsgálja meg a (c) részben rögzített pont jellegét.
4	0.916667	1	Az ágens kilenc különböző helyen lehet, és tetszőleges mennyiségű helyről tudhatja (tapasztalatból), hogy van-e ott fal vagy nincs, azaz bármely potenciális fal esetén három lehetőség van: tudja, hogy van ott fal, tudja, hogy nincs ott fal, vagy nem tud semmit. A hiedelmi állapotok száma így 9*3^12 = 3^14. Ennek persze 1/9-ed része célállapot és léteznek olyan hiedelmi állapotok, amelyek nem érhetők el a kezdőállapotból. (Például nincs olyan elérhető állapot, amelyben az ágens tudja, hogy a jobb felső 2x2-es négyzet el van zárva és azon belül a jobb felső 1x1-es négyzet is, hisz mivel a jobb felső 2x2-es négyzetbe nem tud bejutni, annak belsejéről semmilyen információt nem szerezhet.) A hiedelmi állapotok száma tehát ijesztően magas. A feladat ilyen irányú megoldása ennek ellenére nem kilátástalan, ugyanis a kapott gráf szerkezete rettentően összetett, megfelelő keresési módszerrel igen gyorsan található célállapot.
16	0.434783	0	Ha a tárgytartományban bizonytalanság is jelen van, a szerencsejátékok közötti preferenciákat is át kell gondolni, és a hasznosságfüggvény kiadódó tulajdonságait is meg kell érteni, nem csak az értékfüggvényekét. Ennek a problémának a matematikája igen bonyolulttá válik, ezért a főbb eredmények közül csak egyet mutatunk be, hogy érzékeltessük az elérhető eredményeket. Az olvasónak a (Keeney és Raiffa, 1976) irodalmat ajánljuk, ami a terület igen alapos áttekintése.
17	0.133333	0	A  ábrán látható MDF-példában az ágens teljesítményét a meglátogatott állapotokban kapott jutalmak összege mérte. Ez a teljesítménymérték nem önkényes, de nem is az egyetlen lehetőség. Ez az alfejezet a lehetséges alternatív teljesítménymértékeket vizsgálja – azaz alternatív hasznosságfüggvényeket a környezeti történéseken, amit úgy jelölünk, hogy U[h]([s[0], ..., s[n]]). Az alfejezet a  fejezetből származó ötleteken alapul, és a technikai részleteket is bemutatja; a főbb pontokat a végén összegezzük. Fontos Az első megválaszolandó kérdés az, hogy véges horizont (finite horizon) vagy végtelen horizont (infinite horizon) van a döntéshozatalnál. A véges horizont azt jelenti, hogy létezik egy rögzített N idő, ami után semmi nem érdekes – a játéknak vége, mondhatni. Így U[h]([s[0], ..., s[N+k]]) = U[h]([s[0], ..., s[N]]) minden k > 0 esetén. Például tegyük fel, hogy az ágens (3, 1)-ből indul a  ábra 4 × 3-as világában, és tegyük fel, hogy N = 3. Ekkor, hogy a +1 állapot elérésének legalább az esélye meglegyen, az ágensnek egyenesen felé kell tartani, és az optimális cselekvés a Fel. Ezzel szemben, ha N = 100, akkor bőségesen van idő a biztonságos utat követni Balra menve. Azaz, véges horizont esetében az optimális cselekvés egy adott állapotban idővel változhat. Azt mondjuk, hogy az optimális eljárásmód véges horizont esetében nem- stacionárius (nonstationary). Rögzített időkorlát hiányában ezzel szemben nincs ok különböző viselkedésre ugyanabban az állapotban más és más időpontokban. Így az optimális cselekvés csak az aktuális állapottól függ, és az optimális eljárásmód stacionárius (stationary). A végtelen horizontú esethez tartozó eljárásmódok ezért egyszerűbbek, mint a véges horizontú esethez tartozók, és ebben a fejezetben mi főként a végtelen horizontú esettel foglalkozunk.^[172] Vegyük észre, hogy a „végtelen horizont” nem jelenti szükségszerűen azt, hogy az összes állapotsorozat végtelen; mindössze annyit jelent, hogy nincs egy rögzített határ. Nevezetesen, egy végtelen horizontú MDF-ben lehetnek végállapotot tartalmazó véges állapotsorozatok.
10	0.060606	0	A kategóriákról az elsőrendű logikában könnyű állításokat megfogalmazni az objektumok és a kategóriák egymáshoz való rendelésével vagy a kategóriához tartozó egyedek szerinti kvantifikálás révén: * Egy objektum egy kategória egyede, például:
1	0.068966	1	Napjainkban főleg FPGA alapú megvalósításokat alkalmaznak. Erre jó példa a már említett CBM (CAM-Brain Machine). A CBM 3D-s sejtautomatáinak hardveres megvalósítását Xilinx's XC6264 FPGA chippekkel végzik. Teljesítményét jól jellemzi, hogy másodpercenként 25 állapotfrissítést végez több millió neuronon.
14	0.130435	0	feltéve, hogy Szülők(X[i]) ⊆ {X[i][–1], …, X[1]}. Ez utóbbi feltétel a csomópontok bármely olyan sorszámozásával teljesíthető, ami konzisztens a gráf struktúrájából adódó implicit részleges rendezéssel. Fontos A   egyenlet szerint, egy Bayes-háló csak abban az esetben lehet helyes reprezentációja a tárgytartománynak, ha az adott szülők mellett, minden csomópont feltételesen független a csomópontot sorrendezésben őt megelőzőktől. Így a tárgytartomány struktúrájának megfelelő Bayes-háló megépítése során, minden egyes csomóponthoz úgy kell a szülőket megválasztanunk, hogy ez a feltétel teljesüljön. Szemléletesen ez azt jelenti, hogy az X[i] csomópont szülei halmazának tartalmaznia kell az {X[1], …, X[i–1]} közül mindazokat a csomópontokat, amelyek közvetlenül befolyásolják X[i]-t. Például tételezzük fel, hogy a  ábrán látható hálót már teljesen befejeztük, csupán a MáriaTelefonál szüleit kell még megválasztanunk. A MáriaTelefonál-t egyértelműen befolyásolja, hogy történt-e Betörés vagy Földrengés, de nem közvetlenül. A helyzettel kapcsolatos ismereteink alapján tudhatjuk, hogy ezek az események csak a riasztó által befolyásolhatják Mária telefonálással kapcsolatos viselkedését. Hasonlóan, ha a riasztó állapota ismert, akkor János hívásának bekövetkezte vagy elmaradása már nincs hatással Mária telefonálására. Formálisan fogalmazva, úgy véljük, hogy a következő feltételes függetlenség teljesül:
4	0.333333	0	El lehetne tűnődni azon, hogy az 1-2-3-4 és az 5-6-7-8 adatbázisokból kinyert heurisztikus függvényeket nem lehetne-e összeadni, mivel úgy tűnik, a két részproblémában nincs fedés. A válasz nemleges, mert egy adott állapotban az 1-2-3-4 és az 5-6-7-8 részproblémák megoldásai majdnem biztosan osztoznak közös lépéseken – igen valószínűtlen, hogy az 1-2-3-4 lapkákat a helyükre el lehet mozdítani, anélkül hogy az 5-6-7-8-hoz ne nyúlnánk hozzá, és fordítva. És mi lenne, ha ezeket a lépéseket nem is számolnák be? Azaz nem az 1-2-3-4 részprobléma teljes költségével számolnánk, hanem csak az 1-2-3-4 lapka lépéseit vennénk figyelembe. Könnyű ilyenkor rájönni, hogy a két költség összege még mindig a teljes probléma megoldási költségének egy alsó korlátja. Ez a diszjunkt mintaadatbázis (disjoint pattern database) hátterében húzódó ötlet. Az ilyen adatbázisok használatával lehetségessé válik a 15-ös kirakójátékot milliszekundumok alatt megoldani, a Manhattan-távolsághoz képest a generált csomópontok száma egy 10 000-es tényezővel kisebb. A 24-es kirakójáték esetén kb. egymilliós gyorsítást lehet elérni.
14	0.869565	1	A mátrixok méretét a size(m) parancs adja meg, ahol az első elem a sorok, a második pedig az oszlopok számát jelenti. Ezenfelül adottak még az alap mátrix műveletek: skaláris szorzat (*), mátrix összeadás (+), mátrixok kivonása (-), mátrixszorzás (*), baloldali osztás(\) és jobboldali osztás (/), transzponálás (’ ), elemenkénti szorzás (.*) és az elemenkénti osztás (./).
10	0.060606	0	Az elsőrendű logikában a kategóriák reprezentálására két alapvető választásunk lehet: a predikátumok és az objektumok. Használhatunk egy KosárLabda(l) predikátumszimbólumot, vagy a kategóriát KosárLabda objektumként reifikálhatjuk (reification). Mondhatjuk akkor, hogy Eleme(l, KosárLabda) (rövidítve l ∈ KosárLabda) annak a kifejezésére, hogy l a kosárlabda-kategória eleme. Azt mondjuk, hogy Részhalmaza(KosárLabda, Labda) (rövidítve KosárLabda ∈ Labda) annak a kifejezésére, hogy a KosárLabda a Labda egy alkategóriája vagy részhalmaza. Egy kategóriát tekinthetünk az elemeiből álló halmaznak, de egy sokkal bonyolultabb objektumnak is képzelhetjük, olyannak, amire az Eleme és a Részhalmaza relációk definiáltak.
5	0.181818	1	Ezért tehát újfent rekurzív hívás történik (a jelenlegi KKP-vel és behelyettesítéssel). Ennek során az első lépés egy új, még behelyettesítetlen változó kiválasztása. Sok választásunk, mint látjuk, már nincs. A 7 változónkból 6-nak már van értéke a behelyettesítés szerint. Az egyetlen, még be nem helyettesített változó a T. Tehát az algoritmus ezt választja, és ennek adja az első lehetséges értéket, a RED-et (T=RED).
5	0.181818	1	Mit tesz ekkor az algoritmus? Hát próbálna újabb értéket adni az NT változónak, de mivel sajnos itt is kifogytunk a lehetőségekből, ezért újfent a legutóbbi, NT=BLUE értékadás törlésre kerül, és hamis visszatéréssel visszalépünk az előző szintre, ahol a WA változónak kerestünk, és adtunk legutoljára RED értéket. A WA változó következő értéke nyilván a GREEN (WA=GREEN).
20	0.107143	1	Ha rendelkezésre áll az adott tárgyterületre vonatkozó háttértudás, akkor annak felhasználása segítheti a hiányzó értékek pótlását. Ebből következően ismeretlen tárgyterületen, melynél az elemzés célja éppen az összefüggések feltárása, nem alkalmazható. Alapesetben, ha egy hiányzó értékekkel rendelkező változó más változókkal fennálló függései vagy jellemző értékkonfigurációi ismertek, és ezek az értékek rendelkezésre állnak az adott rekordban, akkor a kérdéses változó bizonyos értékei kizárhatóak. Ekkor a lehetséges értékek közül a legvalószínűbbel kell a hiányt pótolni.
6	0.1	1	Az egyik legjobb stratégia hogy hidat készítsünk az, hogy először is meghatározzuk a legerősebb láncunkat, és megerősítjük annak leggyengébb pontját. A legjobb védekező stratégia pedig abból áll, hogy meghatározzuk az ellenfél legerősebb láncát, majd megkeressük a leggyengébb pontját és gyengítünk rajta. Ebből kifolyólag az is következik, hogy a legjobb védekezés egyenlő a legjobb támadással, így mindkét elgondolás ugyanúgy a legjobb döntéshez vezet.
2	0.526316	1	Tegyük fel, hogy a Beadó rendszerben az "Adamant" aliast kaptuk, és szeretnék beadni a Simple ágenst egy apró saját Java kiegészítéssel megspékelve. Először elkészítjük a saját csapatunkat: 1. Lemásoljuk az AgentGame src/asl mappájában található simple_.asl fájlt, és átnevezzük adamant_.asl-re. 2. Készítünk egy új mappát az AgentGame src/java mappájában adamant néven - ezen a néven hozunk létre saját package-t, és ide kerül majd a saját internal action-ünk. 3. A src/java/adamant könyvtáron belül létrehozzuk a saját internal action-ünk forrásfájljait. Jelen példában egy AlwaysTrue osztálytdefiniáltunk, mely mindig igaz értékkel tér vissza. Package-nek a csapat nevét, az adamant-ot használjuk. 4. Módosítjuk az adamant_.asl fájlt, hogy a megfelelő helyeken meghívja ezt az internal action-t:
14	0.173913	1	Legyenek az ábrán látható hálókban változók: D – dohányzik, T – tüdőrák, K – köhögés, S – szövettan. Minden változó bináris, és egy változó FVT táblájában sem fordul elő pontosan 0, vagy 1 valószínűség. A populáció kizárólagosan 60 évesekből áll, akik vagy nemdohányzók, vagy 40 éve dohányoznak.
25	0.777778	0	A végrehajtó vagy szekvenciális réteg (executive/sequencing layer) kapcsolja össze a reaktív réteget a modellezővel. Direktívákat fogad a modellező rétegtől, és egymás után továbbítja azokat a reaktív réteg számára. A végrehajtó réteg kezelheti például a modellező réteg pályatervező algoritmusa által generált útvonalpontokat, és eldönti, hogy melyik reaktív viselkedést hívja meg. A döntési idő a végrehajtó réteg esetében átlagosan másodperc nagyságrendű. Ez a réteg felelős továbbá azért is, hogy a szenzoros információkat egy belsőállapot-reprezentációba integráljuk. Kezeli például a robot lokalizációs és online térképezési rutinjait.
16	0.043478	0	Bizonyos értelemben az MVH-elv felfogható a teljes MI meghatározásának. Hiszen egy intelligens ágensnek mindössze annyit kell tennie, hogy kiszámítja a különféle mennyiségeket, maximalizálja a hasznosságot a cselekvései felett, és kész. Ám ez nem jelenti, hogy ezzel a definícióval az MI problémaköre meg lenne oldva!
5	0.181818	1	 ábra - 2. lépés: az előbbi, SA=RED értékadás következményeként a RED érték eltávolítása az NSW, WA, NT, Q, és V változók értékkészletéből az AC3/MAC következtetés eredményeképpen 2. lépés: az előbbi, SA=RED értékadás következményeként a RED érték eltávolítása az NSW, WA, NT, Q, és V változók értékkészletéből az AC3/MAC következtetés eredményeképpen
14	0.130435	1	A legnagyobb táblája a Rossz közérzet csomópontnak van, mivel két szülővel rendelkezik: Láz illetve a Torokfájás. Ennek az a magyarázata, hogy rossz közérzet kialakulhat akár a láz, akár a torokfájás miatt. Az utolsó csomópont a Gyengeség, mely a Rossz közérzet gyermeke. Ez azt tükrözi, hogy rossz közérzet esetén gyakori kísérőjelenség az erőtlenség, gyengeség érzése. 1-1. táblázat - Láz csomópont feltételes valószínűségi táblája
16	0.956522	0	A  feladat válaszai: Első sorozat: 1811, 40 ezer, 10 millió, 50%, 5-6, 67,36 m, 17 550 km, 5,515, 500 000, 100 000, 1000, 117,2 °C. Második sorozat: 13 500, 300 000, 646,28 m, 9438 km, 56 281 000, 25 753, 1935, 3,7 millió, 28 343 fő/km^2, 1020, 1868, 1904.
24	0.083333	1	Észlelésünk sokszor megtréfál bennünket: annak ellenére, hogy jól látjuk, amit látunk, még sincs annak semmi értelme. De az is megesik, hogy látni vélünk valamit, ami nincs is ott, vagy nem látunk meg valamit, ami pedig ott van, csupán azért, mert arra nem számítottunk. Az optikai csalódások a látási folyamat téves észlelései, amelyek általában azért jönnek létre, mert a látvány az érzeteket kiértékelő neuronrendszer számára egymásnak ellenkező módon értelmezhető jeleket tartalmaz. Ilyenkor általában az „erősebb” jel hatása dominál, még akkor is, ha tudatunk jelzi ezt az ellentmondást.
10	0.848485	0	Ha azt mondjuk, hogy az Abnormális[1]-et körül kell írni (circumscribed), a körülíró következtető feltételezheti, hogy ¬Abnormális[1](x), hacsak az Abnormális[1](x)-et nem fogja igaznak találni. Ez lehetővé teszi, hogy a Repül(Tweety) konklúziót levonjuk a Madár(Tweety) premissza alapján, azonban a konklúzió csak addig igaz, amíg az Abnormál(Tweety)-t ki nem jelentjük.
11	0.961538	0	Vegyük a cipő és zokni felvételének problémáját, ahogy a  alfejezetben definiáltuk. Alkalmazzuk a Graphplan algoritmust erre a problémára, és mutassuk meg, hogyan áll elő a megoldás. Adjuk hozzá a kabát és a kalap felvételére szolgáló cselekvéseket. Adjuk meg azt a részben rendezett tervet, ami megoldás, és mutassuk meg, hogy ennek 180 különböző sorrendezése van. Mi a 180 különböző sorrendezés reprezentációjához szükséges különböző tervkészítő gráf megoldások minimális száma?  ábra - A Sussman-anomália kockavilág tervkészítési probléma A Sussman-anomália kockavilág tervkészítési probléma  ábra - Shakey világa. Shakey képes egy szobán belül mozogni, át tud menni a szobák közötti ajtókon, fel tud mászni tárgyakra, el tudja tolni a mozdítható tárgyakat, valamint a villanyt tudja kapcsolni. Shakey világa. Shakey képes egy szobán belül mozogni, át tud menni a szobák közötti ajtókon, fel tud mászni tárgyakra, el tudja tolni a mozdítható tárgyakat, valamint a villanyt tudja kapcsolni.
17	0.266667	0	Az U(s) hasznosságfüggvény lehetővé teszi az ágensnek, hogy a cselekvéseit a  fejezetben szereplő maximális várható hasznosság elve alapján válassza meg; azt a cselekvést választja, amelyik maximalizálja a bekövetkező állapot várható hasznosságát:
14	0.086957	1	Továbbá, az N  minta alapján kiválasztott osztályozó várható átlaghibájára korlát adható az E[Z]≤ log(ce) 2N  egyenlőtlenség kihasználásával (ami fennáll, ha p(Z≥ε)≤c e −2N ε 2  minden 0≤ε  és valamely 0≤c  ):
5	0.181818	1	Ez a behelyettesítés, amint az a fenti ábrán is látszik, még közel sem megoldás, hiszen számos olyan él van, amelyeknek mindkét végpontja/csúcsa azonos színű. Ezek szerint a konfliktusban lévő változók halmaza a következő: NSW, WA, NT, Q, SA, és V (az összes változó a T kivételével).
6	0.9	1	Állítsa elő az alfa-béta nyesés helyességének formális bizonyítását. Ehhez tekintse a  ábrán bemutatott helyzetet. A kérdés az, hogy az algoritmus lenyesse-e az nj csomópontot, ami egy max-csomópont és az n1 leszármazottja. Az alapötlet, hogy akkor és csak akkor nyessük le, ha n1 minimax értéke igazolhatóan független n[j] értékétől.
25	0.074074	1	A sebészrobotokat (surgical robots) működésük alapján három kategóriába sorolhatjuk. Vannak a fél-automata rendszerek, a közvetlenül irányított rendszerek és a teleoperációval működtetettek. Különbözőrobotokat terveztek és építettek már mindhárom kategóriában, hogy megoldják a neurológiai, ortopédiai, urológiai, arcsebészeti, szemészeti, valamint szív és érrendszeri műtéti beavatkozások jelentette kihívásokat. Különösen elterjedt a robotok használata a laparoszkópiás vizsgálatoknál, ahol endoszkópiás módszerekkel vizsgálják a beteget. Egyes esetekben nemcsak egy, hanem két vagy akár három robotkart használnak, mivel ezekkel bizonyos összetett feladatok sokkal könnyebben végezhetők el. Az egyes manipulátorokon különböző endeffektorok (végszerszámok) lehetnek, vagy akár szenzorok is. Az ilyen rendszereket multi-manipulátoroknak hívják.
5	0.181818	1	9. lépés: ebben a lépésben LCV nélkül az NT=BLUE értékadás történt. Ugyanez a választás történik akkor is, ha LCV heurisztika szerint választunk értéket, mivel egyrészt ugyanúgy vissza kell lépnünk, másrészt az itt szereplő 5. lépésben bemutatott, NT{GREEN(3), BLUE(3)} heurisztikus értékek szerint a GREEN érték után következő értéket, a BLUE-t választjuk most is.
6	0.1	1	A fenti, kölcsönösen ismert/tudott információs partíciók mellett tehát, mivel a-ban vagyunk, az 1-es játékos még nem tudja eldönteni, hogy az a, vagy az e világállapot áll-e fent (amelyekben kalapjának színe különböző), így nem tudja megmondani kalapjának színét, azaz válasza „Nem”. Ezzel azonban az 1-es játékos a többiek tudtára adta, hogy biztosan nem d-ben vagyunk, ahol viszont tudná a választ. Ezt átvezetve a következő információs partíciókat kapjuk.
18	0.684211	1	A tanuló algoritmus belsejében lévő gyenge tanuló algoritmus az adathalmazban szereplő adatmintákat egymást követően különböző súlyozás mellett veszi figyelembe. A gyenge osztályozó eljárás a rosszul osztályozott egyedeket felsúlyozza. A következő iterációban az előbbi lépésben kiszámolt súlyok mellett újra osztályozza gyenge tanuló algoritmus az adatmintákat. A tanuló eljárás ezt a lépést több iteráción keresztül megismétli. Így a nehezen osztályozható mintákat felsúlyozza a tanuló algoritmus. Végül az AdaBoost tanuló eljárás a gyenge osztályozók becsléseinek súlyozott szavazatát veszi figyelembe [4]. (A gyenge osztályozó eljárások becsléseit különböző súlyokkal veszi figyelembe.)
1	0.724138	0	Az első üzletileg sikeres szakértőrendszert, az R1-et a Digital Equipment Corporationnél (McDermott, 1982) alkalmazták. A rendszer az új számítógépes rendszerek megrendeléseit segítette konfigurálni, és 1986-ra évi mintegy 40 millió dollár megtakarítást jelentett a cégnek. 1988-ra a DEC MI-csoportja már 40 szakértőrendszert állított üzembe, és több ilyen rendszer üzembe állítása folyamatban volt. A DuPont cégnél 100 ilyen rendszer üzemelt, és folyamatban volt további 500 rendszer fejlesztése. Az ezekből származó becsült megtakarítás elérte az évi 10 millió dollárt. Majdnem minden nagyobb amerikai cég saját MI-csoporttal rendelkezett, és vagy használta, vagy tanulmányozta a szakértőrendszer technológiát.
2	0.526316	1	Amennyiben a feldolgozás során hiba történik, akkor a fenti kimenetben a megfelelő helyen hibajelzést található: ilyenkor a versenyben továbbra is a legutóbb sikeresen beadott változat vesz részt (ha van már ilyen) mindaddig, amíg az új verzió beadása nem sikerül.
10	0.272727	0	A reprezentációs probléma megoldása csak egy kis változást igényel abban, hogy az axiómákat hogyan írjuk fel. Ahelyett hogy felírnánk minden cselekvés hatását, azzal foglalkozunk inkább, hogy egy folyó esemény időben hogyan evolvál.^[96] Az általunk használt axiómákat követő állapot axiómáknak (successor-state axioms) hívják. Alakjuk a következő:
27	0.4	1	Az ágens-programok az ágens aktuális Belső_Állapot-a, és aktuális észlelése alapján állítják elő az ágens cselekvéseit, illetve ezek alapján akár belső állapotát is módosíthatják. Ezt mutatja a következő definíció.
1	0.137931	1	1996-ban Harry Foundalis egy teljesen új megközelítést alkalmazva készítette el kifejezetten Bongard problémák megoldására a Phaeaco-t [4]. Ugyan kevesebb BP-t tudott megoldani, de az RF4-gyel ellentétben nem igényel előfeldolgozást, bemenetként 12 darab 100x100 pixel felbontású fekete-fehér képet kap, két osztályra bontva. A problémamegoldás két szinten történik, először az összes képet egyszerre látja a program, ennek alapján néhány megoldási “ötlete” támad, amiknek az alkalmazhatóságát részletesen megvizsgálja minden egyes képre. Nem lehet előre tudni, hogy milyen ötletei lesznek a programnak az első fázisban, ezért egy BP-t csak az esetek bizonyos százalékában tud megoldani.
3	0.208333	0	A  ábrán bemutatott 8-as kirakójáték (8-puzzle) egy 3 × 3-as táblából, 8 számozott kockából és egy üres helyből áll. Az üres hely melletti kockát be lehet csúsztatni az üres helyre. A cél egy meghatározott állás, mint például az ábra jobb oldalán látható állás elérése. A probléma szokásos megfogalmazása a következő: * Állapotok: az állapotleírás meghatározza mind a nyolc kocka és az üres hely pozícióját a kilenc lehetséges pozíció egyikében. * Kezdeti állapot: akármelyik állás lehet kezdeti állapot. Figyeljük meg, hogy minden egyes célt pontosan az állapotok feléből lehet elérni ( feladat). * Állapotátmenet-függvény: a négy cselekvés (üres hely megy Balra, Jobbra, Fel, Le) alkalmazásából adódó legális állapotokat generálja. * Célteszt: ellenőrzi, hogy az állapot megegyezik-e a  ábrán mutatott célállapottal (más célkonfiguráció is lehetséges). * Útköltség: minden lépés költsége 1, így az út költsége megegyezik az út lépéseinek a számával.
17	0.266667	0	Az állapotok hasznosságát az állapotsorozatok hasznosságán keresztül definiáljuk. Nagyjából azt modhatjuk, hogy egy állapot hasznossága a belőle kiinduló állapotsorozatok várható hasznosságával egyenlő. Nyilvánvalóan az állapotsorozatok függnek a végrehajtott eljárásmódtól, így elsőként egy adott π eljárásmódra definiáljuk a hasznosságot, U^π(s)-t. Jelöljük s[t]-vel az ágens állapotát a π eljárásmód t lépésnyi végrehajtása után, ekkor azt kapjuk, hogy
11	0.038462	0	Végül a problémamegoldó ágens nem hatékony, mert nem tudja kihasználni a problémadekompozíció (problem decomposition) lehetőségét. Vegyük például a következő feladatot: több csomagot kell kiszállítanunk a megfelelő címekre, melyek Ausztrália különböző pontjain találhatók. Jó megközelítés, ha megkeressük a célpontokhoz legközelebb eső reptereket, és felosztjuk a teljes problémát több részfeladatra; repterenként egyre. Az egy reptéren keresztül irányított csomagok esetén a további dekompozíció lehetősége a célvárostól függ. Az  fejezetben láttuk, hogy egy ilyen felbontás képessége hozzájárul a kényszerkielégítési feladatmegoldók hatékonyságához. A tervkészítőkre ugyanez igaz: a legrosszabb esetben n csomag legjobb kiszállítási tervének elkészítése O(n!), míg ha a feladat k egyenlő részre bontható ez mindössze O((n/k)! × k) komplexitású feladat.
7	0.16	1	A tudásbázis tartalma nyílván igaz, ha „kutya” jelentése egy kutya, „emlős” jelentése egy emlős, „fekete” a fekete szín, „barna” a barna szín, „Bodri” a Bodri, „Som” pedig a Som kutyám, és TÉNYLEG van egy Bodri nevű fekete és Som nevű barna kutyám (azaz az interpretációhoz egy világi helyzet is tartozik, amelyben ez az interpretáció igaz, avagy megadtuk a logikai tudásbázis által képviselt logikai elmélet egy modelljét).
13	0.636364	0	A függetlenségi állítások általában a tartománnyal kapcsolatos ismereteken alapulnak. Mint korábban láthattuk, ezek jelentősen lecsökkenthetik a teljes együttes eloszlás meghatározásához szükséges információ mennyiségét. Ha a változók teljes halmaza szétbontható független részhalmazokra, akkor a teljes együttes eloszlás felbontható ezen részhalmazok felett értelmezett, egymástól független együttes eloszlásokra. Például n független pénzfeldobás eredményének együttes eloszlása P(C[1], …, C[n]) felírható n egyváltozós P(C[i]) eloszlás szorzataként. Még kézzelfoghatóbban: a fogászat és a meteorológia függetlensége jó dolog, különben a fogászati gyakorlat mély meteorológiai ismereteket igényelne, és fordítva.  ábra - Két példa nagyméretű együttes eloszlások kisebb eloszlásokra való felbontására az abszolút függetlenség alapján. (a) Az időjárás és a fogászati problémák függetlenek. (b) A pénzfeldobások függetlenek. Két példa nagyméretű együttes eloszlások kisebb eloszlásokra való felbontására az abszolút függetlenség alapján. (a) Az időjárás és a fogászati problémák függetlenek. (b) A pénzfeldobások függetlenek.
4	0.791667	0	Ezt a sémát, aminek tanuló valós idejű A^* (TRTA^*) a neve, a  ábrán látható ágens implementálja. Ez az ágens az Online-Mélységi-Ágens-hez hasonlóan az eredmény táblázat felhasználásával környezetének egy térképét építi meg. Felfrissíti az éppen elhagyott állapot költségbecslését, és az aktuális költségbecslés szerint a „látszólag legjobb” cselekvést választja. Fontos részlet, hogy az s állapotban még ki nem próbált cselekvésekről mindig azt tételezi fel, hogy a lehető legkisebb h(s) költséggel közvetlenül a célhoz vezetnek. Ez a bizonytalanság melletti optimizmus (optimism under uncertainty) felbátorítja az ágenst, hogy új, feltehetően gyümölcsöző utakat tárjon fel.
9	0.965517	0	Adja meg az alábbi mondatok olyan logikai reprezentációját, amely alkalmas arra, hogy az Általánosított Modus Ponens szabályt alkalmazzuk rájuk: a. A lovak, a tehenek és a malacok emlősök. b. Egy ló leszármazottja is ló. c. Kékszakáll egy ló. d. Kékszakáll Charlie szülője. e. A leszármazott és a szülő inverz relációk. f. Minden emlősnek van szülője.
18	0.894737	0	Az  fejezet felvázolta az induktív tanulás filozófiai vizsgálatának történetét. William of Ockham (1280–1349) volt korának legnagyobb hatású filozófusa és a középkori ismeretelmélet, a logika és a metafizika egyik nagy alakja. Neki tulajdonítják azt a mondást, ami „Ockham borotvája” néven rögzült a köztudatban. Latinul: Entia non sunt multiplicanda praeter necessitatem, ami azt jelenti magyarul, hogy „A dolgokat nem kell a szükségesnél jobban bonyolítani”. Sajnos ez a dicséretes mondás sehol sem található meg a műveiben pontosan így megfogalmazva.
6	0.1	1	A Fritz német sakkprogram fejlesztői, Frans Morsch és Mathias Feist, kiadója pedig a ChessBase. A Deep Fritz, egy már több processzorral is kompatibilis verziója a programnak. A Deep Fritz 12 és a Fritz 12 a legújabb verziók, melyek kereskedelmi forgalomban kaphatók.
3	0.833333	0	Ha a környezet jellege olyan, hogy az ágens a cselekvéseit követően szerezhet új információt a szenzorai révén, eshetőségi problémáról (contingency problem) beszélünk. Egy eshetőségi probléma megoldása sokszor egy fa alakját veszi fel, ahol egy-egy ágnak a kiválasztása azon múlik, hogy odáig az ágens milyen érzékelésekhez jutott. Tegyük fel, hogy az ágens a Murphy-törvény világában rendelkezik helyzetérzékelővel és lokális koszérzékelővel, nincs azonban olyan szenzora, amely képes lenne koszt detektálni más négyzeteken. Így a [B, Kosz] érzékelés azt jelenti, hogy az ágens az {1, 3} állapotok egyikében van. Az ágens most a [Szív, Jobbra, Szív] cselekvési szekvenciát fogalmazhatta meg. A szívó cselekvés az {5, 7} állapotok egyikébe viszi az ágenst, és jobbra elmozdulva az állapota a {6, 8} állapotok egyikére változik. A szívó cselekvés alkalmazása a 6. állapotban, a 8. állapotot – a célt – eredményezi. Ha azonban a szívó cselekvést a 8. állapotban alkalmazzuk, a 6. állapotba térünk vissza (a Murphy-törvény jóvoltából), amely esetben tervünk kudarcba fullad.
8	0.580645	0	A megelőző alfejezet bemutatta az elsőrendű logika használatát a tudás reprezentálására három egyszerű tárgyterületben. Ez az alfejezet a tudásbázis felépítésének általános folyamatát írja le – egy folyamatot, amit tudástervezésnek (knowledge engineering) nevezünk. A tudásmérnök egy olyan személy, aki egy bizonyos tárgyterületet vizsgál, megismeri, hogy mely koncepciók fontosak abban a tárgyterületben, és megalkot egy formális reprezentációt a tárgyterületben található objektumokra és relációkra. A tudástervezés folyamatát az elektronikus áramkör tárgyterületében fogjuk illusztrálni, amely már valószínűleg ismerős, így koncentrálhatunk az ezzel járó reprezentációs problémákra. Az általunk alkalmazott megközelítés speciális célú tudásbázisok kialakításához megfelelő, amelyek tárgyterülete alaposan körülhatárolt, és amelyek lekérdezéseinek az egész sorozatát előre ismerjük. Általános célú tudásbázisokat, amelyeket arra használunk, hogy lekérdezéseket tegyenek lehetővé az emberi tudás teljes területére vonatkozóan, a  fejezetben tárgyaljuk majd meg.
6	0.3	0	Emlékezzünk, hogy a minimax keresés mélységi keresés, egy adott időben tehát elegendő a fában egy egyedi út menti csomópontokkal foglalkozni. Az alfa-béta nyesés megnevezése két paramétertől származik, mely paraméterek az út mentén megjelenő visszaléptetett értékek korlátjaira vonatkoznak:
9	0.068966	1	* Keresőgépbe : existential import, existential fallacy kúlcsszavakat beütve: pl. Dwayne Hudson Mulder, „The Existential Assumptions of Traditional Logic” http://home.att.net/~profmulder/EATL.htm * Existential Import: http://uk.geocities.com/frege@btinternet.com/cantor/Eximport.htm
11	0.076923	0	Ezt pontosabban cselekvési sémának (action schema) nevezzük, ami azt takarja, hogy ez számos különböző cselekvést reprezentál, ami a p, honnan és a hova változók különböző behelyettesítéseivel származtatható. Általánosságban a cselekvési séma három fő részből áll: * A cselekvés megnevezése és paraméterlistája – például a Repül(p, honnan, hova) – a cselekvés azonosítására szolgál. * Az előfeltétel (precondition), függvényektől mentes pozitív literálok konjunkciója, azt mutatva, hogy milyen feltételeknek kell előzetesen teljesülni a cselekvés végrehajtásához. * A következmény (effect), függvényektől mentes literálok konjunkciója, ami leírja, hogy az állapot hogyan változik, amikor a cselekvés végrehajtásra kerül. A cselekmény eredményeképp adódó következményrészben szereplő P pozitív literál igaz értéket kap, míg a ¬P hamis értéket vesz fel. A következményrészben szereplő változóknak a cselekvés előfeltételei között is szerepelni kell.
5	0.181818	1	A módosított lista első eleme, az (SA, Q) él konzisztens, hiszen SA egyetlen RED értékével konzisztens Q egyetlen BLUE értéke. Az élet tehát töröljük a listáról, és rátérünk az (NSW, Q) él vizsgálatára. Szerencsére ez is konzisztens, hiszen NSW egyetlen GREEN értékével konzisztens Q egyetlen BLUE értéke. Ezt az élet is töröljük tehát a listáról.
19	0.681818	0	Az ILP-algoritmus új predikátumokat is létesíthet, hogy a magyarázó jellegű hipotézis kifejezését egyszerűsítse. Az előbbi példát tekintve, teljesen ésszerű egy pótpredikátumot javasolni – amit „Szülője”-nek tudnánk nevezni –, hogy a célpredikátum definícióját egyszerűsítsük. Azok az algoritmusok, amelyek új predikátumokat tudnak létesíteni, az ún. konstruktív indukciós (constructive induction) algoritmusok. Világos, hogy a konstruktív indukció a bevezetőben vázolt kumulatív tanulás egy szükséges komponense. A kumulatív tanulás a gépi tanulás egyik legnehezebb problémája, azonban egyes ILP-technikák kellően hatékony mechanizmusnak bizonyultak a megoldására.
25	0.518519	0	Egy kifinomultabb stratégia látható a  és a  ábrán. A  ábra esetében a robot szándékosan a lyuknak az egyik oldala felé mozog. Az ábrán látható a mozgásparancs és a leállás feltétele: valamely felülettel való érintkezés. A  ábrán olyan a mozgásparancs, hogy a robot a felület mentén mozdul el, míg bele nem talál a lyukba. Ez önbeálló mozgásvezérlés alkalmazását tételezi fel. Mivel a mozgás iránya (a bizonytalansággal együtt is) jobbra mutat, a robot mindig jobbra fog csúszni, valahányszor érintkezésbe kerül a vízszintes felülettel. Amikor eléri a lyukat, lecsúszik annak jobb oldali széle mentén, mivel a függőleges felülethez képest valamennyi lehetséges vektor lefelé mutat. Addig fog mozogni, amíg el nem éri a lyuk alját, mivel ez számára a leállási feltétel. A vezérlés bizonytalansága ellenére a robot valamennyi lehetséges pályája a lyuk aljával történő érintkezésnél ér véget. Mindenképpen ez történik, hacsak a felület szabálytalanságai miatt a robot valahol meg nem akad.
10	0.818182	0	Az első szabály azt mondja, hogy ha számítógépben merevlemez-meghajtónk van, és ez nem SCSI, akkor IDE-nek kell lennie. A másik szabály azt mondja, hogy ha ez nem IDE, akkor SCSI-nek kell lennie. A harmadik azt mondja, hogy az SCSI-meghajtó létezése egy SCSI-vezérlőt tételez fel, végül a negyedik kijelenti, hogy tényleg van egy meghajtó. Ennek a programnak két minimálmodellje van:
6	0.5	0	Habár Fehér tudja, hogy számára melyek a megengedett lépések, azt nem tudja, hogy Fekete milyen számokat fog dobni, így nem tudhatja, hogy melyek lesznek Fekete megengedett lépései. Ez azt jelenti, hogy Fehér nem tud egy 3 × 3-as amőbánál látott teljes játékfához hasonlót elkészíteni. Az ostábla esetén a játékfának a max és min csomópontok mellett tartalmaznia kell véletlen csomópontokat (chance nodes) is. A  ábrán a véletlen csomópontokat körök jelölik. A véletlen csomópontokból kiinduló ágak a lehetséges kockadobásokat jelölik. Minden ág a dobott értékkel és előfordulásának valószínűségével van felcímkézve. Két kockával történő dobásnál harminchatféle eredményt kaphatunk. Ezek a dobások mind azonos valószínűségűek, mivel azonban a 6–5 megegyezik az 5–6-tal, így csak 21 különböző dobás létezik. A hat dupla (1–1-től egészen 6–6-ig) 1/36-od valószínűséggel, míg a többi 15 különböző dobás 1/18-ad valószínűséggel fordul elő.
1	0.172414	1	A szimbolikus információ használatánál központi fogalom a megjelölés és az interpretáció. Egy kifejezés megjelöl egy objektumot, ha a kifejezés birtokában a rendszer képes az objektumot befolyásolni, vagy objektumfüggő módon viselkedik. A rendszer egy kifejezést interpretál, ha a kifejezés egy folyamatot megjelöl, és ha a kifejezés birtokában a rendszer a folyamatot végrehajthatja. Szükséges még kijelenteni, hogy a kifejezések stabilak. Ha egyszer létesültek, fennmaradnak, amíg explicit módon nem lesznek módosítva. Tételezzük azt is, hogy a kifejezések száma lényegében korlátlan.
9	0.931034	1	A szabály azt követeli meg, hogy olyan k konstans szimbólumot használjunk a helyettesítéskor, ami sehol máshol nem szerepel a tudásbázisban. Tulajdonképpen arról van szó, hogy adott egy entitás, ami rendelkezik valamiféle tulajdonságokkal (amiket a premisszák írnak le) és ennek az entitásnak adunk egy nevet. Ezt nyílván megtehetjük, hiszen a kiinduló állítások biztosítják, hogy az entitás létezik. Az, hogy a szabály következtetési szempontból egyenértékű tudásbázist hoz létre annyit tesz, hogy noha az új név amit az entitásnak adtunk nem következik semmiből és bármely más tetszőleges, még nem használt nevet használhattunk volna, az eredményül kapott tudásbázis csak konstansok neveiben fog eltérni. Ez a következtetés érvényességére nem lesz hatással.
5	0.181818	1	Az értékadás nyomán az {NSW=BLUE, WA=RED, NT=BLUE, Q=BLUE, SA=RED, V=GREEN, T=GREEN} behelyettesítés adódik, ami még továbbra is inkonzisztens, így ellenőrizzük, hogy teljesül-e i>max, avagy túlléptük-e már a maximális lépésszámot. Mivel 2<100, ezért még nem, így következhet az algoritmus 2. effektív keresési lépése.
6	0.3	0	A módszert értelmezhetjük másképpen is, mint a Minimax-Érték függvény egy egyszerűsítését. Legyen a C csomópontot a  ábrán látható, ki nem értékelt követő csomópontok értéke x és y, és legyen z a kettő minimuma. A gyökércsomópont értéke ekkor:
20	0.678571	0	Nézzük meg közelebbről azt az állítást, hogy az előrecsatolt háló a bemeneteinek függvényét reprezentálja. Vizsgáljuk a  ábra egyszerű hálózatát, amelynek két bemeneti egysége, két rejtett egysége (hidden unit) és egy kimeneti egysége van. (Az egyszerűség kedvéért ebben a példában elhagytuk az eltolásegységeket.) Adott x = (x[1], x[2]) bemeneti vektor esetén a bemeneti egységek aktivációja (a[1], a[2]) = (x[1], x[2]), és a hálózat a következő számítást végzi:
25	0.962963	0	A Monte Carlo-helymeghatározás ezeket a valószínűségeket használja, hogy generálja a részecskék súlyát, amelyeket azután normalizál és felhasznál az újabb mintavételezésnél. Az egyszerűség kedvéért feltételezzük, hogy az újabb mintavételezésnél, N nagyságától függetlenül, csak egyetlen új mintát generálunk. Ez a minta korrelálhat bármelyik X állapottal. Így a mintavevő folyamat X-re nézve meghatároz egy valószínűség-eloszlást. a. Mi az új mintára eredményül kapott valószínűség-eloszlás X-re nézve? Válaszolja meg a kérdést az N = 1, …, 10 esetekre, valamint N = ∞-re. b. A P és Q két valószínűség-eloszlás közötti különbséget mérhetjük a KL divergenciával, amelynek definíciója:
2	0.421053	1	Y úr, a dél Olaszországban nyaraló Holland turista lebetegszik, de a mobiltelefonján működik a rendszer. Személyre szabott ágense lokalizálja a legközelebbi orvosi rendelőt, kórházat, és felveszi velük a kapcsolatot. Az intézmények ágenseinek, még címre sincs szükségük, hiszen a mobil alapján hozzávetőleg akkor is tudják, hol van Y úr, ha nincs rajta GPS. Kimennek érte a mentők, beviszik az ambulanciára. Az ágens személyes, de nem minden egészségügyi információt juttat el ágenstársához: például közli, hogy Y úrnak már volt szívrohama, de a pszichiátriai kezelését viszont titokban tartja. Eközben a megfelelő hollandiai egészségügyi intézmény CASCOM ágensével szintén felveszi a kapcsolatot. Utóbbi még részletesebb adatokat juttat el a portugál illetékeseknek, de ezúttal személyesebb információk is kellenek. Y úr ágensén keresztül engedélyt ad az adatok használatára. Mivel Franciaországban szintén élt, ottani kórházaktól is kellenek adatok. Az ágensek gyorsan beszerzik és továbbítják a szükséges információkat, miközben Y úr biztosítójának ágensével is felveszik a kapcsolatot.
6	0.1	1	Extenzív játékokban a játékosok tiszta stratégiája minden egyes információs halmazhoz egy-egy elemi cselekvést rendel. Egy-egy játékos tiszta stratégiája tehát ebben az esetben az extenzív alakban szereplő minden egyes információs halmazához rendel 1-1 elemi cselekvést. Ezt a leképezést nevezik tiszta stratégiának extenzív játékok esetén. A kevert stratégiák pedig nyilván nem elemi cselekvéseket, hanem az érintett információs halmazokban lehetséges elemi cselekvések feletti eloszlásokat rendelik rendre az információs halmazokhoz.
2	0.526316	1	A minden szükséges anyag letölthető a verseny honlapjáról. Először a Jason keretrendszert kell letölteni majd ezt követően az AgentGame környezetet kell működőképes állapotba hozni (lásd a Telepítési útmutatót). Az AgentGame környezet tartalmaz mindent, ami a megoldás alapjául szolgálhat: található benne két mintapélda, és a minta ágensek a telepítést követően azonnal kipróbálhatóak.
10	0.969697	0	Ebben a feladatban az eseménykategóriák és azon időintervallumok közötti relációkkal foglalkozunk, amelyekben az események megtörténnek. a. Definiálja a T(c, i) predikátumot a Közben és a ∈ segítségével. b. Adja meg a precíz magyarázatát annak, hogy a konjunktív eseménykategória leírásánál miért nincs szükség a kétféle jelölésmódra. c. Adja meg a T(Egyik(p, q), i) és a T(VagyVagy(p, q), i) formális definícióját. d. Magyarázza meg, miért értelmes a kétfajta diszjunkcióval analóg módon az események kétfajta negálásával rendelkezni. Nem-nek és Sohasem-nek nevezze el őket, és adja meg a formális definíciójukat.
9	0.655172	0	Mint az ítélatlogika esetében, az elsőrendű rezolúció is megköveteli, hogy a mondatok konjunktív normál formában (conjunctive normal form) (CNF) legyenek, tehát minden mondat klózok konjunkciója, ahol minden egyes klózt literálok diszjunkciója alkot.^[92] A literálok tartalmazhatnak változókat, amelyeket univerzális kvantorral ellátottnak feltételezünk. Például a
2	0.210526	1	Mindeddig a racionalitásról, mint kívánatos, sikeres stratégiáról volt szó. A pszichológia és a közgazdaságtan már rég felfedezte, hogy az ember (ennek ellenére) nem (mindig) racionális. Hashimoto kártyás kísérleteiben bemutatta, hogy az ember matematikai szempontból irracionálisan játssza a kártyajátékot, így mindig a (racionális) gép győz [10]. Az emberi irracionalitás így nem tűnhet túlságosan jó túlélési stratégiának, és emiatt nehezen érthető, hogy az evolúció során mégis miért nem gépszerűen racionálisakká váltunk. A választ abban találjuk, amit a pszichológia explorációs motivációnak nevez. Az ember időről időre irracionálisan viselkedik, hogy véletlenszerű, szub-optimális állapotokat is megtapasztaljon (melyeket a racionális viselkedés talán soha nem is érintene). Valójában célja is van ezzel: a tapasztalatok összegyűjtésével törvényszerűségekre bukkanhat rá, melyek nagymértékben megnövelhetik a túlélési esélyeit, ebben bízik. Ha a vizsgált kártyajátékban lett volna törvényszerűség, azt az emberi ágensek hamar felfedezték volna, és legyőzték volna a gépet... Vonjuk le a következtetést nagyobb skálán is: ha az életet játéknak/feladatnak tekintjük, melyben sikeresek akarunk lenni, akkor vajon miért is állunk irracionálisan az élethez? Hashimoto válasza egyszerű: „Mi emberek abban bízunk, hogy a világnak létezik egy rejtett törvényszerűsége, melyre ha rábukkanunk, túlélhetjük a világot [10]”.
20	0.25	0	A bonyolultság büntetése (akár MAP, akár Bayes-megközelítésben) fontos kapcsolatot hoz be az optimális struktúra és a feltételes valószínűségek hálóbeli reprezentációs módja között. Táblázatosan ábrázolt eloszlás esetén a bonyolultság büntetése a szülőcsomópontok számával exponenciálisan nő, míg, mondjuk, zajos-vagy eloszlások esetén csak lineárisan. Ez azt jelenti, hogy a zajos-vagy (illetve más tömören paraméterezett) modellek tanulása több szülőcsomópontot eredményez, mint a táblázatos eloszlás tanulása.
1	0.068966	1	1969-ben jelent meg a számítástechnika német úttörőjének, Konrad Zuse-nak „Calculating Space” című műve, amelyben azt ajánlotta, hogy az univerzum fizikai törvényeire tekintsünk úgy, mint a természet által diszkretizált, óriási sejtautomata számítási eredményeinek kimenetelére. Ez volt az első könyv a digitális fizika témakörében.
9	0.034483	0	Ez és a következő alfejezet bemutatja azokat a gondolatokat, amelyeken a modern logikai következtetési rendszerek alapulnak. Néhány egyszerű következtetési szabállyal kezdjük, amelyeket kvantorral ellátott mondatokhoz alkalmazhatunk, hogy a segítségükkel kvantorok nélküli mondatokhoz juthassunk. Ezek a szabályok természetes módon elvezetnek minket ahhoz a gondolathoz, hogy az elsőrendű következtetés megvalósítható azáltal, hogy a tudásbázist ítéletlogikává alakítjuk át, és a már általunk ismert ítéletlogikai következtetést használjuk. A következő alfejezet rámutat egy kézenfekvő egyszerűsítésre, amellyel olyan következtetési módszerekhez juthatunk, amelyek közvetlenül képesek az elsőrendű mondatok felhasználására.
9	0.448276	1	Több díjat, ösztöndíjat és kitüntetést is megkapott élete során, például a Prolog II Apple II számítógépekre való implementációjáért 1982-ben, vagy 1991-ben az Amerikai Mesterséges Intelligencia Egyesület kutatói ösztöndíját.
19	0.954545	1	Önellenőrzés, megelőző jellegű, amikor a laboratórium saját elhatározásából naponta, vagy naponta többször is ellenőrzi az analitikai munkát, azaz a mérések reprodukálhatóságát (pontosságát), valódiságát (torzításmentességét), azaz a mérési rendszernek a kalibráció időpontjában fennálló állapotának ellenőrzése és fenntartása.
3	0.25	1	A fenti típusú CSP problémák megoldására találhatunk módszereket az [5] cikkben, amely azt is bemutatja, hogyan lehet hatékonyan meghatározni a nem egyértelmű változók értékének valószínűségi eloszlását.
11	0.961538	0	Bizonyítsa be az alábbi tervkészítő gráfokra vonatkozó állításokat: * Az a literál, ami nem jelenik meg a gráf utolsó szintjén, nem érhető el. * Egy soros gráfban szereplő literál szintköltsége nem lehet nagyobb, mint az őt elérő optimális terv költsége.
9	0.103448	0	Ha egyszer vannak szabályaink arra, hogy kvantorral ellátott mondatokból hogyan következtethetünk kvantor nélküli mondatokra, akkor vissza tudjuk vezetni az elsőrendű következtetést az ítéletlogikai következtetésre. Ebben az alfejezetben áttekintjük ennek a módszernek a legfontosabb elemeit; a részletekről a  alfejezetben fogunk szólni.
2	0.894737	1	- Aladár egy reflexszerű ágens. Ha valamilyen inger éri, azonnal és gondolkodás nélkül cselekszik. Ha megéhezik, megeszik egy szendvicset. Ha fázik, felvesz egy pulóvert. Ha nincs nála szendvics és pulóver, kétségbe esik...
24	0.5	0	Embereknél a b bázisvonal (baseline) kb. 6 cm. Tegyük fel, hogy Z kb. 100 cm. A legkisebb detektálható δθ (ami a képpont nagyságával függ össze) kb. 5 szögmásodperc, avagy 2,42 × 10^–5 radián, amiből a δZ 0,4 mm-re adódik. Z = 30 cm-re δZ = 0,036 mm-es lenyűgöző értéket kapunk. Ez azt jelenti, hogy 30 cm-es távolságban az emberek akár a 0,036 mm-es képmélység különbség megkülönböztetésére is képesek. Ez teszi lehetővé, hogy be tudjuk fűzni a cérnát egy tűbe, és hasonló műveleteket tudunk elvégezni.
7	0.4	0	A logikai rendszereknek ez a tulajdonsága valójában egy sokkal alapvetőbb jellegzetességükből, a monotonitásból (monotonicity) következik. A monotonitás azt mondja ki, hogy a vonzatmondatok halmaza csak bővülhet, ha a tudásbázishoz információt adunk hozzá.^[69]^
2	0.368421	1	A biológiai jellegű sugárhatást módosító tényező között ismert volt különböző sejtélettani jellegzetesség: mint például * az oszló és nem oszló sejt közötti különbség, * a sejt oszlási cikluson belüli helye, * a sejtcikluson belüli fázisok szerepe.
22	0.296296	0	A  és  ábrák mutatják az „I feel it” mondat (amely a „Do you feel a breeze?” kérdésre adott válasz) diagramját és elemzési lépéseit. Tizenhárom él (a–m jelekkel ellátva) szerepel a diagramon, melyek közül öt teljes (a diagram verticei csomópontjai felett) és nyolc befejezetlen (alattuk). Vegyük észre a Jósló, Szkenner és Kiterjesztő akciók ciklusát. Például a Jósló felhasználja azt a tényt, hogy az „a” él egy S-t vár ahhoz, hogy megelőlegezze egy NP („b” él) és egy Pronoun („c” él) jóslatát. Ezek után a Szkenner felismeri, hogy van egy Pronoun a megfelelő helyen („d” él), és a Kiterjesztő kombinálja a „b” nem teljes élt a „d” teljes éllel, így előállítva egy új élt, „e”-t.  ábra - Az „[0] I [1] feel [2] it [3]” mondat diagramelemzése. Az m:S jelölés azt jelenti, hogy az m élnek egy S áll a jobb oldalán, míg az f:VP/Verb azt, hogy az f élnek VP van a bal oldalán, de egy Verb-et vár. Öt teljes él van a csomópontok felett, és nyolc hiányos alattuk. Az „0 I 1 feel 2 it 3” mondat diagramelemzése. Az m:S jelölés azt jelenti, hogy az m élnek egy S áll a jobb oldalán, míg az f:VP/Verb azt, hogy az f élnek VP van a bal oldalán, de egy Verb-et vár. Öt teljes él van a csomópontok felett, és nyolc hiányos alattuk.
1	0.310345	1	Ugyanazon térfogat folyamatos, vagy meghatározott időablakon belül többször megismételt letapogatással szöveti működéseket lehet leképezni. Az MR és a nukleáris medicina (ezen belül molekuláris képalkotás is) a mozgáson túl sok egyebet- vizelet kiválasztást, véráramlást, kontrasztanyag halmozást, izotópdúsulást, membrán permeabilitást, neuron aktivitást stb.- képes ábrázolni. Ezek időbeli egymásutánba rendezésével dinamikus információkhoz lehet jutni. A szervezetben keletkezett, vagy oda bejuttatott anyagok sorsa, eloszlása is nyomon követhető a metabolikus képalkotás segítségével. A könnyebb értelmezés végett az egyes szervek működésére vonatkozó számszerű adatokat idő-aktivitás görbék mellett célszerű statisztikai megoszlási térkép formájában a morfológiai képre vetíteni. Mindezekkel egyre jobban megvilágíthatjuk a szervezet egészséges működésének folyamatát éppúgy, mint a betegségek hátterében zajló működési zavarokat. A funkcionális képalkotás módot ad a gyógyszerhatások nyomon követésére és a kezelések adott célterületre összpontosítására vagy személyre szabására is.
15	0.333333	0	Amellett hogy a mátrixos jelölés az RMM-ek esetében a szűrés és a simítás algoritmusaira egy elegáns leírásmódot kínál, ez javított algoritmusokra is jelez lehetőségeket. Az első az előre-hátra algoritmus egy egyszerű változata, ami simítás elvégzését teszi lehetővé állandó tárigény mellett, a sorozat hosszától függetlenül. Az ötlet az, hogy egy konkrét k időpillanatban a simítás mind az f[1:k] előre, mind a b[k+1:t]hátra üzenetek egyidejű jelenlétét igényli a   egyenlet szerint. Az előre-hátra algoritmus ezt úgy biztosítja, hogy az előrefelé fázisban tárolja az f-eket, hogy a hátrafelé fázisban elérhetők legyenek. Egy másik módszer szerint ez úgy érhető el, hogy egyetlen menetben mind f-et, mind b-t ugyanabban az irányban terjesztjük. Például az f „előre” üzenet terjeszthető hátrafelé, ha átrendezzük a   egyenletet, hogy a másik irányban működjön:
14	0.869565	1	A tudomány egyik klasszikus területe a logika gazdag eszköztárat szolgáltat az emberi tudás kezelésére. A logika, mint a helyes következtetés tudománya a filozófiában a matematikában és a nyelvészetben is központi szerepet tölt be. Ezek alapvető eszköztárához tartozik, mivel igaz vagy hamis állításokból kiindulva formális módszerekkel igazolható helyes következtetések levonását teszi lehetővé. A klasszikus „Arisztotetlészi” logika igaz-hamis állításai egymással kizáró viszonyban állnak, tehát egy állítás nem lehet egyidejűleg igaz is és hamis is. E kétértékű (bináris) logikára épül a Boole algebra, ami a mai digitális elvű számítógépek működésének alapja. A logika fejlődése során megjelent kettőnél több igazság értékű logikák közül technikai szempontból az un. fuzzy logika rendkívül ígéretes, mivel az ember szavakkal (nyelvi változókkal) jellemezhető hétköznapi tudásának közvetlen technikai adaptálását teszi lehetővé. Mivel a fuzzy logikára épülő rendszerek jól használható modellt szolgáltatnak a teljesen igaz és teljesen hamis „kemény” állítások közötti folytonos „lágy” átmenetek kezelésére, az un. lágy számítási modellek fontos területét képviselik. Az előadás első része a fuzzy halmazok és nyelvi változók valamint a változók kezelésére szolgáló fuzzy szabályok értelmezését mutatja be, majd ismerteti a fuzzy logikát alkalmazó szabályalapú rendszer felépítését, működését és jellemzőit.
10	0.090909	1	Korlátozott számú, adott témakörre jellemző szemantikai annotációt kaphatnak a szavak szintjén a fogalmak, a mondatok szintjén a mondat témája, a szakaszok szintjén pedig a szakasz témája. Pl. az "Agyhártyagyulladás" szócikk fordításának második mondata:
6	0.95	0	Adjon egy hasonló kifejezést n[2]-re, és n[1]-re, n[j]-t felhasználva. b. Legyen l[i] az n[i] csomóponttól balra levő, ismert minimax értékű, i mélységben található csomópontok minimális (maximális) csomópontértéke. Hasonlóan, legyen r[i] az n[i] csomóponttól jobbra levő, még ki nem fejtett, i mélységben található csomópontok minimális (maximális) csomópontértéke. Az n[1]-re előbb meghatározott kifejezést írja át l[i] és r[i] értékekkel kifejezve. c. Most fogalmazza át a kifejezést, hogy megmutassa, ahhoz, hogy n[j] befolyásolja n[1]-et, n[j]-nek meg kell haladnia bizonyos, az l[i] értékekből meghatározott korlátot.
10	0.454545	0	Egy másik ilyen aspektus, amely a szerencsétlenségektől eltekintve, négy- vagy nyolcévenként változik, az ország elnöke. Felvehető, hogy az Elnök(USA) egy olyan logikai term, amely különböző időkben különböző objektumokat jelent. Ez sajnos nem lehetséges, mert egy term egy adott modellstruktúrában pontosan egy objektumot jelöl meg. (Az Elnök(USA, t) jelölhetne különböző objektumokat t értékének megfelelően, az ontológiánk azonban az időpontokat és a folyó eseményeket szétválasztja.) Egyetlen lehetőség, hogy az Elnök(USA) egy olyan egyedi objektumot jelöl, amely különböző időkben különböző emberekből áll. Az Elnök(USA), mint objektum, George Washington volt 1789-tól 1796-ig, John Adams volt 1796-tól 1800-ig stb. (lásd  ábra). Azt, hogy George Washington 1790-ben elnök volt, a következőképpen írhatjuk le:
1	0.310345	0	Harmadik kérdésünkkel, vagyis, hogy hogyan kell racionálisan dönteni, ha a haszon nem azonnali, hanem több egymást követő cselekvés sorozatának az eredménye, a közgazdászok többsége nem foglalkozott. Ezt a feladatot az operációkutatás (operational research) területén vizsgálták, mely Angliában látott napvilágot, amikor a II. világháborúban a radartelepítést igyekezték optimalizálni, és amely később a komplex menedzsment döntéshozatal területén talált polgári alkalmazásokra. Richard Bellman (Bellman, 1957) a Markov döntési folyamatoknak (Markov decision processes) nevezett szekvenciális döntési problémákat formalizálta. Mi ezeket a 17. és  fejezetben tanulmányozzuk.
14	0.086957	1	Amint a 1. Lista mutatja az adott absztrakciós szinthez, avagy változó halmazhoz tartozó direkt oksági kapcsolatok tanulása mind a rejtett változók, mind az asszociációs kapcsolatok tipikusan tranzitív jellege, és a többváltozós kapcsolatok miatt is kihívásokkal teljes. Annak megértéséhez, hogy milyen feltevések mellett is tudunk több változó együttes elemzése során oksági relációkat tanulni, szükségünk van a következő fogalmakra.
9	0.586207	0	Egy változó lekötése egy termhez a korlátozás egyik speciális fajtájának tekinthető, nevezetesen egy egyenlőségkényszernek. A korlátozott logikai programozás (constraint logic programming, CLP) lehetővé teszi, hogy a változók korlátozva legyenek, ahelyett hogy lekötöttek lennének. Egy korlátozott logikai program megoldása a korlátoknak a tudásbázisból származtatható legspecifikusabb halmaza a lekérdezés változóin. Például a háromszög (3, 4, Z) lekérdezésre a megoldás a 7 >= Z >= 1 kényszer. A standard logikai programok csak a CLP speciális esetei, amelyekben a megoldás kényszereinek egyenlőségi kényszereknek – azaz lekötéseknek – kell lenniük.
9	0.551724	0	Az előrefelé láncolás a gráfkeresési problémáknál a dinamikus programozás (dynamic programming) egyik példája, amelyben a részproblémákra vonatkozó megoldások előállítása inkrementálisan történik a kisebb részproblémáktól indulva, végig tárolva a részmegoldásokat, hogy elkerüljük az újraszámolást. Ugyanezt a hatást érhetjük el egy hátrafelé láncoló rendszerben a memók gyűjtésének (memoization) használatával, ami azt jelenti, hogy a részcélok megoldásait tároljuk, amint megtaláltuk őket, hogy azután újra felhasználhassuk ezeket a megoldásokat, amikor a részcél visszatér, megtakarítva így az előző számítás megismétlését. Ezt a megközelítést használják a táblázatos logikai programozási (tabled logic programming) rendszerek, amelyeknek hatékony tárolási és visszakeresési mechanizmusuk van a memók gyűjtésének megvalósítására. A táblázatos logikai programozás egyesíti a hátrafelé láncolás célirányosságát az előrefelé láncolás dinamikus programozási hatékonyságával. Ez az eljárás teljes a Datalog programokra is, ami azt eredményezi, hogy a programozónak kevesebbet kell aggódnia a végtelen hurkok problémája miatt.  ábra - (a) Az A-ból a C-be vezető útvonal bizonyítása. (b) Végtelen mélységű bizonyítási fa, amely akkor generálódik, ha a klózok „rossz” sorrendben vannak. (a) Az A-ból a C-be vezető útvonal bizonyítása. (b) Végtelen mélységű bizonyítási fa, amely akkor generálódik, ha a klózok „rossz” sorrendben vannak.
5	0.181818	1	Ha tehát már most lekötnénk az SA változó értékét, akkor azzal a lehető legtöbb helyen csökkentenénk a keresés elágazási tényezőjét (ami gyorsíthatná a keresést). Tegyük fel tehát, hogy az előző szakaszban bemutatottaknak megfelelően az algoritmus ezek az SA változót választja, és ezen belül most is először a RED értéket adja számára (SA=RED).
7	0.84	0	Összefoglalva, úgy tűnik, hogy létezik kompromisszum a számítási hatékonyság, a tömörség, a teljesség és a könnyű létrehozás között. Ha az érzetek és a cselekvések közötti kapcsolat egyszerű – mint a Ragyogás vagy a Megragad közötti kapcsolat esetében – az áramkör optimálisnak tűnik. Ennél bonyolultabb kapcsolatok esetében a deklaratív megközelítés jobb lehet. Egy olyan területen, mint a sakk például, a deklaratív szabályok tömörek és könnyen kódolhatók (legalábbis az elsőrendű logikában), de a tábla állapotaiból a lépéseket közvetlenül számító hálózat elképzelhetetlenül hatalmas lenne.
24	0.833333	1	A DoG és az LoG sok más területen is használt szűrők, de sarokpontok és főleg lokális intenzitáscsúcsok, azaz foltok megtalálására alkalmasak. Az LoG egy Gauss függvény második deriváltja, a DoG pedig két Gauss függvény különbsége, mely jó közelítése az LoG-nak. A függvények alakja mexikói-kalap szerű, tehát egy origó körüli pozitív belső részt egy negatív perem vesz körül, majd a függvény nullához tart a végtelenben. Polaritásuktól függően pozitív vagy negatív, adott méretű foltokat detektálnak. Jellemzően több skálán használják őket, hogy szélesebb mérettartományban találják meg az alakzatokat.
4	0.625	0	A darwini elméletet annak ismerete nélkül dolgozták ki, hogy a szervezetek tulajdonságai hogyan öröklődnek és módosulnak. E folyamatokat irányító valószínűségi törvényeket első ízben Gregor Mendel szerzetes azonosította (Mendel, 1866), aki borsóval kísérletezett, saját szavaival mesterséges megtermékenyítést alkalmazva. Sokkal később Watson és Crick feltárták a DNS-molekula szerkezetét és ábécéjét – AGTC (adenin, guanin, timin, citozin) – (Watson és Crick, 1953). A standard modellben a betűszekvenciában változás pontmutáció és „keresztezés” révén áll be (ahol az utód DNS-e a szülői DNS-ek hosszú részleteinek kombinálásával jön létre).
7	0.56	0	 ábra - A DPLL algoritmus ítéletkalkulus mondatok kielégíthetőségének ellenőrzése. A Tiszta-Szimbólum-Keresés és az Egység-Klóz-Keresés eljárásokat a szövegben elmagyaráztuk; mindkettő egy szimbólummal vagy nullával tér vissza, és a szimbólumhoz hozzárendelendő igazságértékkel. Mint az IT-Vonzat? eljárás, ez is részleges modelleken dolgozik. A DPLL algoritmus ítéletkalkulus mondatok kielégíthetőségének ellenőrzése. A Tiszta-Szimbólum-Keresés és az Egység-Klóz-Keresés eljárásokat a szövegben elmagyaráztuk; mindkettő egy szimbólummal vagy nullával tér vissza, és a szimbólumhoz hozzárendelendő igazságértékkel. Mint az IT-Vonzat? eljárás, ez is részleges modelleken dolgozik.
7	0.24	0	Az „és”, „vagy” és „nem” igazságtáblái eltérnek attól, amit a természetes nyelvi jelentésük alapján gondolnánk. A lehetséges félreértés legszembetűnőbb pontja, hogy a P ∨ Q kifejezés igaz akkor is, ha mind P, mind Q is igaz. Létezik másik összekötőjel is, a „kizáró vagy”-nak nevezett jel (röviden xor), amely hamisat ad, ha mindkét diszjunkt igaz.^[68] Nincs általános egyetértés az „exkluzív vagy” szimbólumát illetően; két jelölés is ismert:   ábra - Az öt logikai összekötőjel igazságtáblája. Amikor a táblát használjuk például a P ∨ Q értékének számítására, ha P igaz és Q hamis, akkor először megkeressük azt a sort, amelyben P igaz és Q hamis (a harmadik sor). Ezután a sorban megkeressük a P ∨ Q alatti oszlopot, hogy megtaláljuk az eredményt: igaz. Tekinthetjük a táblázat úgy is, hogy minden sor egy modell, és az egyes oszlopbeli elemek az adott sorban azt mondják meg, hogy a megfelelő mondat igaz-e az adott modellben. Az öt logikai összekötőjel igazságtáblája. Amikor a táblát használjuk például a P ∨ Q értékének számítására, ha P igaz és Q hamis, akkor először megkeressük azt a sort, amelyben P igaz és Q hamis (a harmadik sor). Ezután a sorban megkeressük a P ∨ Q alatti oszlopot, hogy megtaláljuk az eredményt: igaz. Tekinthetjük a táblázat úgy is, hogy minden sor egy modell, és az egyes oszlopbeli elemek az adott sorban azt mondják meg, hogy a megfelelő mondat igaz-e az adott modellben.
5	0.636364	0	Két dolog érdemes említésre. Egyrészt a 2. lépés után a kényszerkielégítési probléma irány szerint élkonzisztens, tehát a 3. lépés hozzárendeléseiben nincsen szükség visszalépésre (lásd a k-konzisztencia tárgyalását a 5.2. szakasz - A kényszerek terjesztése részben). Másrészt, miután a 2. lépésben fordított sorrendben alkalmaztuk az élkonzisztencia-ellenőrzéseket, elértük az algoritmussal, hogy a törölt értékek ne veszélyeztessék a már feldolgozott élek konzisztenciáját. A teljes algoritmus O(nd^2) időben fut.
12	0.619048	0	Eddig egyágenses környezetekkel (single-agent enviroments) foglalkoztunk, amelyben az ágensünk egyedül van. Amikor más ágensek is jelen vannak a környezetben, az ágensünk egyszerűen hozzáveheti őket a környezetről alkotott modelljéhez, az alapvető algoritmusainak módosítása nélkül. Sok esetben azonban ez gyenge teljesítményhez vezetne, mert többi ágenssel való foglalkozás nem azonos a környezet kezelésével. Nevezetesen, a természet (feltételezhetően) közömbös az ágens szándékait illetően, míg más ágensek nem.^[132] Ez az alfejezet ezen kérdések kezelésére a multiágens tervkészítést mutatja be.
8	0.709677	0	Ahhoz, hogy következtetéseket végezhessünk a funkcionalitásról és az összeköttetésekről, nem szükséges magukról a vezetékekről vagy ezek útvonalairól, két vezeték találkozásánál levő kereszteződéseiről tudást megfogalmazni. Csak a be- és kimenetek közötti összeköttetések számítanak – tehát csak azt kell kimondani, hogy egy kimenet össze van-e kapcsolva egy másik bemenettel, anélkül hogy meg kellene említeni a vezetékeket, amik valójában összekötik őket. A tárgyterületnek sok más tényezője van, ami a mi vizsgálatunkban nem releváns. Ilyen például a különböző elemek mérete, formája, színe vagy ára.  ábra - Egy C[1]-es digitális áramkör, amelynek az a célja, hogy egy egybites teljes összeadást végezzen. Az első két bemenet az a két bit, amit össze kell adni, míg a harmadik bemenet az átvitel. Az első kimenet az összeg, míg a második kimenet az átvitel a következő összeadó felé. Az áramkör két XOR, két AND és egy OR kaput tartalmaz. Egy C1-es digitális áramkör, amelynek az a célja, hogy egy egybites teljes összeadást végezzen. Az első két bemenet az a két bit, amit össze kell adni, míg a harmadik bemenet az átvitel. Az első kimenet az összeg, míg a második kimenet az átvitel a következő összeadó felé. Az áramkör két XOR, két AND és egy OR kaput tartalmaz.
4	0.166667	0	A rekurzív legjobbat-először keresés, az RLEK (recursive best-first search, RBFS) egy egyszerű rekurzív algoritmus, amely megkísérli a rendes legjobbat-először algoritmus működését mímelni, de csak lineáris tárat használva. Az algoritmust a  ábra mutatja. A struktúrája hasonlít a rekurzív mélységi keresésre, azonban ahelyett, hogy az algoritmus egy utat a végtelenségig folytatna az aktuális pálya mentén, figyeli az aktuális csomóponthoz az elődeitől vezető eddigi legjobb alternatív út f-értékét. Ha az aktuális csomópont ezt az értéket túlhaladja, a rekurzió az alternatív útra lép vissza. Ahogy a rekurzió visszalép, az RLEK minden csomópont f-értékét a pálya mentén a gyerekeinek legjobb f-értékével helyettesíti. Ily módon az RLEK emlékszik a legjobb levélértékre az elfelejtett alfában, és eldöntheti, vajon érdemes-e ezt a fát valamikor később újra kifejteni. A  ábra azt mutatja, hogy hogyan éri el Bukarestet az RLEK.
18	0.421053	0	Nyilvánvalóan akkor jó egy jóslás, ha igaznak bizonyul, így a hipotézis minőségét megbecsülhetjük az ismertté vált tényleges osztálybasorolások alapján. Ezt egy teszthalmaznak (test set) nevezett mintahalmaz segítségével végezhetjük el. Ha az összes rendelkezésünkre álló példát tanításra használjuk, akkor továbbiakat kell gyűjtenünk a teszteléshez. Ezért gyakran kényelmesebb a következő módszert alkalmazni: 1. Gyűjtsünk egy nagy példahalmazt. 2. Osszuk két diszjunkt részre: a tanító halmazra (training set) és a teszthalmazra (test set). 3. Alkalmazzuk a tanító algoritmust a tanító halmazon, és így generáljunk egy h hipotézist. 4. Mérjük meg a teszthalmazon, hogy a h hipotézis a halmaz hány százalékára ad helyes osztálybasorolást. 5. Ismételjük meg az 1–4 lépéseket különböző tanító halmaz méretekre, és mindegyik mérethez különböző véletlenszerűen kiválasztott tanító halmazokra.
7	0.44	0	Alkalmazzuk a rezolúciós eljárást egy nagyon egyszerű következtetésre a wumpus világban. Amikor az ágens az [1,1]-ben van, akkor nincs szellő, tehát nincs csapda a szomszédos négyzetekben. Az ennek megfelelő tudásbázis:
26	0.857143	1	Az esettanulmány témájának középpontjában a magyar társadalom egészségtudatosságának vizsgálata áll. Az egyének önértékelését, életmódját állítja szembe az orvosi véleményekkel, tapasztalatokkal. A vizsgálat tárgya az egészséggel, egészséges életmóddal kapcsolatos tényező, úgymint egészséges táplálkozás, rendszeres testmozgás, dohányzási szokás, alkoholfogyasztás, szellemi frissesség megőrzése, stressz, egészségügyi szűréseken való rendszeres részvétel és folyamatos proaktív tájékozódás az egészségügyi témákban. Egy piackutatással foglalkozó cég a vizsgált témában 419 orvost (háziorvosokat és szakorvosokat vegyesen) online kitöltős kérdőíves módszerrel kérdezett meg, míg a lakossági kutatás módszertana telefonos megkérdezés volt. Ez utóbbinál az 1000 fős minta összetételét előre meghatározta oly módon, hogy életkor, nem és regionális eloszlás tekintetében a felnőtt, 18 év feletti lakosságra nézve országosan reprezentatív mintát képviseljen.
7	0.92	1	7.11 Az ismert számítógépes játék, az Aknakereső igen hasonló a wumpus világhoz. Az aknakereső világ egy N négyzetet tartalmazó négyzetes rács, amelyek közül M elszórtan elhelyezkedő négyzet láthatatlan aknát takar. Minden négyzetet megpróbálhat az ágens, de azonnali halállal lakol, ha ott egy aknát talál. Az Aknakereső játék minden kipróbált négyzetben felfedi, hogy hány közvetlenül vagy átlósan szomszédos négyzetben van akna, ezzel mutatva az aknák jelenlétét. A cél az, hogy minden aknát nem tartalmazó négyzetet megpróbáljunk.
11	0.576923	0	Az összes javasolt heurisztika a teljesen rendezett és a részben rendezett tervkészítésre pontatlanságokkal terhelt. Ez a fejezet bemutatja, hogy egy speciális adatszerkezet a tervkészítési gráf (planning graph) felhasználható, hogy jobb heurisztikus becsléseket nyerjünk. Ezek a heurisztikák bármely eddig tárgyalt keresési technikával használhatók. Egy másik lehetőség, hogy a megoldást közvetlenül a tervkészítési gráfból nyerjük ki egy erre kiélezett algoritmussal, mint amilyen például a Graphplan.
5	0.818182	1	A gondolatom az, hogy a legjobban korlátozó változóhoz hasonlóan, ha levágjuk a gráfból azt a csúcsot, amelyikből a legtöbb él kiindul, akkor jutunk leginkább közelebb a fa szerkezethez. Ha ez igaz, akkor ezt legfeljebb k-szor ismételve el kell jussunk egy fához, így a levágott csúcsok halmaza egy ciklikusság-vágóhalmaz.
26	0.357143	0	Ezzel szemben a biológiai naturalizmus (biological naturalism) szerint a mentális állapotok magas szintű emergens tulajdonságok, amelyeket a neuronok alacsony szintű neurológiai folyamatai okoznak, azaz a neuronok (meghatározatlan) tulajdonságai a lényegesek. A mentális állapotokat így tehát nem lehet duplikálni valamilyen programmal, amelynek azonos a bemenet–kimenet funkcionális struktúrája, hanem az is szükséges, hogy a program olyan architektúrán fusson, amelynek kauzális erői megegyeznek a neuronokéval. Az elmélet nem mond semmit arról, hogy a neuronok miért rendelkeznek ilyen kauzális erővel, és arról sem, hogy más fizikai megtestesülések rendelkezhetnek-e ezekkel az erőkkel.
27	0.4	1	Az ágens tervezőjének tehát most már csak az a feladata, hogy valamilyen elvnek, elvárásnak, követelménynek megfelelően úgy tervezze meg ágensét, hogy az ágensnek megfelelő ágens-függvény minél hasznosabb legyen (adott jósági mérce mellett). A tökéletesen racionális ágens-függvény például maximalizálja az ágens hasznát egy adott környezetben. Viszont adott Architektúra mellett könnyen elképzelhető, hogy f[opt] nem megvalósítható, avagy az ágens-függvény nem implementálható (például az intelligens porszívó túl kevés memóriával rendelkezik ahhoz, hogy érdemi, valóban intelligens programokat lehessen futtatni rajta, amelyek a létező legjobb működést eredményezik). Lényegében ezért vezették be a korlátozott racionalitás [3] mintájára a korlátozott optimalitás [4] fogalmát, amely már reálisabb elvárásokat támaszt az ágenssel és tervezőjével szemben.
24	0.791667	0	Ha adott három, nem egy egyenesre eső m[1], m[2] és m[3] modellpont, és ezek skálázott ortogonális projekciója, p[1], p[2] és p[3] a képsíkon, akkor létezik pontosan két transzformáció a háromdimenziós modell koordinátakeretből a kétdimenziós képkoordináta-keretbe.
7	0.64	0	Amikor konjunktív normál formában levő kielégíthetőségi problémákat tekintünk, alulhatározott probléma az, amelyben viszonylag kevés a változókat korlátozó klóz szerepel. Például itt van egy véletlenszerűen létrehozott^[71] 3-CNF mondat öt szimbólummal és öt klózzal:
16	0.043478	0	Annak megítéléséhez, hogy valaki elérje a jót, és elkerülje a gonoszt, nemcsak a jót és a gonoszt kell önmagában megfontolni, hanem annak valószínűségét is, hogy ezek megtörténnek-e vagy sem; és azt az arányt kell megnézni, amely ezek együtteséhez tartozik.
6	0.95	0	Ez a feladat a játékok alapvető elveit a 3 × 3-as amőbán (körök és ikszek) keresztül gyakoroltatja be. X[n] azon sorok, oszlopok vagy átlók számát jelöli, ahol pontosan n db X, míg egyetlen O sem található. Hasonlóan, O[n ]azon sorok, oszlopok vagy átlók számát jelöli, ahol pontosan n db O, míg egyetlen X sem található. A hasznosságfüggvény +1-et rendel minden olyan álláshoz, ahol X[3 ]= 1, és –1-et rendel minden olyan álláshoz, ahol O[3 ]= 1. Az összes többi végállás hasznossága 0. A nem végállapotok esetén az alábbi módon definiált lineáris kiértékelő függvényt fogjuk használni:
14	0.869565	1	A bemeneti paraméterek természetes univerzumukon skálázottak, a köztes szinteken és a rendszer csúcsán a kockázati szinteket általában 0 és 1 közé skálázzuk, ahol a 0 a kis kockázatot, az 1 a magas kockázati szintet jelöli.
3	0.916667	1	Már a hittérítő-kannibál feladatnál   láthattuk, hogy az iteratívan mélyülő keresés lényegesen lassabb lehet, mint az általános mélységi keresés. Könnyen mutatható olyan keresési tér, amelyben a mélységi keresés d csúcs kifejtése után talál megoldást, míg az iteratívan mélyülő keresés csak d iteráció után. Feltételezve hogy az elágazási tényező b, az iteratívan mélyülő keresésnek legrosszabb esetben 1+b+b^2+b^3+…+b^d-1 = O(b^d-1) csúcs kifejtésére lehet szüksége, míg a mélységi keresésnek ugyanebben az esetben lehet, hogy csak d csúcsot kell kifejtenie.
27	0.4	1	Minden egyes Architektúrá-val kapcsolatban definiálhatunk egy Nyelv(Architektúra) programozási nyelvet, mely gyakorlatilag az architektúra által futtatható összes Program ∈ Nyelv(Architektúra) ágens-program halmaza. Ez a halmaz feltételezéseink szerint véges, mivel az architektúra számítási és tárkapacitása véges. Például az intelligens porszívó csak véges méretű és korlátozott szintaktikájú programok futtatására képes, azaz a futtatható programok készlete véges.
3	0.916667	1	Az első esetben értelemszerűen a memória igény lényegesen nagyobb lesz, hisz minden új csúcs generálására új memóriaterületre lesz szükség, míg ezzel szemben a második módszer esetén minden pillanatban összesen egy csúcsot kell tárolni. Azonban ha lesz szükség visszalépésre (és iteratívan mélyülő keresésnél biztosan lesz, hacsak nem megoldás az első kifejtett csúcs), úgy mivel a csúcsok közötti mozgást ennek az implementációs módszernek lépésenként kell megtennie (hisz más állapotokat nem tárol), ezért átlagos esetben lényegesen nagyobb lehet a futási ideje.
18	0.736842	1	Ehhez képest pl. a későbbi (1-ε)≤e^-ε közelítés (különösen kis hiba esetén) nem okoz már nagyságrendi változást:  ábra - Az exponenciális függvénnyel való közelítés okozta hiba Az exponenciális függvénnyel való közelítés okozta hiba
4	0.333333	0	Láttuk, hogy mind h[1] (a nem a helyükön lévő lapkák száma), mind pedig h[2] (Manhattan-távolság) egész jó heurisztikus függvények a 8-as kirakójáték problémájához, és hogy h[2] jobbnak bizonyult. De hogyan is állt elő a h[2]? Egy számítógép számára vajon lehetséges-e mechanikusan megalkotni ilyen heurisztikus függvényeket?
18	0.894737	1	Az első fejezet az anaesthesia alatt mért adatok bevitelét és rögzítését jelenti emberi kéz bevonása nélkül. Itt meg kell jegyezni, hogy a monitor által rögzített jel, amely a betegből jön, át kell menjen egy bizonyos „igazolási” eljáráson, hiszen minden feldolgozásnak akkor van értelme, ha az valós értékeken alapul. Amennyiben az anaesthesia alatt a beteg állapotában semmilyen változást nem észlelünk, minden mért paramétere stabil, ekkor szemügyre kell venni a real-time folyó pulzoximetriás analízist. Itt pulzusról pulzusra információt kapunk az oxigenizációról is. Amennyiben ugrásszerűen lépésről lépésre 10-20 százalékos eltérést észlelünk, akkor nyilvánvaló, hogy a méréssel van a probléma, és a mért adat nem fogadható el valósnak. Minden monitornak fel kell ismernie ezt a szituációt, és ezt a megfelelő megjegyzés mellett tárolnia is kell. Tehát ilyenkor nem a beteggel, hanem a mérési folyamattal van a probléma, és ezzel a felhasználónak is tisztában kell lennie.
4	0.666667	0	Az online keresés kanonikus példája egy új épületben elhelyezett robot, melynek fel kell tárnia a környezetét, hogy felépíthesse azt a térképet, amit majd arra használ, hogy A-tól B-ig eljusson. A labirintusból való menekülési módszerek – az ókori hősök elengedhetetlen képessége – szintén példái az online keresésnek. A térbeli feltárás azonban nem az egyedüli formája a feltárásnak. Gondoljunk egy újszülöttre: sok lehetséges cselekvéssel rendelkezik, de egyiknek sem tudja a hatását, és csak néhány közvetlenül elérhető állapotról van tudomása. Az, ahogy egy újszülött fokozatosan felfedezi, hogy hogyan működik a világ, részben egy online keresési folyamat.
9	0.931034	0	Arisztotelész más szillogizmusok érvényességét is megpróbálta igazolni, visszavezetve ezeket az első szituációra. Pontosan leírta az egyes szillogizmusokhoz tartozó hangulatokat és szituációkat, de a szillogizmusok igazolása már kevésbé volt precíz.
1	0.068966	1	Az 1960-as években a sejtautomatákat a dinamikus rendszerek egy típusaként tanulmányozták és először állapították meg kapcsolatát a szimbolikus dinamika területével. 1969-ben jelent meg Gustav A. Hedlund „Endomorphisms and automorphisms of the shift dynamical system” című írása, amely ebből a nézőpontból indult ki. Legalapvetőbb eredménye a sejtautomaták globális állapotainak karakterizációja, mint váltás terek folyamatos endomorfizmus halmaza.
3	0.708333	0	Jegyezzük meg, hogy a zárt lista használata azt jelenti, hogy a mélységi és az iteratívan mélyülő keresés tárigénye már nem lineáris. Mivel a Gráf-Keresés algoritmus minden csomópontot a memóriában megtart, egyes keresési fajták kivitelezhetetlenek a memóriakorlátok miatt.
9	0.206897	0	A legáltalánosabb egyesítések kiszámításához a  ábrán láthatunk egy algoritmust. Az eljárás igen egyszerű: egy rekurzív algoritmussal egymással párhuzamosan tárjuk fel a két kifejezést, felépítve az egyesítést, kivéve akkor, ha a struktúrákban a két megfelelő elem nem illeszkedik. Van egy drága lépés: amikor egy változót kell egy komplex termhez illesztünk, meg kell vizsgálni, hogy a változó előfordul-e a termben; ha igen, akkor az illesztés sikertelen, mert nem tudunk konzisztens egyesítést megalkotni. Ez a lépés az úgynevezett előfordulási próba (occur check), amely az algoritmus komplexitását az egyesítendő kifejezés méretével négyzetesen növekvővé teszi. Néhány rendszer, beleértve az összes logikai programozási rendszert, egyszerűen kihagyja az előfordulási próbát, és ennek eredményeként a következtetésük nem helyes. Más rendszerek időben lineáris komplexitású, ennél összetettebb algoritmusokat használnak.
5	0.181818	1	Ezzel algoritmusunk el is jutott a megoldáshoz: az {SA=RED, NSW=GREEN, NT=GREEN, WA=BLUE, Q=BLUE, V=BLUE, T=RED} behelyettesítéshez. Ez ugyanis, mint látjuk, már teljes és konzisztens. Minden változóhoz rendel értéket, és egyetlen korlátot sem sért. Tehát az algoritmus újra meghívja önmagát immár ezzel a behelyettesítéssel, és ott az első programsor következtében, mikor észreveszi, hogy a bemeneten kapott behelyettesítés teljes (azaz megoldás, hiszen csak konzisztens behelyettesítéseket adunk tovább a rekurzió magasabb szintjein), ezzel a behelyettesítéssel tér vissza. Ennek következtében pedig a rekurzió „felgörög”, azaz minden szint rendre ezzel a behelyettesítéssel tér vissza, mígnem végül a felhasználó számára adjuk vissza a kapott megoldást.
14	0.391304	0	Vegyük észre, hogy mátrixokat nem szorzunk, ameddig nem kell kiösszegeznünk egy változót a kiadódó szorzatból. Annál a pontnál csak azokat a mátrixokat szorozzuk öszsze, amelyek magukban foglalják a kiösszegzendő változót. A pontonkénti szorzás és a kiösszegzés eljárások megléte esetén maga a változó eliminálás algoritmusa, amint azt a  ábra mutatja, igen egyszerűen felírható.
24	0.25	1	A röntgenképalkotó berendezések a legkülönfélébb módon készítenek képeket, de mindegyikre jellemző, hogy a primer leképezés analóg módon történik, és a digitális képalkotás ezen analóg jel digitalizálásával válik lehetővé. A primer leképezés analóg jeleit, pl. a fluoreszcens ernyő fényintenzitását, a CT-detektor vagy a CCD-kamera elektromos jelét, az UH-berendezések transzducerén megjelenő feszültséget, vagy az MR készülék tekercsében keletkező mágnesességet digitalizálás után használjuk fel képalkotásra
5	0.181818	1	Most tehát a fentebb felsorolt 25 változónak rendre definiáltuk az 5-5 elemű értékkészletét. Látszott, hogy a házakban lakó személyeket, a házak színét, a házakban tartott állatok fajtáját, a fogyasztott italokat, illetve a szívott dohányokat reprezentáló értékek rendre megegyeztek, azaz 5-5 változónak rendre ugyanaz volt az értékkészlete (pl. a House1Person, House2Person, ..., House5Person változóknak).
20	0.75	0	Keresztülverekedvén magunkat (vagy átugorva) a matematikai levezetésen lássuk most, hogy milyen teljesítményt nyújt egy egy-rejtett-rétegű háló az étterem problémán. A  ábrán két görbét mutatunk be. Az első a tanítási görbe (training curve), amely a súlyfrissítés során az átlagos négyzetes hiba alakulását mutatja egy adott 100 elemű étterem példahalmazon mérve. Ez jól demonstrálja, hogy a háló valóban konvergál a tanító mintákra való tökéletes illeszkedéshez. A második görbe az étteremadatok standard tanulási görbéje. A neurális háló jól tanul, bár nem annyira gyorsan, mint a döntési fa tanulás. Ez talán nem meglepő, hiszen az adatokat egy egyszerű döntési fával generáltuk.  ábra - (a) Az étterem probléma egy adott példahalmazán felvett tanulási görbe, ami a súlyok számos epoch során történő módosításával elért fokozatos hibacsökkenést mutatja. (b) Összehasonlító tanulási görbék, amelyek azt mutatják, hogy a döntési fa tanulás valamivel jobb teljesítményt ad, mint a többrétegű háló hiba-visszaterjesztéses tanulása. (a) Az étterem probléma egy adott példahalmazán felvett tanulási görbe, ami a súlyok számos epoch során történő módosításával elért fokozatos hibacsökkenést mutatja. (b) Összehasonlító tanulási görbék, amelyek azt mutatják, hogy a döntési fa tanulás valamivel jobb teljesítményt ad, mint a többrétegű háló hiba-visszaterjesztéses tanulása.
19	0.590909	1	Tekintsük egy példát, melyben a kötelező gépjármű-felelősségbiztosítás kategóriáiba kívánjuk sorolni az egyes gépjárműveket. Ennek megfelelően a biztosítás kategóriáit leíró változó lesz az Y osztályváltozó, és adott további három bemeneti jegy (vagy más néven magyarázó változó: X[1], X[2, ]X[3]). Az alábbi táblázat tartalmazza a vizsgált hét minta összes értékét. Látható, hogy az X[3] jegy értékét leszámítva az A-val és B-vel jelölt két mintára igaz, hogy a többi jegy S[i]={ X[1], X[2]} esetén a felvett értékek azonosak (x[1]^A=x[1]^B =2, x[2]^A=x[2]^B =fehér) viszont a biztosítási besorolásuk különböző (y^A: 6. kategória ≠ y^B: 4. kategória). Mindezek alapján tehát megállapíthatjuk, hogy X[3]erősen releváns a kötelező biztosítás besorolása (Y) szempontjából, mivel a többi jegy értékének azonossága mellett, az ennél tapasztalt eltérés az osztálybesorolásban is eltérést okozott. Ez a tulajdonság a példa kontextusában is jól magyarázható, mivel a motor teljesítménye valóban az egyik legmeghatározóbb elem a biztosítási kategória megállapítása során.
9	0.448276	1	Alain Marie Albert Colmerauer francia származású tudós, informatikus, több logikai programozásban jelentős innováció létrehozója. 1941. január 24-én született Carcassonne városában (a térképen piros jelölővel). Iskoláival szépen haladt, 1963-ban diplomázott informatikusként a Grenoble-i Műszaki Egyetemen (kék jelölő). Ugyanitt készítette el 1967-ben doktori disszertációját is „Precedences, analyse syntaxique et langages de programmation” címmel, mely magyarra fordítva körülbelül azt jelenti, hogy „Precedenciák, a programozási nyelvek szintaktikájának analizálása”.  ábra - Kép Kép
6	0.1	1	Mielőtt belekezdünk a bizonyításba, vegyük észre, hogy az 1-es játékos a q1 stratégiát tudja csak befolyásolni, míg a 2-es játékos csak a q2-őt. Feltéve, hogy a játékosok racionálisak, azaz hasznuk maximalizálására törekszenek, úgy az 1-es játékos az u1=u haszonfüggvény maximalizálására, míg a 2-es játékos az u2=(-u) függvény maximalizálására, avagy az u minimalizálására törekszik (hiszen minél kisebb az u, annál nagyobb (-u)).
4	0.833333	0	Az online kereső ágens kezdeti tudatlansága több lehetőséget teremt a tanulásra. Először az ágens a környezetének „térképét” – pontosabban minden állapotban minden cselekvés kimenetelét – tanulja meg egyszerűen regisztrálva a tapasztalatát. (Jegyezzük meg, hogy a determinisztikus környezet feltételezése azt jelenti, hogy egy-egy cselekvés esetén egy tapasztalás elég lesz.) Másodszor a lokálisan kereső ágensek lokális frissítési szabályok segítségével pontosabb értékbecslésekre tesznek szert minden állapot esetén, ahogy ez a TRTA^*-nál történt. Látni fogjuk a  fejezetben, hogy ezek a frissítések előbb-utóbb minden állapot egzakt értékéhez fognak konvergálni, feltéve, hogy az ágens az állapotteret megfelelő módon tárja fel. Amikor az egzakt értékek már ismertek, az optimális döntések egyszerűen a legmagasabb értékű utódállapotba való átmenetekkel hozhatók meg – ilyenkor tehát a tiszta hegymászás az optimális stratégia.  ábra - A TRTA* ágens a cselekvéseit a környező állapotok értékei alapján választja ki, mely az állapotokat az állapottérben mozogva folyamatosan frissíti A TRTA* ágens a cselekvéseit a környező állapotok értékei alapján választja ki, mely az állapotokat az állapottérben mozogva folyamatosan frissíti
9	0.827586	0	A bemeneti rezolúció (input resolution) stratégiában minden rezolúció egy (tudásbázisbeli vagy lekérdező-) mondatot kombinál más mondatokkal. A  ábrán látható bizonyítás csak bemeneti rezolúciót használ. Ezt az ábrákon sok oldalkapcsolattal rendelkező vonal jellemzi, ahol a kapcsolódásokon egyedi mondatok találhatók. Egyértelmű, hogy az ilyen alakú bizonyítási fák mérete kisebb, mint bármely más bizonyítási fáé. Horn formájú tudásbázisok esetében a Modus Ponens egyfajta bemeneti rezolúciós stratégia, mivel mindig az eredeti TB egy mondatát kombinálja egy másik mondattal. Így nem meglepő, hogy a bemeneti rezolúció teljes a Horn formájú tudásbázisok esetében, de nem teljes általános esetben. A lineáris rezolúció (linear resolution) stratégia egy olyan általánosítás, amely megengedi, hogy P és Q együtt szerepeljenek a rezolúcióban, ha P eredeti eleme a TB-nek, vagy ha P leszármazottja Q-nak a bizonyítási fában. A lineáris rezolúció teljes eljárás.
1	0.275862	1	Aktív agyterületekben csökken a paramágneses tulajdonságú dezoxihemoglobin szintje. Ezért lokálisan csökken a mágneses szuszceptibilitás, amely hosszabb T2* -relaxációs időt eredményez, vagyis nő a regisztrált jel erőssége.
25	0.111111	0	A robotállapot más fontos jellemzőinek mérésére erő- és nyomatékérzékelőket (force, torque sensors) használnak. Ezek nélkülözhetetlenek, ha a robotnak törékeny tárggyal kell dolgoznia, vagy olyannal, amelynek pontos mérete és helyzete nem ismert. Képzeljük csak el, amikor egy közel egytonnás manipulátornak egy villanykörtét kell becsavarnia. Ha túl nagy erővel fogná meg a körtét, könnyen összeroppanthatná. Az erőérzékelők lehetővé teszik, hogy a robot tudja, milyen nehéz megfogni a körtét, míg a nyomatékérzékelők információt szolgáltatnak, hogy milyen nehéz becsavarni. A jó szenzorok képesek erőt mérni mindhárom elmozdulási és mindhárom elfordulási irányban.
5	0.181818	1	A rekurziónak ezen a szintjén, a 9-es lépésben az NT változónak adtunk BLUE értéket, továbbá a 10-es lépésben ennek az értékadásnak megfelelően az előretekintés során az SA és Q változók értékkészletéből vettük ki a BLUE értéket. Most tehát, mivel HAMIS értékkel tért vissza a visszalépéses keresés a rekurziónak erre a szintjére, itt a FOR-cikluson belül az NT változó következő értékére kell lépnünk, de előtte még vissza kell csinálnunk az említett értékadás (NT=BLUE) és az előretekintés következményeit.
26	0.714286	0	Hasonló kérdések kezdenek megjelenni az interneten használt intelligens ágensekkel kapcsolatban. Már elértek egy kis haladást kényszerfeltételek beépítésével az ágensekbe, hogy például ne okozhassanak károkat más felhasználók állományaiban (Weld és Etzioni, 1994). Amikor pénz is gazdát cserél, a probléma már nagyobb. Amikor egy pénzügyi tranzakció során egy intelligens ágens „valaki nevében” jár el, felelős-e ez a személy a keletkező adósságokért? Lehetségessé válhat-e, hogy egy intelligens ágensnek pénzügyi kintlévősége legyen, és a saját nevében eljárva elektronikus tranzakciókat hajtson végre? Mindeddig nem látszanak világosnak ezek a kérdések. Tudomásunk szerint eddig egy program sem kapta meg azt a jogi státust, hogy individuumként pénzügyi tranzakciókat hajthasson végre, és jelenleg ez nem is látszik indokoltnak. A valódi autópályákon sem tekintik a közlekedési szabályok betartatásakor „vezetőnek” a programokat. A kaliforniai jogban legalábbis semmilyen jogi szankció nincsen, amely megakadályozhatná, hogy egy automata jármű túllépje a sebességhatárt, noha baleset esetén felelőssé tehető a jármű vezérlőmechanizmusának tervezője. Csakúgy, mint az emberi megtermékenyítési technológia esetén, a jog még nem vette fel a lépést az új fejleményekkel.
5	0.181818	1	Próbálkozzunk meg tehát az utóbbi alternatívával: alakítsuk át a fenti, és a hozzá tartozó kényszereket egyszerű bináris formára (hogy pl. akár az „Ausztrália térképének kiszínezése” példához hasonlóan gráfként is ábrázolható legyen a feladat/modell). Ehhez először is tüntessük el a VAGY-kapcsolatot. Ez egyszerűen megtehető: vezessünk be egy újabb változót, amelynek értékkészlete {-1, +1}. A változó neve legyen CHC (mint „ChesterfieldsHouse Carry”, azaz a ChesterfieldsHouse változót módosító egységnyi érték). Ez tehát az 51. (segéd)változónk, amely a duál reprezentáció része. Ezzel a fentebbi korlátot a következő formára „egyszerűsítjük”:
25	0.148148	1	Ebben az egyenletben, ahogy az összetett homogén koordináta-transzformációt sorban kiszámoljuk, az egyes mátrixok második indexe mindig a leképzendő koordináta-rendszert jelöli, míg az első index a viszonyítás alapjául szolgáló bázist. A karmátrix kiszámítása érdekében sokszor célszerű a csuklónál két részre bontani a számítást. Ilyenkor két alfeladatot kapunk, melyek közül az első a karrendszer (szerszám) durva pozícionálását jelenti, míg a második a kéz és vele együtt a szerszám finompozícióját, orientációját határozza meg. E szétbontás azért is indokolt sok esetben, mert az alap kartípusok leírását az irodalomban megtalálhatjuk (Ránky, Lantos), a kéz mozgásainak leírására pedig más, hatékony modellek is rendelkezésre állnak, mint ahogy azt a későbbi pontokban látni fogjuk. Tehát ha a harmadik mozgástengely után, a csuklónál két részre bontjuk a karmátrix kiszámítását, akkor a következőket kapjuk:
7	0.8	0	Hamarosan látni fogunk egy példát arra, hogyan kell alkalmaznunk a tudásállításokat. Először is, szükségünk van annak kidolgozására, hogy hogyan határozzuk meg maguknak a tudásállításoknak az igazságértékét. Vegyük észre, hogy miközben az S[4,4]-nek rögzített igazságértéke volt, a K(S[4,4]) és K(¬S[4,4]) változik, miközben az ágens egyre többet tud meg a világról. Például a K(S[4,4]) hamis értékről indul, és igazzá válik, amint az S[4,4]-ről meghatározható, hogy igaz – azaz, amikor az ágens a [4, 4]-be lép, és detektálja a szellőt. Majd igaz marad ezután. Így megállapítható, hogy
5	0.181818	1	 ábra - 10. lépés: az előbbi, NT=BLUE értékadás következményeként a BLUE érték eltávolítása az SA és Q változó értékkészletéből az előretekintés miatt 10. lépés: az előbbi, NT=BLUE értékadás következményeként a BLUE érték eltávolítása az SA és Q változó értékkészletéből az előretekintés miatt
14	0.869565	1	Példaként mutatunk két ábrát: a  ábra a sciFLT-be ad betekintést, míg a  ábra a diagrammba való beépítésre mutat példát.  ábra - A sciFLT A sciFLT  ábra - Fuzzy controller a diagrammban Fuzzy controller a diagrammban
3	0.916667	1	Mint látható, akármilyen lépést is teszünk, az inverziók száma páros számmal változik. Mivel a célállapotban az inverziók száma 0, ez azt jelenti, hogy csak olyan állapotból lehetséges a célállapotba eljutni, amelyben az inverziók száma páros!
23	0.555556	0	Az utolsó lépés az előző lépés által felépített struktúrákat vonja össze (merges structures). Amennyiben a következő mondat azt állítja, hogy „A vegyes vállalat januárban kezdi meg a termelést”, akkor ez a lépés felismeri, hogy két hivatkozás történt a vegyes vállalatra, amelyeket össze kellene vonni.
18	0.368421	0	Döntési fa tanulás esetén a megválaszolásra váró kérdés az, hogy egy adott példának mi a helyes besorolása. Egy jó döntési fa választ ad erre a kérdésre. Még mielőtt egyetlen attribútumot teszteltünk volna, a válaszok valószínűségét becsülhetjük a tanító halmazban található pozitív és negatív minták arányával. Tegyük fel, hogy a tanító halmazban p pozitív és n negatív példa található. Ez esetben a helyes válasz információtartalmának becslése:
22	0.481481	0	A VP → Verb NP szabály alkalmazza az ige szemantikai értelmezéséből kapott predikátumot az NP (szemantikai) értelmezéséből kapott objektumra a teljes VP szemantikai értelmezésének kinyerésére. Végül a  ábrán látható nyelvtant és a  ábrán található elemzési fát kapjuk.
9	0.37931	0	szabály és az Amerikai(West) tény között. Ezt a részleges illesztést aztán kiselejtezzük, de újraépítjük a második ciklusban is (amikor a szabály sikeres). Hatékonyabb lenne megőrizni, és fokozatosan kiegészíteni újabb részleges illesztésekkel, amikor az új tények beérkeznek, ahelyett hogy kiselejteznénk őket.
6	0.1	1	A kereső algoritmusok esetében az iteratívan mélyülő megoldások sokszor nagyon hatékonyak. Lehetővé teszi, hogy a mélységi keresés alacsony tárigényét valamint a szélességi bejárás teljességét ötvözzük. Az Alfa-béta vágás iteratív változatában először 1 mélységig végzünk egy keresést [2]. Ennek eredménye alapján sorrendezzük a lépéseket, majd végzünk egy 2 mélységű Alfa-béta keresést és így tovább. Ez a keresés egyértelműen növeli a vágások hatékonyságát és gyakoriságát és így lényegesen gyorsítja a keresést, annak ellenére, hogy látszólag többször kell egy ágat vizsgálni.
6	0.1	1	A nagy és komplex keresési térre az eddig ismertetett alfa-béta vágás vagy PNS nem bizonyultak hatékonynak. Ehelyett a tervezők egy új hibrid keresési algoritmussal álltak elő: a heurisztikusan vezérelt bizonyítással (heuristically guided proof) [9].
15	0.777778	0	Ha egyedülálló szavakat (isolated words) szeretnénk felismerni – azaz egyértelmű határokkal rendelkező és mindennemű környezeti összefüggés nélkül kiejtett szavakat –, akkor azt a szót kell megkeresnünk, amelyik maximalizálja azt, hogy
7	0.92	0	Wilhelm Leibniztől (1646–1716) származik a mesterséges formális nyelvi minták létrehozásának ötlete a logikai kapcsolatok tisztázásának és a logikai következtetés egy tisztán formális és mechanikus folyamattá való egyszerűsítése céljából. Leibniz saját matematikai logikája azonban igencsak tökéletlen volt, és rá inkább ezeknek a gondolatoknak mint célkitűzéseknek a bevezetéséért és nem e célok megvalósítására tett kísérletei miatt emlékezünk.
12	0.52381	0	Az újratervező ágensnek még ezekkel a lehetséges javításokkal is vannak további hátrányai. Nem hatékony a valós idejű környezetekben, és nincs korlát az újratervezési időre, ezáltal nincs korlát a cselekvésről való döntés idejére sem. Szintén képtelen saját célokat kialakítani vagy a meglévő célokhoz új célokat fogadni, azaz nem lehet hosszú életű egy összetett környezetben. Ezeket a hátrányokat kezeljük a következő fejezetben.
1	0.413793	1	Valamely neuronhálózatot irányított, színezett és címkézett gráffal reprezentálhatunk ( ábra). A gráf csomópontjai a (típusuk szerint színezett) neuronok, élei a szinapszis típusa szerint címkézett szinapszisok, az irányítás pedig a preszinaptikus sejttől a posztszinaptikus sejt felé tartó ingerületátadás irányával megegyező. A gráfok szerkezete és a neuronhálózat dinamikus működése között összefüggés van. A gráfhoz rendelhető és a sejtek közötti kölcsönhatásokat jellemző szinaptikus mátrix sajátérték-analízise (bizonyos osztályokra egyértelmű) információt ad arra kérdésre, hogy a hálózat dinamikája fixponthoz tart-e, vagy pedig oszcillációt és/vagy káoszt mutathat.
21	0.9375	0	Számítsa ki a valós hasznosságfüggvényt és az x, y függvényében felírható legjobb lineáris approximációt (éppúgy, mint a   egyenletben tettük) a következő környezetekre: a. Egy 10 × 10-es világ, amelyben a (10, 10) az egyetlen +1 végállapot mező. b. Mint (a), de a (10, 1)-en van egy további –1 végállapot. c. Mint (b), de tegyen 10 véletlen módon választott mezőre akadályt. d. Mint (b), de vegyen fel egy falat (5, 2)-től (5, 9)-ig. e. Mint (a), de a végállapot legyen az (5, 5).
13	0.590909	0	Ebben az alfejezetben a valószínűségi következtetés (probabilistic inference) egy egyszerű módszerét fogjuk leírni – hogy hogyan határozhatók meg az állítások a posteriori valószínűségekre vonatkozó megfigyelt bizonyítékok alapján. „Tudásbázisként”, a teljes együttes valószínűség-eloszlást fogjuk használni, amelyből az összes kérdésre adandó válasz levezethető. Menet közben számos hasznos, a valószínűségeket tartalmazó egyenletek kezelésére alkalmas módszert is bevezetünk.
19	0.545455	1	Az egyik legegyszerűbb szűrő módszer a jegyek kiválasztására az osztályváltozóval legerősebben korreláló jegyek kiválasztása, melyet maximum relevancia választásnak nevezünk. Azonos elven, de összetettebb jegykiértékelési mértékkel dolgozik a RELIEF algoritmus [8].
11	0.423077	0	A továbbiakban definiálni fogjuk az RRT algoritmust a részben rendezett tervkészítéshez. Hagyományosan az RRT-t mint egy önálló programot szokás bemutatni, ehelyett mi a részben rendezett tervkészítést, mint a keresési probléma egy példányát fogjuk megfogalmazni. Ez lehetővé teszi, hogy az alkalmazható tervfinomító lépésekre koncentráljunk ahelyett, hogy azt vizsgálnánk, hogyan térképezi fel a keresési teret az algoritmus. Valójában, ha a keresési feladatot megfogalmaztuk a nem informált vagy heurisztikus keresési módszerek széles választéka áll rendelkezésre.
10	0.909091	0	Ez a fejezet eddig a könyv legrészletesebb fejezete. Azzal, hogy sokféle tudás reprezentálásának részleteivel foglalkozunk, remélhetően érzékeltetni tudtuk az olvasóval, hogy hogyan hozhatók létre valódi tudásbázisok. A lényegi témák az alábbiak: * Nagyméretű tudásreprezentáció egy általános rendeltetésű ontológiát igényel, a specifikus problématerületek szervezéséhez és az egymással való összekapcsolásához. * Egy általános ontológiának a tudás széles választékát kell lefednie, és elvben képesnek kell lennie bármilyen problématerület kezelésére. * Bemutattunk egy felső ontológiát (upper ontology), amely a kategóriákon és az eseménykalkuluson alapul. Foglalkoztunk strukturált objektumokkal, az idővel és a térrel, a változással, folyamatokkal, szubsztanciákkal és hiedelmekkel. * A cselekvéseket, az eseményeket és az időt vagy szituációkalkulusban, vagy az olyan nagyobb kifejezőerejű reprezentációkban, mint az eseménykalkulus vagy a folyó esemény kalkulus fejezhetjük ki. Az ilyen reprezentációk révén egy ágens cselekvési terveket konstruálhat logikai következtetés segítségével. * Egy ágens mentális állapotait a hiedelmeket jelentő füzérekkel lehet reprezentálni. * Az internetes bevásárlási problématerület részletes elemzését mutattuk be általános ontológia bevetésével, megmutatva, hogy egy bevásárló ágens hogyan használhatja a problématerületi tudását. * A kategóriahierarchia szervezéséhez speciális rendeltetésű rendszereket terveztek, mint például a szemantikus hálók (semantic nets) és a leíró logikák (description logics). A következtetés fontos esete az öröklődés (inheritance), mely révén az objektumok tulajdonságait a kategóriatagságukból ki lehet következtetni. * A logikai programokban a zárt világ feltételezést (closed-world assumption) implementáljuk, hogy rengeteg negatív információ megadását elkerülhessük. A legjobb, ha ezt alapeseti helyzetnek tekintjük, amit további információ felülírhat. * A nemmonoton logikák (nonmonotonic logics), amilyen például a körülírás (cirumscription) vagy az alapeseti logika (default logic), az általános alapeseti következtetés leírására készültek. Nemmonoton következtetést a válaszhalmaz-programozás (answer set programming) lényegesen gyorsítja, hasonlóan ahhoz, ahogy a WalkSAT meggyorsítja az ítéletlogikai következtetést. * Az igazság-karbantartó rendszerek (truth maintenance systems) hatékonyan kezelik a tudásfelfrissítést és a tudásrevíziót.
27	0.8	0	Végül pedig valószínűnek tűnik, hogy a mesterséges intelligencia nagyarányú sikere – az emberihez hasonló vagy annál magasabb szintű intelligencia létrehozása – megváltoztatná az emberiség többségének életét. Átalakulna munkánk és játékunk belső természete, csakúgy, mint az intelligenciáról és a tudatosságról vallott nézeteink, sőt megváltozna az emberi faj jövőbeli sorsa is. Ezen a szinten az MI-rendszerek közvetlen fenyegetést jelenthetnének az emberi autonómiára, szabadságra, sőt akár a fennmaradásunkra is. Mindezek miatt a mesterséges intelligencia kutatásától nem válaszhatók el az etikai következményei.
27	0.2	0	A  fejezetben számos ágenstervet és azok komponenseit mutattuk be. Figyelmünket összpontosítandó itt csak a hasznosságalapú ágenssel foglalkozunk, amelyet a  ábrán mutatunk be újra. Ez a legáltalánosabb ágenstervünk; de megvizsgáljuk tanulási képességekkel való kiterjesztését is (lásd  ábra).
18	0.315789	0	Az algoritmus által a 12 mintából álló adathalmaz alapján létrehozott fa a  ábrán látható. Az eredményként kapott fa nyilvánvalóan különbözik a  ábrán látható eredetitől, annak ellenére, hogy az adatokat egy, az eredeti fát használó ágens generálta. Arra gondolhatnánk, hogy az algoritmus nem ért el különösebben jó eredményt a helyes függvény megtanulásában. Mindamellett ez téves következtetés lenne. A tanuló algoritmus a példákat látja, nem az eredeti függvényt. Valójában a létrehozott hipotézis (lásd  ábra) nem csupán megfelel az összes példának, de lényegesen egyszerűbb is, mint az eredeti fa. A tanuló algoritmusnak semmi oka sincs az Eső és Foglalás attribútumokra vonatkozó teszteket felvenni, mivel ezek nélkül is tudja osztályozni az összes példát. Mellesleg, felfedett egy érdekes és váratlan viselkedést: az első szerző hétvégeken várni fog thai ételekre.  ábra - A döntési fa tanulásra szolgáló algoritmus A döntési fa tanulásra szolgáló algoritmus
12	0.904762	0	Az „univerzális tervek” (Schoppers, 1987) a reaktív tervkészítés keresőtábla módszereként került kifejlesztésre, de mint kiderült, ez a Markov döntési folyamatokban használt eljárásmód (policy) ötletének újrafelfedezése volt. Egy univerzális terv (vagy egy eljárásmód) bármely állapotban az adott állapotban végrehajtandó cselekvésre mutató leképezést tartalmazza. Ginsberg (Ginsberg, 1989) lelkes támadást indított az univerzális tervek ellen, ami kezelhetetlenségi eredményeket is tartalmazott a reaktív tervkészítési probléma néhány alakjára. Erre Schoppers 1989-ben egy hasonlóan lelkes választ adott (Schoppers, 1989).
15	0.185185	0	valamely f függvénnyel. Ezt a folyamatot gyakran nevezik rekurzív becslésnek (recursive estimation). Tekinthetjük a számítást úgy, mint ami valójában két részből áll: elsőként a jelenlegi állapot eloszlását terjesztjük előre t-ről t + 1-re; azután fogjuk frissíteni, felhasználva az új e[t+1 ]bizonyítékot. Ez a kétlépéses folyamat elég egyszerűen alakul:
8	0.096774	0	Pontosabban megfogalmazva, az elsőrendű logika modelljei totális függvényeket (total functions) kívánnak meg, ami azt jelenti, hogy minden bemeneti n-eshez tartoznia kell egy értéknek. Így tehát a koronához tartoznia kell egy bal lábnak, és ennek így kell lennie minden bal láb esetében. Létezik erre a problémára egy technikai megoldás, amely egy hozzáadott „láthatatlan” objektumot vezet be: egy bal lábat rendel mindenhez, amelynek nincs bal lába, beleértve önmagát is. Szerencsére, amíg valaki nem tesz kijelentéseket a bal lábakról vagy olyan dolgokról, amelyeknek nincs bal lábuk, ezeknek a technikai problémáknak nincs jelentőségük.
5	0.181818	1	Az előretekintés továbbra sem okozott üres értékkészletet, így mehetünk tovább, és az eddigi, {NSW=RED, WA=RED, NT=GREEN} behelyettesítéssel és a módosított KKP-vel újfent meghívhatjuk rekurzíve az algoritmust.
25	0.148148	1	Az A[3,n](q[4], q[5], …, q[n]) összetett homogén transzformáció a szerszámközépponthoz rendelt koordinátákat a csuklóhoz rendelt koordinátákba képzi le. Hasonlóan, A[2,3](q[3]) csuklókoordinátákból könyökkoordinátákba, A[1,2](q[2]) könyökkoordinátákból vállkoordinátákba és A[0,1](q[1]) vállkoordinátákból a törzs báziskoordinátáiba biztosít leképezést. Tehát az A[0,3](q[1], q[2], q[3]) összetett homogén transzformáció a csuklókoordinátákat a törzs viszonyítási rendszerébe térképezi. Ha a csuklónál kettévágott részek leírása ismert, akkor szorzással a teljes karrendszer leírása azonnal megkapható:
11	0.923077	0	A tervkészítés mint kielégíthetőség és a SATplan algoritmus Kautz és Selman javaslata, akiket a kielégíthetőségi problémákra alkalmazott mohó lokális keresés meglepő sikere inspirált (Kautz és Selman, 1992) (lásd  fejezet). Kautz és társai szintén kutatták a STRIPS axiómák ítéletlogikai reprezentációjának különböző módjait, és azt találták, hogy a legtömörebb alakok nem feltétlenül vezettek a leggyorsabb megoldásokra (Kautz és társai, 1996). Ernst és társai szisztematikus elemzést hajtottak végre (Ernst és társai, 1997), valamint kifejlesztettek egy automatikus fordítót PDDL problémák ítéletlogikai megadásának generálására. A Kautz és Selman által kifejlesztett Blackbox tervkészítő (Kautz és Selman, 1998) a Graphplan és SATplan alapötleteit kombinálja.
22	0.296296	0	Amikor S' jóslója készen van, belépünk egy ciklusba, amely meghívja a Szkenner-t a mondat minden egyes szavára. Ha a j pozícióban álló szó egy B kategória tagja, amit valamelyik él keres a j pozícióban, akkor kiterjesztjük azt az élet megjelölve a szót, mint B egy példányát. Vegyük észre, hogy a Szkenner minden egyes meghívása végződhet a Jósló és a Kiterjesztő rekurzív meghívásával, ily módon ötvözve a fentről lefelé és a lentről felfelé feldolgozást.
9	0.793103	0	Mikor ezek a mondatok adottak, egy standard következtetési eljárás, mint amilyen a rezolúció elvégezhet olyan feladatokat, amelyek egyenlőségi következtetést igényelnek, mint például a matematikai egyenletek megoldása.
10	0.69697	0	A szemantikus háló jelölésrendszere igen alkalmas a  alfejezetben bevezetett típusú öröklődéses (inheritance) következtetés végrehajtására. Így személy révén, Mária örökli azt a tulajdonságot, hogy két lába van. Ahhoz, hogy kitaláljuk, hány lába van Máriának, az öröklődéses algoritmus követi a Tagja élt a Máriá-tól az őt tartalmazó kategóriáig, majd a Részhalmaza élt a hierarchiába felfelé, amíg egy olyan kategóriát nem talál meg, amelyhez létezik egy bekeretezett Lába él – ebben ez esetben ez Személy kategória lesz. Ennek az öröklődéses algoritmusnak az egyszerűsége és hatékonysága a logikai tételbizonyítóhoz képest, a szemantikus hálók egyik fő vonzereje volt.
14	0.086957	1	Ezek tárgyalása meghaladja az összefoglaló kereteit, de az első ponttal kapcsolatban megjegyezzük, hogy az úgynevezett Oksági Markov feltétel elfogadásával ez kiküszöbölhető, ami leegyszerűsítva az olyan rejtett változók létét zárja ki, amelyek több általunk megfigyelt változóra is hatnak.
10	0.939394	0	A keretproblémát, mint olyant, elsőként McCarthy és Hayes ismerték fel (McCarthy és Hayes, 1969). Számos kutató a problémát megoldhatatlannak tartotta az elsőrendű logikán belül, és ez intenzív kutatáshoz vezetett a nemmonoton logikák irányába. A filozófusok Dreyfustól (Dreyfus, 1972) Crockettig (Crockett, 1994) a keretproblémát az egész MI-vállalkozás szükségszerű kudarca egyik tünetének tartották. A reprezentációs keretprobléma részleges megoldása követő-állapot axiómák segítségével Ray Reitertől származik (Reiter, 1991). A következtetési keretprobléma megoldása Holldobler és Schneeberger munkájára vezethető vissza (Holldobler és Schneeberger, 1990), amit most folyó esemény kalkulusnak nevezünk (Thielscher, 1999). Jelen fejezetben bemutatott elemzés Lin és Reiter, valamint Thielscher elemzésein alapul (Lin és Reiter, 1997; Thielscher, 1999). A szituációkalkulusban a cselekvésről való következtetés teljes, korszerű tárgyalását Shanahan és Reiter könyvei adják (Shanahan, 1997; Reiter, 2001b).
13	0.272727	1	A feltételes valószínűséghez kötődik az úgynevezett szorzási– (vagy más néven lánc) szabály. A definícióban szereplő összefüggés átrendezésével P(A, B) = P(A | B) [*] P(B) adódik. Ennek az általánosítása a lánc-szabály:
8	0.774194	0	Az egyik jele annak, hogy megfelelő ontológiát használunk az, hogy kevés olyan általános szabály van, amit később a példányokra specifikussá kellene tennünk. A helyes szótár jellemzője az, hogy minden egyes szabályt világosan és tömören meg tudunk fogalmazni. A mi példánkban csak hét egyszerű szabályra van szükségünk, hogy leírjunk mindent, amit tudnunk kell az áramkörökről. 1. Ha két végpont össze van kapcsolva, akkor ugyanaz lesz a jelértékük:
6	0.1	1	Eliakim H. Moore amerikai matematikus által bevezetett változata az eredeti Nimnek, mely az eredeti szabályokhoz képest azzal az általánosítással él, hogy nem csak egy kupacból vehetünk el egyszerre kavicsot, hanem legfeljebb egy előre meghatározott k számú kupacból (k pozitív egész). Tehát k=1-re a normál Nimet adja. Ha k nagyobb vagy egyenlő, mint az összes kupac száma, akkor a játék triviális. Ha k eggyel kevesebb, mint a kupacok száma, akkor a játék ugyanolyan könnyű, mint az eredeti Nim 2 kupaccal, és azok a jó állások, mikor minden kupac ugyanannyi elemet tartalmaz.
23	0.277778	0	Azt mondtuk, hogy a P(r|D, Q) értékét akarjuk maximalizálni, azonban ezzel ekvivalens, ha a P(r|D, Q)/P(¬r|D, Q) valószínűségi arányt maximalizáljuk. Azaz a dokumentumokat a következő pontszám alapján rangsorolhatjuk:
18	0.736842	1	A fenti demonstratív példák kapcsán az derült ki, hogy az esetek jelentős részében a képletből nyert becslés használhatósága elsősorban azon múlik, hogy milyen a rossz hipotéziseink eloszlása a hibák szempontjából! Tehát, ha a hipotézisek jelentős része nagyon kis hibával dolgozik (az előírtnál alig valamivel rosszabb), akkor a szükséges mintaszámra nem ad rossz becslést az összefüggés. Ha a rossz hipotézisek nagy része nagyságrenddel nagyobb hibát ad, mint az elvárt szint, akkor feleslegesen sok mintát követelünk meg a konzisztencia vizsgálatánál.
13	0.136364	0	Ilyen típusú döntések meghozatala előtt az ágensnek fel kell állítania egy preferencia-sorrendet (preferences) a különböző tervek lehetséges kimenetelei (outcome) között. Egy adott kimenetel teljesen határozott állapotot jelent, magában foglalva, hogy az ágens időben érkezik a repülőtérre vagy sem, és hogy milyen hosszú lesz a repülőtéri várakozás. A preferenciák figyelembevételével történő leírásra és következtetésre a hasznosságelméletet (utility theory) fogjuk használni. (A hasznosság – utility – fogalmán a továbbiakban az értendő, hogy „milyen a haszon minősége”, és nem valamifajta közhasznúság, mint az elektromos művek vagy vízművek esetében.) A hasznosságelmélet szerint minden állapotnak van egy hasznavehetőségi mértéke vagy haszna az ágens számára, és az a számára több hasznot hozó állapotokat fogja előnyben részesíteni.
25	0.037037	0	A robotok (robots) olyan fizikai ágensek, amelyek a fizikai világ megváltoztatásával oldanak meg feladatokat. E célból különböző beavatkozó szervekkel (effectors) szerelik fel őket, például lábakkal, kerekekkel, karokkal és megfogókkal. A beavatkozók kizárólagos célja, hogy fizikai hatást fejtsenek ki a környezetre.^[275] A robotokat érzékelőkkel (sensors) is felszerelik, hogy érzékelhessék környezetüket. Manapság a robotikában számtalan különféle érzékelőt használnak: kamerákat és ultrahangradarokat a környezet mérésére, giroszkópokat és gyorsulásmérőket a robot saját mozgásának követésére.
1	0.448276	1	Ahhoz hogy egy távkapcsolat létrejöhessen, hogy egy képet (Rtg.,CT, MRI) gyorsan, hibamentesen küldeni tudjunk, megfelelő adatátvitellel, sávszélességgel kell rendelkezni. Arról is meg kell győződni, hogy a kiküldött anyag teljes terjedelmében átkerült a fogadóhoz.
14	0.478261	0	A csoportosítás alapötlete, hogy a háló önálló csomópontjait egyesítjük, klasztercsomópontokat formálva úgy, hogy a kiadódó háló polifa legyen. Például a  (a) ábrán mutatott, többszörösen összekötött háló egy polifává konvertálható a Locsoló és az Eső csomópontok egy Locsoló+Eső-nek nevezett klasztercsomópontba (cluster node) való összevonásával, ahogy azt a  (b) ábra mutatja. A két bináris csomópontot egyetlen megacsomópont váltotta fel, ami négy lehetséges értéket vesz fel: hh, hi, ih, ii. A megacsomópontnak csak egy szülője van, a bináris Felhős változó, így két feltételes eset létezik.
13	0.545455	0	Az effajta kérdés évtizedekig vita tárgya volt azok között, akik a valószínűségek használatát tartották egyedül jogosnak a meggyőződési mértékek kifejezésére, és azok között, akik más megközelítési módokat javasoltak. Itt most egy olyan érvelést mutatunk be a valószínűségi axiómákkal kapcsolatban, amelyet először Bruno de Finetti fejtett ki 1931-ben.
14	0.086957	1	Tegyük fel, hogy X,Y,Z  közül legalább egy nem bináris változó, pl Y  . Ekkor létezik egy olyan eloszlás p(X,Y,Z)  , hogy (X    ⊥⊥    Y)  és (Y    ⊥⊥    Z)  , de (X  ⊥⊥    Z)  , azaz a függések (asszociációk) nem feltétlenül tranzítívak. Azonban ha feltesszük, hogy az eloszlásunk függetlenségi viszonyai stabilak, azaz infinitizimális perturbációkra a kvalitív függési viszonyok nem változnak, akkor az intranzitív hármas függési modellt egyedül az úgynevezett v-struktúra magyarázhatja ( X→Y←Z  ), amelyben (X  ⊥⊥    Z|Y)  (és nem (X  ⊥⊥    Z|Y)  ). Azaz ekkor kivételesen adódik, hogy Y  a következménye két őt befolyásoló független eseménynek, amelyek tapasztalataink szerint mindig korábbiak (innen ered a filozófiabeli ``idő nyila'' megnevezés).
12	0.761905	0	Az előző alfejezet konvenciói alkalmazási terület specifikusak és a cselekvésleírások megkötéseivel implementálhatók, amelyekkel kizárjuk a konvenciók megszegéseit. Egy általánosabb megközelítés, hogy problémakör-független konvenciókat használjunk. Például ha mindegyik ágens ugyanazon többtestű tervkészítő algoritmust futtatja ugyanazon bemenetekkel, követi azt a konvenciót, miszerint az elsőként megtalált, használható összetett tervet hajtsa végre, miközben biztos benne, hogy a többi ágens ugyanezzel a választással él. Egy sokkal robusztusabb, de jóval költségesebb stratégia lenne az összes összetett terv elkészítése, majd az ebből való választás (mondjuk annak kiválasztása, amelynek leírt reprezentációja ábécé-sorrendben az első).
14	0.695652	0	A következő három alfejezet ezen megközelítések mindegyikét egy kicsit részletesebben mutatja be. Nem tartalmaznak részletes technikai leírásokat, de a megadott hivatkozások segítséget nyújtanak további részletek eléréséhez.
3	0.25	1	Az NP problémák az eldöntési problémák (olyan problémák, amelyekre egyetlen igen/nem válasz adható) egy igen érdekes és fontos osztályát alkotják. Az ebbe az osztályba tartozó problémák egy részének megoldására ugyan jelenleg nem ismert polinomiális idejű algoritmus, ám mindegyikhez létezik „pozitív tanú” algoritmus, azaz olyan polinomiális algoritmus, amely egy megfelelő „bizonyíték” alapján az „igen” választ ellenőrizni tudja. Példa erre a Hamilton-kör létezésének problémája: jelenleg nem ismert polinomiális idejű algoritmus annak meghatározására, hogy van-e egy gráfban Hamilton-kör, de egy konkrét Hamilton-kört bizonyítéknak használva polinomiális időben ellenőrizhető, hogy az tényleg kielégíti a feltételeket. Igen sok fontos NP-beli probléma van, ezek közé tartozik a már említett Hamilton-kör létezésének problémája, ill. például annak vizsgálata, hogy egy gráfban létezik-e k elemű független ponthalmaz.
6	0.1	1	A bizonyítási fa menedzser kezdetben egy üres fával rendelkezik, majd első lépésben megkapja a vető által javasolt elsődleges kiértékelendő lépésvonalat. Ez a lépésvonal az emberek által legjobbnak tartott lépések összességét tartalmazza mindkét játékos szemszögéből.
20	0.107143	1	1.) Missing Completely at Random (MCAR): Teljesen véletlenszerű hiányzás, ahol az adott X[i] változó értéke hiányzásának a valószínűsége nem függ semmilyen megfigyelt Y[i ]vagy rejtett (nem megfigyelhető) Z[i][ ]változótól.
1	0.137931	1	Az eredeti, 100 darab Bongard által készített problémához elsőként Douglas Hofstadter adott hozzá 56 új problémát, majd Harry Foundalis 44-et. Ma már több, mint 300 különböző példány létezik. A megoldásuk formája alapján több csoportba sorolhatók, többek közt: * tulajdonság értéke (kitöltöttség, terület, számosság) * tulajdonság értékeinek kapcsolata (azonos, különböző) * létezés * szerkezet és relációk
16	0.913043	1	Ezen kórlap-adatbázisok karbantartása a mindig a gyakorló orvosokra illetve az ápolószemélyzetre hárul és ott kell őket tárolni (vagy legalábbis hozzáférhetővé tenni), ahol a beteg kezelése vagy nyomon követése folyik. Az adatokhoz történő hozzáférést ugyanakkor szigorú szabályokkal kell korlátozni.
6	0.1	1	A kiszemelt ellenfél nem más volt, mint Marion Tinsley. Őt a legnagyobb dámajátékosként könyvel el a történelem, aki valaha is élt. Közel ötven évig volt világbajnok, saját bevallása szerint már unalmasnak tartotta az emberekkel való párbajozást, ez már nem jelentett számára kihívást [4].
25	0.962963	0	Hogy kicsit egyszerűsítsük a problémát, vegyünk egy teret, amelyben a robotnak négy lehetséges állapota (helyzete) van: X = {x[1], x[2], x[3], x[4]}. Kezdetben egyenletes eloszlással választunk N ≥ 1 mintát a megadott állapotok közül. Mint általában, itt is tökéletesen elfogadható, ha egymás után akár több is generálódik bármelyik X állapotból. Legyen Z egy bináris szenzorváltozó, az alábbi feltételes valószínűségekkel:
7	0.48	0	Az IK-EL-Vonzat? (TB, q) előrefelé láncolási algoritmus meghatározza, hogy egy q ítéletkalkulus szimbólum – a lekérdezés – vonzata-e egy Horn-klózokat tartalmazó tudásbázisnak. Az algoritmus a tudásbázisban található ismert tényekből (pozitív literálok) indul ki. Ha egy implikáció minden premisszája ismert, akkor a konklúzióját hozzáadjuk az ismert tények halmazához. Például, ha ismert a P[1,1], és a Szellő és a (P[1,1] ∧ Szellő) ⇒ S[1,1] a tudásbázisban van, akkor S[1,1]-t hozzáadhatjuk ehhez. Ez a folyamat folytatódik, amíg vagy a q lekérdezést hozzá tudjuk adni az ismert tények halmazához, vagy már nem tudunk további következtetést végezni. A részletes algoritmust a  ábra mutatja, a legfontosabb tulajdonság, amire emlékeznünk kell, hogy ez lineáris időben fut.
11	0.192308	0	Vegyük a kerékcsere problémáját. Pontosabban a célunk az, hogy egy jó pótkerék legyen felszerelve az autó tengelyére, ahol a kiinduló állapotban egy lapos kerék van felszerelve, míg a jó pótkerék a csomagtartóban található. Az egyszerűség kedvéért a mi feladatunk elég absztrakt, azaz nincsenek beragadt csavarok vagy egyéb más nehézségek. Csak négy cselekvés van: a pótkerék kivétele a csomagtartóból, a lapos kerék eltávolítása a tengelyről, a pótkerék felszerelése és az autó magára hagyása reggelig. Feltételezzük, hogy az autó egy igen rossz környéken áll, ahol az autó magára hagyása azt eredményezi, hogy reggelre eltűnnek a kerekek.
8	0.967742	0	Tekintsünk egy szimbólumszótárat, amely tartalmaz egy c konstansszimbólumot, p[k] predikátumszimbólumokat minden egyes k értékre és függvényszimbólumokat minden egyes k értékhez, ahol 1 ≤ k ≤ A. A tárgyterület méretét rögzítsük D-ben. Bármely adott interpretációmodell-kombinációban minden egyes predikátum vagy függvény hozzá van rendelve az ugyanazon értékhez tartozó relációhoz vagy függvényhez. Feltételezhetjük, hogy a modellben szereplő függvények lehetővé teszik, hogy néhány bemenetnek ne legyen értéke a függvény számára (vagyis, hogy az érték a láthatatlan objektum). Vezessen le egy formulát a lehetséges interpretációmodell-kombinációk számának megállapítására a D elemet tartalmazó tárgyterületben. Ne riassza meg, ha el kell távolítania a felesleges kombinációkat.
22	0.740741	0	Egy szöveg (discourse) a nyelv tetszőleges karaktersorozata – tipikusan olyan, amelyik hosszabb, mint egy mondat. A jegyzetek, a regények, az időjárás-jelentések és a párbeszédek mind szövegek. Eddig teljesen figyelmen kívül hagytuk a szövegek problémáit, a nyelv önálló mondatokra bontását helyeztük előtérbe, melyeket in vitro tanulmányozhattunk. Ez a fejezet a mondatokat természetes környezetükben tanulmányozza. Két részproblémát fogunk vizsgálni: az utalásfeloldást és a koherenciát.
13	0.818182	0	A fenti meglátás használatához a lekérdezést olyan alakra hozzuk, amelyben a szellő az összes többi változó feltétele mellett van megadva, majd az egészet egyszerűsítjük a feltételes függetlenség alapján:
15	0.111111	0	Gondoljuk meg például egy X–Y síkon véletlenszerűen sétáló robot követésének a problémáját. Egy javaslat az állapotváltozók egy elégséges halmazára ekkor a pozíció és a sebesség lehet: Newton törvényeit felhasználva kiszámolható az új pozíció, és a sebesség megjósolhatatlanul változik. Ha azonban a robot akkumulátorról üzemel, akkor az elem lemerülésének tipikusan van egy szisztematikus hatása a sebesség megváltozására. Mivel ez viszont függ attól, hogy mennyi energia használódott el az összes korábbi manőverben, a Markov-tulajdonság sérül. A Markov-tulajdonságot helyreállíthatjuk egy Akkumulátor[t] feltöltöttségi szintnek mint az X[t]-t alkotó állapotváltozók egyikének a felvételével. Ez segít a robot mozgásának a jóslásában, de ugyanakkor megköveteli az Akkumulátor[t] jóslását az Akkumulátor[t][–1]-ből és a sebességből. Bizonyos esetekben ez megbízhatóan megtehető; a pontosság azonban javulna egy, az akkumulátor feltöltöttségét mérő új érzékelő felvételével.
21	0.9375	0	 Megjegyzés Terjessze ki a standard játékkörnyezetet ( fejezet) úgy, hogy tartalmazzon jutalomjelet is! Helyezzen két ágenst ebbe a környezetbe (természetesen osztozhatnak az ágensprogramon), és játszassa egymás ellen őket! Alkalmazza az általánosított IK frissítési szabályt (21.11 egyenlet) a kiértékelő függvény frissítésére. Lehet, hogy érdemes egy egyszerű súlyozott lineáris kiértékelő függvénnyel kezdeni, és egy egyszerű játékkal, mint a 3 × 3-as amőba (tic-tac-toe).
7	0.08	0	Nézzünk meg egy tudásbázisú wumpus ágenst, hogy hogyan fedezi fel a  ábrán látható környezetet. Az ágens kezdeti tudásbázisa a környezetet leíró, az előzőkben felsorolt szabályokat tartalmazza. Nevezetesen tudja, hogy az [1, 1 ]-ben tartózkodik és hogy az [1, 1] biztonságos hely. Látni fogjuk, hogy hogyan bővül az ágens tudása, amint új érzékelések érkeznek és cselekvések történnek.
2	0.526316	1	Az ágens programja számos ponton továbbfejleszthető illetve szuboptimális, azonban célja nem is versenyképes résztvevőként szerepelni a játékban. Szerepe elsősorban egy egyszerű működőképes ágens példájául szolgálni, illetve a hallgatói fejlesztések kiindulási alapját nyújtani. Így tehát első kísérletezésként javasolt a simple ágenssel kód tekintetében teljesen azonos neptun ágenst szerkeszteni és módosítani, majd az eredményt a módosítás nélküli simple csapattal összevetni!
9	0.931034	0	Guard és társai (Guard és társai, 1969) egy korai Sam tételbizonyítót írnak le, amely segített megoldani egy megoldatlan problémát a rácselméletben. Wos és Winkler (Wos és Winkler, 1983) áttekintést nyújtanak az Aura tételbizonyító eredményeiről, amelyeket a matematika és a logika különböző területein fellelhető problémák megoldása terén ért el. McCune (McCune, 1992) ezt folytatja, amikor felhasználja ezeket az eredményeket az Aura utódjának, az Otter-nek alkalmazásában megoldatlan problémák megoldására. Weidenbach (Weidenbach, 2001) bemutatja a Spass-t, az egyik legerőteljesebb jelenlegi tételbizonyítót. A Computational Logic (Boyer és Moore, 1979) című könyv az alapreferencia a Boyer–Moore-tételbizonyítókhoz. Stickel (Stickel, 1988) leírja a Prolog Technológiai Tételbizonyítót (PTTP), amely egyesíti a Prolog fordítás előnyeit a modell elimináció teljességével (Loveland, 1968). A SETHEO (Letz és társai, 1992) egy másik széles körben használt tételbizonyító, amely hasonló megközelítésen alapul; másodpercenként több millió következtetést tud végrehajtani egy 2000-es munkaállomáson. A LeanTap (Beckert és Posegga, 1995) hatékony tételbizonyító, amelyet mindössze 25 Prolog sorral valósítottak meg.
5	0.818182	0	A kényszerkielégítési problémák egyes osztályai gyakran felmerültek a számítógép-tudomány történetében. Az egyik legkorábbi nagy hatású példa a Sketchpad rendszer volt (Sutherland, 1963), amely geometriai kényszereket oldott meg diagramokban, és a modern rajzolóprogramok és CAD-programok előfutárának tekinthető. A kényszerkielégítési problémák általános problémaosztályként történő azonosítása Ugo Montanari (Montanari, 1974) nevéhez fűződik. A magasabb rendű kényszerkielégítési problémák visszavezetése segédváltozók felvételével tisztán bináris esetre (lásd  feladat) eredetileg a 19. századi logikushoz, Charles Sanders Peirce-hez fűződik. A CSP-irodalomba Dechter (Dechter, 1990b) vezette be, majd Bacchus és Van Beek (Bacchus és van Beek, 1998) dolgozták ki. A megoldásokra vonatkozó preferenciákkal kiegészített kényszerkielégítési problémákat széles körben tanulmányozza az optimalizáció irodalma; lásd (Bistarelli és társai, 1997)-et a CSP-keretrendszer preferenciákat is megengedő általánosításáról. A vödör-eliminációs algoritmus (Dechter, 1999) szintén alkalmazható az optimalizációs problémákra.
14	0.913043	0	A fuzzy halmazokat Lotfi Zadeh dolgozta ki válaszul arra a nehézségre (Zadeh, 1965), hogy egzakt bemeneti értékeket adjunk az intelligens rendszerek számára. Zimmermann leírása (Zimmermann, 2001) részletes bevezetést nyújt a fuzzy halmazok elméletébe; a (Zimmermann, 1999) pedig fuzzy alkalmazásokról szóló cikkek gyűjteménye. Amint korábban említettük, a fuzzy logikát gyakran tekintik a valószínűség-számítás versenytársának, pedig valójában eltérő kérdésekkel foglalkozik. A lehetőségelméletet (possibility theory) (Zadeh, 1978) a bizonytalanság kezelésére vezették be fuzzy rendszerekben, és sok közös vonása van a valószínűség-számítással. Dubois és Prade alapos áttekintést nyújt a lehetőségelmélet és a valószínűség-számítás kapcsolatáról (Dubois és Prade, 1994).
7	0.44	0	A tételt az ellentétjének demonstrálásával bizonyítjuk: ha az RC(S) lezártja nem tartalmaz üres halmazt, akkor S kielégíthető. Valójában egy modellt konstruálunk S-nek a megfelelő P[1], …, P[k] igazság értékekkel. A konstrukciós eljárás a következő:
2	0.210526	1	A kognitív képességek birtokában levő racionális ágens egyik fő ismérve a tudás. Az ágens által megvalósított tudás komponenseit többféleképpen kategorizálhatjuk. Az egyik legegyszerűbb a BDI modell, melyben az ágens tudása hitre (belief), vágyakra (desire) és szándékokra (intetion) tagolódik [4]. A hit megfelel a világról való beépített tudásnak, és a tárolt modellnek: azért hitnek nevezzük, mert nem lehetünk száz százalékig biztosak, hogy tudásunk megfelel a valóságnak (főleg valós környezetekben). A vágyak a célokkal egyenlők, de vágy lehet egy hasznosság- ill. boldogság-szint elérése, vagy egy teljesítményérték elérése is. A szándékok azok a cselekedetek, melyek kiválasztásra kerültek. Látszik, hogy a felosztás az emberi pszichológiából meríti fogalmait. Egy másik, Wiebe van der Hoek és Michael Wooldridge által javasolt felosztás szerint az ágenshez attitűdöket rendelhetünk, és ezeket három elkülönülő kategóriába sorolhatjuk. Az „információs attitűdök” az ágens a világ információihoz való viszonyát tükrözik, a „pro attitűdök” az ágenst cselekvésre sarkalló viszonyulások, míg a „normatív attitűdök” azokat a korlátokat (és tabukat) tartalmazzák, melyekhez az ágens mindenképp tartani fogja magát [5]. Az ágens teljes tudásában így lehetnek egymásnak ellentmondó részterületek, ezért az ellentmondások feloldása és az attitűdök konszolidálása (vagy éppen helyzetnek megfelelő hierarchiába rendezése) ugyancsak a procedurális racionalitás kérdéskörébe tartozó feladat.
10	0.848485	0	A szabály jelentése, hogy ha a Madár(x) igaz, és ha a Repül(x) a tudásbázissal konzisztens, akkor a Repül(x)-et alapértelmezésben lekövetkeztethetjük. Általánosságban egy alapértelmezett szabály formája a:
5	0.181818	1	Nézzük most a másik, 14-es korlátot. Ez azt állítja, hogy tejet a középső házban isznak. Akárhonnan is nézzük, a középső ház a 3-as sorszámú kellene, hogy legyen (ha sorban növekszik/csökken a házak sorszáma). Tehát az előbbiekhez hasonlóan a 3-as számú házban ivott italt reprezentáló változónak írjuk elő a tejet, mint egyetlen lehetséges értéket.
24	0.541667	0	Ahhoz, hogy az alakot a textúrából kinyerhessük, kétlépcsős eljáráshoz kell folyamodnunk: (a) először mérjük a textúragradienseket; (b) majd becsüljük a mért gradienseket okozni látszó felületalakot, azok dőlését és lejtését. A  ábra mutatja ezen eljárás eredményeit.
6	0.9	0	A mechanikus játékok korai történetére számos csalás rányomta a bélyegét. Ezek közül a legnevezetesebb Kempelen Farkas báró 1769-ben kiállított „Törökje”, egy feltételezett sakkautomata, amely Napóleont is megverte, mielőtt kiderült, hogy a szekrénye valójában egy törpe növésű emberi sakkmestert rejtett (Levitt, 2000). A Török 1769-től 1854-ig játszott. Úgy tűnik, Charles Babbage (aki a Török hatása alatt állt) volt az első, aki 1846-ban számítógépes sakk és dámajáték megvalósíthatóságának első komoly elemzését adta (Morrison és Morrison, 1961). Tervezett egy 3 × 3-as amőbát játszó célgépet is, amit soha sem épített meg. Az első igazi játékgépet 1890 táján egy spanyol mérnök, Leonardo Torres y Quevedo tervezte és építette meg. A „KRK” a sakkvégjátékra specializált gép volt (király és bástya a király ellen) és képes volt bármilyen kiinduló állásból mattot adni.
24	0.666667	0	A felügyelt tanulás vagy a mintaosztályozás természetes keretet biztosít az objektumfelismerés tanulmányozásához. Pozitív („arcok”) és negatív példaként („nem arcok”) adott képek esetében a cél egy olyan függvény megtanulása, amely az új képeket felcímkézi az arc és a nem arc jelölésekkel. A 18. és  fejezet összes technikája lehetséges jelölt a feladatra: többrétegű perceptronokat, döntési fákat, legközelebbi-szomszéd osztályozókat és kernelgépeket alkalmaztak már objektumfelismerési feladatokra. Meg kell azonban jegyeznünk, hogy ezen technikák alkalmazása objektumok felismerésére távolról sem egyértelmű.
6	0.1	1	Példaképpen vegyük a halomjátékot, amelynek önmagában sok értelme nincs, de a Nim játékot például halmok összegeként értelmezhetjük, hogy lássuk a kapcsolatot a nimber és a halomjáték között. A halomjáték megegyezik az egy halomból álló Nimmel, vagyis az első játékos nyer, leszámítva ha üres halommal indulunk, ekkor a második játékos a nyerő.
1	0.172414	1	Az empirikusan felfogott számítógépes tudományoknak speciális vonása, hogy a vizsgált termékek – az alkalmazott számítógépes rendszerek – nem égből pottyant akármik, hanem általunk megtervezett, átlátott rendszerek. Rendszertechnikai szaknyelven nem fekete, hanem erősen fehér dobozok. Ez tehermentesít minket, hogy az empirikus értékeléseknél igénybe vegyük a statisztikát és a nagy számok törvényét. Elegendő egyetlenegy megtervezett rendszer tanúsága adott körülmények között, hogy a tervezési elképzeléseink sikerességéről helyes képet megalkothassunk.
7	0	0	Az utolsó érvünk a tudásbázisú ágensek tanulmányozása mellett e rendszerek rugalmassága. Képesek explicit célok formájában megadott új feladatokat elfogadni, egy új környezetről kapott vagy megtanult új ismeretek révén kompetenssé válni, és frissítve a tudásuk releváns részét képesek alkalmazkodni a környezet változásához.
14	0.652174	0	Megengedünk emellett komplex függvényeket (complex functions) is, amelyek objektumokat képeznek le más objektumokra. Például a Konzulens(János) lehet KovácsProf. Minden komplex függvénynek van egy megadott értéktartománya és értékkészlete, amik osztályok. Például a Konzulens értéktartománya a Diák és értékkészlete a Professzor. A függvények csak helyes osztályokra alkalmazhatók; például a KovácsProf Konzulens-e nem definiált. Komplex függvények egymásba ágyazhatók: a TanszékVezető(Konzulens(János)) lehet MórProf. Egyelőre feltesszük, hogy minden komplex függvény értéke ismert az összes konstans szimbólumra. Mivel a TB véges, ez maga után vonja, hogy komplex függvények alkalmazásának minden láncolata elvezet a véges számú objektum egyikéhez.^[153]
6	0.9	1	Az eredeti MINIMAX algoritmusban az a trükk, hogy MIN minimalizálja, MAX maximalizálja ugyanazt a kiértékelő függvényt. Ha a két játékosnak különböző a kiértékelő függvénye, bonyolódik a helyzet, ekkor ugyanis ügyelni kell arra, hogy mindkét játékos a saját kiértékelő függvénye alapján fogja eldönteni, melyik a számára legkedvezőbb következő lépés, és ugyanezt feltételezi a másik játékosról is. Ahhoz, hogy ezt a problémát kezelni tudjuk, minden állapotban nyílván kell tartani a csúcs értékét mind MIN mind pedig MAX kiértékelő függvénye szerint, és attól függően kell kiválasztani, melyik értéket használjuk, hogy melyik játékos lép éppen, de a másik értéket is tovább másoljuk a szülőbe.
5	0.181818	1	Mi a teendő tehát? SA-nak már nincs több választható értéke. Az algoritmus tehát a FOR ciklus végére ér az SA változó kapcsán (a végén természetesen még törli a legutóbbi, SA=BLUE értékadást), és hamis értékkel visszatér az őt meghívó szintre. Ezen a szinten ugyebár a Q változónak kerestünk értéket. Tehát most ott az eddigiek alapján (lásd. 13. lépés) már csak a BLUE érték van hátra (SA=BLUE töröl, és Q=BLUE).
5	0.818182	0	A kényszerkielégítési problémák struktúrájának és nehézségének kapcsolatával foglalkozó kutatást Freuder (Freuder, 1985) indította el, aki megmutatta, hogy az élkonzisztens fák esetében a keresés visszalépések nélkül fut le. Egy hasonló eredmény az aciklikus hipergráfokra való kiterjesztésével együtt jött létre az adatbázisokkal foglalkozó kutatói közösségben (Beeri és társai, 1983). Ezen cikkek publikálása óta komoly haladás történt a kényszergráf struktúrája és a kényszerkielégítési probléma megoldási komplexitásának kapcsolatát illetően. A faszélesség fogalmát a gráfelmélettel foglalkozó Robertson és Seymour (Robertson és Seymour, 1986) vezették be. Freuder munkásságára építve Dechter és Pearl (Dechter és Pearl, 1987, 1989) ugyanezt a fogalmat – amit ők indukált szélességnek (induced width) hívtak – alkalmazták a kényszerkielégítési problémákra és kifejlesztették az  alfejezetben felvázolt fadekompozíciót. Az adatbázis-elméletre és erre az eredményre alapozva Gottlob és társai (Gottlob és társai, 1999a, 1999b) kialakították a kényszerkielégítési probléma hipergráfként történő felfogásán alapuló hiperfaszélesség (hypertree width) fogalmat. Annak megmutatásán túl, hogy minden w szélességű hiperfa-CSP megoldható O(n^w+1logn) időben, azt is bebizonyították, hogy a hiperfaszélesség az összes korábbi „szélesség”-mértéket magában foglalja (abban az értelemben, hogy bizonyos esetekben a hiperfaszélesség korlátozott, bizonyos esetekben pedig nem).
6	0.75	0	A Deep Blue-t Murray Campbell, Feng-Hsiung Hsu és Joseph Hoane fejlesztették ki az IBM-nél (Campbell és társai, 2002), a Campbell és Hsu által korábban a Carnegie Mellon Egyetemen kifejlesztett Deep Thought tervére alapozva. A győzedelmes gép egy párhuzamos számítógép volt 30 IBM RS/6000 processzorral, amelyek a „szoftverkeresést” futtatták, és 480 VLSI sakk-célprocesszorral, amelyek a lépésgenerálást (beleértve a lépések sorba rendezését), a fa utolsó néhány szintjén a „hardverkeresést” és a levélcsomópontok kiértékelését valósították meg. A Deep Blue átlagosan másodpercenként 126 millió, csúcssebességnél 330 millió csomópontot vizsgált meg. Lépésenként 30 milliárd állást generált, rutinszerűen 14-es mélységet elérve. A gép szíve a standard alfa-béta keresés volt, transzpozíciós táblával, a siker kulcsa azonban úgy tűnik, az a képessége, hogy kiterjesztéseket tudott generálni az érdekes kényszerlépés-sorozatok mélységi korlátjain túl. Egyes esetekben a keresés a 40-es mélységet is elérte. A kiértékelő függvény 8000 tulajdonsággal dolgozott, ezekből egyesek a bábuk igen specifikus konfigurációit is leírták. A rendszer felhasználta a 4000 állást tartalmazó „megnyitások könyvét” és a 700 000 nagymesteri játszmaleírást tartalmazó adatbázist, ahonnan konszenzusos javaslatokat lehetett generálni. A rendszer a megoldott végjáték-pozíciók nagy adatbázisával is rendelkezett, amely minden ötbábus és számos hatfigurás állást tartalmazott. Ez az adatbázis a keresési mélység lényeges kiterjesztését jelentette, lehetővé téve Deep Blue számára egyes esetekben a tökéletes játékot annak ellenére, hogy sok lépésre volt még a matthelyzettől.
13	0.818182	0	Most már csak négy tag van a C[2,2] és C[3,1] peremváltozók feletti összegzésben. A függetlenség és feltételes függetlenség miatt egyáltalán nem szükséges figyelembe vennünk a többi négyzetet. Vegyük észre, hogy a P(s∣ismert, C[1,3], perem) kifejezés értéke 1, ha a határ megegyezik a szellő érzékelésekkel és minden más esetben 0. Azaz, C[1,3]minden értékére azon határváltozók logikai modelljei fölött végezzük az összegzést, amelyek az megfelelnek az ismert tényeknek. (Érdemes ezt összehasonlítani a  ábra modelljei szerinti számítással.) A modelleket és a hozzájuk kapcsolódó C(perem) a priori valószínűségeket a  ábra mutatja. Ezzel
1	0.172414	0	Egy ágens (agent) nem más, mint valami, ami cselekszik (az ágens szó forrása a latin agere – cselekedni). Számítógépes ágensektől azonban elvárjuk, hogy legyenek más jellemzői is, amelyekben különböznek a „mezei” programoktól. Ilyen jellemzők például az autonóm vezérlés felügyelte cselekvés, a környezet észlelése, a hosszabb idejű tartós létezés, a változásokhoz történő adaptáció és mások céljainak az átvétele. Egy racionális ágens (rational agent) a legjobb kimenetel érdekében vagy – bizonytalanság jelenlétében – a legjobb várható kimenetel érdekében cselekszik.
4	0.166667	0	Az IMA^*-nak és az RLEK-nek az a baja, hogy túl kevés memóriát használ. Az egyes iterációk között az IMA^* egyetlen számot, az aktuális f-költség korlátot tárolja el. Az RLEK több információt tárol el a memóriában, azonban csak O(bd) memóriát használ. Még ha több memória is állna a rendelkezésére, az RLEK-nek nincs módja ezt kihasználni.
3	0.083333	1	Mivel a négy kapcsoló közül csak kettőt tudunk érzékelni, ill. állítani, valamint mivel az oszlop véletlen pörgése miatt a kapcsolók identitása nem memorizálható a következtetés számára, a probléma állapotterét „normális” egyedi állapototkból és operátorokból nem építhetjük fel. Egyetlen remény a hiedelmi állapottér használata, abban bízva, hogy benne úgy sikerül a feladatot megfogalmazni, hogy kimutatható módon létezik egy megoldási pálya a kezdeti és a cél állapot között.
1	0.137931	1	Egy probléma csoport amiben a program sikeres, amikor valamilyen tulajdonság értéke különböző a két oldalon, mint BP 3 esetén, amit a leggyorsabban tud megoldani. Itt a tulajdonság a kitöltöttség, ami igaz vagy hamis lehet, ezért az egyezés nagyon gyorsan kiderül, és nincs szükség a második fázisba lépésre. Ugyanígy működik a folytonos értéket felvevő tulajdonságokra is, például BP 2-nél. Az első szinten statisztika készül a területekről, és mivel ez jelentősen eltér, a programnak az lesz az ötlete, hogy a megoldás a területekhez kapcsolódik. Itt belép a második fázisba, minden képre kiszámolja az objektum pontos területét, és ezzel megtalálja a megoldást.
5	0.818182	1	* Az angol a vörös házban lakik. * A spanyolnak kutyája van. * A norvég balról az első házban lakik. * A Kools cigarettát a sárga házban szívják. * A Chesterfieldset szívó ember a rókás ház mellett lakik. * A norvég a kék ház mellett lakik. * A Winstont szívó ember kígyókat tart. * A Lucky Strike-ot szívó narancslevet iszik. * Az ukrán teát iszik. * A japán Parliamentset szív. * A Koolsot abban a házban szívják, amely mellett lovat tartanak. * Kávét a zöld házban isznak. * A zöld ház közvetlenül jobbra (Ön felől nézve) van az elefántcsontszínű háztól. * Tejet a középső házban isznak.
3	0.291667	0	A  ábrán láthatjuk az Arad és Bukarest közötti útkereső probléma keresési fájának egy kezdeti kifejtését. A keresési fa gyökere az a keresési csomópont (search node), amely a Benn(Arad) kezdeti állapotnak felel meg. Az első lépés annak ellenőrzése, hogy vajon ez célállapot-e. Nyilvánvalóan nem az, de fontos ellenőrizni, hogy meg tudjuk oldani az olyan beugrató problémákat is, mint amilyen például az „Aradról indulva jussunk el Aradra”. Mivel ez nem célállapot, egyéb állapotokat is meg kell vizsgálnunk. Ezt az aktuális állapot kifejtésével (expanding) tesszük, azaz az állapotátmenet-függvénynek az aktuális állapotra történő alkalmazásával, amivel az állapotok egy új halmazát generáljuk (generating). Ebben az esetben három új állapotot kapunk: Benn(Nagyszeben), Benn(Temesvár) és Benn(Nagyzerénd). Most el kell döntenünk, hogy a három lehetőség közül melyik utat kövessük.
24	0.833333	1	A működés teljesen általános, tetszőleges alakzat keresésére alkalmas. Épp ezért kulcspontok, sarokpontok keresésére is használják. Az általánosság hátulütője, hogy nem használ fel problémaspecifikus tudást, így sok esetben a teljesítménye korlátozott.
10	0.060606	1	Ez az S nyelvre épül, mely az ALC-ből van származtatva, és megengedi már a tranzitív szerepek használatát. (Ha valaki(A) idősebb egy embernél(B), és ez az ember idősebb egy másik embernél(C), akkor A ember idősebb C embernél is). Ezt a nyelvet bővítjük ki a H nyelvvel, ami bevezeti a szerephierarchiát.
3	0.916667	1	ii) Amennyiben a világ teljesen megfigyelhető, nincs semmiféle probléma. Ekkor ugyanis az ágens pontosan fogja tudni, hogy van-e kosz az adott szobában (vagy a másikban), és így nem fog 'véletlenül' koszt csinálni takarítás helyett. Így könnyen belátható, hogy a probléma megoldható legfeljebb három lépésben (ha van a szobában kosz, felszívja; átmegy a másik szobába; ha van a szobában kosz, felszívja).
22	0.481481	0	Ezután szükségünk van egy szabályra, amely szerint „egy obj szemantikájú NP, melyet egy rel szemantikájú VP követ, együtt egy olyan mondatot eredményez, amelynek szemantikája a rel alkalmazása az obj-ra:
2	0.894737	1	Ennél jobb módszer lehet, ha addig várunk az egyes már meglátogatott mezők újbóli ellenőrzésével, amíg nagyon valószínűvé nem válik, hogy azok piszkossá váltak. Minden időegységben egymástól függetlenül 10% eséllyel lesz piszkos egy tiszta mező. Kicsit átfogalmazva, 90% az esélye, hogy tiszta marad. Két időegység alatt annak az esélye, hogy egy adott mező tiszta marad, már csak 81% (0.9*0.9), azaz annak az esélye, hogy egyik időegység alatt sem koszolódott be a mező). Formálisan annak esélye, hogy n időegység után is tiszta maradjon a padló,  ^n, azaz ha azt akarjuk megtudni, hogy mikor lesz ez a valószínűség kisebb egy bizonyos rögzített m-nél, akkor az n = log[ ]m egyenletet kell megoldanunk. Tehát ha például m-et 0.05-nek (5%) választjuk, akkor n értéke 28.433 körül lesz, így ha ennél több időegység telt el a legutóbbi ellenőrzés óta, akkor kevesebb, mint 5% az esélye, hogy az adott mező még mindig tiszta.
2	0.526316	1	A következő blokk arról gondoskodik, ha egy ágens valamilyen okból nem képes az általa választott irányba haladni (az ilyen külső okot a Jason a step cselekvés sikertelenségével jelzi, ami egyben a !move terv meghiúsulását is jelenti, ami a szintaxis alapján a -!move(_)triggert jelenti). Ilyenkor ha volt kinézett ennivaló cél, akkor azt az ágens elveti és véletlen irányba fordul.
7	0.96	0	Bizonyítsa be a következő állításokat: a. α akkor és csakis akkor érvényes, ha Igaz ⊨ α. b. Bármilyen α-ra Hamis ⊨ α. c. α ⊨ β akkor és csakis akkor, ha az (α ⇒ β) mondat érvényes. d. α ≡ β akkor és csakis akkor, ha az (α ⇔ β) mondat érvényes. e. α ⊨ β akkor és csakis akkor, ha az (α ∧ ¬β) mondat kielégíthetetlen.
14	0.73913	1	Tanítás során tanuló adatpárokat használunk. Az adatpár szóban a pár, arra utal, hogy mind a bemeneti, mind a kimeneti változók értékei közösen alkotnak egy darab összefüggést. A lent látható táblázat, az 1998. június. 1.-ei mért értékeket mutatja a példában szereplő folyóra. A négy változó értékei közösen alkotják az adatpárt, hiszen a méréseket egy időpontban végezték.
4	0.916667	1	A 4.5 részből megtudtuk, hogy a TRTA* algoritmus időkomplexitása legfeljebb négyzetes, azaz az algoritmusnak O(n^2) időre van szüksége a teljes környezet feltárásához, ha az n állapotból áll. A tárkomplexitása pedig O(n), ha minden állapotot feltár, és megjegyez. Általánosságban az algoritmus időkomplexitása a tárkomplexitás négyzetével arányos, azaz ha m csúcsot kell feltárnia a célállapot megtalálásához, akkor ehhez O(m^2) időre lesz szüksége.
2	0.526316	1	A szimulátor a hatékony megjelenítéshez hardveres OpenGL támogatást vesz igénybe. Ennek következtében szükség van a JOGL könyvtár telepítésére. A JOGL könyvtárhoz szükséges fájlok az AgentGame install könyvtárának jogl/win32 almappájában vannak.
23	0.555556	0	A szabályokat gondosan kell megalkotni, majd ellenőrizni kell a felidézést és a pontosságot. Az egyik kereskedelmi rendszer az „Intel Chairman Andy Grove”^[251] szöveget személy helyett helyként ismerte fel, az egyik szabály miatt:
23	0.944444	0	 Megjegyzés Ez a feladat a spam-felismeréssel foglalkozik. A spam definíciója „kéretlen tömeges reklám e-mail”. A spam kezelése bosszantó elfoglaltság számos e-mailező számára, tehát megbízható eltávolításuk áldás lenne. Hozzon létre spam és spam-mentes e-mailekből álló korpuszt. Elemezze mindkét korpuszt, és állapítsa meg, hogy mely jellemzők lennének alkalmasok az osztályozásra (unigram, brigram, üzenethossz, feladó, érkezési idő). Ezután tanítson egy osztályozó algoritmust (döntési fa, naiv Bayes vagy más, Ön által választott algoritmus) egy tanító halmazon, majd értékelje pontosságát egy teszthalmazon.
13	0.590909	0	Az egyik általános feladat a változók egy részhalmaza vagy egyetlen változó fölötti valószínűségi eloszlás kifejezése. Például az első sor bejegyzéseinek összege a lyuk feltétel nélküli vagy peremeloszlását^[140] (marginal probability) adja:
1	0.137931	1	Előfordulhat, hogy egy leírásból nem tudjuk közvetlenül kiolvasni a megoldást, pedig valamilyen formában már benne van. Ekkor alkalmazható a meta-leírás módszer, vagyis a leírásról készült leírás, ahol magasabb absztrakciós szintről szemléljük a problémát, hátha így észreveszünk valami újat. Egy meta-leírás sémája például a következő lehet: * felhasznált fogalmak * ismétlődések a leírásban
3	0.083333	1	A döntések (keresési irányok) megválasztása több módon alakulhat. Néha fontos tudni visszakerülni egy korábbi döntési helyzetbe (ezt visszalépésnek nevezzük), hogy az utólag rendelkezésre álló információ birtokában jobb döntést hozhassunk. Néha a visszalépés túlságosan költséges, túl sok időt, energiát, anyagiakat igényel és célszerűbbnek tűnik a döntésekben csakis előre rohanni. A tér jellege nagyban befolyásolja, hogy pl. a visszalépés egyáltalán lehetséges, vagy felvállalható-e.
25	0.074074	1	A robotoknak működésük egyes fázisairól és a kiszolgált technológiai folyamatról különböző információkkal kell rendelkezniük. Ezeket az információkat a szenzorok szolgáltatják s a robot irányítórendszere értelmezi őket.
23	0.333333	1	A diagnosztikai tesztek eredményeinek szemléltetése történhet gyakorisági hisztogramokon. Az alábbi ábrákon gyakorisági hisztogramokon láthatóak a vér szérum kataláz enzim eredmények 229 akut szívinfarktusban beteg ( ábra) és 111 egészséges ( ábra) egyén csoportjaiban. A két csoport eredményeit jellemző Gauss-görbe átfedést mutat. A betegek csoportjában 80-90 U/ml értéknél van csúcs, az egészségeseknél a leggyakoribb érték 50-60 U/ml.  ábra - Vérszérum kataláz enzim értékek a betegek csoportjában Vérszérum kataláz enzim értékek a betegek csoportjában  ábra - Vérszérum kataláz enzim értékek az egészségesek csoportjában Vérszérum kataláz enzim értékek az egészségesek csoportjában
13	0.909091	0	Az együttes eloszlások naiv bayesi megközelítését az alakfelismeréssel foglalkozó irodalom alaposan tanulmányozta az 1950-es évektől kezdve (Duda és Hart, 1973). A megközelítést Maron munkájának megjelenése (Maron, 1961) óta gyakran használták – sokszor akaratlanul – az adatbányászat területén is. A módszer valószínűségi megalapozását, amelyet részletesen a  feladat ír le, Robertson és Sparck Jones tisztázta (Robertson és Jones, 1976). A naiv Bayes-következtetésnek a még olyan tartományokban is jelentkező meglepő sikerére, ahol a függetlenségi feltételezés egyértelműen sérül, Domingos és Pazzani ad magyarázatot (Domingos és Pazzani, 1977).
7	0.92	1	b) Mutassa meg, minden klóz (függetlenül a pozitív literálok számától) felírható (P[1] ^ ... ^ P[m]) → (Q[1] V ... V Q[n]) alakban, ahol P-k és Q-k ítéletkalkulus szimbólumok. Az ilyen mondatokat tartalmazó tudásbázist implikatív normál formájúnak vagy Kowalski formájúnak nevezzük.
1	0.275862	0	A filozófusok számba vették az MI fontosabb ötleteit, de ahhoz, hogy a formális tudományra rátérhessünk, szükséges volt legalább három alapvető területnek – a logikának, a számítástechnikának és a valószínűségnek – bizonyos szintű matematikai formalizálása.
4	0.708333	0	A zsákutcák a robotfeltárás igazi nehézségei – lépcsőházak, felhajtók, szakadékok és a természetes terep minden fajtája irreverzíbilis cselekvésekhez vezethetnek. Hogy előrehaladhassunk, egyszerűen feltételezzük, hogy az állapottér biztonságosan feltárható (safely explorable) – bizonyos célállapotok az összes elérhető állapotból elérhetők. A visszafordítható cselekvéseket tartalmazó állapottereket, mint amilyenek a labirintusok és a kirakójátékok, irányítatlan gráfoknak lehet tekinteni, és nyilván biztonságosan feltárhatók.
13	0.272727	1	Tegyük fel, hogy hatoldalú dobókockával végzünk n db véletlen kísérletet, azaz n-szer dobunk. Egy szabályos –nem cinkelt– kocka esetén mind a hat lehetséges érték ^1/[6] valószínűséggel jöhet ki végeredményként. Azonban ha megfestjük a kocka oldalait – a párosokat pirosra, a páratlanokat kékre – és a dobás után először a végeredmény színét ellenőrizzük, akkor ezen plusz információ birtokában megváltozik az egyes értékek valószínűsége. Például feltéve azt, hogy piros színű az oldal a dobás után, az összes páros szám ^1/[3]-ad valószínűségű lesz, míg a páratlanoké nulla. Az n hosszú kísérlet során megállapíthatjuk, hogy mekkora az egyes értékek feltételes relatív gyakorisága, ahonnan n→ ∞  esetén kapjuk a feltételes valószínűség fentebb ismertetett definícióját.
10	0.939394	0	A szubsztanciák ontológiai státusának kérdése hosszú történet. Platón szerint a szubsztanciák a fizikai objektumoktól teljesen eltérő absztrakt entitások. A Vaj[3] ∈ Vaj helyett ő inkább BólVan(Vaj[3], Vaj)-at mondana. Ez elvezet a szubsztanciák egy olyan hierarchiájához, ahol például SózatlanVaj a Vaj-nál specifikusabb szubsztancia. A jelen fejezetben elfogadott álláspontot, miszerint a szubsztanciák objektumok kategóriái, Richard Montague vette védelmébe (Montague, 1973). Ezt az álláspontot a CYC projektben is elfogadták. Ezzel szemben egy komoly, ám nem kivédhetetlen támadást intézett Copeland (Copeland, 1993). A fejezetben említett alternatív megközelítést, ahol a vaj egy egyedi objektum, ami az univerzum összes vajszerű objektumából áll, eredetileg Les´niewski lengyel logikus javasolta (Les´niewski, 1916). Mereológiája (mereology) (a név a „rész” görög nevéből származik) a rész-egész relációt matematikai halmazelmélet helyettesítésére használja a célból, hogy az olyan absztrakt entitásokat, mint a halmazok, eltüntesse. A mereológia olvashatóbb változatát Goodman és Leonard adták (Leonard és Goodman, 1940). Goodman The Structure of Appearance c. művében ezeket az ötleteket különböző problémák megoldására alkalmazza a tudásreprezentációk területén (Goodman, 1977). Bár a mereologikus megközelítés néhány aspektusa nehézkes – például a rész-egész reláción alapuló külön öröklődési mechanizmusra van szükség –, a megközelítést Quine is támogatja (Quine, 1960). A tudásreprezentációban való használatának kimerítő elemzését Harry Bunt adta meg (Bunt, 1985).
17	0.866667	0	John Nash, 1950-ben, 21 évesen jelentette meg elgondolásait az általános játékbeli egyensúlyi helyzetekkel kapcsolatban. Az egyensúlyi megoldás általa megadott definíciója, bár Cournot munkáján alapult (Cournot, 1838), úgy vált ismertté, mint Nash-egyensúly. Az 1959-től fellépő skizofréniája miatti hosszú szünet után Nash 1994-ben közgazdasági Nobel-díjat kapott (megosztva Reinhart Seltennel és Harsányi Jánossal).
6	0.1	1	A 90-es évek elejétől, napjainkig az egyik legsikeresebb sakkprogram a Fritz. Legnagyobb eredménye az 1995-ös Gépi Sakk Világbajnoki cím megszerzése Hong-Kongban, ahol nem kis meglepetéssel megverte a konkurens Deep Blue programot. [3]
1	0.413793	1	Ha egy neuronhálózat számításához nem akarjuk - és tényleg nem akarjuk - figyelembe venni a szinaptikus kölcsönhatás mögötti neurokémiai folyamatok részleteit, úgy fenomenologikus formulát használunk. A legegyszerűbb ilyen függvény (alfa-függvényként hivatkoznak rá):
16	0.434783	0	Tételezzük fel, hogy n attribútumunk van, ahol mindegyiknek d különböző értéke lehet. A teljes U(x[1], …, x[n]) hasznosságfüggvény megadásához legrosszabb esetben d^n érték szükséges. Ez a legrosszabb eset abban a helyzetben áll fent, amikor az ágens preferenciáiban nincs semmilyen szabályszerűség. A többattribútumos hasznosságelmélet azon a feltételezésen alapul, hogy a legtöbb hasznosságfüggvény sokkal nagyobb strukturáltsággal rendelkezik. Az elfogadott alapvető megközelítés az, hogy a viselkedés preferenciáiban várható szabályszerűségeket azonosítunk, és az úgynevezett reprezentációs tételeket (representation theorems) felhasználva megmutatjuk, hogy az adott preferenciarendszerrel rendelkező ágens leírható a következő hasznosságfüggvénnyel:
8	0.419355	0	Most, hogy definiáltunk egy kifejező logikai nyelvet, itt az ideje, hogy megtanuljuk használni is. A legjobb módja ennek az, ha példákon keresztül tesszük. A logikai szintaxis többféle aspektusának illusztrálására már láttunk néhány egyszerű mondatot; ebben az alfejezetben az egyszerű tárgyterületeknek (domain) több szisztematikus reprezentációját fogjuk bemutatni. A tudásreprezentációban egy tárgyterület a világnak az a része, amelyről valamilyen tudást akarunk kifejezni.
15	0.185185	0	Érdekes meggondolni, hogy mi történik, ahogy egyre távolabbra próbálunk előre jelezni a jövőben. A  (b) feladat megmutatja, hogy az eső előrejelzett eloszlása a 〈0,5, 0,5〉 fix ponthoz konvergál, ami után a továbbiakban állandó marad. Ez az állapotátmenet-modell által meghatározott Markov-folyamat stacionárius eloszlása (stationary distribution) (lásd még 14. szakasz - Következtetés Markov-lánc szimulációval rész). Rengeteg ismeret gyűlt fel az ilyen eloszlások tulajdonságairól és a keverési időről (mixing time) – ami nagyjából a fix pont eléréséig eltelt idő. Gyakorlati szempontból ez bukásra ítél minden olyan kísérletet, ami a keverési idő kis hányadánál nagyobb számú lépés múlva kísérli meg az aktuális állapot előrejelzését. Minél bizonytalanabb az állapotátmenet-modell, annál rövidebb a keverési idő, és a jövő annál homályosabb.
5	0.181818	1	Ezzel gyakorlatilag a következő behelyettesítéshez jutottunk: {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=BLUE, V=GREEN, T=RED}. Mivel ez a behelyettesítés már minden változóhoz rendel egy-egy értéket, és egyik korláttal sincs ellentmondásban, ezért megoldásnak tekintjük.
17	0.2	0	Ebben az alfejezetben az optimális eljárásmód kiszámítására mutatunk be egy algoritmust, az úgynevezett értékiterációt (value iteration). Az alapötlet az, hogy kiszámítjuk minden egyes állapot hasznosságát, majd az állapothasznosságokat felhasználjuk az egyes állapotoknál az optimális cselekvés megválasztásához.
3	0.416667	0	A szélességi keresés elemzéséhez az előbbi részben tárgyalt négy jellemzőt fogjuk használni. Könnyű belátni, hogy ez a keresés teljes. Ha a legsekélyebb célcsomópont valamilyen véges d mélységben fekszik, a szélességi keresés eljut hozzá az összes nála sekélyebben fekvő csomópontot kifejtve (feltéve persze, hogy a b elágazási tényező véges). A legsekélyebb célcsomópont nem szükségképpen optimális. Pontosabban a szélességi keresés optimális, ha az útköltség a csomópont mélységének nem csökkenő függvénye (például ha minden cselekvésnek ugyanannyi a költsége).
4	0.916667	1	b) Tervezzen meg a TSP megoldására egy genetikus algoritmust. Az eredményeket más megközelítésekkel hasonlítsa össze. Esetleg szüksége lehet a (Larranaga és társai, 1999) cikk egyes reprezentációs javaslataira.
16	0.565217	0	Ez a valószínűségi hálók következtető algoritmusának egy nyilvánvaló kiterjesztése, és közvetlenül beilleszthető az ágens  ábrán megadott tervezésébe. A  fejezetben látni fogjuk, hogy több egymást követő cselekvés lehetősége a problémát sokkal érdekesebbé teszi.
15	0.62963	0	A  alfejezetre visszatekintve látjuk, hogy állandó idő- és tárigény elérhető a szűrési frissítésnél, ha a számítások rekurzív módon végezhetők. Lényegében a szűrési frissítés   egyenlete az előző időponthoz tartozó állapotváltozók kiösszegzését (summing out) végzi el, hogy megkapja az új időponthoz tartozó eloszlást. Változók kiösszegzése pedig pontosan az, amit a változóeliminálás (variable elimination) algoritmusa elvégez (lásd  ábra), és megmutatható, hogy a változó eliminálás időrendi változókon futva pontosan a szűrés rekurzív frissítésének   egyenlet szerinti működését utánozza. A módosított algoritmus egyszerre legfeljebb két szeletet tart a memóriában: kezdve a 0. szelettel, hozzáadjuk az 1. szeletet, kiösszegezzük a 0. szeletet, aztán hozzáadjuk a 2. szeletet, aztán kiösszegezzük az 1. szeletet és így tovább. Ezzel a módszerrel elérhető az állandó idő- és tárigény a szűrési frissítésnél. (Ugyanez a teljesítmény elérhető az egyesítési fa algoritmusának megfelelő módosításaival.) A  feladat kéri ennek a ténynek az ellenőrzését az esernyős hálóra.
12	0.571429	0	A terv készen áll a végrehajtásra, de még mielőtt az ágens cselekedhetne, a környezet közbeszól. Egy külső ágens (talán az ágens tanítója vált türelmetlenné) a (d) kockát a (b)-re helyezi, a világ most a  ábra (b) állapotának felel meg. Az ágens ezt érzékeli, észreveszi, hogy a Tiszta(B) és a Rajta(D, G) már nem igaz az aktuális állapotban, és ennek megfelelően módosítja az aktuális állapot modelljét. Az okozati kapcsolatok, amelyek a Mozgat(D, B) cselekvés Tiszta(B) és Rajta(D, G) előfeltételeit adták, már nem helyesek, el kell távolítani őket a tervből. Az új tervet a  ábra mutatja. Minden pillanatban az Indít az aktuális állapotot reprezentálja, így ez az Indít különbözik az előző ábra hasonló állapotától. Vegyük észre, hogy a terv most nem teljes: a Mozgat(D, B) előfeltételei közül kettő nyitott, és a Rajta(D, y) most nem példányosított, mert már nincs okunk feltételezni, hogy a lépés a G-ről indul.
12	0.952381	0	Az előző feladat gyógyszerszedési problémájához adja hozzá a Vizsgál cselekvést, melynek feltételes következménye a TenyészetNövekedés, amennyiben a Fertőzés igaz, és minden esetben van egy érzékelési következménye: Ismert(TenyészetNövekedés). Ábrázolja a feltételes tervet, ami megoldja a problémát és minimalizálja a GyógyszertSzed cselekvés felhasználását.
25	0.777778	0	A háromrétegű architektúra különböző változatait találhatjuk meg a legtöbb mai robot szoftverrendszerében. A három rétegre való bontás nem kötelező. Egyes robotszoftverrendszerek további rétegeket is tartalmaznak, például felhasználói interfész réteget – az emberekkel való kommunikálás vezérlésére –, vagy olyan rétegeket, amelyek a cselekvésnek a többi, ugyanabban a környezetben tevékenykedő robottal való összehangolásáért felelősek.
21	0.1875	1	Mivel nem biztos, hogy t időpillanatig egy folyamat t-szer vált állapotot (hiszen üzemeltethetjük a többi folyamatot is), ezért i folyamat állapotát t-ben N[i](t)-vel jelöljük. Egy folyamatot az állapot és jutalom sorozata írja le: {(X[i](N[i](t)),R[i](N[i](t)));N[i](t)=1,2,…,t;t=1,2,…} és i=1,2,…,k. U(t) vektor jelöli, hogy t időpillanatban melyik folyamatot üzemelteti a kontroll folyamat. U(t)=(U[1](t),…,U[k](t)), U(t) minden időpillanatban egyetlen komponensében nem nulla, a komponens indexe, az adott pillanatban üzemeltetett folyamat indexét jelöli.
25	0.148148	1	Egyszerű, soros szerkezetű manipulátorok esetében minden egyes izület két kartagot kapcsol egymáshoz. Ezért minden izületi mozgástengely mentén két közös normálist definiálhatunk, egyet-egyet az egyes kapcsolódó kartagokhoz. Így a kartagok egymáshoz viszonyított elhelyezkedését két további paraméterrel írhatjuk le:
25	0.074074	1	A négylábúak esetében megkülönböztethetünk emlősszerű (mammal) és hüllőszerű (reptile) lépegető robotokat. A hüllő-szerű robotokat bonyolult geometriájú felületeken alkalmazzák. Járásúk statikusan stabil, vagyis bármikor megállíthatók anélkül, hogy egyensúlyukat elveszítenék. Mozgásuk emiatt lassabb, a teherbírásuk azonban nagy, viszonylag kisebb energiafogyasztás mellett. Az emlős-szerű négylábúak általában gyors mozgásúak, nagyobbakat és gyakrabban lépnek.  ábra - A hüllőszerű TITAN-VIII robot (Hirose) A hüllőszerű TITAN-VIII robot (Hirose)  ábra - Az emlősszerű EXPLORATORES II. (Vámossy) Az emlősszerű EXPLORATORES II. (Vámossy)
16	0.043478	0	A kortárs tudományos szövegek inkább hasznosságról beszélnek, mint jóról és gonoszról, de az elvek ugyanazok. Az ágens preferenciáit a világ állapotai között egy hasznosságfüggvény (utility function) adja meg, ami az egyes állapotok kívánatosságának kifejezésére minden állapothoz egyetlen számot rendel. A hasznosságokat a cselekedetek következményeinek a valószínűségével kombinálva kapjuk az egyes cselekedetekhez tartozó várható hasznosságot.
20	0.321429	0	A nem ellenőrzött osztályozás az adatokkal kezdődik. A  (a) ábra 500 adatpontot ábrázol, mindegyik két folytonos attribútum értékét adja meg. Az adatpontok megfelelhetnek pl. csillagoknak, a két attribútum pedig pl. a spektrumvonalak erőssége két adott frekvencián. A következő lépés, hogy meg kell értenünk, milyen valószínűségi eloszlás generálhatta az adatokat. Az osztályozás azt feltételezi, hogy az adatok a P kevert eloszlásból (mixture distribution) származnak. Egy ilyen eloszlás k komponensből (component) áll, amelyek mindegyike önmagában egy-egy eloszlás. Az adatpont úgy jön létre, hogy először kiválasztjuk az egyik komponenst, majd ebből a komponensből generálunk egy mintát. Jelöljük a C véletlen változóval a komponenseket, amely változó az 1, …, k értékeket veheti fel. A kevert eloszlást ekkor a
11	0	0	Egy cél elérésére irányuló cselekvéssorozat kialakítását tervkészítésnek (planning) nevezzük. Tervkészítő ágensekre eddig két példát láttunk: a  fejezet keresésalapú problémamegoldó ágensét és a  fejezetben bemutatott logikai tervkészítő ágenst. Ez a fejezet elsősorban az olyan nagyobb bonyolultságú tervezési feladatokra való felskálázással foglalkozik, melyek meghaladják az eddig ismertetett megközelítések képességeit.
8	0.741935	0	Először is meg kell tudnunk különböztetni egy kaput a többi kaputól. Ezt úgy érjük el, hogy konstansokat használunk a kapuk megnevezésére: X[1], X[2] és így tovább. Habár minden kapu a maga egyedi módján kapcsolódik az áramkörhöz, a viselkedése – vagyis az a mód, ahogyan átalakítja a bemeneti jeleket kimeneti jelekké – csakis a típusától függ. Egy kapu típusának jelölésére^[85] egy függvényt használhatunk. Például írhatjuk, hogy Típus(X[1]) = XOR. Ez hozzárendeli az XOR konstanst egy bizonyos kaputípushoz. A többi konstans nevei: OR, AND és NOT lesznek. A Típus függvény nem az egyetlen lehetséges módja annak, hogy kódoljuk az ontológiai megkülönböztetést. Használhattunk volna egy bináris predikátumot is, mint a Típus(X[1], XOR), vagy több egyargumentumú predikátumot, mint például az XOR(X[1]). Ezeknek a megoldásoknak bármelyike jól működne, de a Típus függvény választásával kiküszöböltük, hogy szükség legyen egy olyan axiómára, amely azt mondja ki, hogy minden egyes kapunak csak egyetlen típusa lehet.
18	0.052632	0	Az ellenőrzött tanulás (supervised learning) egy leképezésnek a bemeneti és kimeneti minták alapján történő megtanulását jelenti. Az (1), (2) és (3) esetek mindegyike az ellenőrzött tanulás példája. Az (1) esetben az ágens a fékezés feltétel-cselekvés szabályát tanulja – ez az állapottérről egy Boole-típusú kimenetre való leképezés (fékezzen vagy ne fékezzen). A (2) esetben az ágens képekről egy Boole-típusú kimenetre való leképezést tanul meg (tartalmaz-e a kép buszt, vagy sem). A (3) esetben a tanult fékezési elmélet egy, az állapotok és a fékezési cselekvések teréről a – mondjuk méterben mért – megállási útra történő leképezés. Vegyük észre, hogy az (1) és (2) esetekben a tanító szolgáltatta a mintákhoz tartozó helyes választ; a harmadikban a kimeneti értékeket közvetlenül az ágens észlelései szolgáltatták. Teljesen megfigyelhető környezet esetén mindig fennáll a lehetőség, hogy az ágens megfigyeli a cselekvésének következményeit, így használhat ellenőrzött tanulási módszereket annak érdekében, hogy megjósolja azokat. Részlegesen megfigyelhető környezetben nehezebb a probléma, mert a közvetlen hatások láthatatlanok maradhatnak.
9	0.448276	1	Roussel fejlesztette a Prolog-ot, miközben Colmerauer és Robert Paso írták a Prolog programot (a még fejlesztés alatt álló nyelven). Itt véglegesedett a Prolog név is, ami a PROgramming in LOGic, azaz LOGikai PROgramozás. Colmerauerék első Prolog programja 610 klózból állt, ennek több mint a fele a nyelvi analízisért volt felelős, 100 darab fölött volt azon klózok száma, amik a szavak egyes és többes számának szinkronizálásáért felelt, valamint a rendhagyó igékért, illetve egyéb nyelvi kivételekért. Mivel mindent lekezelni nem volt lehetőség, ezért a program 164 klózt tartalmazott a szótár részében, és 104 klózt a francia nyelvtani szabályok miatt.
12	0.952381	0	A hagyományos programozási nyelvekben számos művelet modellezhető olyan cselekvéssel, amely megváltoztatja a világ állapotát. Például egy értékadási operátor egy memóriaterület tartalmát másolja, míg egy nyomtatás operátor megváltoztatja a kimenet állapotát. Egy, ezekből a műveletekből álló programot tervnek tekinthetünk, melynek célját a program specifikációja definiálja. A felkészítő algoritmusok ezért felhasználhatók egy adott specifikációjú program elkészítéséhez. a. Írjon egy operátorsémát az értékadási operátorhoz (egy változó értékének átadása egy másik változónak). Vegye figyelembe, hogy az eredeti érték felülíródik! b. Mutassa meg, hogy az objektumok létrehozása hogyan használható a felkészítő által két változó értékének egy átmeneti változó felhasználásával történő felcserélésére.
5	0.181818	1	Az értékadás fényében előálló {SA=RED, NSW=GREEN, WA=BLUE, NT=GREEN} behelyettesítés is konzisztens, így jöhetne az AC3/MAC következtetés, de mivel NT értékkészlete is egy-elemű, ezért a következtetés most sem tesz semmit (nyilván nincs értelme egy-eleműre redukálni NT egy-elemű értékkészletét, és hát ekkor, ha ezt nem tesszük, nem befolyásoljuk az NT-be befutó élek konzisztenciáját sem).
24	0.958333	0	Az illesztési algoritmust egy ipari alkalmazásnál szeretnénk használni, ahol lapos alkatrészeket egy szállítószalag visz, a szalag felett pedig egy függőlegesen elhelyezett kamera figyel. Az alkatrész elhelyezkedését három változó határozza meg, egy az elfordulást és kettő az alkatrész kétdimenziós pozícióját. Ez egyszerűsíti a problémát, és a Transzformációt-Keres függvény az egymásnak megfelelő kép- és modelltulajdonságokból két párt igényel ahhoz, hogy az elhelyezkedést azonosítsa. Határozza meg csak ebben a környezetben az illesztésnek a legrosszabb esetre vett komplexitását.
18	0.736842	1	Tetszőleges számú (x[1],x[2]) mintát tudunk generálni, tehát szimulációkkal is mérni tudjuk az egyes hipotézisek pontosságát stb. (Persze matematikai megfontolásokkal a hipotézisek hibája kiszámolható is lenne, de a demonstráció szempontjából elég a szimuláció.) Nézzük meg az egyes hipotéziseket megtestesítő osztályhatároló egyeneseket a síkon:  ábra - Nagy hibájú hipotézisek által megvalósított határoló felületek Nagy hibájú hipotézisek által megvalósított határoló felületek
20	0.357143	0	Azaz a cukorkák egyforma valószínűséggel származhatnak mindkét zsákból, az első zsák nagyobbrészt meggyízű cukrokat tartalmaz piros csomagolásban, és sok köztük a lyukas, a második inkább nem lyukas citromízűeket, zöld csomagolásban. A lehetséges nyolcféle cukor előfordulási számai a következők:
6	0.3	0	A  fejezetben megjegyeztük, hogy a keresési fában az ismétlődő állapotok a keresési költségekben exponenciális növekedéshez is vezethetnek. Játékokban gyakran előfordulnak ismétlődő állapotok a transzpozíciók (transpositions) – a lépési szekvenciának az ugyanahhoz az álláshoz vezető különböző permutációi – miatt. Ha például Fehér lépése a[1], amire Fekete b[1] lépéssel válaszolhat, és a tábla más részén van egy vele nem kapcsolatos a[2] lépése, amire Fekete b[2]-vel válaszolhat, akkor az [a[1], b[1], a[2], b[2]] és az [a[1], b[2], a[2], b[1]] szekvenciák mind ugyanabban az állásban végződnek (ahogy ebben az állásban végződik az előbbi lépések minden a[2]-vel kezdődő permutációja). Érdemes ennek az állásnak a kiértékelését az első előforduláskor egy hash-táblában eltárolni, mert így a későbbi előfordulásoknál a kiszámítás megismétlését megspóroljuk.
23	0.055556	0	A másik megközelítés a lineáris interpoláción alapuló simítás (linear interpolation smoothing), ami lineárisan kombinálja a trigam, bigram és unigram modelleket. A valószínűség-becslőt a következőképpen definiáljuk:
10	0.969697	0	A vásárlási folyamat egyik része, amivel e fejezetben nem foglalkoztunk, az egyes tételek közötti kompatibilitás ellenőrzése. Ha a kliens például egy számítógépet rendel, illeszkedik-e az a megfelelő perifériákhoz? Ha digitális kamerát rendel, megvan-e a hozzá való memóriakártya és szárazelem? Írjon fel egy olyan tudásbázist, amely eldönti, hogy a tételek adott halmaza kompatibilis-e. És ezt a tudásbázist fel lehessen használni cserékre, illetve további tételek vásárlására vonatkozó javaslatok generálására, ha mégsem lennének kompatibilisek. Bizonyosodjon meg arról, hogy a tudásbázis legalább a termékek egy körével jól működik, és könnyen terjeszthető ki másokra is.
20	0	0	A  és  alfejezetben valószínűségi modellek – elsősorban a Bayes-hálók – tanulási módszereit ismertetjük. A  alfejezet olyan módszereket tárgyal, amelyek speciális minták tárolását és előhívását végzik. A  alfejezet a neurális háló (neural network) tanítással foglalkozik, míg a  alfejezet a kernelgépekkel (kernel machine). Ennek a fejezetnek egy része erősebben matematikai megközelítésű (feltételezi a többváltozós analízis alapjainak ismeretét), bár az általános tanulságok megérthetők anélkül is, hogy elmerülnénk a matematikai részletekben. Hasznos lehet, ha az olvasó ezen a ponton először átnézi a 13. és a  fejezeteket, valamint az A) függeléket.
2	0.578947	0	Hasonló problémát láthatunk felbukkanni a porszívóvilágban. Tegyük fel, hogy egy egyszerű reflexszerű ágenst megfosztunk a helyzetérzékelő szenzorától, és csak piszokérzékelője van. Egy ilyen ágensnek csak két észlelése van: [Koszos] és [Tiszta]. Felszívhat válaszul a [Koszos]-ra; de mit tegyen, ha [Tiszta] az észlelés? A Balra mozgás (mindörökre) sikertelen lesz, ha például az A négyzetben kezd, a Jobbra mozgás pedig (mindörökre) sikertelen, ha például a B négyzetben kezd. A végtelen ciklusok gyakran elkerülhetetlenek részlegesen megfigyelhető környezetben működő egyszerű reflexszerű ágensek számára.
6	0.1	1	A történet lényege, röviden: 1979-ben és 1982-ben is versenyt írtak ki az iterált Fogolydilemma kapcsán. Iterált stratégiát megvalósító programokat kellett beküldeni, és ezeket eresztették össze fix számú körben. A világ minden tájáról érkeztek különböző, akár igen nagy bonyolultságú megoldások, ámde mindegyiken felülkerekedett Anatol Rapoport szociológus TFT stratégiája. Mondhatni tehát, hogy a TFT stratégia mindkét versenyt „kiütéssel” nyerte.
12	0.904762	1	 Vizsgáljuk meg figyelmesen a 12.1 alfejezetben az idő és az erőforrások reprezentációját. a. Miért jobb, ha egy cselekvés következménye az Időtartam(d), mint ha a cselekvésnek egy Időtartam: d alakú külön mezője lenne? (Segítség: vegyük figyelembe a feltételes következményeket és a diszjunktív következményeket.) b. Az Erőforrás: m miért egy külön mező a cselekvésben, nem pedig egy következmény?
6	0.3	0	Tekintsük ismét a  ábrán látható egylépésváltásos játékfát. Kövessük még egyszer az optimális döntés kiszámításának menetét, most azonban kísérjük figyelemmel, hogy mit is tudunk valójában a folyamat minden pontjában. A lépésekhez a  ábra ad magyarázatot. Az eredmény az, hogy meg tudjuk határozni a minimax döntést anélkül, hogy a két levélcsomópontot bármikor is megnéznénk.
15	0.703704	0	A legáltalánosabb szinten a valószínűségi következtetési problémát a következőképpen definiálhatjuk. Legyen a Szavak egy valószínűségi változó az összes lehetséges szószekvencia felett, ami elhangozhat, és legyen a jel a megfigyelt akusztikusjel-szekvencia. Ekkor az elhangzottak legvalószínűbb értelmezése a Szavak azon értéke, ami maximalizálja a P(szavak|jel) értéket. Amint az gyakori eset, a Bayes-szabály alkalmazása hasznos:
16	0.956522	0	(David Heckerman alapján, de a magyar kiadású Guinness Rekordok Könyvére alapozva [Guinness Rekordok Könyve 1991, Solaris Kft., Budapest].) Ez a feladat az Almanac Game-hez kapcsolódik, amit döntéselemzők használnak a numerikus becslések kalibrálására. Adjon becslést az alábbi problémákra, azaz azt a számot adja meg, amiről úgy gondolja, hogy ugyanolyan valószínűséggel lehet túl nagy is, mint túl kicsi. Próbálja meg eltalálni a 25 percentilises becslést is, azaz azt a számot, amiről úgy gondolja, hogy 25% esélye van, hogy túl nagy lesz, és 75% esélye, hogy túl kicsi. Ugyanígy tippelje meg a 75 percentilisest is. (Így minden egyes kérdésre három becslést kell megadnia összesen – egy kisebbet, a mediánt és egy nagyobb értéket.) a. Melyik évben születtek meg az első (névadó) sziámi ikrek? b. Hány helyi értékig képes valaki emlékezetből visszaidézni a π számot? c. Hány rák volt az eddig megfigyelt legnagyobb krill rajban? d. A kőkorszak óta – a háborúktól és a katasztrófáktól eltekintve – az elhalálozások hány százalékáért felelős a maláriaszúnyog? e. Az állatkertekben végzett mérések szerint egy kifejlett csimpánz hányszor erősebb egy átlagos normális férfinál? f. Az eddigi legmagasabb felállított karácsonyfa magassága? g. Milyen hosszú a Csendes-óceánt átszelő legrövidebb hajóút hossza? h. A Föld átlagos sűrűsége hányszorosa a vízének? i. Egy évben átlagosan hány esetben észlelnek szeizmikus tevékenységet, ebből mennyi érezheto, és mennyi okoz kárt? j. Milyen magas a hőmérséklet a Holdon a legjobban napsütötte helyen (Egyenlítőre merőlegesen)?
22	0.518519	0	Most tegyük fel, hogy a „John loves Mary” és a „John loved Mary” közötti különbséget szeretnénk reprezentálni. Az angol igeidőket (past [múlt], present [jelen] és future [jövő]) használ egy esemény relatív idejének jelzésére. Egy jó választás az események idejének reprezentálására a  alfejezet eseménykalkulus jelölésrendszere. Az eseménykalkulussal a két mondatunk a következőképpen értelmezhető:
4	0.625	0	Kezdjük egy egyszerű példával. Tegyük fel, hogy valahol Romániában három új repülőteret szeretnénk létesíteni úgy, hogy a városoknak (lásd  ábra) a hozzájuk legközelebb eső repülőtérhez való távolságösszegük legyen minimális. Az állapotteret ekkor a repülőterek (x[1], y[1]), (x[2], y[2]) és (x[3], y[3]) koordinátái definiálják. Ez egy hatdimenziós tér, azt is mondhatjuk, hogy az állapotokat hat változó (variable) definiálja (általánosságban az állapotokat a változók n-dimenziós x vektora definiálja). Ebben a térben való mozgás a térképen a repülőterek áthelyezésének felel meg. Az f(x[1], y[1], x[2], y[2], x[3], y[3]) célfüggvényt, ha a legközelebbi városok már megvannak, bármely állapot esetére viszonylag könnyű kiszámítani, általánosságban azonban igen nehéz ezt leírni.
14	0.869565	1	A harmadik csoportba az ügyfél érték jellemzői kerültek: munkahelye, kapcsolat ügyféllel, késett fizetés.  ábra -  ábra. Érték jellemzők: a bemenetek felülete  ábra. Érték jellemzők: a bemenetek felülete  ábra -  ábra. Érték jellemzők: 3 bemenet, 1 kimenet (jobb oldalon, lenn), kibontva  ábra. Érték jellemzők: 3 bemenet, 1 kimenet (jobb oldalon, lenn), kibontva
21	0.125	1	A lekérdezési stratégiák alapján öt nagyobb csoportba sorolhatóak a feladatok, ezek a: Bizonytalansági mintavételezés, Verziótér csökkentés, Tanult modell várható változása, Hiba várhatóértékének minimalizálása, Modell szórásának minimalizálása
1	0.689655	0	A Yale-en, Roger Schank, a nyelvésszé lett MI-kutató, ezt a nézetet még jobban hangsúlyozta, azt állítván, hogy „olyan dolog, mint a szintaxis pedig nincs”, ami ugyan sok nyelvészt felháborított, de egyben egy hasznos eszmecserét is elindított. Schank és hallgatói a természetes nyelvet felismerő programok egész sorát építették meg (Schank és Abelson, 1977; Wilensky, 1978; Schank és Riesbeck, 1981; Dyer, 1983). A hangsúlyt azonban kevésbé magára a nyelvre, sokkal inkább a nyelv megértéséhez szükséges tudás reprezentálására és a vele való következtetésre helyezték. E problémakörbe tartozott a sztereotip helyzetek reprezentálása (Cullingford, 1981), az emberi memória szervezésének leírása (Rieger, 1976; Kolodner, 1983) és a célok, tervek megértése (Wilensky, 1983).
3	0.208333	1	A problémának összesen 92 megoldása létezik. Ezek közül összesen 12-t tekinthetünk egyedinek, a többi megoldás ugyanis ebből a 12-ből forgatással és/vagy tükrözéssel előállítható. A probléma összes egyedi megoldása a következő ábrán látható [16].
15	0.222222	0	Így ebben az esetben a simított becslés nagyobb, mint a szűrt becslés (0,818). Ennek oka az, hogy az esernyő a 2. napon valószínűbbé teszi, hogy esett a 2. napon, és mivel az eső tartósan szokott esni, ez még valószínűbbé teszi, hogy esett az 1. napon.
25	0.074074	1	A kinematikai feladat egyik leglényegesebb részterülete az adott terepviszonyokhoz igazodó járási módszer meghatározása. A lábak mozgatásának sorrendje és időbeli ütemezése nemcsak a munkakörnyezettől, hanem a lábak számától is nagyban függ. A kinetikai probléma megoldása a kívánt teljesítmények átvitelének biztosítását jelenti különböző szempontok figyelembevételével. Ilyen feltétel lehet a minimális erők és nyomatékok az egyes szegmenseknél és izületeknél, a lehető legkisebb alkalmazandó motorteljesítmény, az optimális erőeloszlás, stb. A vezérlés és az optimális működés a legkevésbé ismert területe a jelenlegi kutatásoknak. Az egyik megoldási lehetőség az élővilágból megismert technikák alkalmazása. Azonban sok esetben nem tudjuk a legalapvetőbb mozgások vezérlési módszereit. Így például az emberi gyaloglás vezérlése is ismeretlen még a számunkra.
3	0.916667	0	A fejezetben említett valósvilág-beli keresési problémák közül mindegyik komoly kutatási erőfeszítések tárgya volt. Az optimális repülőjárat megválasztásának módszereit általában bizalmasan kezelik, azonban Carl de Marcken kimutatta (magánközlés), hogy a repülőtársaságok által alkalmazott jegytarifák és egyéb korlátozások annyira összekuszálódtak, hogy az optimális járat megválasztása formálisan eldönthetetlen. Az elméleti számítástudományban standard kombinatorikus probléma az utazó ügynök problémája (TSP) (Lawler, 1985; Lawler és társai, 1992). A problémáról Karp bizonyította be, hogy NP-nehéz (Karp, 1972), azonban megoldására hatékony heurisztikus közelítő módszereket dolgoztak ki (Lin és Kernighan, 1973). Az euklideszi térben zajló TSP-re Arora dolgozta ki a teljesen polinomiális közelítő sémát (Arora, 1998). A VLSI-elrendezés módszereit Shahookar és Mazumder (Shahookar és Mazumder, 1991) tekintették át, számos optimalizációs cikk VLSI-újságokban jelent meg. Robotnavigálási és szerelési problémákkal a  fejezet foglalkozik.
14	0.869565	1	A jelölések rövidítésére van lehetőség. A kettőspont a MATLAB-hoz hasonlóan a teljes sorra vagy oszopra hivatkozik, így az m(1,:) a mátrix teljes első sorát adja eredményül. Az 1:3 az 1-től 3-ig tartó sorozatra utal, míg az 1:2:3 az 1-től 3-ig tartó sorozatra, ahol az elemek 2-es ugrással jönnek.
6	0.1	1	Próbáljuk meg tehát most valahogy megtalálni egy-egy normál alakban adott játék domináns egyensúlyát, ha létezik! Erre a következő, dominált stratégiák iterált eliminációján alapuló algoritmust fogjuk használni. A példa kedvéért legyen adott egy egyszerűbb, 2-szereplős, 2*3-as játék (ahol tehát az egyik játékosnak 2, a másiknak pedig 3 stratégiája van). A játék a következő.
22	0.925926	1	Lehetséges a munkaállomásról történő diktálás, s külön a munkafázisban a beszédfelismerés, majd egy másik munkaállomásról, más személy által történő szöveg korrektúra, javítás elvégzése, a dokumentum nyomtatása. Mobil diktafonba, telefonon történő leletezés, amikor a diktáló nincs közvetlen kapcsolatban a beszédfelismerő szoftver rendszerrel.
6	0.1	1	Gyakori viszont az az eset, hogy a mezőket nem hatszögekkel jelölik, hanem keresztezett vonalakkal. Ekkor nem magukba a mezőkbe tesszük le a figuráinkat, hanem a kereszteződésekre. Ez látható a  ábrán.  ábra - Hatszöges ábrázolás [3] Hatszöges ábrázolás [3]
14	0	0	A  fejezetben bemutattuk a valószínűség-számítás szintaxisát és szemantikáját. Külön hangsúlyoztuk a függetlenségi és a feltételes függetlenségi kapcsolatok fontosságát a világ valószínűségi reprezentációjának az egyszerűsítésében. Ez a fejezet egy szisztematikus módszert vezet be az ilyen relációk explicit reprezentálására, a Bayes-hálók formájában. Ezeknek a hálózatoknak definiáljuk a szintaxisát és szemantikáját, és megmutatjuk, hogyan használhatók fel bizonytalan tudás megragadására természetes és hatékony módon. Ezt követően ismertetjük, hogyan végezhető el a valószínűségi következtetés, ami bár legrosszabb esetben exponenciális komplexitású, a gyakorlatban sok esetben hatékonyan alkalmazható. Leírunk továbbá különböző közelítő következtető algoritmusokat, amelyek gyakran akkor is alkalmazhatók, amikor egzakt következtetés nem lehetséges. Megvizsgálunk olyan módszereket is, hogy hogyan alkalmazható a valószínűség-számítás egy objektumokat és relációkat is tartalmazó világra – azaz az ítéletlogikával szemben az elsőrendű reprezentációkra. Végül áttekintjük a bizonytalan következtetés egyéb alternatív megközelítéseit.
14	0.869565	1	Létre kell hozni egy YOY1 síkban elhelyezett rácsozott felületet, erre szolgál az [Y,Y1]=meshgrid(0:.01:1,0:.01:1) parancs, ahol a paraméterek rendre az intervallum kezdete, a felbontás finomsága és az intervallum vége Y-ra, majd Y1-re.
19	0.590909	1	Egy X[i] jegy erősen releváns egy Y osztályváltozó szempontjából egy adott eloszlás mellett, ha létezik A és B mintapélda, melyek valószínűsége nem nulla az adott eloszlás esetén úgy, hogy csak az X[i] által felvett értékben különböznek, és ekkor teljesül, hogy y^A ≠y^B[,,][]azaz A és B különböző osztályba tartoznak.
22	0.925926	0	A Sequitur-rendszert Nevill-Manning és Witten készítette (Nevill-Manning és Witten, 1997). Érdekes, hogy ők, valamint de Marcken is megjegyezte, hogy nyelvtant kikövetkeztető megoldásaik tömörítésre is jól használhatók. Ez összhangban van a minimális leíró hosszúság kódolásának elvével: egy jó nyelvtan olyan, amely minimalizál két méretet: a nyelvtan és a szövegek elemzési fájának nagyságát.
16	0.956522	1	Az indulást követően a fejlődés egy pillanatra sem állt meg. Ahogyan fejlődött az anesztézia és ennek nyomán a sebészet, egyre bonyolultabb műtétek érzéstelenítésére vállalkoztak egyre nagyobb rizikójú betegeken. Többek között az adatgyűjtés és adatelemzés segítségével lehetett biztosítani ezt a fejlődést. Retrospektív vizsgálatokra, vagy az egyes anesztéziák kiértékelésére a kezdetleges strigulázáson, a lyukkártyás rendszerezésen túl igazi esélyt a számítástechnika módszereinek alkalmazása adott.
2	0.157895	1	Az információs technológia egyik fő jellemzője az, hogy a fejlesztése – fejlődése egyetlen pillanatra sem áll meg. Az intenzív osztályokon számos esetben a rendszer fejlesztését lokális monitorokkal igyekeznek megkerülni.
9	0.689655	1	Már egy rápillantás is elég, hogy megállapítsuk, hogy ebből az állításhalmazból soha nem jön ki az üres rezolúció (az állítás halmaz ellentmondásossága nem dönthető el). Azonban a feladat a Cs2 értéke, azaz vagy a Cs2 ítéletállítás logikai értéke, vagy a ¬Cs2 ítéletállítás logikai értéke, hiszen mindegyik változatnak ugyannyi az információ értéke. Ha a kérdés a ¬Cs2, akkor negálva Cs2 és most már a rezolúció menni fog.
5	0.181818	1	Természetesen elképzelhető, hogy egy adott értékadás következtében a szomszédos változók értékkészletében véghezvitt redukció végül nem vezet eredményre, és azon az úton nem jutunk el a megoldásig (a teljes és konzisztens behelyettesítésig). Ekkor az algoritmusnak/keresésnek vissza kell tudnia lépni úgy, hogy az előretekintés által véghezvitt értékkészlet csökkentéseket is visszacsinálja (nem csak az értékadások általi behelyettesítéseket).
18	0.736842	0	A döntési lista (decision list) egy kötött formájú logikai kifejezés. Egy tesztsorozatból áll, amely tesztek mindegyike literálisok konjunkciója. Ha egy teszt valamelyik példa leírására alkalmazva pozitív eredményt ad, akkor a döntési lista határozza meg a példára adandó választ. Ha a teszt eredménye negatív, akkor a lista következő tesztjével folytatódik a feldolgozás.^[186] A döntési listák emlékeztetnek a döntési fákra, de a globális struktúrájuk egyszerűbb, ezzel szemben az egyes tesztek bonyolultabbak, mint a döntési fáknál. A  ábra egy döntési listát mutat be, amely a következő hipotézist reprezentálja:
9	0.965517	0	A rezolúció változókkal való lekérdezésekre létrehozhat nem konstruktív bizonyításokat, ezért egy speciális eljárást kell bevezetnünk a definit válaszok kinyerésére. Magyarázza meg, hogy ez a probléma miért nem merül fel csak definit klózokat tartalmazó tudásbázisokkal!
20	0.928571	1	* A perceptron a következő három fő elemből áll: * A retinának nevezett első elem a bemeneti jeleket fogadó cellákat tartalmazza, melyek a legtöbb modellnél igen/nem válaszokat szolgáltattak, de lehetőség volt a stimulus intenzitásával arányos jelek generálására is. * Az asszociatív celláknak nevezett második réteg egyes cellái csatlakozhatnak a retinacellákhoz, más asszociatív cellákhoz, és az alábbiakban ismertetett harmadik réteg döntési celláihoz. Ezek a cellák összegzik a hozzájuk érkező jeleket, impulzusokat. * A döntési cellák rétege a perceptronok kimenete. Az asszociatív réteggel azonosan működnek, csak a bemenetek származhatnak akár egy, vagy több döntési cellától, akár az asszociatív celláktól. (1.sz ábra)
19	0.727273	0	A Literál-Megválasztása az információnyereségre (lásd 18. szakasz - Attribútumteszt-választás rész) valamilyen mértékben hasonló heurisztikát használ, hogy eldöntse, melyik literált adja hozzá a klózhoz. A részletek itt nem különösen fontosak, ráadásul számos kipróbált változat is létezik. A Foil egyik érdekes járulékos tulajdonsága az Ockham borotvája elvének az alkalmazása bizonyos hipotézisek eliminálására. Ha (egy bizonyos mérték szerint) egy klóz hosszabbnak mutatkozik, mint az általa megmagyarázott pozitív példák összhossza, akkor ezt a klózt a továbbiakban nem tekintjük lehetséges hipotézisnek. Ezzel a technikával elkerülhetjük az adatokban található zajra illeszkedő, túlságosan bonyolult klózok származtatását. A zaj és a klózhossz kapcsolatának magyarázatát lásd a  szakasz - Statisztikai tanulás részben.
2	0.526316	1	A szimulátor a hatékony megjelenítéshez hardveres OpenGL támogatást vesz igénybe. Ennek következtében szükség van a JOGL könyvtár telepítésére. Az ehhez szükséges fájlok az AgentGame install könyvtárának jogl/unix almappájában vannak.
14	0.782609	1	A népegészségügyi állapotok ilyen jellegű monitorozása figyelmeztet veszélyekre (egy-egy körzetben gyorsan romló állapot detektálására). Csökkenthető lesz egy ma még véletlenek által befolyásolt költségvetési függőség. Előtérbe lép a tervezhetőség azon a területen, amely a fejlett nyugati országok becslési szerint várhatóan a következő évtizedekben a legnagyobb költségvetési tétel lesz, megelőzve a katonai kiadásokat.
16	0.347826	0	A közérdekű ügyeknél történő döntéshozatal mind dollármilliókhoz, mind emberek életéhez és halálához is kapcsolódik. Például annak eldöntésekor, hogy rákkeltő anyagok milyen koncentrációi engedhetők meg a környezetben, a döntéshozóknak mérlegelniük kell a halál megelőzését és azokat a közgazdasági nehézségeket, amelyek bizonyos termékek és folyamatok megszüntetése miatt jelentkezhetnek. Egy új repülőtér elhelyezése esetén meg kell fontolni az építkezés okozta felfordulást; a telkek értékét; a népesebb központoktól való távolságot; a reptér zaját; a biztonsági kérdéseket a helyi földrajzi és az időjárási viszonyok tekintetében és így tovább. Az ehhez hasonló problémákat, ahol a kimenetelt két vagy több attribútum jellemez a többattribútumú hasznosságelmélet (multiattribute utility theory) kezeli.
25	0.703704	1	Ha a feladatot robotprogramozással oldjuk meg, akkor nemcsak a robotmegfogó vagy az egyes robotízületek kívánt mozgásának meghatározására van lehetőség, hanem a program végrehajtása a robothardvernél felsorolt érzékelő típusok által menet közben szolgáltatott információktól is függővé tehetjük. Az újabb robotprogramozási nyelvekben ugyancsak lehetőség van a robot és a környezetében elhelyezkedő egyéb berendezések működésének koordinálására, a feladat-végrehajtás ütemezésére, illetve eseményfüggő lejátszására. Az off-line programozás speciális esete a grafikus mozgás-szimulációs programcsomagok használata. Ekkor a program működését a számítógép monitorján, grafikus modellen követheti a tervező. A legkorszerűbb szimulációs rendszerek nemcsak geometriai ellenőrzéseket hajtanak végre vagy jelenítenek meg, hanem a technológiához kapcsolódó paramétereket is figyelembe veszik.
6	0.1	1	A kezdetek kezdetén a tervezők a megnyitási adatbázis tartalmát magának a programnak a tapasztalatai alapján próbálták felépíteni. Pár hónap elteltével ezt a tervet elvetették, mert a tanulási sebesség túl lassú volt és nem nagyon látszódott a fontos összefüggések kirajzolódása [6].
18	0.736842	1	A baj ennél is nagyobb, hiszen általánosságban n-bemenetű logikai függvények esetén, ha ε<1  , azaz 1< 1 ε  (tehát a 100%-osnál kisebb hibát várunk el a megtanult hipotézistől, ami nem egy nagy teljesítmény), és δ<1  , azaz ln(δ)<0  (tehát állításunkat 0%-nál legalább valamennyivel biztosabban szeretnénk kijelenteni), akkor:
8	0.483871	0	Szerencsére az elsőrendű logika lehetővé teszi számunkra, hogy használjuk a Személy predikátumot, anélkül hogy teljes mértékben definiálnánk. Ehelyett részleges pontosításokat írhatunk tulajdonságokról, amelyekkel minden személy rendelkezik, és olyan tulajdonságokról, amelyek valamit személlyé tesznek:
10	0.878788	0	Az igazság-karbantartás egyszerű módja, hogy nyomon követjük, ahogyan sorban hozzáadjuk a mondatokat a tudásbázishoz, a mondatok P[1]-től P[n]-ig történő megszámozásával. Amikor a Visszavon (TB, P[i]) hívás megtörténik, a rendszert a P[i] hozzáadása előtti állapotába állítjuk vissza, a P[i]-t és a P[i]-ből levont összes következtetést visszavonva. Ha szükséges, akkor a P[i+1] és a P[n] közötti mondatok ismét hozzáadhatók. Ez egyszerű megoldás, és garantálja, hogy a tudásbázis konzisztens lesz, de azt jelenti, hogy a P[i] visszavonása n – i állítás visszavonását és újbóli kijelentését, valamint ezen állításokból történő következtetések visszavonását és újbóli lefuttatását igényli. Olyan rendszerekben, ahol sok tény kerül hozzáadásra, az ilyen megoldás nem praktikus.
24	0.166667	1	A PACS rendszer másik végéhez a telekommunikáció illeszkedik, a teleradiológia formájában. Egyes kimutatások szerint a felesleges betegszállítások akár 80%-a megtakarítható a teleradiológiai konzultációval és lehetővé teszi a kezelés korai megkezdését is, valamint az előző és más típusú vizsgálatokkal való összehasonlítást is az egymástól távol lévő radiológia osztályokon anélkül, hogy eredeti filmeket kellene utaztatni.
8	0.290323	0	Az univerzális kvantor állításokat fogalmaz meg minden objektumról. Hasonlóan, az egzisztenciális kvantor felhasználásához állításokat tehetünk az univerzum néhány objektumáról anélkül, hogy megneveznénk azokat. Azt az állítást tehát, hogy János királynak koronája van, így is leírhatjuk:
2	0.894737	1	Mivel egy ágensnek egységnyi időre van szüksége a porszíváshoz és a lépéshez is, ezért ahhoz, hogy minden mezőt megtisztítson, legalább három időegységre van szüksége. (Általánosságban, ha minden mező piszkos, és n mező van, akkor 2n-1 időegységre: n-re a porszíváshoz, n-1-re a mozgáshoz.) Tehát a maximális két pontot időegységenként legkorábban a negyedik időpillanattól kezdve kaphatja. Az első időpillanatban semmilyen viselkedéssel sem kaphatna pontot, hisz mindkét mező piszkos. Így tehát nincs olyan ágens, amely az adott feltételek mellett 1996-nál több pontot érhetne el. Tehát ez az ágens racionális.
24	0.166667	1	A program tárolási struktúrája gyűrű topológián alapszik: egy alakzat leírásához használt pontok pointerei a következőre mutatnak, míg az utolsó az elsőre. A beszúrás, törlés, átrendezés és a bejárás az implementált alapműveletek. Megoldott, hogy a nulla illetve egyelemű tömbök kezelése triviális legyen, ne kelljen külön figyelni az elemszámra.
14	0.869565	1	Ezen Cito-diagnosztikai rendszer felépítésénél 59 gyomor lenyomati kenetet elsőként hematoxilin-eozinnal megfestettek, majd ezek után diagnosztizálták a kenetek minőségét (ami vagy, normál, dysplasiás, illetve tumoros csoportban lehet.) Diagnosztizálást követően pedig dekolorizálták a keneteket.. A diagnózisokat szövettani vizsgálat is megerősítette.
24	0.833333	1	Mivel a legtöbb detektor alkalmazása egy intenzitásképet ad eredményül, a kulcspontok megtalálásához küszöbölni kell a keletkezett képet, vagy lokális maximumokat keresni rajta. Érdemes elkerülni a szomszédos találatokat, ehhez például egy kiválasztott kulcspont környékén csillapítani kell az eredményképet.
14	0.913043	0	Folytonos valószínűségi változók jelenlétét Bayes-hálókban Pearl, illetve Shachter és Kenley vizsgálta (Pearl, 1988; Shachter és Kenley, 1989); ezek a cikkek kizárólag folytonos változókat tartalmazó hálókat tárgyaltak, amelyek lokális függési modelljei lineáris normális eloszlásúak. Diszkrét változók bevezetését Lauritzen és Wermuth vizsgálta (Lauritzen és Wermuth, 1989), amit a cHUGIN rendszerben meg is valósítottak (Olesen, 1993). A probit eloszlást először Finney vizsgálta (Finney, 1947), szigmoid eloszlásnak nevezve. Az eloszlást széles körben használják diszkrét választási jelenségek modellezésére, és kiterjeszthető több mint két választási lehetőség kezelésére (Daganzo, 1979). A logit eloszlás használatához Bishop ad indoklást (Bishop, 1995).
2	0.894737	1	Amennyiben a tételbizonyító segédeszköz közvetlenül egy adatbázishoz csatlakozik (például hogy azt automatikusan bővítse), úgy a beavatkozók és érzékelők adatbázis-műveletek lesznek. (Írás illetve olvasás.)
1	0.068966	1	1970 októberében jelent meg a világ egyik, talán legismertebb sejtautomatájának, a Conway-féle automatának leírása. Az automata igen egyszerű szabályokra épül, ám ennek ellenére izgalmas és látványos kimeneteket ad vissza.
3	0.916667	1	d) Most két különböző visszaállítási sémával kísérletezzen egy hiba megtörténte után: (1) induljon az eredeti út legközelebb eső csúcsa felé, és (2) tervezze át az utat a cél felé az új pozícióból kiindulva. Hasonlítsa össze a három visszaállítási séma teljesítményét. Meg fogja-e változtatni az összes hasonlítás eredményét a keresési költségek figyelembevétele?
25	0.074074	1	Az idegrendszeri képalkotás és sztereotaktikus technológiák fejlődése lehetővé tette a minimál invazív beavatkozással járó sebészet oly mértékű fejlődését, melynek következtében az idegsebészeti eljárások elméleti lehetőségei hamarosan meghaladhatják a legképzettebb és legtehetségesebb sebészek képességeit is. A műtéti terület nagyításának és az eszközök miniatürizálásának egyesítése felülmúlja az emberi kéz nyújtotta lehetőségeket.
19	0.590909	1	A relevancia általános értelemben véve fontosságot, lényegességet jelent. Szakkifejezésként mindig valamihez kötött, tehát egy entitás valamihez viszonyítva vagy valamilyen szempont szerint lehet releváns vagy irreleváns.
17	0.733333	0	Első ránézésre a működési mód tervezés problémája triviálisnak tűnik. Tegyük fel, hogy az U globális hasznosságfüggvény dekomponálódik egyéni U[i] ágens hasznosságfüggvények valamely halmazára úgy, hogy U = Σ[i]U[i]. Ekkor mondhatnánk azt, hogy ha mindegyik ágens maximálja a saját hasznosságát, ez biztosan a globális hasznosság automatikusan maximálásához fog vezetni. (Például a kapitalizmus egyszeregye szerint, ha egy társadalomban mindenki megpróbál gazdagodni, a társadalom összgazdagsága növekedni fog.) Sajnos ez nem működik. Az egyes ágensek cselekvései befolyásolhatják a többi ágens jólétét oly módon, hogy a globális hasznosság csökken. Erre példa a közlegelő tragédiája (tragedy of commons), amely helyzetben az egyéni gazdálkodók az összes lábasjószágukat ingyen legeltetik a város közlegelőjén, ezért a közlegelő tönkremegy, és az összes gazdálkodó nagy veszteséget szenved el. Mindegyik gazdálkodó egyénileg racionálisan cselekedett, azzal érvelve, hogy a közlegelő ingyenes, és azzal, hogy bár a közlegelő használata a tönkremeneteléhez vezet, a használatának a mellőzése ezt nem befolyásolja (hiszen mások úgyis használnák). Hasonló érvelések alkalmazhatók a szennyező anyagok kibocsátása esetén a légkör és az óceánok használatára is.
23	0.555556	0	Az információkinyerő rendszerek legegyszerűbb típusát attribútumalapú (attribute-based) rendszernek nevezzük, mert feltételezi, hogy a teljes szöveg egy objektumról szól, és a feladat ezen objektum attribútumainak kinyerése. Például a  alfejezetben megemlítettük a „17 hüvelykes SXGA Monitor mindössze 249,99 $-ért” szövegből az alábbi adatbázis-reláció kinyerésének problémáját:
5	0.181818	1	 ábra - 13. lépés: WA=GREEN értékadás azok után, hogy visszacsináltuk az SA változó Q=GREEN értékadása miatti értékkészlet redukcióját, majd mivel kifutottunk a Q értékeiből, és vissza kellett lépnünk, ezért az NT=BLUE értékadás miatti, SA-ra és Q-ra vonatkozó értékkészlet redukciókat is vissza kellett csinálnunk, de aztán mivel az NT értékeiből is kifutottunk, ezért újfent vissza kellett lépnünk a WA változó szintjére, ahol a legutóbbi WA=RED értékadás miatti, NT változó értékkészletére vonatkozó redukciót is vissza kellett csinálnunk 13. lépés: WA=GREEN értékadás azok után, hogy visszacsináltuk az SA változó Q=GREEN értékadása miatti értékkészlet redukcióját, majd mivel kifutottunk a Q értékeiből, és vissza kellett lépnünk, ezért az NT=BLUE értékadás miatti, SA-ra és Q-ra vonatkozó értékkészlet redukciókat is vissza kellett csinálnunk, de aztán mivel az NT értékeiből is kifutottunk, ezért újfent vissza kellett lépnünk a WA változó szintjére, ahol a legutóbbi WA=RED értékadás miatti, NT változó értékkészletére vonatkozó redukciót is vissza kellett csinálnunk
20	0.714286	0	Az eddigiekben úgy tekintettük a perceptronokat, mint olyan determinisztikus függvényeket, amelyeknek valószínűleg hibával terhelt a kimenete. Lehetőségünk van, hogy a szigmoid perceptron kimenetét valószínűségként interpretáljuk – annak valószínűségeként, hogy adott bemenetek esetén a valós kimenet 1. Ezzel az interpretációval úgy használhatjuk a szigmoidot, mint a Bayes-hálók feltételes eloszlásainak kanonikus reprezentációját (lásd  alfejezet). Levezethetünk egy tanuló algoritmust is, a standard módszernek megfelelően maximalizálva az adatok (feltételes) log likelihood értékét, amint ezt a fejezet korábbi részében ismertettük. Lássuk, hogyan is működik ez.  ábra - A perceptronok és döntési fák teljesítményének összehasonlítása. (a) A perceptronok jobbak a 11 bemenetű többségfüggvény tanulásában. (b) A döntési fák jobbak az étterem példában a VárjunkE predikátum tanulásában. A perceptronok és döntési fák teljesítményének összehasonlítása. (a) A perceptronok jobbak a 11 bemenetű többségfüggvény tanulásában. (b) A döntési fák jobbak az étterem példában a VárjunkE predikátum tanulásában.
21	0.5	0	Néhány kutató ugyanakkor – mind az MI-közösségen belül, mind azon kívül – azt állítja, hogy a modellmentes módszerek, mint például a Q-tanulás léte azt mutatja, hogy a tudásalapú megközelítés nem szükséges. Mindamellett nem sok egyéb van e kérdés eldöntésére, mint az intuíciónk. A mi intuíciónk szerint, ahogy a környezet komplexebbé válik, a tudásalapú megközelítés előnyei egyre nyilvánvalóbbá válnak. Ez még a játékokban – mint a sakk, a dámajáték és az ostáblajáték (lásd következő alfejezet) – is így jelentkezik, a modellalapú kiértékelő függvények tanulására fordított erőfeszítések több sikert hoztak, mint a Q-tanuló módszerek.
2	0.105263	1	Az ágens-függvény tehát egy absztrakt, tömör leírása annak, hogy az ágens miképpen működik, vagy miképpen kellene működnie. Minden ágens egyértelműen jellemezhető egy-egy ilyen függvénnyel, ami általában túl tömör és felületes ahhoz, hogy ennek alapján konkrét ágenst lehessen tervezni, viszont ágensek elemzésénél nagy segítséget nyújthat. Egy konkrét ágens részletes specifikációja ennél nyilván jóval összetettebb és mélyrehatóbb lehet (pl. AUML nyelven adott [2]).
1	0.862069	0	Autonóm tervkészítés és ütemezés: Több száz millió mérföldre a Földtől a NASA Remote Agent programja lett az első fedélzeti autonóm tervkészítő program, amely egy űrhajó műveleteinek ütemezését felügyelte (Jonsson és társai, 2000). A Remote Agent a terveit a Földről küldött magas szintű célokból generálta, és a tervek végrehajtása közben monitorozta az űrhajó működését, hibákat detektált, diagnosztizált, és visszaállította a helyes működést, ha problémák léptek fel.
24	0.166667	1	A gomb többszöri megnyomása további egyenesek felvételét teszi lehetővé, majd a folyamat végére előáll a 3A ábrán látható szabálytalan, zárt sokszögünk. Ahhoz, hogy a szabályos hatszöget megkapjuk, egy kör segítségét kell kérnünk. Ennek rajzolásához irányítsuk a fényceruzát a kívánt középpontba, majd a circle center (kör középpont) gombot lenyomva kezdhetjük felvenni az alakzatot. Ekkor meg kell határoznunk a kör sugarát, melynek befejezéskor a már ismert draw (rajzolás) billentyűt kell lenyomnunk, hogy meg tudjuk mondani, mekkora körívre van szükségünk (jelen esetben a teljes körre). Ezt a folyamatot mutatja be a jobb oldali,  ábra.  ábra - Kör rajzolása Kör rajzolása
16	0.826087	0	Ellenőrizze és finomítsa a modellt. A rendszer kiértékeléséhez szükségünk van helyes (bemenet, kimenet) párokra; az úgynevezett referenciákra (gold standard), amihez lehet hasonlítani. Ez orvosszakértő rendszerek esetén azt jelenti, hogy összehívjuk az elérhető legjobb orvosszakértőket, néhány beteg esetét megmutatjuk nekik, diagnózis felállítására és kezelési javaslat meghatározására kérjük őket. Majd megnézzük, hogy a rendszer mennyire illeszkedik a javaslataikhoz. Ha csak kevéssé, akkor megpróbáljuk a rosszul teljesítő részeket azonosítani és megjavítani. Hasznos lehet a rendszert „visszafelé” tesztelni. Ahelyett hogy a rendszerbe a tüneteket vinnénk be, és diagnózist kérnék, vigyük be a diagnózist, mint például szívelégtelenség, és vizsgáljuk meg a tünetek, mint például szapora szívverés, jósolt valószínűségeit, és hasonlítsuk ezt össze szakirodalmi adatokkal.  ábra - Az aortaszűkület hatásdiagramja (Peter Lucas hozzájárulásával) Az aortaszűkület hatásdiagramja (Peter Lucas hozzájárulásával)
7	0.12	0	A vonzat és a bizonyítás megértésében segíthet, ha a TB összes következményeit egy szénakazalnak, az α-t pedig egy gombostűnek képzeljük el. A vonzat olyan, mintha a gombostű benne volna a kazalban; a bizonyítás pedig nem más, mint megpróbálni megtalálni ezt a tűt. Ez a különbségtétel formálisan a következő megfogalmazásban ölt testet: ha egy i következtetési algoritmus képes levezetni α-t a TB-ből, akkor írhatjuk, hogy
16	0.826087	0	A következőkben leírunk egy döntéselméleti szakértői rendszerhez tartozó tudásmérnöki folyamatot. Példaként egy orvosi problémát ismertetünk, amiben kezeléseket kell megválasztani bizonyos veleszületett szívrendellenességek esetén (Lucas, 1996).
10	0.393939	0	A „o” függvény kommutatív és asszociatív, pontosan úgy, mint a logikai konjunkció. Definiálhatjuk a diszjunkció és a negálás analógiáját is, azzal viszont óvatosabban kell eljárnunk, mivel a diszjunkciót kétféle módon lehet értelmesen interpretálni. Amikor azt mondjuk, hogy „az ágens az utóbbi két percben vagy sétált, vagy rágógumit rágott”, gondolhatunk arra, hogy az ágens az egész idő alatt az egyik cselekvést végezte, vagy pedig, hogy a két cselekvést felváltva tette. E két lehetőség megjelölésére az Egyik és a VagyVagy függvényeket fogjuk használni. A komplex eseményeket a  ábra szemlélteti.
2	0.210526	1	A hibrid ágensek a reaktív és a cél- ill. hasznosság-orientált felépítést különböző vezérlési szinteken valósítják meg, ezek a szintek olykor felülbírálhatják egymás döntéshozatalát [4]. Jó példa rá az ember, mint hibrid ágens. Legyen a cél az étel elkészítése, ennek megvalósításában fennáll a veszély, hogy olykor forró dolgokhoz érünk. Ha megsütjük magunkat, a célunk továbbra is az étel elkészítése marad, csupán egy pillanatra szól bele a reaktív réteg, mely mindenféle megfontolást mellőzve végrehajtja a „kéz elránt” reflexet.
5	0.181818	1	* Englishman: az angol személyt reprezentáló érték * Spaniard: a spanyol személyt reprezentáló érték * Norwegian: a norvég személyt reprezentáló érték * Ukrainian: az ukrán személyt reprezentáló érték * Japanese: a japán személyt reprezentáló érték
5	0.454545	0	A konfliktusvezérelt visszaugrás a keresési fa megfelelő helyére visz vissza, de nem akadályozza meg, hogy ugyanazt a hibát elkövessük a fa egy másik ágán. A kényszertanulás (constraint learning) a konfliktusból kiemelt új kényszer megtanulásával módosítja a kényszerkielégítési problémát.
8	0.483871	0	Ez vajon egy axióma vagy egy tétel? Valójában ez egy tétel, amely logikusan következik a testvérséget meghatározó axiómából. Ha ezt a mondatot Kérdez-zük a tudásbázistól, akkor az eljárásnak az igaz eredményt kell visszaadnia.
13	0.363636	0	Hasznos lehet az is, ha világot leíró véletlen változók teljes halmazáról gondolkozunk. Az olyan együttes valószínűség-eloszlást, amely lefedi a teljes halmazt teljes együttes valószínűség-eloszlásnak (full joint probability distribution) nevezzük. Például, ha a világ csak a Lyuk, a Fogfájás és az Időjárás változókból áll, akkor a teljes együttes valószínűség-eloszlást a
8	0.548387	0	Az ok-okozati szabályok a világban lévő okozatiság feltételezett irányát tükrözik: a világ néhány rejtett tulajdonsága bizonyos érzetek generálását eredményezi. Például egy csapda azt eredményezi, hogy az összes szomszédos négyzet szellős lesz:
3	0	0	A  fejezetben említett legegyszerűbb ágensek a reflexszerű ágensek voltak, amelyek cselekvései az állapotok és a cselekvések közötti közvetlen leképzésen alapulnak. Az ilyen ágensek nem képesek olyan környezetben tevékenykedni, ahol e leképzés tárolási igénye túl nagy lenne, vagy ahol a leképezés megtanulása túl sok időt venne igénybe. A célorientált ágensek azonban sikerrel járhatnak a jövőbeli cselekvéseknek és annak a számbavételével, hogy ezen cselekvések kimenetelei mennyire kívánatosak.
25	0.518519	0	Valószínűségi módszerek helyett kezelhetjük a bizonytalanságot úgynevezett robusztus (robust) módszerekkel is. A robusztus módszer csak korlátozott mértékű bizonytalanságot enged meg a probléma minden egyes paraméterével szemben, ugyanakkor nem társít valószínűségeket az egyes értékekhez a megengedett határon belül. A robusztus megoldás a bemeneti értékektől függetlenül megfelelően működik mindaddig, amíg azok nem lépnek át egy határt. A robusztus módszerek egy extrém formája a  fejezetben tárgyalt alkalmazkodó tervezés (conformant planning), ami úgy alakít ki terveket, hogy egyáltalán nincs információja az állapotról.
21	0.4375	0	Az n karú rabló elmélet felhasználható arra, hogy bizonyítsuk a genetikus algoritmusok szelekciós stratégiájának ésszerűségét (lásd  fejezet). Tekintsünk az n karú rabló problémában minden egyes kart egy lehetséges génfüzérnek, továbbá a pénz bedobása ennél a karnál feleljen meg ezen gének reprodukciójának. Ebben az esetben a genetikus algoritmus optimálisan osztja szét a pénzt akkor, ha adott a függetlenségi feltételezések egy megfelelő halmaza.
1	0.551724	1	• Szerkezetjósló, amely résszerkezeteket származtat le az adatokból és a lehetetlen szerkezeteket kizárja. Ez a rész felel meg a szakértő tudásának (pl.:C[6]H[13]NO[4] kb.10000 lehetséges szerkezettel rendelkezik.).
27	0.6	0	A korlátozott optimalitásról egyelőre keveset tudunk. Nagyon egyszerű gépekhez és valamilyen mértékben korlátozott környezetekhez korlátozottan optimális programok konstruálhatók (Etzioni, 1989; Russell és társai, 1993). Bonyolult környezetekben működő nagy, általános rendeltetésű számítógépek esetén azonban fogalmunk sincs, hogy milyenek legyenek a KO-programok. Ha a korlátozott optimalitás konstruktív elmélete valaha is megfogalmazható lesz, hinnünk kell, hogy a korlátozottan optimális programok tervezése nem fog túlságosan függni a használt számítógép részleteitől. A tudományos kutatást nagyon megnehezítené, ha például kiderülne, hogy egy gigabájtos memóriájú gép néhány kbájt memóriával való bővítése lényegi különbséget jelentene a KO-program tervében. Ahhoz, hogy ez ne történjen meg, a korlátozott optimalitás kritériumait kissé lazábban kell kezelni. Az aszimptotikus bonyolultság (A) függelék) mintájára definiálhatjuk az aszimptotikus korlátozott optimalitást, AKO) (asymptotic bounded optimality, ABO) (Russell és Subramanian, 1995). Tegyük fel, hogy egy P program egy M gép esetén korlátozottan optimális a környezetek E osztályában, ahol a környezetek komplexitása nem korlátozott. Ekkor a P' program egy AKO-program M részére E-ben, ha egy P programot egy kM gépen futtatva a teljesítményében túlszárnyalja, és ahol a kM gép k-szor gyorsabb (vagy nagyobb), mint M. Ha k nem bizonyulna óriásinak, elégedettek lehetnénk, ha nemtriviális környezetek és nemtriviális architektúrák esetén AKO-programokkal rendelkezünk. Kevés ráció lenne abban, hogy óriási erőfeszítések árán inkább KO-, mint AKO-programokat keressünk, ha a használható gépek nagysága és sebessége, úgy tűnik, egy adott idő alatt konstans mértékben úgyis nő.
2	0.894737	1	A 70. oldal specifikációja szerint a környezet topológiája (a mezők elrendezése) a priori ismert, tehát nincs szükség annak feltérképezésére, és mivel már megtisztított mezők nem válhatnak újra piszkossá, azt sem kell nyilvántartani, hogy hol van még kosz. Így egy belső állapot bevezetésével nem nyerünk semmit.
24	0.625	0	A sarokpontban találkozó három él a körülöttük lévő teret nyolc oktánsra osztja. A sarokpontot bármely, anyaggal nem kitöltött oktánsból lehet szemlélni. A nézőpont oktánson belüli elmozdítása a képen látható csatlakozások jellegét megváltoztatni nem fogja. A  ábrán látható 1-es címkéjű sarokpontot a maradó hét oktánsból szemlélve a  ábrán látható csatlakozáscímkéket kapjuk.
5	0.818182	0	A véges tartományú kényszerkielégítési problémáknak hosszú történetük van. A gráfszínezés például (amelynek a térképszínezés csak egy speciális esete) a matematika régi problémáinak egyike. Biggs és társai (Biggs és társai, 1986) szerint a négyszín-sejtést (minden síkbeli gráf kiszínezhető legfeljebb négy színnel) először Francis Guthrie, de Morgan egyik tanítványa fogalmazta meg 1852-ben. A feladat ellenállt a megoldási kísérleteknek – annak ellenére, hogy néhányan publikációkban az ellenkezőjét állították –, mígnem Appel és Haken (Appel és Haken, 1977) előállt egy számítógépre is támaszkodó bizonyítással.
4	0.333333	0	Az (a)-ból a h[2] (Manhattan-távolság) vezethető le. A magyarázat az, hogy h[2] helyes eredményt adna, ha minden lapkát sorra elmozgatnánk a saját célhelyére. A (b)-ből származtatott heurisztikával a  feladatban foglalkozunk. A (c)-ből a h[1] (a nem a helyükön lévő lapkák száma) vezethető le, mert ez lenne a helyes eredmény, ha a lapkákat a célpozíciójukba egy lépésben el lehetne mozgatni. Vegyük észre, hogy lényeges, hogy e módszer által generált relaxált problémákat lényegében keresés nélkül meg lehet oldani, mert a relaxált szabályok a probléma 8 független részproblémává történő dekompozícióját teszik lehetővé. Ha a relaxált problémát nehéz megoldani, akkor a kapcsolatos heurisztikus értékek számítása drágának fog bizonyulni.^[39]
2	0.894737	1	d) Egy állapottal rendelkező reflexszerű ágens jobban teljesíthet egy egyszerűnél? Tervezzen egy ilyen ágenst, és mérje meg a teljesítményét különböző környezetekben! Tud ilyen típusú racionális ágenst tervezni?
12	0.952381	0	Sokan mondják, hogy a HFH-tervkészítés előnye, hogy „tegyünk egy körutat Los Angelesből New Yorkba, és vissza” típusú problémákat is meg tud oldani, amelyeket nehéz nem HFH-jelölésekkel kifejezni, hiszen a kiinduló és a célállapotok azonosak lennének (Ott(LA)). Tud mondani megfelelő reprezentációt, illetve meg tudja-e oldani ezt a problémát HFH-k nélkül?
24	0.833333	1	A SIFT alakzatfelismerőnek számos módosítása ismert, melyek néhány új hasznos tulajdonsággal ruházzák fel az algoritmust. A Rotation invariant feature transform (RIFT) például a SIFT forgatás invariáns változata.
14	0.782609	0	A Dempster–Shafer-elméletet (Dempster–Shafer theory) azzal a céllal hozták létre, hogy megkülönböztethetővé váljon a bizonytalanság (uncertainty) és az ismerethiány (ignorance). Ez az elmélet egy állításnak nem a valószínűségét számítja ki, hanem helyette azt, hogy mennyi annak a valószínűsége, hogy a bizonyíték támogatja az állítást. A bizonyosságnak ezt a mértékét bizonyosságfüggvénynek (belief function) nevezik, és Bel(X)-szel jelölik.
21	0.4375	0	Az n karú rabló probléma a világ sok, létfontosságú területén számos valós feladat formális modelljeként szolgálhat, mint például az MI kutatás-fejlesztés éves költségvetésének kialakítása. Mindegyik kar egy cselekvésnek felel meg (mint például 400 millió forint elkülönítése MI-tankönyvek fejlesztésére), és a kar meghúzásával járó nyeremény a cselekvés választása esetén várható haszonnak felel meg (esetünkben óriási haszon várható). Az ismeretlen terület feltárása – akár egy új kutatásról, akár egy új üzletközpontról van szó – kockázatos, drága, bizonytalan haszonnal jár; másrészt ha egyáltalán nem kutatunk, akkor soha nem fogunk semmilyen értékes cselekvést felfedezni.
6	0.1	1	Van tetszőleges (véges) számú pénzdarabunk, ezeket sorba rakjuk, mindegyiken vagy fej vagy írás van felül. Ezután a játékosok lépésének van egy kötelező és egy opcionális része. Kötelező megfordítani egy fejet mutató érmét, majd még egy, a megfordított érmétől balra található pénz szabadon megfordítható (ez írás és fej is lehet). A szabályból következik, hogy előbb vagy utóbb véget ér a játék csupa írás állapotban. Az a győztes, aki az utolsó lépést teszi.
19	0.545455	1	Ez azt jelenti, hogyha G tartalmazza Fi Markov-takaróját (azaz M-et), akkor Fi-t M elszigeteli minden más változótól, így az osztályváltozótól is. Márpedig ez azt jelenti, hogy M ismeretében Fi-re már nincs szükség, mert nem hordoz új információt C-ről. Tehát Fi elhagyásával egy nem releváns változót hagyunk el. Ezt mutatja a Δ[G’]=Δ[G] egyenlőség, mely szerint az eredeti P(C|F=f) eloszláshoz képest nem nőtt az eltérés, tehát az osztályváltozó szempontjából Fi nem releváns. A G jegyhalmaz megfelelő megválasztásával közvetett módon előállítható a célváltozó Markov-takarója, ami egyúttal a releváns változók halmaza. Ez az alapja a szűrő típuscsaládba tartozó Markov blanket filter (MBF) algoritmusnak [10], de számos további módszer létezik, amely a Markov-takarót felhasználva választja ki a releváns jegyeket, mint például a Báyes-hálókon alapuló relevancia-analízis (BMLA) [17].
10	0.060606	0	A kategóriák öröklődés (inheritance) révén szolgálják a tudásbázis szervezését és egyszerűsítését. Ha kijelentjük, hogy az Élelem kategória minden egyes példánya ehető, és feltételezzük, hogy a Gyümölcs Élelem, az Alma viszont a Gyümölcs kategória egy alosztálya, akkor tudjuk, hogy minden alma ehető. Azt mondjuk, hogy az egyes almák az ehetőségi tulajdonságukat örökölték (inherit), jelen esetben az Élelem kategóriához való tartozás révén.
16	0.043478	0	A maximális várható hasznosság (MVH) (maximum expected utility, MEU) elve azt mondja ki, hogy egy racionális ágensnek azt a cselekvést kell választania, ami maximalizálja az ágens várható hasznosságát. Ha cselekvések egy legjobb sorozatát szeretnénk kiválasztani ennek az egyenletnek a felhasználásával, akkor az összes lehetséges cselekvéssorozatot számba kellene venni, és a legjobbat kiválasztani, ami hosszú sorozatok esetén nyilvánvalóan nem lehetséges. Ezért ez a fejezet egyszerű döntésekre (általában egyetlen cselekvésre vonatkozó döntésekre) koncentrál, és a következő fejezet mutat be új technikákat cselekvéssorozatok hatékony kezelésére.
20	0.035714	0	ahol azt feltételeztük, hogy az összes hipotézis meghatároz X-re valamilyen eloszlást. Ez az összefüggés azt mutatja, hogy a predikció az egyes hipotézisekből adódó predikciók súlyozott összege. Maguk a hipotézisek tulajdonképpen a nyers adatok és a predikciók közti „közvetítők”. A Bayes-megközelítésben a P(h[i]) prior hipotézisek (hypothesis prior), illetve a hipotézisek mellett fellépő P(d|h[i]) adatvalószínűségek (likelihood) a kulcsmennyiségek.
9	0.931034	1	 Figyelje meg a  ábrán bemutatott bennfoglalási rácsokat. a. Hozza létre a rácsot a következő mondatra: Alkalmaz(Anyja(János), Apja(Richárd)). b. Hozza létre a rácsot a következő mondatra: Alkalmaz(IBM, y) („Mindenki az IBM-nél dolgozik”). Figyeljen arra, hogy minden olyan lekérdezést felsoroljon, amely egyesíthető a mondattal. c. Tételezzük fel, hogy a Tárol indexel minden egyes mondatot, minden egyes csomópontra a bennfoglalási rácsban. Magyarázza meg, hogy a Betölt eljárásnak hogyan kell működnie, amikor néhány mondat ezek közül változókat is tartalmaz; példaként használja a mondatokat az (a) és (b) részfeladatokból, és a következő lekérdezést: Alkalmaz(x, Apja(x)).
5	0.181818	1	A fenti értékadás következtében az {NSW=RED, WA=RED, NT=BLUE} behelyettesítés adódik, ami konzisztens, így újfent következhet az AC3/MAC alapú következtetés. Ennek során először is {BLUE}-ra redukáljuk az NT változó értékkészletét, majd létrehozunk egy él-listát az NT-re mutató élekből, és elkezdjük ezen végrehajtani az AC3 algoritmust. Kiindulási él-listánk tehát a következő:
19	0.909091	1	Az orvosi munkát, így a diagnosztikai erőforrások felhasználását, tehát a laboratóriumok munkáját irányelvek is segítik. Az irányelv ajánlásait az egészségügyi szolgáltató az egyedi beteg ellátásakor a beteg szükségleteinek, állapotának, biztonságának és egyéni preferenciáinak figyelembevételével, továbbá a rendelkezésre álló feltételek, és lehetőségek körültekintő mérlegelésével használhatja.
6	0.45	0	A horizontproblémát (horizont problem) nehezebb megszüntetni. A probléma akkor jelentkezik, amikor a program az ellenfél egy olyan következő lépésével kerül szembe, ami komoly károkat okoz, és egyben elkerülhetetlen. Tekintsük a  ábra sakkjátszmáját. Fekete egy kicsit erősebb pontértékű, ha azonban Fehér a hetedik sorról a nyolcadikba tudja juttatni a gyalogját, akkor vezérré változik, és Fehér könnyen megnyeri a játszmát. Fekete ezt 14 lépésváltással elodázhatja, ha bástyával sakkot ad, de a fehér gyalog elkerülhetetlenül vezérré fog változni. A rögzített mélységű keresések problémája, hogy ezek azt gondolják, hogy ilyen elodázó lépésekkel el lehet kerülni a vezérré változtató lépést. Azt mondjuk, hogy az elodázó lépések a vezér váltását „a horizonton túlra kitolják”, egy olyan helyre, ahol ezt nem lehet észrevenni.  ábra - A horizonthatás. A fekete bástyával adott sorozatos sakk a „horizonton túlra” kényszeríti az elkerülhetetlen vezérré változtató lépést, és ezt a táblaállást enyhén előnyös állásként tünteti fel Fekete számára, holott Fehér számára ez egy biztos nyerő állás. A horizonthatás. A fekete bástyával adott sorozatos sakk a „horizonton túlra” kényszeríti az elkerülhetetlen vezérré változtató lépést, és ezt a táblaállást enyhén előnyös állásként tünteti fel Fekete számára, holott Fehér számára ez egy biztos nyerő állás.
18	0.684211	1	Egy lóversenyen fogadó szerencsejátékos nyereményének maximalizálása érdekében elhatározta, hogy készít egy olyan számítógépes programot, amely a futamokat leíró általános információk alapján képes megjósolni a győztes befutót [1]. A program elkészítéséhez segítséget is kért egy profi szerencsejátékostól. A profi fogadót arra kérte meg a program készítője, hogy magyarázza el a fogadási stratégiáját. Nem meglepő módon a profi képtelen volt megadni egy olyan általános szabályhalmazt, ami segíthet a megfelelő ló kiválasztásában. Másrészről, amikor a megadott versenyeket leíró adatok is rendelkezésre álltak a profinak nem okozott gondot a fogadási szabályok megalkotása, stratégiájának elmagyarázása (például: Fogadj arra a lóra, amely mostanában a legtöbb versenyt nyeri! Fogadj arra a lóra, amely mostanában a legnépszerűbb a fogadók körében!). Érezhető azonban, hogy az ilyen általános szabályok önmagukban elég pontatlanok, de az ilyen szabályok alkalmazása nem tűnik ésszerűtlennek, ha olyan becsléseket adnak meg, amelyek kicsivel jobbak, mintha véletlenszerűen fogadnánk. Ráadásul, ha más-más versenyekről ismételve megkérdezzük a profi véleményét, akkor a profi szerencsejátékos képes további kevésbé általános fogadási szabályokat megalkotni. Ahhoz, hogy az egyes versenyekből kivonatolt szabályokat versenyfogadásra fel tudjuk használni, ahhoz két problémával is szembe kell néznünk. Egyrészt, hogyan kellene kiválasztani a futamokat leíró adatokat úgy, hogy a profi képes legyen megfelelő fogadási szabályokat alkotni. Másrészt, a versenyekből kivonatolt szabályok miként kombinálhatóak össze egy sokkal pontosabb fogadási szabállyá.
3	0.333333	1	Saját felhasználói névvel és jelszóval belép a szerkesztő felületre majd ott a “Főmenü” választását követően az “Import adatbázisokból” menüpontra kattint. A program [auto] módban kiválasztja a szükséges formátumot és kódolást, de az importálásra szolgáló felületen manuálisan görgethető menüből is kijelölhető, hogy melyik adatbázisból származnak az adatok. A keresőablakban kiválasztandó az importra szánt fájl neve majd az “Import” gombra kattintva elvégezhető a művelet. Ennek eredményeként a továbbiakban az importált tételek a felhasználó szerkesztői felületén lesznek láthatók, melyek szerkeszthetők.
6	0.1	1	Az adatbázis egy faszerkezettel reprezentálható, érezhetően a rögzített játékok számának függvényében egyre és egyre több elágazással juthatunk el a lehetséges kimenetelekig. A játék kezdetén nyújt nekünk segítséget, megfelelő mélység után a nagy elágazásszámok miatt már nem tudjuk alkalmazni, tehát egy meghatározott lépés elérése után megkezdi működését maga a mesterséges intelligencia, amely algoritmusok segítségével megpróbál olyan lépéseket tenni, amellyel a kívánt cél (jelen esetben a nyereség) végeredményként elérhetővé válik.
24	0.833333	1	[Scalespace2.png]  ábra - Ugyanazon kép különböző skálán történő reprezentációja. (forrás: Wikipedia – Scale space) Ugyanazon kép különböző skálán történő reprezentációja. (forrás: Wikipedia – Scale space)
20	0.714286	0	Azt a hálót, amelyben az összes bemenet közvetlenül a kimenetekre kapcsolódik egyrétegű neurális hálónak (single layer neural network) vagy perceptron (perceptron) hálónak nevezzük. Mivel mindegyik kimeneti egység független a többitől – mindegyik súly csak egyetlen kimenetre van hatással – vizsgálatainkat korlátozhatjuk az egykimenetű perceptronra, mint azt a  (a) ábra magyarázza.
3	0.25	1	Ismert, hogy NOR kapuk és vezetékek segítségével tetszőleges logikai függvényt megvalósító áramkör felépíthető. Ha a SAT problémában szereplő logikai függvényt megvalósítjuk egy áramkörrel, majd az áramkör egyes komponenseit az aknakereső-ekvivalenseikkel helyettesítjük, az áramkör bemeneteire „záró” áramkört, kimenetére pedig a  ábrán látható „konstans igaz” elemet tesszük, olyan aknakereső-táblát kapunk, amelynek konzisztenciája ekvivalens a logikai formula kielégíthetőségével. Mivel az ekvivalens generálása polinomiális ideig tart, és egy állítólag kielégítő aknaelrendezés ellenőrzése is polinom idejű, a probléma valóban NP-teljes.  ábra - Konstans igaz áramköri elem (ha a bemenetén nincs akna, ellentmondás jön létre) Konstans igaz áramköri elem (ha a bemenetén nincs akna, ellentmondás jön létre)
17	0.533333	0	A 3. és  fejezetben nemdeterminisztikus és részlegesen megfigyelhető tervkészítési problémákat tanulmányoztunk, és megállapítottuk, hogy a hiedelmi állapot (belief state) – az aktuális állapotok halmaza, amelyekben az ágens lehet – kulcsfogalom a megoldások leírására és kiszámítására.
14	0.130435	0	A  (b) ábra a változók igazán szerencsétlen sorrendjét mutatja: MáriaTelefonál, JánosTelefonál, Földrengés, Betörés, Riasztás. Ez a háló 31 önálló valószínűség meghatározását igényli – pontosan annyit, amennyi a teljes együttes valószínűség-eloszlás függvény megadása. Azonban fontos felismerni, hogy a három háló bármelyike képes pontosan ugyanannak az együttes valószínűség-eloszlás függvénynek a reprezentálására. A két utóbbi egyszerűen csak nem reprezentálja az összes feltételes függetlenségi relációt, és így rengeteg szükségtelen érték meghatározására kényszerül.
22	0.37037	0	A második lépés az S-re vonatkozó szabály megváltoztatása úgy, hogy szükségessé tegyen egy igei kifejezést, melynek összes kiegészítése megvan, és így [] alkategória-listája van. Ez azt jelenti, hogy az „I grab the gold” érvényes mondat, de a „You give” nem az. Az új szabály,
24	0.625	0	Egy ábrán található n számú vonal kombinatorikusan elvileg lehetséges címke-hozzárendelésből csupán csekély számú hozzárendelés lehetséges fizikailag. Ezeknek a címkézéseknek a megállapítása az ún. vonalcímkézési probléma. Jegyezzük meg, hogy a probléma csak akkor értelmes, ha a címke a vonal mentén nem változik. Ez nem mindig igaz, hiszen a görbült objektumok képein a címke egy vonal mentén igenis változhat. Ebben a részben ez nem jelent problémát, mert csak poliéderes objektumokkal foglalkozunk.
4	0.375	0	A h(n) heurisztikus függvénytől elvárjuk, hogy az n csomópontbeli állapottól kezdve becsülje a megoldás költségét. Hogyan lenne képes egy ágens egy ilyen függvény megalkotására? Egy megoldást az előbbi részben adtunk meg – ami nevezetesen egy olyan relaxált problémának a kitalálása, amihez egy optimális megoldást könnyű találni. Egy másik megoldás a tapasztalatból való tanulás. A „tapasztalaton” itt azt értjük, hogy nagyon sok 8-as kirakójátékot kell megoldani. A 8-as játék minden optimális megoldása egy példát jelent, amiből h(n) tanulható. Minden példa egy, a megoldási úton elhelyezkedő állapotból és az onnan számított valós megoldási költségből áll. Ilyen példák alapján induktív tanulási algoritmus (inductive learning) segítségével egy olyan h(n) függvényt konstruálhatunk, amely (szerencsével) képes megjósolni a megoldás költségét a keresés során felbukkanó más állapotok esetén is. Ennek módszertanát, legyenek ezek neurális hálók, döntési fák vagy más módszerek, a  fejezet mutatja be (a  fejezetben leírt megerősítéses tanulás szintén alkalmazható).
18	0.684211	0	A következő dilemmával kerültünk szembe: ha nem korlátozzuk a szóba jövő függvények terét, akkor az algoritmus nem lesz képes tanulni, viszont ha korlátozzuk a függvények terét, akkor fennáll a veszély, hogy kihagyjuk a keresett függvényt. Két lehetőségünk van, hogy „kimeneküljünk” ebből a dilemmából. Az első, hogy nem csupán ahhoz ragaszkodunk, hogy az algoritmus egy tetszőleges konzisztens hipotézist adjon vissza, hanem ahhoz is, hogy részesítse előnyben az egyszerűeket (mint ahogy a döntési fa tanulásnál tettük). Ezen algoritmusok elméleti tárgyalása túlmegy ennek a könyvnek a keretein, de megemlítjük, hogy azon esetekben, amikor az egyszerű konzisztens hipotézisek keresése kezelhető probléma, a mintakomplexitás-eredmények jobbak, mint a csupán konzisztencián alapuló vizsgálatoké. A másik menekülési lehetőség, amelyet követni is fogunk, hogy a Boole-függvények teljes halmazából a megtanulható függvények részhalmazára fogunk koncentrálni. Az ötlet abban áll, hogy legtöbb esetben nincs szükségünk a Boole-függvények teljes kifejezőerejére, korlátozottabb nyelvek is kielégítők számunkra. A következőkben egy ilyen korlátozottabb nyelvet vizsgálunk meg részletesebben.
20	0.392857	0	Az EM algoritmus utolsó, itt bemutatott alkalmazása a rejtett Markov-modellek (RMM) (hidden Markov model, HMM) állapotátmenet-valószínűségeinek tanulása. Idézzük fel a  fejezetből, hogy a rejtett Markov-modellek olyan dinamikus Bayes-hálóval reprezentálhatók, amelyeknek egyetlen, diszkrét állapotváltozója van, amint ez a  ábrán is látható. Minden egyes adatpont egy véges hosszúságú megfigyeléssorozatnak felel meg, tehát a megoldandó probléma az, hogy megfigyelési sorozatok halmaza (vagy esetleg egyetlen hosszú sorozat) alapján állapotátmenet-valószínűségeket kell megtanulnunk.
4	0.458333	0	A hegymászó keresést néha mohó lokális keresésnek (greedy local search) is hívják, mert egy jó követő állapotot megragad, anélkül hogy megfontolná, merre lenne érdemes továbbmenni. Bár a mohóság a hét főbűn egyike, a mohó algoritmusok sokszor igen jól teljesítenek. A hegymászás gyakran igen gyorsan halad a megoldás felé, mert egy rossz állapoton általában nagyon könnyű javítani. Így például a  (a) ábrán látható állapotból indulva öt lépés elegendő, hogy elérjük a  (b) ábrán látható állapotot, melynek költsége h = 1, és amely igen közel van egy megoldáshoz. Sajnos a hegymászás gyakran megakad az alábbi problémák miatt:  ábra - (a) A 8-királynő probléma h = 17 heurisztikus költségbecslésű állapota, ahol minden olyan követő állapot h értékét megadtuk, amikor a királynőt a saját oszlopában mozgatjuk. A legjobb lépéseket bejelöltük. (b) Egy lokális minimum a 8-királynő térben. Az állapot h értéke egységnyi, azonban minden követőnek magasabb a költsége. (a) A 8-királynő probléma h = 17 heurisztikus költségbecslésű állapota, ahol minden olyan követő állapot h értékét megadtuk, amikor a királynőt a saját oszlopában mozgatjuk. A legjobb lépéseket bejelöltük. (b) Egy lokális minimum a 8-királynő térben. Az állapot h értéke egységnyi, azonban minden követőnek magasabb a költsége. * Lokális maximumok: egy lokális maximum egy csúcs, amely minden szomszédjánál magasabb, de a globális maximumnál alacsonyabb. A hegymászó algoritmusok, ha egy lokális maximum közelébe érnek, kénytelenek a csúcs felé tartani, ott azonban nincs tovább, és megakadnak. Ezt a problémát sematikusan a  ábra mutatja. Konkrétabban, a  (b) ábra állapota egy tényleges lokális maximum (azaz egy lokális minimum a h költségre nézve), bármely királynő bármilyen lépése csak ront a helyzeten. * Hegygerincek (ridges): egy hegygerincet a  ábra mutat. A hegygerinc egy olyan lokális maximum sorozatot eredményez, ahol egy mohó algoritmusnak igen nehéz navigálnia. * Fennsík (plateaux): a fennsík az állapottérnek egy olyan területe, ahol a kiértékelő függvény gyakorlatilag lapos. Lehet ez egy lapos lokális maximum, amelyből nincs tovább felfelé, de lehet egy váll (shoulder), ahonnan még lehetséges az előrehaladás (lásd  ábra). Egy hegymászó keresés képtelen lehet arra, hogy egy fennsíkról megtalálja a kivezető utat.
7	0.36	0	α ⊨ β akkor és csakis akkor, ha az (α ∧ ¬ β) nem kielégíthető Fontos A β mondat bizonyítása α alapján, az (α ∧ ¬β) kielégíthetetlenségének ellenőrzésével, pontosan megfelel a szokásos matematikai bizonyítási technikának a redukcio ad absurdumnak (szó szerint „redukció egy abszurd dologra”). Szokták ezt megcáfolás (refutation) általi bizonyításnak is nevezni vagy bizonyítás ellentmondás (contradiction) által. Feltételezzük, hogy a β mondat hamis, és megmutatjuk, hogy ez a feltételezés ellentmondásra vezet az ismert α axiómákkal. Ez az ellentmondás pontosan azt jelenti, mint amikor azt mondjuk, hogy az (α ∧ ¬β) mondat kielégíthetetlen.
11	0.346154	0	Ennek tetejébe, ha elvárjuk, hogy egy cselekvés kielégítsen egy literált, azt is biztosítanunk kell, hogy nem ront el egy másikat. Az olyan cselekvést, ami megfelel ennek az elvárásnak konzisztensnek (consistent) nevezzük. Például a Berakodás(C[2], p) cselekvés nem lenne konzisztens az aktuális céllal, mert negálja az Ott(C[2], B) literált.
5	0.181818	1	Most pedig egészítsük ki ezt a korlátot egy az előbbivel ekvivalens kvaternális érték-korláttá. Ehhez pedig vezessünk be egy újabb, 56. segédváltozót, amelynek neve legyen ZKH, értékkészlete pedig szokás szerint {1, 2, 3, 4, 5, 6, 7, 8}. A megfelelő kvaternális érték-korlát:
5	0.545455	0	Amikor egy változónak új értéket választunk, a legnyilvánvalóbban kínálkozó heurisztika annak az értéknek kiválasztása, amelyik a legkevesebb konfliktust eredményezi más változókkal. Ezt nevezik min-konfliktusok (min-conflicts) heurisztikának. Az algoritmus az  ábrán látható, a 8-királynő problémára történő alkalmazását az  ábrán mutatjuk be, a kiértékelés eredménye pedig az  ábrán szerepel.
27	0.8	0	Mit hoz majd a jövő? A sci-fi írók láthatóan jobban kedvelik a negatív utópiákat, mint a pozitívakat, valószínűleg azért, mert ez ad lehetőséget az érdekesebb cselekményekre. De a mesterséges intelligencia mindeddig más forradalmi technológiákhoz (nyomtatás, csővezetékek, légi utazás, telefónia) hasonlóan viselkedett: pozitív aspektusaik ellensúlyozták negatív hatásaikat.
3	0.25	0	A körutazási problémák (touring problems) az útkeresési problémák rokonai egy fontos különbséggel. Tekintsük például azt a problémát, hogy „A  ábra minden egyes városába látogass el legalább egyszer úgy, hogy Bukarestből indulj, és az utat ott is fejezd be.” Az útkeresési problémához hasonlóan a cselekvés itt is két szomszédos város közötti utazásnak felel meg. De ebben a problémában az állapottér alapvetően más. Az ágens helye mellett minden egyes állapotban tárolni kell az ágens által korábban meglátogatott városokat is. Így a kiinduló állapot ebben az esetben a „Bukarestben vagyok, eddig meglátogattam {Bukarestet}” állapot lenne, míg egy tipikus közbenső állapot a „Vasluiban vagyok, eddig meglátogattam {Bukarestet, Csalánost, Vasluit}” állapot. A célteszt ellenőrizné, hogy az ágens Bukarestben van-e, és végiglátogatta-e mind a 20 várost.
7	0.16	1	Akármennyire mi „tudjuk”, hogy a használt nevek minek rövidítéseként kerültek a formális rendszerbe, e tudás nélkül másvalaki ezt a tudásbázist „elolvasni” nem tudja. Ettől függetlenül a gépi rendszer, amely képes volt az „A” esetben a tudásbázis alapján levezetni pl. azt, hogy nyílván igaz, hogy:
10	0.969697	0	Emlékezzen arra, hogy a szemantikus háló öröklődési információját logikailag alkalmas implikációs állításokkal ki lehet fejezni. Ebben a feladatban megfontoljuk az ilyen állításokra épülő öröklődési következtetés hatékonyságát. a. Vegyük egy használtautó-katalógus információtartalmát – hogy az 1999-es Mitsubishi Carisma értéke 3 millió Ft. Tegyük fel, hogy az összes információ (a több tízezer modell részére) a fejezetben ajánlott logikai szabályok formájában van megfogalmazva. Írjon fel három ilyen szabályt, az egyik az 1999-es Carismáról szóljon. Hogyan használná a szabályokat, hogy egy konkrét gépkocsi értékét megtalálhassa (például XY, ami egy 1999-es Carisma), ha adott egy hátrafelé láncolt tételbizonyító, mint amilyen például a Prolog? b. Hasonlítsa össze az ennek a problémának a megoldására alkalmazott hátrafelé láncolt következtetési módszer és a szemantikus hálóban használt öröklődési séma hatékonyságát. c. Magyarázza meg, hogy az előrefelé láncolt következtetés hogyan teszi lehetővé egy logikai rendszer számára ugyanannak a problémának egy hatékony megoldását, feltéve, hogy a tudásbázis csak 10 000 szabályt tartalmaz az árakról. d. Írjon le egy olyan helyzetet, ahol sem az előrefelé, sem a hátrafelé láncolt következtetés nem teszi lehetővé a konkrét gépkocsira vonatkozó árlekérdezés hatékony megvalósítását. e. Tud olyan megoldást ajánlani, ami lehetővé teszi, hogy ezt a fajta lekérdezést a logikai rendszerek mindegyikében hatékonyan tudjuk kezelni? (Segítség: emlékezzen arra, hogy az ugyanahhoz a kategóriához tartozó két gépkocsinak ugyanaz az ára.)
19	0.545455	1	A jegykiválasztás alapvetően befolyásolja egy probléma kezelhetőségét, a megoldás erőforrásigényét. Egyfelől a bemeneti jegyek (változók) terének dimenziócsökkentése, másfelől a kiválasztott változók relevanciája által. Egyszerűbben fogalmazva, nem közömbös, hogy hány jegy kerül kiválasztásra, és ezek megfelelőek-e, azaz jól megragadható-e velük az adott probléma. A cél minél kevesebb és a problémát minél jobban körülhatároló jegyek kiválasztása. A tárgyterületek jelentős hányadánál akár több száz vagy több ezer bemeneti jegy is előfordulhat, ennél fogva például egy tanuló algoritmus alkalmazhatóságát alapvetően meghatározza, hogy alkalmazunk-e jegykiválasztást. Értelemszerűen más lesz a tanulás sebessége, ha például tíz releváns jegy alapján történik vagy ha több száz jegyből indul ki, melyek egy része irreleváns.
11	0.615385	0	Három egyszerű megközelítés létezik, hogy célliterálok konjunkcióihoz költséget becsüljünk. A maximális szint (max-level) heurisztika egyszerűen a célok közüli maximális szintköltségét veszi, ami elfogadható, de nem feltétlen nagyon pontos. A szintösszeg (level sum) heurisztika a részcél függetlenségi feltételezésből a célok szintköltségeinek összegét adja. Ez nem elfogadható, de nagyon jól működik olyan gyakorlati problémákra, amelyek nagymértékben részekre bonthatók. Ez sokkal pontosabb, mint a  alfejezetben bemutatott nem-kielégített-célok-heurisztika. A mi feladatunkban a Van(Süti) ∧ Megevett(Süti) konjunktív célhoz rendelhető heurisztikus becslés 0 + 1 = 1, míg a helyes válasz 2. Mindezeken túl, ha eltávolítjuk a Süt(Süti) cselekvést, a becslés még mindig 1, de a konjunktív cél ekkor már elérhetetlen. Végezetül, a halmazszint (set-level) heurisztika azt a szintet keresi meg, ahol a konjunktív cél összes literálja megjelenik a tervkészítési gráfban, és nincsenek közöttük kölcsönösen kizáró párok. A heurisztika a korrekt 2 értéket adja az eredeti feladatra és végtelent a Süt(Süti) nélküli feladatra. Ez előnyben van a maximális szint heurisztikával szemben, és kimagaslóan jól működik azon feladatokban, ahol sok kölcsönhatás van a résztervek között.
9	0.965517	0	Tételezzük fel, hogy betöltjük egy logikai adatbázisba az amerikai választási címjegyzéket, amely felsorolja a korát, a lakóhelyét, a születési dátumát és az anyja nevét minden személynek, társadalombiztosítási számokat használva azonosító adatként. Így tehát György kora így van megadva: Kora(443-65-1282, 56). A következő S1–S5 indexelő sémák melyike tesz lehetővé hatékony megoldást a Q1–Q4 lekérdezésekre (tekintsünk egy normál hátrafelé láncolást)? * S1: egy index minden egyes atomra minden egyes pozícióban. * S2: egy index minden egyes első argumentumra. * S3: egy index minden egyes predikátumatomra. * S4: egy index a predikátum és az első argumentum minden egyes kombinációjára. * S5: egy index a predikátum és a második argumentum minden egyes kombinációjára, és egy index minden egyes első argumentumra (nem standard). * Q1: Kora(443-44-4321, x) * Q2: Lakik(x, Houston) * Q3: Anyja(x, y) * Q4: Kora(x, 34) ∧ Lakik(x, PiciVárosUSA)
1	0.862069	0	Robotika: A mikrosebészetben manapság sok sebész robotsegédekre támaszkodik. A HipNav rendszer, miután számítógépes látási technikák segítségével létrehozta a páciens belső anatómiájának háromdimenziós modelljét, robotszabályozással irányítja a csípőprotézis behelyezését (DiGioia és társai, 1996).
5	0.181818	1	Látható, hogy az AC3 az előzőekben vizsgált előretekintésnél egy fokkal komplexebb következtetési algoritmus (bár első lépésben ugyanaz volt a hatása, mint az előretekintésnek), és ennek megfelelően számításigényesebb is, viszont nem csak az aktuális értékadásban szereplő változóhoz kapcsolódó éleket teszi konzisztenssé, hanem az eddigi információk birtokában az összeset. Tehát az előbbi ábrán látható KKP-re bátran kijelenthető, hogy 2-konzisztens (azaz minden 2-hosszú útja konzisztens).
8	0.322581	0	A kvantorok sorrendje tehát nagyon fontos. Még világosabbá válik, ha zárójeleket is alkalmazunk. A ∀x (∃y Szeret(x, y)) azt jelenti, hogy mindenkinek van egy bizonyos tulajdonsága, nevezetesen, az a tulajdonság, hogy mindenki szeret valakit. Másrészt, a ∃x (∀y Szeret(x, y)) azt jelenti, hogy a világban valakinek van egy bizonyos tulajdonsága, méghozzá az, hogy mindenki szereti őt.
17	0.533333	0	Vegyük észre, hogy bár az RMMDF-eket sikeresen redukáltuk az MDF-ekre, a kapott MDF-eknek folytonos (és általában sokdimenziós) állapotterük van. A  és  alfejezetekben leírt algoritmusok egyike sem alkalmazható közvetlenül ilyen MDF-ekre. Kiderült, hogy az érték- és eljárásmód-iterációnak kifejleszthetők olyan változatai, amelyek folytonos állapotú MDF-ekre is alkalmazhatók. Az alapötlet az, hogy egy π(b) eljárásmód reprezentálható a hiedelmi állapot tér olyan részeinek egy halmazaként, amelyek mindegyikéhez egy adott optimális cselekvés tartozik.^[174] Az értékfüggvény b különböző lineáris függvényét rendeli az egyes térrészekhez. Minden érték- és eljárásmód-iterációs lépés finomít a térrészek határain, és új térrészeket vezethet be.
13	0.590909	0	Ezt a szabályt feltételfeloldásnak (conditioning) hívjuk. A marginalizálás és a feltételfeloldás szabályai előnyöseknek fognak bizonyulni mindenfajta valószínűségi kifejezéseket tartalmazó következtetésben.
25	0.111111	0	Egyes távolságmérők csak nagyon kicsi vagy nagyon nagy távolságokra használhatók. A kis távolságú szenzorok közé tartoznak a taktilis, vagyis tapintásalapú érzékelők (tactile sensors), mint például az érzékelőbajusz, lökhárító vagy az érintésérzékeny bőr. A skála másik végén a globális helymeghatározó rendszer (Global Positioning System, GPS) áll, amely a műholdakból érkező impulzusok alapján számítja a távolságot. Jelenleg két tucat műhold kering orbitális pályán, és mindegyik két külön frekvencián sugároz jeleket. A GPS-vevőkészülékek a fázistolásból tudják kiszámítani a műholdtól való távolságukat. Több műholdtól érkező jel alapján háromszögeléssel néhány méteres pontossággal meghatározható a Földön elfoglalt tényleges pozíció. A differenciális GPS (differential GPS) még egy pontosan ismert helyen lévő földi vevő jelét is használva – ideális esetben – milliméteres pontosságot ér el. Sajnálatos módon a GPS nem használható beltérben vagy víz alatt.
14	0.608696	0	ahol mb(X[i]) jelöli az X[i] Markov-takarójában, MB(X[i])-ben lévő változók értékeit. Amint a  feladat mutatja, egy változó valószínűsége a Markov-takarójának ismeretében arányos a változó szüleivel vett feltételes valószínűségének és az egyes gyermekek azok szüleivel vett feltételes valószínűségeinek a szorzatával:
9	0.793103	0	Az ebben a fejezetben az eddig leírt következtetési módszerek közül egyik sem foglalkozott az egyenlőséggel. Három jól elkülöníthető megközelítést alkalmazhatunk. Az első az, hogy axiómákkal látjuk el az egyenlőséget – vagyis leírunk mondatokat az egyenlőségi relációról a tudásbázisban. El kell mondanunk, hogy az egyenlőség reflexív, szimmetrikus, tranzitív, és hogy az egyenlők helyettesíthetők egyenlőkkel bármely predikátumban vagy függvényben. Ezért van szükségünk három alapaxiómára, majd ezután egy továbbira minden egyes predikátumhoz vagy függvényhez:
9	0.931034	1	 Tételezzük fel, hogy betöltjük egy logikai adatbázisba az amerikai választási címjegyzéket, amely felsorolja a korát, a lakóhelyét, a születési dátumát és az anyja nevét minden személynek, társadalombiztosítási számokat használva azonosító adatként. Így tehát György kora így van megadva: Kora(443-65-1282, 56). A következő S1–S5 indexelő sémák melyike tesz lehetővé hatékony megoldást a Q1–Q4 lekérdezésekre (tekintsünk egy normál hátrafelé láncolást)? * S1: egy index minden egyes atomra minden egyes pozícióban. * S2: egy index minden egyes első argumentumra. * S3: egy index minden egyes predikátumatomra. * S4: egy index a predikátum és az első argumentum minden egyes kombinációjára. * S5: egy index a predikátum és a második argumentum minden egyes kombinációjára, és egy index minden egyes első argumentumra (nem standard). * Q1: Kora(443-44-4321, x) * Q2: Lakik(x, Houston) * Q3: Anyja(x, y) * Q4: Kora(x, 34) ^ Lakik(x, PiciVárosUSA)
2	0.789474	0	A tanuló elem tervezése nagyrészt a végrehajtó elem tervezésétől függ. Amikor egy olyan ágenst próbálunk tervezni, amely megtanul egy bizonyos képességet, az első kérdés nem a „hogyan fogom én ezt megtanulni?”, hanem a „milyen teljesítményelemre lesz az ágensemnek szüksége ennek végrehajtásához, ha már megtanulta, hogyan kell?”. Ha adott egy megtervezett ágens, tanuló eljárások az ágens minden részének javításához készíthetők.  ábra - Tanuló ágensek egy általános modellje Tanuló ágensek egy általános modellje
9	0.62069	0	A teljes bizonyítási eljárás létezésének kérdése a matematikusokat érdekli közvetlenül. Ha egy teljes bizonyítási eljárás megtalálható matematikai állításokra, ebből két dolog következik. Először is, az összes tétel előfeltételeit mechanikusan elő tudjuk állítani; másodszor, a teljes matematika felépíthető alapaxiómák halmazának logikai következményeként. A teljesség kérdésének vizsgálata így a 20. századi matematika néhány legfontosabb eredményényének a megszületéséhez vezetett. 1930-ban Kurt Gödel német matematikus bebizonyította az első teljességi tételt (completeness theorem) az elsőrendű logikára, megmutatva, hogy minden kikövetkeztetett mondatnak létezik véges bizonyítása. (Gyakorlatban is felhasználható bizonyítási módszert viszont nem találtak egészen addig, amíg J. A. Robinson nem publikálta a rezolúciós algoritmust 1965-ben.) 1931-ben Gödel bebizonyította a még híresebb nemteljességi tételt (incompleteness theorem). A tétel kimondja, hogy egy logikai rendszer, amely tartalmazza az indukció elvét – amely nélkül a diszkrét matematika igen kis része építhető fel – szükségszerűen nem teljes. Ebből az következik, hogy léteznek olyan kikövetkeztetett mondatok, amelyeknek a rendszeren belül nincs véges bizonyítása. Lehet, hogy a tű ott van a metaforikus szénakazalban, de nincs olyan eljárás, amely garantálná, hogy megtaláljuk.
21	0.125	1	Az aktív tanulás a gépi tanulás egy egyre erősödő ága. Olyan területeken alkalmazzák sikerekkel, ahol az adatgyűjtés valamilyen szempontból költséges, ezért már az adatgyűjtés során szükséges a tanulás megkezdése.
25	0.074074	1	A falmászó robotokat elsősorban nehezen hozzáférhető környezetben, sokszor távfelügyeletes technikával vezérelve használják. A már említett nukleáris alkalmazásokon kívül az épületek felületeinek javítására, toronyházak ablakainak tisztítására is igénybe veszik a mászó robotokat. A víz alatti tevékenységi területhez sorolható a hidak lábainak, tengeri fúrótornyok, hajók oldalainak, valamint a csőhálózatok karbantartása, vizsgálata és tisztítása. A vegyiparban veszélyes anyagok összegyűjtésére és vizsgálatára alkalmazhatnak mászó, vagy lépegető berendezéseket. Az alagutak és csatornák feltérképezéséhez is megfelelő eszköz a lépegető robot. Nagy jelentőségű alkalmazási terület lehet a taposó aknák felderítése, összegyűjtése, esetleg megsemmisítése. Ezekben a munkafeladatokban fontos szerepe van a nagyszámú környezeti érzékelő összehangolt felhasználásának.
14	0.130435	0	 ábra - A háló struktúrája függ a hozzáadás sorrendjétől. A csomópontokat mindegyik hálóhoz felülről lefelé haladva adtuk hozzá. A háló struktúrája függ a hozzáadás sorrendjétől. A csomópontokat mindegyik hálóhoz felülről lefelé haladva adtuk hozzá. * Riasztás hozzáadása: nyilvánvaló, ha mindketten telefonálnak, akkor valószínűbb, hogy a riasztó megszólalt, mintha csak egyikük, vagy egyikük sem. Így mind a JánosTelefonál, mind a MáriaTelefonál szükséges mint szülő. * Betörés hozzáadása: ha ismerjük a riasztó állapotát, akkor a Jánostól vagy Máriától jövő telefonhívások léte vagy hiánya csupán azt jelezhetik, hogy cseng-e a telefonunk, vagy hogy Mária zenéje hangosra van-e állítva, de a betörésről nem nyújtanak további információt. Azaz
16	0.521739	0	Egy döntési háló a legáltalánosabb formájában az ágens jelenlegi állapotáról tartalmaz információkat, megadja az ágens lehetséges cselekvéseit, azt az állapotot, amit az ágens cselekvése eredményez, és ennek az állapotnak a hasznosságát. Tehát alapot szolgáltat az olyan hasznosságelvű ágensek megépítéséhez, amilyeneket a  alfejezetben vezettünk be először. A  ábra egy döntési hálót mutat a repülőtér helyszíne megválasztásának problémájához. Ez bemutatja a három felhasználásra kerülő csomóponttípust: * A véletlen csomópontok (chance nodes) (ovális) valószínűségi változókat jelölnek, pont úgy, ahogy a valószínűségi hálókban. Az ágens lehet bizonytalan az építési költségekben, a légi forgalom szintjében és a pereskedés lehetősége miatt, valamint a Halálesetek, a Zaj és a teljes Költség változókban, amelyek mindegyike szintén függ a kiválasztott helyszíntől. Minden egyes véletlen csomópontnak van egy feltételes valószínűségi táblája (FVT), ami a szülőcsomópontok állapotaival indexelt. A döntési hálókban a szülőcsomópontok lehetnek döntési csomópontok és véletlen csomópontok. Kiemelendő, hogy a jelenlegi-állapot véletlen csomópontok bármelyike része lehet egy nagyobb valószínűségi hálónak, ami az építkezés költségét, a légi forgalom nagyságát vagy a perek lehetőségét becsüli meg. * A döntési csomópontok (decision nodes) (négyszögek) azokat a beavatkozási pontokat reprezentálják, ahol a döntéshozónak lehetősége van a cselekvésre. Ebben az esetben a ReptérHelyszíne különböző értékeket vehet fel a megfontolás alatt álló helyszíneknek megfelelően. A választás befolyásolni fogja a kiadódó költséget, a biztonságot és a repülőtér által keltett zajt. Ebben a fejezetben feltételezzük, hogy egyetlen döntéssel foglalkozunk (azaz egyetlen ilyen csomópont létezik). A  fejezet tárgyalja azokat az eseteket, ahol több mint egy döntést kell meghozni. * A hasznosságcsomópontok (utility nodes) (rombusz) az ágens hasznosságfüggvényét reprezentálják.^[168] A hasznosságcsomópontnak szülője az összes olyan változó, amelyek által leírt kimeneteli állapotok közvetlenül befolyásolják a hasznosságot. A hasznosságcsomóponthoz tartozik egy leírás, ami az ágens hasznosságát adja meg egy szülői attribútumokon definiált függvénnyel. A leírás lehet a függvény egy táblázatos megadása, vagy lehet egy parametrikus additív vagy lineáris függvény.
4	0.625	0	A  fejezetben bemutattuk a diszkrét és a folytonos környezet közötti különbséget, arra is rámutatva, hogy a valósvilág-beli környezetek többsége folytonos. Az eddig leírt algoritmusok közül azonban egyik sem képes a folytonos állapottereket kezelni. Az állapotátmenet-függvény az esetek többségében végtelen számú állapottal térne vissza! Ez a részfejezet egy nagyon rövid bevezetőt ad néhány olyan lokális keresési technikához, melyek folytonos térben keresik az optimális megoldást. A téma irodalma óriási. Sok alaptechnika már a 17. században napvilágot látott, Newton és Leibniz kalkulusának kifejlődését^[45] követően. E technikákhoz a könyvben több helyen fogunk folyamodni, beleértve a tanulásról, a látásról és a robotikáról szóló fejezeteket. Röviden, mindenhol, ahol a valós világgal foglalkozunk. Fontos Evolúció és keresés
1	0.137931	1	Számos olyan probléma van, ahol ugyanazt a képet alapjaiban eltérő módon kell értelmezni. Ennek egy példája, hogy egy objektumot vizsgálhatunk egészében, vagy felbonthatjuk részekre. BP 6-nál a bal fölső ábra egy háromszög, míg ugyanez a kép BP 85-ben három szakaszt jelent. Szintén BP 85-ben egy szakaszt egynek kell venni, akkor is ha más szakaszok metszik, míg BP 87-ben minden metszéspont két részre osztja az eredeti szakaszt. Még súlyosabb probléma, amikor egy képet olyan objektumnak kell tekinteni, ami valójában nincs ott. Erre példa BP 97, ahol sok pont, vonal vagy kör egy háromszöget alkot. Mindebből az következik, hogy nem lehet egy képet önmagában értelmezni, csak egy egész problémát.  ábra - BP 97: háromszög - kör BP 97: háromszög - kör  ábra - BP 19: vízszintes nyak – függőleges nyak BP 19: vízszintes nyak – függőleges nyak
18	0.210526	0	Egy döntési fa (decision tree) bemenetként egy attribútumokkal (attributes) leírt objektumot vagy szituációt kap, és egy „döntést” ad vissza eredményként – a bemenetre adott válasz jósolt értékét. A bemeneti attribútumok lehetnek diszkrétek vagy folytonosak. Jelen tárgyalásban diszkrét bemeneteket tételezünk fel. A kimeneti érték szintén lehet diszkrét vagy folytonos; egy diszkrét értékkészletű függvény tanulását osztályozás (classification) tanulásnak, míg a folytonos függvény tanulását regressziónak (regression) nevezzük. Bináris (Boolean) osztályozásra fogunk koncentrálni, ahol minden példát vagy igaznak (pozitív), vagy hamisnak (negatív) sorolunk be.
9	0.931034	1	a) Legyenek a változók lehetséges értékei a természetes számok 0, 1, 2, …, ∞, és jelentse a „≥” predikátum azt, hogy „nagyobb vagy egyenlő”. Fordítsa le ezeket a mondatokat magyarra ebben az interpretációban!
6	0.1	1	Az előbbi játékot, bár eddig még nem volt szó róla, iteratívnak nevezzük, hiszen több körben, újra és újra lehetőséget adtunk a játékosoknak, hogy játszanak, döntsenek (szabályosan, vagy dezertőr módjára). Hasonlóképpen a Fogolydilemmát is lehet iteráltan, körről körre játszani. Ekkor azonban már érdemes lehet figyelembe venni az egyes játékosok (ellenfeleink) előző körökben meghozott döntéseit/lépéseit is. Ekkor tehát már olyan ún. iterált stratégiákban célszerű gondolkodnunk, amelyek nem „memóriamentes” módon, csak körről körre, „egylövetű jelleggel” hozzák meg döntéseiket, hanem már az addigi játszmákat is figyelembe veszik. Az egyik legismertebb ilyen iterált stratégia éppen ehhez az iterált Fogolydilemma játékhoz került kidolgozásra. A neve: Tit-for-Tat (TFT), magyarul: Szemet-Szemért. Lényege: az első körben kooperálunk, később pedig azt tesszük, amit ellenfelünk tett az előző körben.
13	0.590909	0	A legtöbb esetben valamely változó, bizonyos másokra vonatkozó tények esetén fennálló, feltételes valószínűségének kiszámítása fog bennünket érdekelni. A feltételes valószínűségek meghatározásához, először is alkalmazzuk a   egyenletet, hogy egy feltétel nélküli valószínűségen alapuló kifejezésre jussunk, majd ezen kifejezés értékét meghatározzuk a teljes együttes eloszlásból. Például a lyuk valószínűségét a fogfájás tény fennállása esetére az alábbiak szerint határozhatjuk meg:
10	0.090909	0	A „pontosan kettő” jelölés egy kicsit fura. Kénytelenek vagyunk kijelenteni, hogy két láb van, és ezek nem azonosak, és ha valaki egy harmadik lábbal jön elő, annak azonosnak kell lennie a kettő valamelyikével. A  alfejezetben látni fogjuk, hogy a leíró logikának nevezett formalizmus a „pontosan kettő” típusú korlátozásokat egyszerűbben fejezi ki.
10	0.939394	0	A jelen fejezetben kialakított taxonómia a szerzőktől származik, és részben azokon a tapasztalatokon alapul, melyeket a CYC projektből nyertek, részben Hwang, Schubert és Davis munkájára támaszkodva (Hwang és Schubert, 1993; Davis, 1990). Józan ész reprezentációs projekt inspiráló vitái Hayes The Naive Physics Manifestójában jelentek meg (Hayes, 1978; 1985b).
6	0.1	1	A 3-as így gondolkozhatott: „Az 1-es azért mondta, hogy „Nem”, mert vagy rajtam, vagy a 2-esen (vagy mindkettőnkön) piros kalap van. Ezt persze a 2-es is tudja, de ő is „Nem”-mel válaszolt. Ha rajtam fekete kalap lenne (és ő ezt nyilván látná), akkor tudná, hogy rajta van piros (hiszen akkor miatta válaszolt „Nem”-mel az 1-es) - ekkor „Igen”-nel válaszolt volna. De nem ezt tette. A 2-es is „Nem”-mel válaszolt. Tehát rajtam biztosan nem fekete, hanem piros kalap van.”
8	0.129032	0	Figyeljük meg, hogy nem minden objektumnak van arra szüksége, hogy elnevezzék – például a szándékolt interpretáció nem nevezi meg a koronát vagy a lábakat. Az is lehetséges, hogy egy objektumnak több neve legyen; létezik olyan interpretáció, amelyben a Richárd és a János is a koronára vonatkozik. Ha ez a lehetőség zavaró, emlékezzünk arra, hogy az ítéletlogikában teljességgel elfogadható egy olyan modell, amelyben a Felhős és a Napos egyaránt igaz. A tudásbázis feladata az, hogy kizárja azokat a modelleket, amelyek ellentmondásban vannak ismereteinkkel.
10	0.939394	0	A keretprobléma részleges megoldásával újra fellángolt az érdeklődés a cselekvésekről való következtetés deklaratív megközelítései iránt, amelyeket az 1970-es évek elejétől a speciális tervkészítő rendszerek háttérbe szorítottak (lásd  fejezet). A kognitív robotika (cognitve robotics) zászlaja alatt lényeges előrehaladás történt az idő és a cselekvés logikai reprezentációja terén. A Golog programozási nyelv a cselekvések és a tervek kifejezésére a logikai programozás teljes kifejező erejét felhasználja (Levesque és társai, 1997a). A nyelvet a parallel cselekvések (Giacomo és társai, 2000), a sztochasztikus környezetek (Boutilier és társai, 2000) és az érzékelés (Reiter, 2001a) kezelésére is kiterjesztették.
20	0.25	0	Az eddigiekben azt feltételeztük, hogy a Bayes-háló struktúrája ismert, és csak a paramétereket próbáljuk megtanulni. A háló struktúrája a terület alapvető oksági viszonyaira vonatkozó tudást reprezentálja, amit sok esetben egy szakember, de még egy naiv felhasználó is, nagyon egyszerűen meg tud adni. Néhány esetben azonban az oksági összefüggések nem állnak rendelkezésre vagy vitatottak – például bizonyos nagyvállalatok régóta állítják, hogy a dohányzás nem okoz rákot. Ilyenkor fontos megérteni, hogy a Bayes-háló struktúrája mi módon tanulható meg az adatokból. Jelenleg a struktúratanulási algoritmusok gyerekcipőben járnak, ezért csak egy elnagyolt vázlatot adunk a legfontosabb elvekről.
1	0.103448	1	Példák: * Abdukció + Tétel: A növényeknek vízre van szüksége. + Eredmény: Nedves a virágok földje. + Következtetés (eset): Meglocsolták a virágokat, esett az eső… * Dedukció + Tétel: Az ember halandó. + Eset: Arisztotelész meghalt. + Következtetés (eredmény): Arisztotelész ember. * Indukció: + Melléktétel, eset: László nem tanulta meg a leckét. + Eredmény: László tudatlan. + Következtetés (főtétel): Tanulás nélkül nincs tudás.
19	0.954545	1	Komponensenként legalább hat parallel kontrollmérést kell beállítani. Az operátor a szükséges ellenőrző adatokat megkapja, mivel az analizátor a szükséges adatokat automatikusan kiszámítja, minden kontrollminta minden komponenséhez (egy teszttétel és kontrollintervallum megadásával). A napi QC-adatok, a kontrollmérések eredményeinek átlaga (MEAN), variációja (RANGE), szórása (SD) és variációs koefficiense (CV%) a képernyőn ellenőrizhetők. A legutolsó harminc vizsgálat eredménye ugyancsak megjeleníthető a képernyőn grafikus formában is.
4	0.958333	0	Nevezze meg azokat az algoritmusokat, amelyek az alábbi speciális esetekből származnak: a. Lokális nyaláb keresés k = 1 mellett. b. Lokális nyaláb keresés egy kezdeti állapottal és korlátlan számú visszatartott állapottal. c. Szimulált lehűtés, ha T = 0 minden időpillanatra (és kihagyva a leállási tesztet). d. Genetikus algoritmus N = 1 nagyságú populációval.
6	0.1	1	Ezek a gének kereszteződnek és mutálódnak , kísérletek segítségével megfelelő evolúció végezhető rajtuk, hogy elég jó valószínűséggel találjanak el „vesztő” helyzetet, azaz jól játsszanak. Ez a leírás erősen elméleti, semmi megvalósításbéli konkrétumot nem tartalmaz, részletesbb leírást találhatunk a [3] cikkben.  ábra - Ábra [3] Ábra [3]
2	0.894737	1	A környezet részlegesen megfigyelhető (kivéve, ha valamilyen módon megoldjuk, hogy az egyes robotjátékosok a pálya teljes egészét belássák egyszerre), sztochasztikus (az elrúgott labdát arrébb fújhatja a szél, a többi játékos mozgása nem mindig kiszámítható, az ellenfél kicselezhet, stb.), sorozatszerű (legalábbis két rúgott gól között), dinamikus (hisz több játékos van a pályán), folytonos (túlzó egyszerűsítés lenne bármely kísérlet diszkrétté tenni), többágenses (megint csak gondoljunk a többi játékosra), ezen belül pedig részben kooperatív (a csapattársakkal), részben kompetitív (az ellenféllel).
2	0.578947	0	A  alfejezetben említettük, hogy a helyes formájú randomizált viselkedés lehet racionális bizonyos többágenses környezetekben. Egyágenses környezetekben a randomizáció általában nem racionális. Egy hasznos trükk, amely segítheti az egyszerű reflexszerű ágenst bizonyos szituációkban, de a legtöbb esetben ennél sokkal jobbat érhetünk el kifinomultabb determinisztrikus ágensekkel.
27	0.4	1	Érdemes lehet bevezetni egy úgynevezett jósági mércét, amely megmondja egy-egy állapotról, vagy akár állapotok sorozatáról – állapottörténetről –, hogy mennyire jó. Nyilván nem csak az számít, hogy „mit”, hanem az is, hogy „hogyan”. Tehát tényleg állapotok sorozatában érdemes gondolkodnunk. Például, ha egy ágens a fentebb említett teendőket fele annyi idő alatt, jóval kevesebb energiát, üzemanyagot pocsékolva tudja előállítani, akkor az jobb. De mégis, mikor mondhatjuk, hogy racionális az ágensünk?
24	0.375	0	Az emberek rendszerezik észleléseiket; az egyes fotóérzékelőkhöz tartozó fényességértékek halmaza helyett vizuális csoportokat észlelünk, amelyek általában objektumokkal vagy azok részeivel asszociáltak. Ez a képesség a számítógépes látás számára is éppúgy fontos.
18	0.052632	0	Megfelelő visszacsatolás alkalmazása esetén ezen komponensek mindegyike tanulható. Vegyünk például egy ágenst, amely taxivezetést tanul. Minden egyes alkalommal, amikor a felügyelő elkiáltja magát: „Fék!”, az ágens megtanulhat egy feltétel-cselekvés fékezési szabályt (1. komponens). Amennyiben számos olyan képet mutatunk az ágensnek, amelyről közöljük, hogy busz van rajta, akkor megtanulhatja felismerni azokat (2). Ha egy cselekvést próbálgat, és megfigyeli az eredményt – például nedves úton erősen fékez –, megtanulhatja cselekvéseinek hatását (3). Ha nem kap borravalót utasától, akit jól összerázott az út, akkor értékes elemekkel gazdagíthatja az általános hasznosság- függvényét (4).
25	0.296296	0	A robotika jelenlegi trendjei egyértelműen egy jól definiált szemantikával rendelkező leírás felé mutatnak. A valószínűség-alapú modellek egyre inkább kiszorítják a többi megoldást olyan komplex problémák esetén, mint amilyen a helymeghatározás és a térképezés. Bizonyos esetekben azonban a statisztikai technikák túlságosan körülményesek, és néha a gyakorlatban az egyszerűbb megoldások is éppen olyan hatékonyak. A legmegfelelőbb alkalmazandó módszer kiválasztását leginkább a valódi robotokkal történő munka során szerzett tapasztalatok segítik.
6	0.9	1	a) Rajzolja fel a teljes játékfát az alábbi konvenciót alkalmazva: * minden állapotot (SA,SB) formában írja fel, ahol SA és SB a zsetonok helyzete. * minden végállapotot egy négyzetbe, a játékértékét pedig egy körbe írja be. * a hurokállapotokat (azon állapotok, amelyek már megjelentek a gyökérig vezető út mentén) dupla négyzetekbe írja be. Mivel nem világos, hogy az ilyen állapotok értéke mennyi, jelölje be mindegyiket egy körbe írt "?"-lel.
24	0.833333	1	A BoW algoritmushoz egy Matlabban írt mintakód elérhető az alábbi hivatkozásról: Recognizing and Learning Object Categories. A kód a hisztogramok minősítésére a pLSA algoritmust használja.  ábra - A BoW algoritmus szemléltetése. Fent a három célobjektum, középen néhány jellemző pont a környező tartománnyal szimbolizálva, lent pedig az egyes képeket leíró hisztogramok. (forrás: 24.5. szakasz - Hivatkozások) A BoW algoritmus szemléltetése. Fent a három célobjektum, középen néhány jellemző pont a környező tartománnyal szimbolizálva, lent pedig az egyes képeket leíró hisztogramok. (forrás: 24.5. szakasz - Hivatkozások)
14	0.173913	0	Ezeket a meghatározásokat mutatja be a  ábra. Ezekből a feltételes függetlenségi állításokból és az FVT-kből a teljes együttes eloszlást rekonstruálni lehet; így a „numerikus” szemantika és a „topológiai” szemantika ekvivalens.  ábra - (a) Az X csomópont feltételesen független a nem leszármazottaitól (Z[ij]-ktől) a szülei (a szürke területen látható U[i]-k) ismeretében. (b) Az X csomópont feltételesen független a háló összes többi csomópontjától a Markov-takarójának ismeretében (a szürke terület). (a) Az X csomópont feltételesen független a nem leszármazottaitól (Zij-ktől) a szülei (a szürke területen látható Ui-k) ismeretében. (b) Az X csomópont feltételesen független a háló összes többi csomópontjától a Markov-takarójának ismeretében (a szürke terület).
2	0	0	Az  fejezet a racionális ágens (rational agent) fogalmát úgy vezette be, mint a mesterséges intelligencia tárgyalásának általunk választott központi módszerét. Ebben a fejezetben pontosítjuk ezt a koncepciót. Látni fogjuk, hogy a racionalitás koncepciója az ágensek széles körére alkalmazható mindenféle elképzelhető környezetben. Az a tervünk a könyvben, hogy ezt a koncepciót néhány olyan tervezési elv megfogalmazásához használjuk, amelyekkel sikeres ágenseket építhetünk – olyan rendszereket, melyek joggal hívhatók intelligensnek.
9	0.862069	0	A tételbizonyításokat alkalmazhatjuk a hardver- és szoftvertervezésben a verifikáció (verification) és a szintézis (synthesis) során felmerülő problémákra, mivel mindkét tárgyterülethez lehetséges megfelelő axiómarendszert definiálni. Így tehát a tételbizonyítási kutatást megtalálhatjuk a hardvertervezés, a programozási nyelvek és a szoftverfejlesztés területein is – nem csupán az MI-ben. A szoftver esetében az axiómák meghatározzák a programozási nyelv minden egyes szintaktikus elemének tulajdonságait. (A programokról történő következtetés eléggé hasonló az akciókról történő következtetéshez a szituációkalkulusban.) Egy algoritmus akkor tekinthető igazoltnak, ha a kimenetei megfelelnek a specifikációnak minden bemenet mellett. Az RSA nyilvános kulcskódolási algoritmust és a Boyer–Moore-féle húrillesztési algoritmust is ilyen módon igazolták (Boyer és Moore, 1984). A hardver esetében az axiómák leírják a jelek és az áramkör elemei közötti interakciókat (lásd a  fejezetbeli példát). Egy 16 bites összeadó tervét az Aura igazolta (Wojcik, 1983). A logikai következtetők, amelyeket speciálisan igazolásokra terveztek, egész CPU-kat voltak képesek verifikálni, beleértve ezek időzítési tulajdonságait is (Srivas és Bickford, 1990).
14	0.869565	1	Az orvosdiagnosztikai rendszerekben általánosan elterjedt az ún. szabályalapú szakértői rendszerek alkalmazása. A szakértői programrendszerek fejlesztésének akadálya, hogy a szabályok felépítéséhez „szakértő” szükséges, a szabályoknak általánosan elfogadottaknak kell lenniük, a rendszerek éles, megszabott diagnosztikai határok alapján dolgoznak, a biológiai variabilitást nem tudják kezelni. Az elmúlt években indult meg újabb ún. többváltozós matematikai algoritmusok alkalmazása, amelyek a fenti problémák megoldását ígérik. Ezek az új eljárások képesek a diagnosztikai határok önálló felállítására, átfedő „cut – off” pontú quantitatív azaz mennyiségi jellemzők figyelembevételére, illetve az emberi döntéshozatal modellezésére. Ilyen eljárás a diszkriminancia analízis, amely az elkülönítendő csoportok, betegségképek közötti diszkrimináló paraméterek meghatározására alkalmas. A cluster analízis olyan esetben alkalmazható, amikor egy vizsgált betegcsoporton belül akarunk további csoportokat eldifferenciálni, de pontos adatokkal még nem rendelkezünk ezekről. Tehát a cluster analízis egy olyan dimenziócsökkentő eljárás, mely során bizonyos adattömböket tudunk klasszifikálni azaz, homogén csoportokba sorolni. Ezekkel a módszerekkel már 80-90 % diagnosztikai biztonságot értek el. Léteznek még az ún. fuzzy logikán alapuló rendszerek. Ezek valószínűségi alapon adnak diagnózist, nem egy éles határ alapján döntenek. Újabb, teljesen eltérő elven alapulnak az ún. neuronalis hálózatok.A neuronalis hálózatok egyszerű idegsejthálózatok szerkezeti felépítését és működését modellezik. Ezek az algoritmusok egy tanulási fázis során, ismert esetek adatai alapján alakítják ki belső felépítésüket (training), majd a kívánt diagnosztikai arány elérése után képesek új esetek felismerésére. Az ún. hátralépéses rendszerek (back propagation) mellett a Boltzmann algoritmus és a Kohonen-féle térkép alkalmazása a legelterjedtebb. A hátralépéses rendszerek olyan tanuló algoritmusok, amiknél a hiba visszafelé terjedésével minden sejtréteg optimalizálni tudja a kapcsolatainak erõsségét. Diagnosztikai rendszerek mellett felhasználhatók robotok irányítására, képanalizáló rendszerekben kép, mintázat felismerésére A fenti non- lineáris matematikai módszerek orvosdiagnosztikai alkalmazására Magyarországon még nem került sor. Az esettanulmány a fent említett három módszer alkalmazhatóságát vizsgálja egy cito-diagnosztikai rendszer kidolgozása során.
8	0.516129	0	∀s Halmaz(s) ⇔ (s = { }) ∨ (∃x, s[2 ]Halmaz(s[2]) ∧ s = {x∣s[2]}) 2. Az üres halmaznak nincs hozzáadott eleme, más szóval nincs lehetőség arra, hogy az ÜresHalmaz-t szétválasszunk egy kisebb halmazra és egy elemre:
10	0	0	Ebben a fejezetben megmutatjuk, hogy az elsőrendű logikát hogyan kell használni a valódi világ olyan legfontosabb aspektusainak ábrázolására, mint a cselekvés, a tér, az idő, a mentális események és a bevásárlás.
13	0.590909	0	Kezdjük egy egészen egyszerű példával, egy olyan tartománnyal, amely mindössze három logikai változóból áll. Ezek: Fogfájás, Lyuk, Beakadás (a fogorvos kellemetlen acélszondája beleakad a fogamba). A teljes együttes eloszlás a  ábra szerinti 2 × 2 × 2-es táblázatból fog állni.  ábra - A Fogfájás, Lyuk, Beakadás világ egy teljes együttes valószínűség-eloszlása A Fogfájás, Lyuk, Beakadás világ egy teljes együttes valószínűség-eloszlása
6	0.1	1	Mindegyik w világállapotra minden játékos esetén teljesüljön, hogy w része a játékos Pi(w) információs halmazának, azaz az ágens/játékos egy adott világállapotban más egyebek mellett az adott világállapotot is tartsa azért lehetségesnek. Ez egy igen jelentős, ámde ésszerű feltevés.
18	0.736842	1	Ahol N a szükséges minták száma, amikkel a hipotézisünk összhangban van (amikkel mind konzisztens), | H |  a hipotézistér mérete (a hipotézisek száma). Ha a mintaszám legalább annyi, mint amit az egyenlőtlenség előír, akkor azt állíthatjuk, hogy az a hipotézisünk, ami ezzel az N példával összhangban van, legfeljebb ε  hibát fog produkálni majd a későbbiekben, és ennek az állításunknak legalább 1- δ  a valószínűsége. (Ezt fontos megértenünk: van egy valószínűség, amit a hipotézisünk megengedhető hibájára előírunk, és van az állításunknak is egy valószínűsége, bizonyossága.)
22	0.925926	1	A beszédfelismerés már a digitális számítógépek megjelenése óta foglalkoztatja a kutatókat, de a gyakorlati életben is használható eredmények csak a nagyteljesítményű számítógépek elterjedésével születtek. A beszéd az emberi kommunikáció leggyorsabb formája, így több előny is származik abból, ha az emberi beszédet a számítógép megérti, s felgyorsul a számítógép és az ember közötti információcsere. A beszédfelismerő rendszerek alkalmazása forradalmian új megoldásokat nyújt számos területen, főleg ahol a dokumentáció folyamata kiemelkedő jelentőséggel bír. Az esettanulmányban a SpeechMagic beszédfelismerő szoftver alkalmazásának lehetőségeit ismerhetjük meg, mely jelentős mértékben segítené a hazai orvosi dokumentáció számos területének megújulását, korszerűsítését.
6	0.1	1	Ekkor, mint látjuk, a v érték egyszerre alsó és felső korlát is (q1*, q2*) kevert stratégia-kombináció u hasznosságára (piros dupla-nyíl bal oldala). Azaz a (q1*, q2*) kevert stratégia-kombináció u hasznossága éppen v (piros dupla-nyíl jobb oldala). Azaz, figyelembe véve, hogy miként kaptuk az előbb (kétféleképpen) a v értéket, láthatjuk, hogy (q1*, q2*) kevert stratégia-kombinációra teljesül a fentebbi fólia első sora (lásd. a fentebbi fólia utolsó sorát), azaz (q1*, q2*) nyeregpont (egyensúly), és ezzel a tételt bebizonyítottuk. Bebizonyítottuk, hogy ha fennáll a Minimax feltétel, akkor létezik q* nyeregpont. Ez eddig az elégségesség bizonyítása volt. A fordított irányt, a szükségesség bizonyítását (hogy minden 2-szereplős zéró-összegű játék minden q* nyeregpontjára igaz a Minimax feltétel) az előbbiek fényében a Tisztelt Olvasóra bízzuk.
10	0.939394	0	Az MI-ben a reprezentációkról folytatott korai viták inkább a „problémareprezentációra”, mint a „tudásreprezentációra” irányultak [lásd például a misszionáriusok és kannibálok problémájáról szóló Amareltől származó elemzést (Amarel, 1968)]. Az 1970-es években az MI-ben a hangsúly a „szakértő rendszerek” („tudásalapú rendszereknek” is nevezett) fejlesztésén volt, amelyek a megfelelő problématerületi tudás birtokában, szűkebb definiált feladatok esetén, az emberi szakértők hatékonyságát megközelítették, vagy akár túl is szárnyalták. Az első szakértő rendszer, a Dendral, például a tömegspektrométer (a szerves vegyi anyagok struktúraelemzését segítő berendezés) kimeneti adatait képes volt szakértő vegyészek szintjén interpretálni (Feigenbaum és társai, 1971; Lindsay és társai, 1980). Bár a Dendral sikere meghatározó volt abban, hogy az MI kutatói ráébredjenek a tudásreprezentáció fontosságára, a benne alkalmazott reprezentációs formalizmusok igen specifikusak voltak, és kifejezetten a vegyészeti problématerülethez alakították ki azokat. Idővel a kutatók a szabványosított tudásreprezentációs formalizmusok és az ontológiák felé fordultak, hogy így a korábban még fel nem tárt területeken alkalmazandó új szakértő rendszerek előállítási nehézségeit csökkentsék. Eme kutatás révén olyan területre merészkedtek ki, amit korábban a tudományfilozófusok és a nyelvészettel foglalkozó filozófusok műveltek. Az elméletek „munkába” állításával az MI területén kialakult új diszciplína sokkal mélyebb és gyorsabb előrehaladáshoz vezetett a korábbi időkhöz képest, amikor ezek a problémák kizárólag a filozófia tárgyát képezték (bár időnként előfordult a spanyolviasz ismételt felfedezése is).
14	0.73913	1	Vegyük észre, hogy ha bármelyik bemeneti változó nulla tagsági értékkel kapcsolódik a szabályban szereplő, hozzá tartozó fuzzy halmazhoz, akkor az m paraméter értéke 0 lesz. A gyakorlatban ez azt eredményezni, hogy az adott szabály nem fogja befolyásolni a kimeneti változó értékét.
14	0.086957	1	Ekkor a t  döntési küszöb változtatásával a különböző típusú hibákat befolyásolni tudjuk, például a t döntési küszöb növelése növeli a specifikusságot, csökkenti az érzékenységet.  ábra - Döntési küszöb változtatásának hatása bináris döntés esetén Döntési küszöb változtatásának hatása bináris döntés esetén
14	0.565217	0	Az elutasító mintavételezés (rejection sampling) általános módszer minták előállítására egy nehezen mintavételezhető eloszlásból, felhasználva egy könnyen mintavételezhető eloszlást. Legegyszerűbb formájában feltételes valószínűségek kiszámítására – azaz P(X∣e) meghatározására használható fel. Az Elutasító-Mintavételezés algoritmusa a  ábrán látható. Először a háló által megadott a priori eloszlásból generál mintákat, majd elutasítja azokat, amelyek nem illeszkednek a bizonyítékhoz. Végül, a  becslés megkapható az X = x előfordulásainak megszámlálásával a megmaradt mintában.
17	0.466667	0	Az előző alfejezetben megfigyeltük, hogy optimális eljárásmódot akkor is kaphatunk, amikor a hasznosságfüggvény becslése pontatlan. Ha egy cselekvés egyértelműen jobb, mint a többi, akkor a releváns állapotok hasznosságainak a pontos nagyságát nem szükséges precízen tudnunk. Ez a megérzés egy alternatív módot javasol az optimális eljárásmód megkeresésére. Az eljárásmód-iterációs (policy iteration) algoritmus egy π[0 ]kezdeti eljárásmódtól indulva a következő két lépést váltogatja: * Eljárásmód-értékelés (policy evaluation): Egy adott π[i]eljárásmódnál számítsuk ki  -t, az egyes állapotok hasznosságát mintha π[i] volna végrehajtva. * Eljárásmód-javítás (policy improvement): Számítsunk ki egy új π[i+1]MVH-eljárásmódot, felhasználva az U[i]-n alapuló egylépéses előrenézést (mint a   egyenletben).
16	0.434783	0	A hasznosságfüggetlenség (utility independence) alapvető fogalma a preferenciák függetlenségét terjeszti ki szerencsejátékokra: az attribútumok X halmaza hasznosságfüggetlen az attribútumok Y halmazától, ha az X attribútumokon alapuló szerencsejátékok közötti preferenciák függetlenek az Y-beli attribútumokhoz rendelt értékektől. Egy tulajdonsághalmaz kölcsönösen hasznosságfüggetlen (KHF) (mutually utility-independent, MUI), ha minden részhalmaz hasznosságfüggetlen a többi attribútumtól. Ismételten értelmesnek tűnik feltételezni, hogy a repülőtéri építkezés attribútumai KHF-ek.
11	0.653846	0	Tudjuk, hogy a tervkészítés polinomiális helyigényű, és hogy a tervkészítési gráf elkészítése polinomiális idejű, ezért tudjuk, hogy a megoldás kinyerése legrosszabb esetben kezelhetetlen. Ebből kifolyólag valamifajta heurisztika segítségére lesz szükségünk, hogy a cselekvések közül válasszunk a visszafelé keresés során. A gyakorlatban jól működik egy mohó algoritmus, mely a literálok között a szintköltség alapján választ. Bármely célhalmazra a következő sorrendben járunk el: 1. Elsőként a legmagasabb szintköltségű literált választjuk. 2. Hogy teljesítsük ezt a literált, válasszuk először a legegyszerűbb előfeltételekkel rendelkező cselekvést, azaz válasszuk azt az akciót, melynek előfeltételeire a szintköltségek összege (vagy maximuma) a legkisebb!
11	0.769231	0	Ha ezek az axiómák megvannak, akkor egy kielégíthetőségi algoritmust futtathatunk a terv megtalálására. Kell, hogy legyen olyan terv, ami a célt a T = 1 időpillanatban eléri, nevezetesen az a terv, melyben a két repülőgép helyet cserél. Tegyük fel, hogy a tudásbázis a következő:
10	0.606061	0	A vásárló ágens környezete az egész világháló – ami semmiképpen sem egy játékkörnyezet. Ugyanaz a komplex, folyamatosan evolváló környezet, amit az emberek milliói mindennap használnak. Az ágens érzetei weblapok, de amíg egy emberi webfelhasználó a lapokat a képernyőre kivetített pixelek formájában látja, a vásárló ágens a lapokat karakterfüzérek alakjában fogja érzékelni, ahol közönséges szavak keverednek a HTML jelölőnyelv formattáló utasításaival. A  ábra egy weblapot mutat és a hozzá tartozó HTML-karakterfüzért. A vásárló ágens érzékelési problémájának lényege a hasznos információnak az ilyen fajtájú érzetből való kiemelése.
24	0.916667	0	Az alaknak a kontúrból való meghatározása területén Huffman és Clowes kezdeti, kulcsfontosságú hozzájárulásai után poliéderes objektumok esetére (Huffman, 1971; Clowes, 1971) Mackworth és Sugihara teljessé tették az elemzést (Mackworth, 1973; Sugihara, 1984). Malik kifejlesztette a tartományonként sima görbült objektumok címkézési sémáját (Malik, 1987). Kirousis és Papadimitriou megmutatták, hogy a triéderes jelenet vonalcímkézése NP-teljes (Kirousis és Papadimitriou, 1988).
5	0.181818	1	Az értékadás eredményeképpen előálló {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=BLUE, V=GREEN, T=RED} is konzisztens, sőt, igazából ez már megoldás is, de ahogy eddig is, úgy most is a keresés ezt ebben a pillanatban még nem „realizálja”. Most ott tartunk, hogy mivel a kapott behelyettesítés konzisztens volt, ezért rátérünk a következtetésre.
26	0.428571	0	Ahhoz, hogy elkezdhessük megválaszolni a kérdést, az agyállapotok egy olyan megfogalmazását kell megtalálni, amely absztraktabb szintű, mint az egy adott személy agyát alkotó atomok adott időpontbeli fizikai elhelyezkedése. Például miközben Ausztria fővárosára gondolok, agyam minden pikoszekundumban milliárd apró változáson megy keresztül, mégis ezek a változások nem jelentik az agyállapot kvalitatív változását. Ennek megfelelően be kell vezetnünk az agyállapot típusok fogalmát, amelynek segítségével elkülöníthetők a különböző típusba tartozó agyállapotok. Az egyes szerzők különbözőképpen értik a típus szót ebben az esetben. A legtöbbjük szerint, ha például veszünk egy agyat, és néhány szénatomját más szénatomra^[279] cseréljük, a mentális állapot még nem változik meg. Ez azért örvendetes, mert valójában az agy atomjai az anyagcsere-folyamatok során állandóan cserélődnek, mégsem tűnik úgy, mintha ez nagy mentális felfordulást okozna.
11	0.538462	0	A teljesen rendezett tervkészítéssel összehasonlítva a részben rendezett tervkészítés egyértelmű előnye, hogy a probléma részfeladatokra bontható. A hátránya, hogy nem reprezentálja megfelelően az állapotokat, így nehezebb megbecsülni, hogy a részben rendezett terv milyen messze van a céltól. Jelenleg jóval kevesebb az ismeretanyag arról, hogy hogyan adható pontos heurisztika a részben rendezett tervkészítéshez, mint a teljesen rendezett tervkészítések esetén.
14	0.73913	1	A fenti, és az ehhez hasonló kérdéseket sokkal egyszerűbb lenne megválaszolni, ha nem csak azt lehetne kifejezni, hogy egy elem egy halmazhoz tartozik, hanem azt is, hogy ez a kapcsolat milyen erős. A fuzzy halmazelmélet pedig éppen ezt teszi, mivel lehetőséget biztosít az elem és a halmaz közötti kapcsolat erősségének kifejezésére. A tagsági érték adja meg a kapcsolat erősségét. A tagsági érték nulla és egy között tetszőleges szám lehet, nullát és egyet is beleértve. Ezt a logikát követve sokkal egyszerűbb lenne válaszolni a fenti kérdésre. Az egyik jobb tanuló, így nyugodtan válaszolhatná, hogy: 0.7 tagsági értékkel tartozom a "Jó tanulók" halmazába.
10	0.212121	1	1. Dov. M. Gabbay, Mark A. Reynolds, Marcelo Finger. Temporal Logic: Mathematical Foundations and Computational Aspects. Oxford University Press, 2003. http://www.google.com/books?id=wgpIzXbZ1EoC 2. Pataricza András (szerk.) Formális módszerek az informatikában. Typotex, 2. kiadás, 2005. 3. Yde Venema. Temporal Logic. In Blackwell Guide to Philosophical Logic, Blackwell Publishers, 2001. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.5782&re p=rep1&type=pdf 4. E. Allen Emerson. Temporal and modal logic. In Handbook of Theroretical Computer Science. Elsevier, 1995. http://doran.persiangig.com/other/Temporal%20and%20modal%20logic.pd f 5. Heiko Krumm. Temporal Logic. http://www4.cs.uni-dortmund.de/RVS/MA/hk/Kru00.pdf 6. The University of Manchester, Logic in Computer Science tárgy segédanyaga,  fejezet (Linear Temporal Logic) http://www.cs.man.ac.uk/~korovink/cs2142/chapter14.pdf 7. E. M. Clarke, O. Grumberg, and D. A. Peled. Model Checking. The MIT Press, 1999. 8. Darvas Dániel. Szaturáció alapú automatikus modellellenőrző fejlesztése aszinkron rendszerekhez (TDK dolgozat). BME, 2010. 9. Antonio Cau, Ben Moszkowski, Hussein Zedan. Interval Temporal Logic. 2007. http://www.cse.dmu.ac.uk/~cau/papers/itlhomepage.pdf 10. Az INA modellellenőrző honlapja http://www2.informatik.hu-berlin.de/~starke/ina.html 11. A PetriDotNet keretrendszer honlapja http://petridotnet.inf.mit.bme.hu 12. Az UPPAAL program honlapja http://www.uppaal.com/ 13. Moonzoo Kim. Temporal Logic – LTL, CTL, and CTL* (oktatási segédanyag), 2007. http://pswlab.kaist.ac.kr/courses/cs402-07/temporal-logic8.pdf
2	0.526316	1	A simple ágens koncepciója igen egyszerű, mégis viszonylag sok aspektusát lefedi a szükséges AgentSpeak programozásnak. Az ágens alapvetően a pályán bolyong: arra megy, amerre éppen néz egészen addig, amíg falnak nem megy, ahol aztán visszafordul. Ezen kívül 5% valószínűséggel menetközben is elfordul, aminek hatására mozgása tényleg barangolás jellegű.
24	0.25	1	A kép tárgyak vagy események síkban való megjelenítése. A radiológiában képnek tekintünk minden olyan látvány jellegű vizuális információt (görbét, sík- vagy térhatású megjelenítést, vektort, spektrumot stb.), ami a lényeget illetően egyszerű megszemléléssel is értékelhető. Más kérdés, hogy a részletek pontosításához és értelmezéséhez további adatokra lehet szükség.
5	0.181818	1	Az MRV heurisztika nagyszerű választás az előretekintés-alapú következtetés mellé, hiszen az előretekintés értékkészlet csökkentéssel operál, e heurisztika pedig a változók aktuális KKP-ben adott értékkészlet-számosságának minimumát adja vissza (a még behelyettesítetlen változók közül). Esetünkben (lásd.  ábra) kezdetben minden változó értékkészlete 3-elemű (RED, GREEN, és BLUE), és mind behelyettesítetlen. Mivel ekkor az MRV heurisztika nem disztingvál (hiszen számára most még minden változó egyenértékű, mindegyiknek 3 az értéke), ezért tegyük fel, hogy az algoritmus az előző szakaszhoz hasonlóan most is ugyanabban a sorrendben választ, azaz először az NSW változót. Ennek adjuk tehát először a RED értéket (NSW=RED).
6	0.1	1	A Wythoff-Nimet két halommal játsszuk, s egy lépés alkalmával vagy az egyik halomból bármennyi elemet, vagy mindkét halomból ugyanannyi elemet vehetünk el. Az a győztes, aki az utolsó kavicsot veszi el. A Wythoff-Nimet később külön elemezzük.
6	0.9	1	c) Magyarázza meg, hogy a standard minimax ebben a játékfában miért fulladna kudarcba, és röviden vázolja fel, hogy a (b) kérdésre adott válaszra támaszkodva hogyan lenne képes az algoritmust megjavítani. Képes-e a módosított algoritmus megadni az optimális döntéseket az összes hurkokat tartalmazó játékban?
12	0.238095	0	A  ábrán nincsenek megosztási lehetőségek, ezért új cselekvéspéldányokat hoztunk létre. Ha egy cselekvést kiválasztottunk, d’ minden belső előfeltételét átmásoljuk. Például az EngedélytSzerez cselekvés, az építkezés elé rendelt, és létezik egy okozati kapcsolat ezen lépések között, mely szerint az Engedély előfeltétele az Építkezés-nek. Ez lezárja az a’ helyettesítését a dθ példányosításával.  ábra - Egy magas szintű cselekvés dekompozíciója egy létező tervben. A HázatÉpít cselekvést a  ábra dekompozíciójával helyettesítjük. A Telek külső előfeltételt a már létező TelketVesz-ből kiinduló okozati kapcsolat biztosítja. A Pénz külső előfeltétel nyitott marad a dekompozíciós lépés után, ezért a KölcsöntVeszFel cselekvést szúrjuk be. Egy magas szintű cselekvés dekompozíciója egy létező tervben. A HázatÉpít cselekvést a  ábra dekompozíciójával helyettesítjük. A Telek külső előfeltételt a már létező TelketVesz-ből kiinduló okozati kapcsolat biztosítja. A Pénz külső előfeltétel nyitott marad a dekompozíciós lépés után, ezért a KölcsöntVeszFel cselekvést szúrjuk be. 2. A következő lépés, hogy az eredeti tervben szereplő a’ sorrendezési megkötéseit megfelelően átvezessük a d’ lépéseihez. Először vegyük T B ≺ a’ alakú sorrendezési megkötéseit. Hogyan kellene B-t rendezni a d’ lépéseinek megfelelően? A legkézenfekvőbb megoldás, hogy B az összes d’-ben szereplő lépés előtt jöjjön, amit úgy érhetünk el, hogy d’ minden Indít ≺ s alakú megkötését a B ≺ s megkötéssel helyettesítjük. Másrészről ez a megközelítés túlzottan szigorú lehet! Például a TelketVesz a HázatÉpít előtt kell következzen, de nincsen szükség arra, hogy a TelketVesz a KivitelezőtVeszFel előtt jöjjön a kiterjesztett tervben. Egy túlzottan szigorú rendezés felállítása lehetetlenné teheti néhány megoldás megtalálását. Ezért minden rendezési megkötésre a legjobb megoldás, hogy rögzítsük a megkötés okát. Ha ezután egy magas szintű cselekvést kibontunk, az új rendezési megkötések a lehető leglazábbra vehetők az eredeti megkötés okával összhangban. Ugyanezek a megfontolások alkalmazhatók, amikor az a’ ≺ C alakú megkötéseket helyettesítjük.
14	0.652174	0	Az RVM nyelv szemantikája felteszi, hogy minden konstans szimbólum egy különálló objektumra hivatkozik – az egyedi név feltételezést (unique names assumption) a  fejezetben írtuk le. Ezen feltevés mellett és a korábban felsorolt megkötésekkel, meg lehet mutatni, hogy minden RVM valószínűségi változók egy rögzített, véges halmazát generálja, amelyek mindegyike egy egyszerű függvény egy konstans szimbólumra alkalmazva. Ekkor – feltéve, hogy a szülő-gyermek függések körmentesek – megkonstruálhatunk egy ekvivalens Bayes-hálót. Azaz az RVM és a Bayes-háló azonos valószínűségeket határoz meg minden lehetséges világra. A  (b) ábra mutatja azt a Bayes-hálót, ami a  (a) ábra RVM-jéhez tartozik. Vegyük észre, hogy az RVM-ben szereplő Konzulens kapcsolatok nincsenek jelen a Bayes-hálóban. Ennek oka, hogy rögzítettek és ismertek. Azonban közvetetten feltűnnek a háló topológiájában; például a Siker(János) szülője a Hírnév(KovácsProf), mivel a Konzulens(János) értéke a KovácsProf. Általában, az objektumok között fennálló relációk meghatározzák az ezen objektumok tulajdonságai között fennálló függőségeket.
6	0.1	1	Ha csak a valós időben feldolgozandó adatok mennyiségére gondolunk, már abból is látszik, hogy micsoda hihetetlen komplexitású programmal állunk szemben. A CHINOOK mellesleg a Guinness rekordok közé is bekerült 1996-ban, mint a legelső mesterséges intelligencia termék, amely emberek ellen egy világbajnokságon nyertesként „távozott” [12].
5	0.636364	0	 ábra - (a) Egy faszerkezetű kényszerkielégítési probléma kényszergráfja. (b) Az A csomópont gyökérnek tekintésével konzisztens változók egy lineáris rendezése. (a) Egy faszerkezetű kényszerkielégítési probléma kényszergráfja. (b) Az A csomópont gyökérnek tekintésével konzisztens változók egy lineáris rendezése.
3	0.083333	1	A HunMeSH az egységes orvosi nyelv rendszerének (UMLS) alapján a magyar orvosi tezaurusz tökéletesítése és kiegészítése a szakterületek terminológiájával, egy korszerű, magyar nyelven a szakirodalmi tájékoztatási eszköz eléréséhez, létrehozva ezzel egy olyan szógyűjteményt, amely magyarul adja meg a magyar orvosi szakkifejezések magyarázatát, és közli a szó angol és latin megfelelőjét.
22	0.37037	0	Lehetséges, hogy egy igéhez több, különböző alkategóriára bontás létezik, csakúgy, mint ahogy egy szó számára is lehetséges, hogy több, különböző kategóriába tartozzon. Valójában a „give” rendelkezik az [NP, NP] alkategória-listával is, mint a „Give me the gold” mondatban. Ezt ugyanúgy kezelhetjük, mint minden más többértelműséget. A  ábra ad pár példát igékre és alkategória-listáikra (angolul röviden subcat).  ábra - Példák igékre az alkategória-listáikkal együtt Példák igékre az alkategória-listáikkal együtt
13	0.818182	0	adódik.  ábra - (a) Az ágens beragad, miután [1, 2]-ben és [2, 1]-ben is szellőt észlel – nincs feltárható biztonságos hely. (b) A négyzetek szétosztása Ismert, Perem és Egyéb csoportokba az [1, 3]-ra vonatkozó lekérdezéshez. (a) Az ágens beragad, miután [1, 2]-ben és [2, 1]-ben is szellőt észlel – nincs feltárható biztonságos hely. (b) A négyzetek szétosztása Ismert, Perem és Egyéb csoportokba az [1, 3]-ra vonatkozó lekérdezéshez.
24	0.166667	1	A központi szerverhez terminálként csatlakoznak az egyes modalitások, ők felelősek a DICOM képek előállításáért (leolvasó berendezés, 2.sz ábra) és szerverre küldéséért. A szerver felelős azért, hogy ezeket a képeket adatbázisban rendszerezze, szükség esetén a leletező gépeknek elküldje. A Jivex leletező szoftvere is a központi szerveren tárolódik. A szerver felelős azért is, hogy ezek a DICOM képek szükség esetén páciens CD formában CD-re íródjanak, illetve hosszú távú archiválás céljából DVD-re.  ábra - Digitális leolvasó berendezés Digitális leolvasó berendezés
5	0.181818	1	A legkevesebb megmaradó érték (MRV) heurisztika a fokszám heurisztikához hasonlóan a változók kiválasztásáért felelős. Azokat a még be nem helyettesített változókat adja vissza a visszalépéses keresés egy-egy lépése során, melyeknek az értékkészlete aktuálisan a legkisebb elemszámú (ha több ilyen is van, akkor ezek közül tetszés szerint választhatunk egyet). Ennek ésszerűsége abban rejlik, hogy így, amennyiben egy adott változó esetleg később ellentmondást okozna, úgy arra hamarabb rájövünk, hiszen szűkebb értékkészletet kell csak átfésülnünk. Ha későbbre hagynánk ezeket a szűk értékkészletű változókat, akkor a többi, gazdagabb értékkészletű változó vizsgálata során ütközhetnénk miattuk folyamatosan ellentmondásba, ami időben is, és számítási igény szempontjából is veszteség volna. Érdemes tehát előbbre venni a szűkebb értékkészletű változókat.
9	0.965517	1	Kigyűjtési lehetőség: bármely adatmező szerint – külön program készítésével. A standard kigyűjtési lehetőségeket a 2. sz ábra mutatja.  ábra - Termék adatállomány (Tezaurusz) Termék adatállomány (Tezaurusz)
6	0.9	1	Játék a betűkkel: Az állapot a táblán aktuálisan elhelyezett betűkből és a kéznél lévő betűkből áll, egy lépés egy választott szó kirakása, a kiértékelő függvény pedig a lerakott szó pontértékével arányos.
2	0.526316	1	A keretrendszerrel együtt három mintaágens érkezik, melyek a gyakorlatban alig térnek el egymástól. Az alap ágens a simple_ nevet viseli. A név utáni aláhúzás karakter a "csapatnév_ágensnév" ágens elnevezési konvenciónak megfelelően azt eredményezi, hogy a csapat neve simple lesz, az ágensek pedig simple_1, simple_2, stb. neveken jönnek létre.
24	0.958333	0	A  ábra egy autó nézőpontjából készült egy autópálya kijáratánál. Két autó látható a közvetlenül balra levő sávban. Milyen okok miatt kell a nézőnek azt a következtetést levonnia, hogy az egyik közelebb van, mint a másik?
10	0.212121	1	A CTL* logika az eddigiekben bemutatott CTL és LTL logikáknál nagyobb kifejezőerejű, azokat magában foglaló logika, melyet Emerson és Halpern írt le 1986-ban. Szintaxisa a CTL-éhez hasonló, azonban a CTL* kifejezésekben az állapotkvantorok önmagukban is állhatnak, ezáltal jelentősen kiterjeszti a CTL kifejezőerejét, azonban a kifejezések igazságtartalmának kiértékelését is nehézzé teszi [1].
1	0.068966	1	A modell egy szabályos, akár egy, vagy több dimenziós rácsozat, amelyeknek elmei cellák (sejtek). Ezeknek a sejteknek véges számú állapota lehet. Egy sejt t időbeli állapota csak a sejt t-1 időbeli állapotától, a cella szomszédainak t-1 időbeli állapotától és egy előre meghatározott (általában matematikai) szabálytól függ. Minden sejt állapota szinkronban változik, frissül. Ezt a frissülést új generáció létrejöttének nevezzük.
13	0.136364	0	A bizonytalanság megjelenése gyökeresen megváltoztatja azt a módot, ahogy az ágens a döntéseit meghozza. Egy logikai ágensnek általában van valamilyen célja, és bármely tervet végrehajt, amely biztosítja a cél elérését. Azon az alapon választ ki vagy utasít vissza egy cselekvést, hogy az eléri a célt vagy sem, függetlenül attól, hogy más cselekvések mire vezetnek. Más lesz a helyzet azonban, amint a bizonytalanság belép a képbe. Gondoljuk végig újra az A[90] tervet a repülőtérre jutás szempontjából. Tegyük fel, hogy ez 95%-os valószínűséggel biztosítja a sikert. Ésszerű döntést jelent ez? Nem feltétlenül: lehetnek más tervek, például az A[120], amelynek nagyobb esélye van a sikerre. Ha életbevágó az, hogy ne késsük le a járatot, akkor célszerűbb megkockáztatni egy hosszabb várakozást a repülőtéren. Mi a helyzet például az A[1440] tervvel, amely a felszállás előtt 24 órával való indulást javasolja. A legtöbb esetben ez nem jó választás, mert bár majdnem biztosra vehetjük az időben való érkezést, sajnos a tűrhetetlenül hosszú várakozást is.
27	0.4	1	Egy univerzálisan aszimptotikusan korlátozott optimális ágens-program tehát rugalmasabb, mint egy fix jósági mérce esetén aszimptotikusan korlátozott optimális ágens-program, hiszen többféle feladatra is alkalmas lehet. Mindazonáltal ez az elvárás még mindig lazább, mint a korlátozott optimalitás (mint ahogyan a komplexitás-elméletben az aszimptotikus optimalitás is lazább elvárás, mint az optimalitás), és így ennek következtében könnyebben megvalósítható.
6	0.95	0	 Megjegyzés Implementáljon lépésgenerátort és kiértékelő függvényt az alábbi játékok közül néhányat: kalah, Othello, dáma, sakk. Az implementációt használva tervezzen egy általános alfa-béta játékágenst. Hasonlítsa össze a keresési mélység növelésének, a lépéssorrendezés tökéletesítésének és a kiértékelő függvény tökéletesítésének a hatását. Milyen közel esik az Ön effektív elágazási tényezője a tökéletes lépéssorrendezés ideális esetéhez?
14	0.869565	1	A NagyonMagas tagsági függvény a már említett "Kiskamaszok Magassága" univerzumon a szélső függvény, és azt hivatott ábrázolni, hogy egy kiskamasz 160 cm magasságtól már mondható nagyon magasnak, de 170 cm felett már biztosan az, azaz 170 felett ennek a kijelentésnek az igazságértéke már biztosan 1. Ez trapéz alakú függvény bevezetését sugallja, és ez jellemző nagyon sok más alkalmazásra is: a szélső tagsági függvények trapéz alakúak.
3	0.791667	0	Ahhoz, hogy egy szenzor nélküli problémát megoldhassunk, a fizikai állapotok terében történő keresés helyett a hiedelmi állapotok terében kell keresni. A kezdeti állapot egy hiedelmi állapot, és minden cselekvés egy hiedelmi állapotból egy hiedelmi állapotba képez le. Egy cselekvést úgy kell alkalmazni egy hiedelmi állapotra, hogy a hozzá tartozó minden fizikai állapotra kell azt alkalmazni, és az eredmények unióját kell képezni. Egy út most több hiedelmi állapotot köt össze, a megoldás pedig egy olyan utat jelent, amely csak célállapotokból álló hiedelmi állapotba vezet. A  ábra mutatja a determinisztikus szenzor nélküli porszívóvilág hozzáférhető hiedelmi állapotterét. Csak 12 hozzáférhető hiedelmi állapot létezik, az egész hiedelmi állapottér azonban tartalmazza a fizikai állapotok minden lehetséges halmazát, azaz 2^8 = 256 hiedelmi állapotot. Általában, ha a fizikai állapottérnek S állapota van, a hiedelmi állapottér állapotainak száma 2^S.  ábra - A determinisztikus, szenzor nélküli porszívóvilág hiedelmi állapotterének hozzáférhető része. Minden árnyalt doboz egyetlenegy hiedelmi állapothoz tartozik. Minden pillanatban az ágens egy konkrét hiedelmi állapotban tartózkodik, azonban nem tudja, hogy melyik fizikai állapotban van. A kezdeti hiedelmi állapot (a teljes tudatlanság) legfelül középen helyezkedik el. A cselekvéseket a címkézett nyilak jelölik. Az önhurkokat a nagyobb áttekinthetőség érdekében az ábrából kihagytuk. A determinisztikus, szenzor nélküli porszívóvilág hiedelmi állapotterének hozzáférhető része. Minden árnyalt doboz egyetlenegy hiedelmi állapothoz tartozik. Minden pillanatban az ágens egy konkrét hiedelmi állapotban tartózkodik, azonban nem tudja, hogy melyik fizikai állapotban van. A kezdeti hiedelmi állapot (a teljes tudatlanság) legfelül középen helyezkedik el. A cselekvéseket a címkézett nyilak jelölik. Az önhurkokat a nagyobb áttekinthetőség érdekében az ábrából kihagytuk.
23	0.333333	1	A laboratóriumi teszt diagnosztikai hatékonysága kifejezhető a ROC görbe alatti terület mérőszámával. A mérőszám illetve a görbe alatti terület akkor maximális (=1), mikor az alkalmazott teszt a betegek és az egészségesek teszt eredményeit „teljesen jól” megkülönbözteti. A ROC görbe alatti terület számértékét jó közelítéssel megadja a diagnosztikai szenzitivitás/diagnosztikai specificitás pont párok alatti trapézok területeinek összege. A diagnosztikai hatékonyság megítélésénél figyelembe kell venni a ROC görbék alakját is, mivel lehet két görbe alatti terület azonos, de a görbék „alakja” lényegesen eltérő.
1	0.413793	1	A szinapszis elnevezés eredeti alakja ’synaptein’, amit a görög ’syn-’(együtt) és ’naptein’ (csatolni, szorítani) szavakból alkottak. A szinapszis idegsejt kapcsolódása más sejttel, amely lehetővé teszi az ingerületi állapot átadását.
3	0.958333	0	 Megjegyzés A hittérítők és kannibálok problémáját általában az alábbi módon szokás megadni. Három hittérítő és három kannibál egy folyó azonos oldalán tartózkodik. Rendelkeznek csónakkal, amely egy vagy két embert bír el. Találjuk meg annak a módját, hogy mindenkit a folyó másik oldalára átjuttassunk, arra ügyelve, hogy a hittérítők soha, sehol ne legyenek kisebbségben a kannibálokkal szemben. Ez a probléma híres az MI-ben, mert ez volt témája az első olyan publikációnak, ahol a problémamegfogalmazást analitikus szemszögből kísérelték meg (Amarel, 1968). a. Fogalmazza meg precízen a problémát. Csak azokat a megkülönböztetéseket tegye meg, amelyek a helyes megoldás érdekében szükségesek. Rajzolja fel a teljes állapottér diagramját. b. Implementálja és oldja meg optimális módon a problémát, megfelelő keresési algoritmust választva. Jó ötlet-e az ismétlődő állapotok ellenőrzése? c. Véleménye szerint miért nehéz e feladvány az emberek számára, annak ellenére, hogy az állapottér ilyen egyszerű?
3	0.083333	1	Minél rövidebb megoldást szeretnénk, a különféle kézbenyúlás között a nehézségekben különbséget nemigen tudnánk tenni, a pörgés miatt fogalmunk sem lehet, mennyire már haladunk előre, stb. ez mind inkább a szélességi keresésre vall. Mennyire nehéz lesz? Mennyi az elágazás?
16	0.73913	0	Érdekes kérdés, hogy lehetséges-e az, hogy az információ káros – lehet-e az információnak negatív várható értéke? Az a megérzésünk, hogy ez lehetetlen. Végül is legrosszabb esetben az információ egyszerűen figyelmen kívül hagyható, és úgy tehetünk, mintha soha nem kaptuk volna meg. Ezt igazolja a következő tétel, ami bármely döntéselméleti ágensre alkalmazható. Az információ értéke nem negatív:
10	0.060606	1	A következő bővítés az I nyelv, mely megengedi az inverz szerepek felvételét is (gyereke kapcsolatból, anyja kapcsolat). A rövidítésben a Q a minősített számosság korlátozás hozzáadását jelenti.(pl. legalább három gyerekkel rendelkező).
2	0.526316	1	A szimulátor fontosabb testreszabható beállításai: * Grafikus felület: letiltható a grafikus felület (ilyenkor a szimuláció gyorsabban fut, a futással kapcsolatos adatok pedig a különböző logfájlokból olvashatók ki - lásd később), méretezhető a főablak és beállítható az alapértelmezett futási sebesség. * CSV naplózás: engedélyezhető az ágensek és a csapatok energiájának bizonyos időközönként Excel-lel beolvasható .csv fájlba exportálása. * Játékmenet naplózása: a játék minden eseménye rögzíthető egy .log.ag fájlba, melyet a Lejátszó később vissza tud játszani az ágensek forráskódja és a Jason nélküli számítógépen is. * Grafikonok: kikapcsolható a játék végén a grafikonok megjelenítése vagy bekapcsolható a grafikonok automatikus fájlba mentése, illetve állítható a felbontás. * Eredmények naplózása: a szimulátor egy szöveges fájlban rögzíti minden játék eredményét, illetve itt kerülnek feltüntetésre az ágensek és a csapatok összesített futási idői is. * Watchdog: bekapcsolható az alapértelmezetten tiltott watchdog, ami a kiértékelő szerveren engedélyezett lesz. A watchdog szerepe, hogy a bizonyos ideig nem cselekvő ágensek, vagy futási idejükből kicsúszó csapatok esetén megszakítja a szimulációt és a hibázó csapatot vesztesnek nyilvánítja. Ez a funkció lefagyást okozhat, ha a Jason debug módban fut, mivel ilyenkor a watchdog nem érzékeli az ágensek futását, ezért csak normál futtatás esetén tanácsos bekapcsolni.
24	0.791667	1	Az érzékelés (szenzoros folyamatok) lényege, hogy az érzékszervek idegi felfogó készülékeiken, azaz a receptorokon keresztül kapnak fizikai – kémiai ingereket a külvilágból és a testből. Ezek az ingerek a receptorokban átfordítódnak az idegrendszer elektrokémiai kódjába – ez a transzdukció folyamata. Az érzékletek tehát az érzékszervektől az agyhoz érkező idegi információk, amelyeket az agy feldolgoz és értelmez – azaz szervezi és integrálja ezeket a korábbi tapasztalatokba: így „alakul az érzékszervek segítségével a környezeti információ tárgyak, események, hangok, ízek, és egyebek élményévé”
3	0.916667	1	Fontos látni, hogy az algoritmus minden iterációban újra és újra megvizsgálja az összes korábban eldobott csúcsot is. Érezhető, hogy ez az algoritmus egészen lassú tud lenni, viszont kétségtelen előnye, hogy optimális megoldást ad. A gyakorlatban ez sokkal fontosabb lehet, mint a keresésre fordított algoritmus hatékonysága: ha a keresés 1 másodperc helyett 10 percet vesz igénybe, de egy 5 órás út helyett egy 30 perces utat talál, máris nem tűnik olyan haszontalannak a befektetés!
14	0.608696	0	Ebben a fejezetben a Markov lánc Monte Carlo (MCMC, Markov chain Monte Carlo) algoritmust ismertetjük, hogy Bayes-hálókban következtethessünk. Először leírjuk, mit is csinál az algoritmus, majd elmagyarázzuk, hogy miért is működik, és miért van ilyen bonyolult neve.
19	0.409091	0	Annak bizonyítása, hogy a válasz X, a  ábra felső részében látható. A MAT-módszer egyidőben két bizonyítási fát konstruál. A második bizonyítási fa a szabad változókkal rendelkező célt használja, ahol az eredeti cél konstansait változókkal helyettesítettük. Ahogy az eredeti bizonyítás halad előre, úgy halad a szabad változós bizonyítás is, pontosan ugyanazokat a szabályokat alkalmazva. Lehetséges, hogy néhány változót közben le kell kötni. Ahhoz, hogy az Átírás(1 × u, u) szabályt használhassuk, az Átírás(x × (y + z), v) részcél x változóját 1-re kell lekötni. Hasonlóképpen az Átírás(y + z, v') részcél y változóját 0-ra kell lekötni, ha az Átírás(0 + u, u) szabályt szeretnénk alkalmazni. Az általánosított bizonyítási fa birtokában a levelekből (a szükséges kötéseket figyelembe véve) a célpredikátum általános szabályát képezzük:
24	0.833333	1	A Top Hat szűrő az egyik legegyszerűbb és legintuitívebb foltdetektáló algoritmus. Az eredeti képet egy olyan szűrő maggal konvolválja, mely a keresett alakzaton belül konstans pozitív, közvetlen környezetében pedig konstans negatív. Jellemzően kör alakzatot használnak szűrő magként, mely ábrázolva cilinder szerű, innen származik az algoritmus elnevezése. Ebben az esetben a szűrő elforgatás invariáns.
20	0.964286	0	A  ábrán látható hálónak négy rejtett neuronja van. Ezt a neuronszámot némiképpen ötletszerűen választottuk. Végezzen szisztematikus kísérleteket, hogy különböző számú rejtett neuronnal rendelkező hálókra lemérje a tanulási görbét. Mi az optimális neuronszám? Lehetséges lenne keresztvalidációs módszerrel megtalálni a legjobb hálót még a kísérletek előtt?
16	0.782609	0	A  ábra egy olyan ágens teljes vázát mutatja, ami mielőtt cselekedne, képes intelligensen információkat gyűjteni. Időlegesen tételezzük fel, hogy minden megfigyelhető E[j] tényváltozóhoz létezik egy hozzárendelt költség, Költség(E[j]), ami a bizonyíték tesztek, tanácsadók, kérdések és bármi egyéb módszer segítségével történő megszerzésének a költsége. Az ágens a legértékesebb információt kéri el, a költségeket is figyelembe véve. Feltételezzük, hogy a Kérés(E[j]) cselekvés eredménye az, hogy a következő érzékelés az E[j] értéket szolgáltatja. Ha nincs olyan megfigyelés, ami megérné a költségét, az ágens egy nem információgyűjtő cselekvést választ ki.  ábra - Egy egyszerű információgyűjtő ágens váza. Az ágens folyamatosan a legnagyobb információértékű megfigyelést választja, mindaddig, amíg a következő megfigyelés költsége kisebb, mint a várható haszna. Egy egyszerű információgyűjtő ágens váza. Az ágens folyamatosan a legnagyobb információértékű megfigyelést választja, mindaddig, amíg a következő megfigyelés költsége kisebb, mint a várható haszna.
7	0.08	0	 ábra - Egy tipikus wumpus világ. Az ágens a bal alsó sarokban van. Egy tipikus wumpus világ. Az ágens a bal alsó sarokban van. * Környezet: Egy szobákból álló 4 × 4-es háló. Az ágens mindig az [1, 1]-gyel jelölt négyzetből indul, arccal jobbra nézve. Az arany és a wumpus elhelyezkedése véletlenszerűen, a kiinduló négyzeten kívüli négyzetek közül egyenletes eloszlás szerint van megválasztva. Ezen kívül még bármely, a kiinduló négyzeten kívüli négyzet 0,2 valószínűséggel lehet csapda. * Cselekvések: Az ágens mozoghat előre, fordulhat balra 90°-kal, vagy fordulhat jobbra 90°-kal. Az ágens szörnyűséges halált hal, ha belép egy négyzetbe, ahol csapda van vagy egy élő wumpus található. (Biztonságos, habár meglehetősen rossz illatú egy olyan négyzetbe belépni, amelyben egy halott wumpus van.) Az előrelépésnek nincs hatása, ha egy fal van az ágens előtt. A Megragad cselekvést lehet arra használni, hogy az ágens felvegyen egy tárgyat, amely vele azonos szobában van. A Lövés cselekvést lehet használni egy nyílnak abban az irányban történő kilövésére, amerre az ágens éppen áll. A nyíl addig repül, amíg el nem találja (és egyben meg nem öli) a wumpust, vagy falnak nem ütközik. Az ágensnek csak egy nyila van, így csak egy Lövés cselekvésnek van hatása. * Érzékelők: Az ágensnek öt érzékelője van, mindegyik egyetlen bitnyi információt ad: + o A wumpust tartalmazó négyzetben és a közvetlenül (nem átlósan) szomszédos négyzetekben az ágens bűzt érez. + A csapdával közvetlenül szomszédos négyzetekben az ágens szellőt érzékel. + A négyzetben, ahol az arany található, az ágens csillogást érzékel. + Ha az ágens falnak megy, akkor ütést érzékel. o Ha a wumpust megölték, akkor egy elkeseredett sikolyt hallat, amit a barlangban bárhol hallani lehet.
8	0.935484	0	Elsősorban McCarthy érdeme az elsőrendű logika alkalmazása az MI-rendszerek eszközeként (McCarthy, 1958). A logikán alapuló MI-rendszerek fejlődésében jelentős előrelépést jelentett Robinson rezolúciós algoritmusa (Robinson, 1965), ami egy komplett elsőrendű logikai következtetési folyamat. A rezolúciót a  fejezetben fogjuk tárgyalni. A logikai megközelítés alapjaival a Stanfordon sok eredményt értek el. Cordell Green kifejlesztett egy elsőrendű logikai következtetési rendszert, a QA3-at (Green, 1969a, 1969b), amely ahhoz vezetett, hogy először kíséreltek meg létrehozni egy logikai robotot a Stanford Research Institute-ban (Fikes és Nilsson, 1971). Az elsőrendű logikát Zohar Manna és Richard Waldinger alkalmazta a programokban való következtetésre (Manna és Waldinger, 1971), majd később Michael Genesereth az áramkörökhöz (Genesereth, 1984). Európában a logikai programozást – az elsőrendű következtetés korlátozott változatát – fejlesztették ki a nyelvészeti elemzésekhez (Colmerauer és társai, 1973) és általános deklaratív rendszerekhez (Kowalski, 1974). A számítógépes logikával Edinburgh-ban sikeresen foglalkoztak, az LCF (Számítási Funkciók Logikája) projekten keresztül (Gordon és társai, 1979). Ezeket a fejlesztéseket a 9. és  fejezetben követjük nyomon.
7	0.44	0	(¬S[1,1] ∨ C[1,2] ∨ C[2,1]) ∧ (¬ (C[1,2] ∨ C[2,1]) ∨ S[1,1]) 3. A CNF megkívánja, hogy a ¬ csak literálokra vonatkozzon, így most „a-t beljebb mozgatjuk” a következő  ábrán felírt ekvivalenciák ismételt alkalmazásával:
27	0.4	0	Természetes, ha azt kérdezzük: „Melyik architektúrát alkalmazzam a  fejezetben bemutatottak közül?” A válasz: „Mindegyiket!” Láttuk, hogy a reflexszerű válaszok alkalmasak az időkritikus helyzetekben, míg a tudásalapú elhatározás lehetővé teszi, hogy az ágens előre tervezzen. Egy teljes ágensnek egy hibrid architektúra (hybrid architecture) segítségével képesnek kell lennie mindkettőre. A hibrid architektúra egyik fontos tulajdonsága, hogy a különböző döntési komponensek határa nem rögzített. A szerkesztés vagy kompilálás (compilation) például az elhatározás szintjén megjelenő deklaratív információt folyamatosan hatékonyabb reprezentációkká alakítja át, eljutva végül a reflexszerű szintre ( ábra). (Ez a célja a  fejezetben bemutatott magyarázatalapú tanulásnak.) Az olyan rendszereknek, mint a Soar (Laird és társai, 1987) és a Theo (Mitchell, 1990), pontosan ez a struktúrájuk. Minden alkalommal, amikor explicit elhatározás révén jutnak el egy probléma megoldásáig, a megoldás általánosított verzióját is eltárolják a reflexszerű komponens részére. Ennek a folyamatnak a fordítottját kevésbé tanulmányozták még: a környezet változásakor a megtanult reflexek lehet, hogy többé már nem érvényesek, és az ágensnek vissza kell térnie a tudatos konstrukció szintjére, hogy új viselkedést hozhasson létre.  ábra - A kompilálás célja a megfontolt (deliberatív) döntéshozatal hatékonyabb, reflexszerű mechanizmussá való átalakítása A kompilálás célja a megfontolt (deliberatív) döntéshozatal hatékonyabb, reflexszerű mechanizmussá való átalakítása
18	0.684211	1	A boosting tanuló algoritmus egy általános és bizonyítottan hatékony [1], pontos jóslási szabályokat megalkotó eljárás. A becslési szabályt durva becslésű és pontatlan szabályok kombinációjából hozza létre, ahogyan az előbb leírt kerettörténetben szereplő profi fogadó is teszi. A véletlen tippelésnél kicsivel jobb szabályok kombinációjából létrehoz egy megbízhatóbb fogadási szabályt.
5	0.181818	1	 ábra - 14. lépés: az előbbi, WA=GREEN értékadás következményeként a GREEN érték eltávolítása az NT és SA változók értékkészletéből az előretekintés miatt 14. lépés: az előbbi, WA=GREEN értékadás következményeként a GREEN érték eltávolítása az NT és SA változók értékkészletéből az előretekintés miatt
24	0.208333	1	Néhány alapvető eszköztípus: * Kézi (handy) szkenner: Kis szélességben, egyidejűleg egy teljes fekete-fehér, illetve színes sort olvas be, a sorra merőleges irányban kézzel kell egyenletes sebességgel húzni. Beépített fényforrást tartalmaz, mely a készülékkel együtt mozog. * Síkágyas szkenner: Manapság az egyik legelterjedtebb szkennertípus, mert bár felbontása nem a legjobb, multimédiás célokra tökéletesen megfelel, ugyanis azt a minőséget tudja produkálni, amit az emberi szem érzékelni képes. A4-es és A3-as méretű fekete-fehér illetve színes dokumentumok beolvasására alkalmas. Többnyire a visszavert fény érzékelésével működik, de létezik az átmenő fény felhasználásán alapuló típus is. Beépített fényforrást tartalmaz, a papír, vagy egyes típusoknál a fényforrás és az érzékelő sormozgatása automatikusan történik. Felhasználási köre: dokumentumok beolvasása. * Dob-szkenner: Nagy méretű fekete-fehér, illetve színes dokumentumok, filmek igen jó minőségű beolvasására alkalmas. (1.sz ábra)
9	0.931034	1	Nem. Például ha x és y egész számok lehetnek, akkor A igaz, de B nem, hiszen bármely számnál létezik kisebb vagy egyenlő egész szám, de nem létezik legkisebb egész szám, amelynél bármely egész szám kisebb vagy egyenlő lenne.
17	0.133333	0	A végtelen horizont elfogadása mögött azonban rejlik egy probléma: ha a környezet nem tartalmaz egy végállapotot, vagy ha az ágens soha nem jut végállapotba, akkor az összes környezettörténet végtelen hosszú lesz, és a hasznosságok additív jutalmakkal általában végtelenek lesznek. Abban egyetérthetünk, hogy a +∞ jobb, mint a –∞, de két +∞ hasznosságú állapotsorozat összehasonlítása már bonyolultabb. Három megoldás kínálkozik, amelyek közül kettőt már láttunk: 1. Leszámítolt jutalmakkal egy végtelen sorozat hasznossága véges. Valójában, ha a jutalmakra létezik egy R[max] korlát és γ < 1, akkor azt kapjuk, hogy 
20	0.964286	0	Vegyük azt a problémát, amikor N adatpontot akarunk lineáris osztályozóval szétválasztani pozitív és negatív példákra. Nyilvánvaló, hogy N = 2 pont esetén ez egy d = 1 dimenziós egyenesen mindig megtehető, függetlenül attól, hogy a pontok hol helyezkednek el, és hogy vannak címkézve (kivéve, ha ugyanazon a helyen vannak). a. Mutassa meg, hogy a szeparálás mindig elvégezhető N = 3 pontra egy d = 2 dimenziós síkon, ha a pontok nem egy egyenesre esnek. b. Mutassa meg, hogy nem lehet mindig elvégezni a szeparálást N = 4 pontra egy d = 2 dimenziós síkon. c. Mutassa meg, hogy a szeparálás mindig elvégezhető N = 4 pontra egy d = 3 dimenziós térben, ha a pontok nem esnek egy síkra. d. Mutassa meg, hogy nem lehet mindig elvégezni a szeparálást N = 5 pontra egy d = 3 dimenziós térben. e. Egy törekvő diák kitűzheti maga elé, hogy bebizonyítja: N – 1 dimenziós térben általános helyzetben található N pont lineárisan szeparálható (de N + 1 nem). Ebből következik, hogy az N – 1 dimenziós lineáris félterek VC-dimenziója (lásd  fejezet) N.
5	0.181818	1	Az értékadás eredményeképpen a következő behelyettesítés áll elő: {NSW=RED, WA=GREEN, NT=RED, Q=GREEN}. Mivel ez is konzisztens, ahogy eddig minden egyes behelyettesítés volt (miért is?), ezért tovább léphetünk az előretekintésre.
13	0.818182	0	A dekompozíció nagyon könnyűvé teszi az együttes valószínűségi értékek meghatározását. Az első rész a szellő feltételes valószínűség konfigurációját adja adott csapda konfigurációnál; ennek értéke 1, ahol a szellő szomszédos egy csapdával, minden más esetben 0. A második tag a csapdakonfiguráció előzetes valószínűsége. A négyzetek a többi négyzettől függetlenül 0,2 valószínűséggel tartalmaznak csapdát; következésképpen
27	0.4	1	Itt jegyeznénk meg, hogy az ágensek jóságát az általuk adott környezetben kivitelezett cselekvések nyomán előálló környezeti állapotok sorozatának hasznosságával szokás jellemezni. Ha tehát adott egy haszonfüggvényünk (egy jósági mércénk), amely megmondja, hogy egy-egy környezeti állapot-történet mennyire jó, úgy meg tudjuk mondani, hogy egy adott ágens egy adott környezetben mennyire jó (az általa kivitelezett cselekvések nyomán előálló állapot-sorozatot mérlegelve). Ha például sakkozó ágensünk úgy cselekszik (úgy lép), hogy pár lépésen belül mattot kap, úgy nemigen beszélhetünk racionalitásról - az ágens cselekvései ekkor nem jók. Hasonlóképp, ha autóvezető ágensünk cselekvései nyomán karambolok adódnak, összetörik az autó, úgy - amennyiben nem ez volt a célunk - az ágenst nem tekinthetjük jónak, avagy racionálisnak.
21	0.1875	1	Egyetlen esetben lehetséges a hagyományos MAB probléma megoldását itt is alkalmazni, ha minden folyamat esetében van egy olyan input, amely dominálja a többi inputot a jutalom tekintetében. Ilyen esetben minden folyamathoz elegendő csupán egyetlen inputtal foglalkozni, és a feladat redukálódik egyszerűen a folyamatok folytatására, vagy leállítására, vagyis ismét igaz lesz az optimalitáshoz szükséges első feltétel (a feladat az alap MAB problémára redukálódik).
5	0.181818	1	Az (SA, NSW) éllel nagyjából ugyanaz a helyzet adódik, mint előzőleg a (Q, NSW) éllel. Az SA értékkészletéből ki kell venni a RED értékét, hiszen ehhez már nem lenne konzisztens értéke az NSW-nek, és ezért a listához az AC3-nak hozzá kell adnia az SA-ba mutató összes élet. Az SA értékkészlete tehát {GREEN, BLUE}-ra redukálódik, majd az él-listából törlődik az (SA, NSW) él, és a lista végére bekerül az összes SA-ba mutató él. Az új él-lista tehát a következő:
5	0.181818	1	Ha például arra a keresési fára gondolunk, amiben végső soron a visszalépéses mélységi keresés keres, akkor mindez azt jelenti, hogy minél hamarabb, a gyökérhez minél közelebb próbálunk meg vágni, annál nagyobb részfák (azaz annál nagyobb keresési tér-részek) esnek ki a keresésből, és így annál hamarabb találunk megoldást (ha létezik).
19	0.181818	0	A visszalépésre azért van szükség, mert a „pillanatnyilag-legjobb-hipotézis” eljárásban választani kell egy legjobb becslést, egy partikuláris hipotézist, akkor is, ha még nincs elég adatunk ahhoz, hogy biztosak legyünk a választásunk helyességében. Ehelyett azt tehetjük, hogy az összes olyan és csak olyan hipotézist megtartjuk, amelyek az eddigi adatainkkal konzisztensek. Ezek után mindegyik új eset vagy nincs hatással, vagy kizár néhányat a hipotéziseink közül. Emlékezzünk arra, hogy a hipotézistér egy diszjunktív állításnak tekinthető:
20	0.964286	0	A  ábrán használt adatokat úgy tekinthetjük, mintha h[5] generálta volna őket. A másik négy hipotézis mindegyikére generáljon egy-egy 100 hosszúságú adathalmazt, rajzolja fel a megfelelő P(h[i]|d[1],…, d[m]) és P(D[m][+1] = citrom|d[1],…, d[m]) görbéket! Értékelje az eredményeket.
27	0.4	1	… programja kellően nagy teljesítményű számítógépen futtatva az olajfinomító berendezések és földtani adottságok mellett várhatóan maximalizálja a kinyert olaj tisztaságát, mennyiségét, illetve az üzem biztonságát.
3	0.958333	0	Egy véges állapottér mindig véges keresési fához vezet-e? Mi a helyzet egy olyan véges állapottérrel, amely maga is egy fa? Meg tudja-e precízebben fogalmazni, hogy milyen állapottérfajták vezetnek mindig véges keresési fákhoz? Átvéve (Bender, 1996)-ből.
20	0.107143	1	A hiányzó adatok kezelésének kérdése számos tudományterületen merül fel valós problémák vizsgálata esetén, mivel a legtöbb adatelemzési módszer teljes, azaz hiányzó értékek nélküli adathalmazt igényel az elemzés elvégzéséhez. Hiányzás számos okból bekövetkezhet, ezek egy része véletlen, más részük lehet akár valamely tervezett mérési folyamat következménye. Ez utóbbi esetre példa az automatizált mérőműszereknél beépített eredménykiértékelés, mely érvényteleníti a mérési eredményt, ha az nem felel meg egyes előre meghatározott kritériumoknak. A hiányzás egy másik lehetséges forrása, hogy nem minden esetben van mód egy paraméter megmérésére, esetenként nem áll rendelkezésre az információ vagy adott esetben maga a megkérdezett alany tagadhatja meg a kért információ átadását.
13	0.090909	0	Ebben az alfejezetben a bizonytalan tudás természetét vizsgáljuk meg közelebbről. Egy egyszerű diagnosztikai példán keresztül mutatjuk be az érintett fogalmakat. A diagnosztika – legyen az orvosi, gépjármű-javítási vagy bármi egyéb – olyan feladat, amely szinte mindig tartalmaz bizonytalanságot. Hogy lássuk a logikai megközelítés sikertelenségét, próbáljuk meg egy fogorvosi diagnosztikai rendszer szabályait meghatározni elsőrendű logika segítségével. Tekintsük a következő szabályokat:
22	0.592593	0	A gyakorlati információra legnyilvánvalóbban a referenciális indexek (indexicals) feloldásához van szükség, amelyek közvetlenül az adott szituációra utaló kifejezések. Például az „I am in Boston today (Ma Bostonban vagyok)” mondatban az „I” és „today” referenciális indexek értelmezése attól függ, hogy ki és mikor ejtette ki a mondatot. A referenciális indexeket „konstansokkal” (mint például a Speaker) reprezentáljuk, amelyek valójában változó dolgok (fluents) – azaz a szituációtól függnek. A hallgatónak, aki észleli a szólásaktust, azt is észlelnie kell, hogy ki a beszélő, és felhasználja ezt az információt a referenciális indexek feloldására. Például a hallgató tudhatja, hogy T((Speaker = Agent[B]), Now).
19	0.545455	1	A két elv együttes alkalmazása adja a minimum redundancia – maximum relevancia (MRMR) algoritmust [3], amiről megmutatható, hogy a kiválasztott jegyek együttes eloszlása és az osztályváltozó közötti függés maximalizálását közelíti, továbbá összességében hatékonyabb a az egyszerű maximum relevancia választásnál.
12	0.190476	0	Bármely magas szintű cselekvéshez a tervkönyvtár számos dekompozíciót tartalmazhat, például a HázatÉpít-nek lehet egy másik dekompozíciója, amely a folyamatot úgy írja le, hogy a házat az ágens saját kezűleg építi kövekből és malterből. Minden dekompozíciónak egy korrekt tervnek kell lennie, de a magas szintű cselekvésleírásban szereplőkön túl további előfeltételeket és következményeket is tartalmazhat. Például a HázatÉpít  ábrán látható dekompozíciója a Telek mellett a Pénz-t is megköveteli, és következménye a ¬Pénz. Másrészről a saját kezű építés nem igényel pénzt, de szükséges hozzá egy felhasználásra váró Kő és Malter készlet, valamint eredménye lehet egy FájósHát.
10	0.727273	0	Ez a gyakorlatban csodálatosan hangzik, míg az ember rá nem jön, hogy a következő két konzekvencia valamelyike lehetséges csak: a nehéz problémákat vagy nem lehet kifejezni, vagy exponenciálisan nagy leírást igényelnek! Mindenesetre a kezelhetőség eredményei vetnek némi fényt arra, hogy milyen konstrukciók okoznak bajt, és így segítik a felhasználót annak megértésében, hogyan viselkednek különböző reprezentációk. Például a leíró logikákból általában hiányzik a negálás és a diszjunkció. Ezek mindketten arra kényszerítik az elsőrendű logikai rendszert, hogy lényegében egy exponenciális eset analízisen menjen keresztül a teljesség biztosítása érdekében. A negálás és a diszjunkció ugyanezen ok miatt van kizárva a Prolog nyelvből is. A Classic csak egy korlátozott formájú diszjunkciót engedélyez a Kitölt és az EgyBelőle szerkezetekben, ami lehetővé tesz diszjunkciót explicit módon megszámolt egyedek felett, de nem a leírások felett. Diszjunktív leírással az egymásba ágyazott definíciók könnyen exponenciális számú alternatív úthoz vezethetnek, amelyekben az egyik kategória könnyen része lehet egy másiknak.
27	0.4	1	Az információ-technológia exponenciális jellegű fejlődése miatt az informatikai rendszerek képességei számos területen már eddig is meghaladták, a jövőben pedig egyre inkább meg fogják haladni az emberi, - korábban intelligenciát feltételező - képességeket. Az utolsó előadás számba veszi a mesterséges intelligencia-kutatás azon további klasszikus területeit, melyeken a közeljövőben látványos változások várhatóak. A főbb területek értelmezésével, súlyainak és korlátainak megjelölésével igyekszik hozzájárulni a szakmai tájékozódáshoz. A számítógépes rendszerek hálózatos működése, valamint az egy gépen belül alkalmazott processzorok számának rohamos növekedése is egyre inkább támogatja és elvárja az elosztott és párhuzamos rendszertervezést.
24	0.166667	1	A távdiagnosztika, a jövő radiológusának meghatározó tevékenysége lesz. Az, hogy hogyan működtetik majd, milyen minőségű képanyaggal, feltételekkel, technikai háttérrel, fontos döntés lehet, amely a szakma hosszú távú fennmaradását is érinti.
25	0.259259	0	Az előzők során egyetlen tárgy helymeghatározásának problémáját tárgyaltuk meg. A robotikában azonban általában egyszerre több tárgy helyzetét kell meghatározni. A klasszikus példa erre a feladatra a térképezés. Képzeljünk el egy robotot, amelyiknek nincs pontos térképe a környezetéről, magának kell azt elkészítenie. Az ember fantasztikus képességeket fejlesztett ki, hogy feltérképezze környezetét, mára már az egész bolygót. Természetesen adódó feladat egy olyan algoritmus kitalálása, amely képessé teszi ugyanerre a robotot is.
15	0.222222	0	ahol az utolsó lépés az e[k+1] és az e[k+2:t] feltételes függetlenségéből következik az x[k+1] melletti feltétellel. Az összegzésben a három tényezőből az első és a harmadik közvetlenül a modellből megkapható, a második pedig a „rekurzív hívás”. Az üzenetjelölést használva kapjuk, hogy
17	0.666667	0	A (tanúskodik, tanúskodik) megoldás könnyűszerrel elkerülhető, ha valamilyen módon megváltoztatjuk a játékot (vagy a játékosokat). Módosíthatjuk például egy olyan iterált játékra, amiben a játékosok tudják, hogy újra találkozni fognak (de az döntő, hogy bizonytalanok legyenek abban, hogy hányszor fognak még újra találkozni). Vagy ha az ágensek morális meggyőződése erősíti az együttműködést és az igazságosságot, megváltoztathatjuk a jutalommátrixot úgy, hogy tükrözze az egyes ágensek többiekkel való együttműködésének a hasznosságát. Később látni fogjuk, hogy az ágens olyatén megváltoztatása, hogy a számítási kapacitása korlátos, ahelyett hogy teljesen racionális következtetésre lenne képes, szintén befolyásolja a kimenetelt, mivel azt árulhatja el az egyik ágensnek, hogy a másik racionalitása korlátos.
4	0.416667	0	Számos problémában azonban a célhoz vezető út érdektelen. A 8-királynő problémában például 3. szakasz - Játékproblémák a királynők végleges konfigurációja számít, és nem az a sorrend, ahogy az újabb királynőket felhelyezzük. A problémák ezen osztályába olyan fontos problémák tartoznak, mint a VLSI-tervezés, a gyári gépelrendezés, a gyártási műveletek ütemezése, az automatikus programozás, a hírközlési hálózatok optimalizálása, a gépkocsiútvonal-tervezés és a portfóliómenedzsment.
16	0.913043	1	Az ilyen átfogó és többszintű rendszerek készítésének az akadálya sokkal inkább anyagi, pontosabban profittermészetű, a készítők versengésében a belátásnak kevés a szerepe, miközben sokféle presztízsszempont is érvényesül.
5	0.181818	1	Mint láttuk, igen komplex visszalépési szekvencia adódott, mikor a 12-es lépésben az SA értékkészlete üresre redukálódott. Milyen jó lett volna ezt megelőzni például az előbbi szakaszban is bemutatott fokszám (DEG) heurisztika használatával. Ekkor az SA változóval kezdhettünk volna a keresést, és akkor valószínűleg még az előbbi szakaszban bemutatott, heurisztikus keresésnél is gyorsabban jutottunk volna már el a megoldásig.
24	0.125	0	adja. Amint λ → ∞ vagy λ → –∞ ez a pont a p[∞] = (fU/W, fV/W) lesz, ha W ≠ 0. A p[∞] pontot az (U, V, W) irányú egyenesek családjával kapcsolatos távlatpontnak (vanishing point) nevezzük. Az azonos irányú egyenesek távlatpontja azonos.
27	0.4	1	Viszont enyhíthetjük az előbbi szigorú megkötést, miszerint azonnal, minden pillanatban a tökéletes, legjobb cselekvést szeretnénk megcselekedni. Ezt nevezzük számítható racionalitásnak. A számítható racionalitás tömören fogalmazva az adott pillanatban tökéletesen racionális cselekvést hajtja végre, csak hát akkor, amikorra ki tudja számítani (még hogyha a számítás végtelen sokáig is tart). Tehát például egy időben nem korlátozott számítható racionális sakkozó ágens egyben tökéletesen racionális is.
24	0.833333	1	Egy hatékony jellemzőszámítási algoritmus kritikus jelentőségű lehet, hiszen a ráépülő például alakzatfelismerési algoritmus kezdő lépését képezi, tehát korlátozza annak teljesítőképességét. A legfontosabb tulajdonságok, melyek elvárhatók egy jó jellemzőtől: elsősorban a megismételhetőség, azaz ugyan arról az objektumról készült különböző képeken azonos jellemzők keletkezzenek. Ez az alapfeltétele, hogy alakzatfelismerésre használható legyen az eredmény. Fontos, hogy a találat invariáns legyen a nézőpont vagy az objektum transzformációira, lokális perturbációkra, zajokra és a felismerni kívánt alakzat módosulataira. A jellemzőkkel szemben további követelmény, hogy könnyen számíthatók legyenek, főleg, ha valós idejű alkalmazásról van szó.
16	0.826087	0	Alkosson meg egy oksági modellt. Határozza meg a lehetséges tüneteket, rendellenességeket, kezeléseket és kimeneteleket. Aztán jelezze közöttük haladó nyilakkal, hogy melyik rendellenesség milyen tüneteket okozhat, és melyik kezelés milyen rendellenességekre hatásos. Ezek egy része a tárgyterületi szakértő számára ismert lesz, más részük a szakirodalomból származhatnak. Gyakran a modell jól fog illeszkedni a szakkönyvek leírásaiban szereplő informális diagramokhoz.
20	0.428571	0	Számos példát láttunk az EM algoritmusra. Mindegyik tartalmazta azt a lépést, hogy kiszámítottuk a rejtett változók várható értékét minden példára, majd ezeket a várható értékeket úgy használtuk, mintha megfigyelt értékek lettek volna, és segítségükkel újraszámoltuk a paramétereket. Legyen x az összes példában az összes megfigyelt érték, jelölje Z az összes példában az összes rejtett változót, és legyen θ a valószínűségi modell összes paramétere. Ekkor az EM algoritmus:
14	0.086957	1	Definition 1.8 Az esszenciális gráf a megfigyelési ekvivalens DAG-ok halmazát reprezentálja egy részlegesen irányított DAG-gal (PDAG), amiben csak azok az élek irányítottak (az úgynevezett kényszerített élek), amelyek az ekvivalenciaosztálybeli DAG-oknál azonosan irányítottak, a többi él irányítatlansága az eldönthetetlenséget jelzi.
25	0.37037	0	Általában két szabadságfokú (2DOF) robotkar esetén az inverz kinematikai feladat megoldásainak száma nulla és kettő között van, bármilyen bemeneti munkatér-koordinátára. A legtöbb ipari robot esetén végtelen sok megoldás van. Ennek megértéséhez képzeljük el, hogy a példarobotunkhoz hozzáadunk még egy rotációs csuklót, aminek tengelye párhuzamos a meglévő csuklók egyikével. Így a legtöbb konfiguráció esetén szabadon tudjuk mozgatni a közbülső csuklókat, miközben a megfogó pozíciója nem változik (az orientációja azonban igen). Néhány további csuklóval (mennyivel?) megoldható, hogy a kart ugyanígy mozgatva az orientáció se változzon. Már láttunk erre példát, amikor letettük kezünket az asztalra, és mégis tudtuk mozgatni a könyökünket. A kéz pozíciójából adódó kinematikai korlátozások alapján még nem határozható meg egyértelműen az emberi könyök konfigurációja. Más szavakkal, a váll-kar együttes inverz kinematikai problémájára végtelen sok megoldás létezik.  ábra - (a) Egy két szabadságfokú robotkar munkatere. A munkatér egy doboz, amiben egy lapos akadály lóg a mennyezetről. (b) Ugyanennek a robotnak a konfigurációs tere. A fehérrel jelzett terület jelenti azokat a konfigurációkat, ahol a robot nem ütközik össze semmivel. A pont az ábrán a robot bal oldali konfigurációját mutatja. (a) Egy két szabadságfokú robotkar munkatere. A munkatér egy doboz, amiben egy lapos akadály lóg a mennyezetről. (b) Ugyanennek a robotnak a konfigurációs tere. A fehérrel jelzett terület jelenti azokat a konfigurációkat, ahol a robot nem ütközik össze semmivel. A pont az ábrán a robot bal oldali konfigurációját mutatja.
26	0.5	0	Képzeljük el – ha belebocsátkozunk ebbe a gondolatkísérletbe –, hogy az agyunkat születésünkkor kiveszik a testünkből, és egy csodálatos szerkezetű tartályba helyezik. Ez a tartály táplálja az agyat, lehetővé téve, hogy növekedjen és fejlődjön. Ugyanakkor azonban egy teljességgel kitalált világ számítógépes szimulációjának elektromos ingereit vezetik az agyba, az agy motorikus ingereit pedig elfogják, és hatásukra megfelelően módosítják a szimulációt.^[280] Ekkor az agy rendelkezhet a HalálosanVágyik(Én, Hamburger) mentális állapottal, akkor is, ha nincs is teste, amely az éhséget érezné, ízlelőbimbói sincsenek, sőt talán egyáltalán nincs is hamburger a valódi világban. Azonosnak tekintjük-e ezt a mentális állapotot egy testben lévő agy megfelelő mentális állapotával?
24	0.666667	0	Annak érdekében, hogy a geometriai transzformációkra vonatkozó invarianciát biztosítsuk, egy egészen hatékonynak bizonyult eljárás a kép régiójának előfeldolgozása úgy, hogy standard pozícióba, méretre és orientációra alakítjuk. Egy alternatív megoldás az, ha egyszerűen figyelmen kívül hagyjuk a geometriai és fizikai transzformációk alkalmi természetét, és úgy gondolunk rájuk, mint az osztályozó variálhatóságának egy újabb forrására. A tanító minták halmazában az összes ilyen variációra példákat kell elhelyeznünk, és abban reménykedünk, hogy az osztályozó kikövetkeztet egy megfelelő transzformációhalmazt a bemenetre, és így kiszűri a variációkat.
7	0.12	0	Ez az alfejezet áttekintést nyújt a logikai reprezentáció és következtetés alapvető fogalmairól. A logika bármely speciális formájára vonatkozó technikai részletek bemutatását a következő fejezetre halasztjuk. Ehelyett egyszerű példákat fogunk használni a wumpus világból vagy ismerős aritmetikai területekről. Azért választjuk ezt az igen rendhagyó megközelítést, mivel a logika fogalmai messze általánosabbak és szebbek, mint azt általában feltételezik.
5	0.181818	1	Az anyaghoz számos szemléltetés (ábra, táblázat, részletes magyarázat) tartozik, így ezek fényében, fejezetekre/szakaszokra bontva, könnyedén, és akár célzottan is meg lehet ismerkedni egy-egy KKP módszerrel, vagy a tankönyv  fejezetében említett valamely algoritmussal, heurisztikával. A jelen anyag tehát a tankönyv említett fejezetéhez kíván praktikus segítséget, kiegészítést nyújtani.
9	0.965517	0	Figyelje meg a  ábrán bemutatott bennfoglalási rácsokat. a. Hozza létre a rácsot a következő mondatra: Alkalmaz(Anyja(János), Apja(Richárd)). b. Hozza létre a rácsot a következő mondatra: Alkalmaz(IBM, y) („Mindenki az IBM-nél dolgozik”). Figyeljen arra, hogy minden olyan lekérdezést felsoroljon, amely egyesíthető a mondattal. c. Tételezzük fel, hogy a Tárol indexel minden egyes mondatot, minden egyes csomópontra a bennfoglalási rácsban. Magyarázza meg, hogy a Betölt eljárásnak hogyan kell működnie, amikor néhány mondat ezek közül változókat is tartalmaz; példaként használja a mondatokat az (a) és (b) részfeladatokból, és a következő lekérdezést: Alkalmaz(x, Apja(x)).
14	0.565217	0	Itt a Súlyozott-Minta az [igaz, igaz, igaz, igaz] eseményt adja ki 0,099 súllyal, és ezt az Eső = igaz esetnél vesszük számításba. A súly alacsony, mivel az esemény egy felhős napot ír le, amikor valószínűtlen, hogy a locsoló be van kapcsolva.
14	0.652174	0	Szintén jelen lehet azonossági bizonytalanság (identity uncertainty); például esetleg nem tudjuk, hogy Mária és KovácsProf ugyanaz a személy-e. Azonossági bizonytalanság esetén az objektumok és az állítások száma változhat a lehetséges világokban. Annak a világnak, ahol Mária és KovácsProf ugyanaz a személy eggyel kevesebb objektuma van, mint annak a világnak, ahol ők különböző személyek. Ez a következtetési eljárást bonyolultabbá teszi, de a   egyenlet által lefektetett alapelv érvényben marad: bármely kijelentés valószínűsége jól definiált és kiszámítható. Az azonossági bizonytalanság különösen fontos robotok és beágyazott érzékelőrendszerek esetén, amelyeknek több objektumot is követniük kell. Erre a problémára a  fejezetben viszszatérünk.  ábra - Egy Bayes-háló részlete, ami egy olyan RVM-hez tartozik, amelyben a Konzulens(János) ismeretlen, de vagy KovácsProf, vagy MórProf. A konzulens választása az egyes professzorok finanszírozásától függ. Vegyük észre, hogy a Siker(János) most mind a két professzor Hírnev-étől függ, bár a Konzulens(János) értéke meghatározza, hogy valójában melyiknek is van hatása. Egy Bayes-háló részlete, ami egy olyan RVM-hez tartozik, amelyben a Konzulens(János) ismeretlen, de vagy KovácsProf, vagy MórProf. A konzulens választása az egyes professzorok finanszírozásától függ. Vegyük észre, hogy a Siker(János) most mind a két professzor Hírnev-étől függ, bár a Konzulens(János) értéke meghatározza, hogy valójában melyiknek is van hatása.
26	0.214286	0	Egyes filozófusok, mint például J. R. Lucas (Lucas, 1961) állítása szerint ez a tétel azt bizonyítja, hogy a gépek mentálisan alsóbbrendűek az embereknél, mert a gépeket mint formális rendszereket korlátozza a nemteljességi tétel (nem tudják megállapítani a saját Gödel-mondatuk igazságát), az embereket viszont ilyesmi nem korlátozza. Ez az állítás évtizedes, sok könyvet felölelő vitát keltett, például a matematikus Sir Roger Penrose két könyvében (Penrose, 1989; 1994) képviseli ezt az állítást kicsit megcsavarva (például azzal a feltételezéssel, hogy az emberek azért különböznek, mert agyukat a kvantumgravitáció működteti). Három problémát fogunk az állítással kapcsolatban megvizsgálni.
18	0.684211	1	Az AdaBoost tanuló algoritmusnak számos változatát publikálták. Említésképpen ilyen például a LogitBoost tanuló algoritmus, amely képes folytonos értékkészletű célváltozók értékét is becsülni. Ebben az algoritmusban szereplő „gyenge” tanuló algoritmusként regressziós eljárást alkalmaznak [6].
14	0.869565	0	Ez a fejezet a Bayes-hálókat (Bayesian networks) mutatta be, amelyek egy jól kidolgozott reprezentációt jelentenek a bizonytalan tudás számára. A Bayes-hálók nagyjából hasonló szerepet töltenek be, mint amit az ítéletlogika a biztos tudás számára. * A Bayes-háló egy irányított körmentes gráf, aminek csomópontjai valószínűségi változókhoz tartoznak; minden csomóponthoz tartozik egy feltételes eloszlás, ahol a feltételt a csomópont szülei jelentik. * A Bayes-hálók tömör módot adnak a tárgyterület feltételes függetlenségi (conditional independence) kapcsolatainak a reprezentálására. * Egy Bayes-háló egy teljes együttes eloszlást specifikál; egy együttes bejegyzést a megfelelő lokális feltételes eloszlásokbeli bejegyzések szorzata határoz meg. Egy Bayes-háló gyakran exponenciálisan kisebb méretű, mint a teljes együttes eloszlás. * Számos feltételes eloszlást lehet tömören reprezentálni eloszlások kanonikus családjaival. A hibrid Bayes-hálók (hybrid Bayesian networks), amelyek mind diszkrét, mind folytonos változókat tartalmaznak, sokféle kanonikus eloszlást használnak. * A következtetés Bayes-hálókban a célváltozók egy halmaza valószínűség-eloszlásának kiszámítását jelenti, feltéve a tényváltozók egy halmazát. Az egzakt következtetési algoritmusok, mint a változó eliminálás (variable elimination) feltételes valószínűségek szorzatainak összegét értékelik, amilyen hatékonyan csak lehet. * Polifákban (polytrees) (egyszeresen összekötött hálókban) az egzakt következtetés számítási ideje a háló méretével lineárisan nő. Általános esetben a probléma kezelhetetlen. * Sztochasztikus közelítő számítási technikák, mint a valószínűségi súlyozás (likelihood weighting) és a Markov lánc Monte Carlo (Markov chain Monte Carlo) módszerek elfogadható becsléseket adnak a hálóbeli valódi a posteriori valószínűségekre, és sokkal nagyobb hálókkal is megbirkóznak, mint az egzakt algoritmusok. * A valószínűség-számítás kombinálható az elsőrendű logikából vett reprezentációs ötletekkel, hogy nagyon hatékony rendszereket hozzunk létre bizonytalanság esetén történő következtetéshez. A relációs valószínűségi modellek (RVM-ek) eleget tesznek olyan reprezentációs megkötéseknek, amelyek egy olyan jól definiált valószínűség eloszlást garantálnak, amely egy ekvivalens Bayes-hálóval kifejezhető. * Számos egyéb rendszert is javasoltak a bizonytalanság esetén történő következtetéshez. Nagy általánosságban azt lehet mondani, hogy az igazságfüggvényen (truth-functional) alapuló rendszerek az ilyen érveléshez nem a legmegfelelőbb eszközök.
9	0.896552	0	Az elsőrendű logikai következtetés egy elemzését mutattuk be, továbbá számos algoritmust, melyek ilyen következtetéseket képesek végrehajtani. * Egy első megközelítés következtetési szabályokat használ kvantorok példányosítására azért, hogy átalakítsa a következtetési problémát az ítéletkalkulusra. Ez a megközelítés jellemzően nagyon lassú megoldásokat eredményez. * A egyesítés használata, azaz a megfelelő helyettesítések megkeresése változókhoz, megszünteti a példányosítás lépését az elsőrendű bizonyításokban, és így sokkal hatékonyabbá teszi a folyamatot. * A Modus Ponens kiterjesztett változata az egyesítést használja, létrehozva egy természetes és nagy modellező erejű következtetési szabályt, az általánosított Modus Ponenst (generalized Modus Ponens). Az előrefelé láncolás (forward chaining) és a hátrafelé láncolás (backward chaining) algoritmusok határozott klózok halmazára alkalmazzák ezt a szabályt. * Az általánosított Modus Ponens teljes a határozott klózokra, habár a következtetési probléma félig eldönthető (semidecidable). A Datalog programok esetében, amely programok csak függvénymentes határozott klózokat tartalmaznak, a következtetés eldönthető. * Az előrefelé láncolást a deduktív adatbázisokban (deductive databases) használják, ahol sikeresen kombinálják ezt a módszert a relációs adatbázis más műveleteivel. Ezenkívül az előrefelé láncolást használják a produkciós rendszerekben (production systems) is, amelyek hatékonyan képesek frissíteni a tudásbázisukat nagyméretű szabályhalmazokkal is. * Az előrefelé láncolás teljes a Datalog programokra, és polinomiális időben fut. * A hátrafelé láncolást a logikai programozási rendszerekben (logic programming systems) használják, mint amilyen például a Prolog, amely kifinomult fordítási technikákat alkalmaz, hogy biztosítsa a gyors következtetést. * A hátrafelé láncolásban sok a felesleges következtetés, és előfordulhatnak végtelen hurkok. Ezeket a memók gyűjtésével (memoization) lehet kezelni. * Az általánosított rezolúciós (resolution) következtetés teljes bizonyítási rendszer az elsőrendű logikában. Az eljárás konjunktív normál formájú tudásbázisokat használ fel. * Számos stratégia ismert a rezolúciós rendszerek keresési terének a csökkentésére, anélkül hogy a teljességet veszélybe sodornánk. A hatékony rezolúcióalapú tételbizonyításokat felhasználták, hogy érdekes matematikai tételeket bebizonyítsanak, és hogy verifikáljanak, valamint szintetizáljanak szoftvereket és hardvereket.
16	0.130435	0	(A ≻ B) ⋁ (B ≻ A) ⋁ (A ≻ B) * Tranzitivitás (transitivity). Bármely három állapot esetén, ha az ágens preferálja A-t B-vel szemben, és B-t C-vel szemben, akkor az ágensnek preferálnia kell A-t is C-vel szemben.
5	0.909091	0	Mutassa meg, hogy egy ternáris kényszer, mint például az „A + B = C” egy segédváltozó bevezetésével három bináris kényszerré alakítható. Feltételezheti, hogy a tartományok végesek. (Segítség: gondoljon egy olyan új változóra, amelynek értékei más értékekből álló párok, és gondoljon olyan kényszerekre, mint „X az első eleme az Y párnak”.) Ezután mutassa meg, hogyan lehet hasonlóan kezelni a háromnál több változót tartalmazó kényszereket. Végül mutassa meg, miként lehet kiküszöbölni az unáris kényszereket a változók tartományának megváltoztatásával. Ez teljessé teszi annak bizonyítását, hogy bármely CSP átalakítható olyan problémákká, melyek csak bináris kényszereket tartalmazhatnak.
16	0.826087	0	Rögzítse a valószínűségeket. A valószínűségek betegek adatbázisából, szakirodalmi tanulmányokból vagy szakértők szubjektív becsléseiből származhatnak. Azokban az esetekben, amikor nem megfelelő formában érhetők el a szakirodalomban a valószínűségek, akkor Bayes-szabállyal és vetítéssel számíthatjuk ki a kívánt értékeket. Bebizonyosodott, hogy a szakértők leginkább egy ok hatásának a valószínűségét tudják megbecsülni (például P(nehézlégzés|szívelégtelenség)) sokkal inkább, mint a másik irányban.
3	0.083333	1	A lehetséges redundáns megfogalmazással nem törődve a cselekvésstruktúra kettő lehet Q, vagy H; az érzékelés lehet 6-féle (NOP, LL, LF, FL, FF, XY) ; minden kapcsolgatás lehet 8-féle (NOP, LL, LF, FL, FF, ~XY, X~Y, ~X~Y). A lehetséges legális lépések számát:
2	0.210526	1	* A neurális hálózatok alkalmazásának menete * A neurális hálózatok tervezésének lépései * Eldöntendő jellemzők a neurális hálózatok tervezése során * A „perceptron” paradigma jellemzői (processzor, topológia, tanító algoritmus, korlátok) * Többrétegű neurális hálózatok tanítása (általánosított „delta” szabály, a „hiba visszaterjesztés „Back error Propagation” algoritmus) * A „NetTalk” alkalmazás jellemzői, tapasztalatai, tanulságai * A hálózattanítás gyorsító módszerei (momentum, csökkenő hibahatár, „metszés”, inkrementális hálózat építés „kaszkád korreláció” * A versengéses tanulás „győztes visz mindent” algoritmusa és az „oldalirányú gátlás” hatása * Tipikus példák: Kohonen önszerveződő hálózata, jellemzői, alkalmazásai, tanulságai * A neurális hálózatos és szakértői rendszerek összehasonlítása
3	0.458333	0	Az egyenletes költségű keresést nem a mélység, hanem az útköltség vezérli, így komplexitását a b és a d függvényében nehéz jellemezni. Helyette legyen C^∗ az optimális megoldás költsége, és tételezzük fel, hogy minden cselekvés költsége legalább e. Az algoritmus idő- és tárigénye legrosszabb esetben [03-01ma.png] , ami sokkal több lehet, mint b^d. Ez azért lehetséges, mert az egyenletes költségű keresés képes (és sokszor ezt meg is teszi) a kis lépésekből álló nagy fákat felkutatni a nagy és feltehetően hasznos lépéseket tartalmazó utak előtt. Amikor minden lépés költsége ugyanannyi, az [03-02ma.png] , persze azonos b^d-nel.
7	0.24	0	Most, hogy specifikáltuk az ítéletkalkulus szintaxisát, definiáljuk a szemantikáját is. A szemantika definiálja a szabályokat, amivel meghatározható a mondat igazsága egy bizonyos modellben. Az ítéletkalkulusban a modell egyszerűen az igazságértéket – igaz vagy hamis – rögzíti minden ítéletszimbólumra. Például ha a tudásbázis mondatai a C[1,2], C[2,2] és C[3,1 ]ítéletszimbólumokat használják fel, akkor egy lehetséges modell:
25	0.740741	0	Az ötlet, hogy AFSM-ekkel valósítsuk meg a robot szabályozását, igen nagy előrelépés. Képzeljük el, milyen nehéz lenne ugyanezt a viselkedést leírni a konfigurációs térben, bármelyik korábban tárgyalt pályatervező algoritmussal! Először is szükségünk lenne a terep pontos modelljére. A hatlábú robot konfigurációs tere összesen tizennyolc dimenziós (tizenkét dimenzió a lábankénti két-két motortól származik, hat pedig a robot pozíciója és orientációja a környezethez képest). Még ha a számítógépeink elég gyorsak is lennének, hogy kiszámoljanak egy pályát egy ilyen kiterjedt térben, további problémát jelentenének az egyéb előforduló hatások, mint például az, ha a robot megcsúszik a lejtőn. Az ilyen sztochasztikus hatások miatt egyetlen út a konfigurációs térben csaknem bizonyosan túl törékeny lenne, és még egy PID szabályozó sem tudna megbirkózni a felmerülő problémákkal. Más szavakkal, a modellalapú mozgástervezés túl bonyolult feladat a mai robotok pályatervező algoritmusainak.
6	0.1	1	Látszik, hogy itt már megjelenik a feladat megoldásának egy igen fontos eleme is: a pe kifizetési függvény definíciója. Egy direkt mechanizmusban gyakorlatilag ez az egyetlen komponens, amivel variálhatunk (Mi=Ti és g=f adott). Ezt a pe kifizetési függvényt kell tehát ügyesen megválasztanunk. Lássuk a feladat megoldását!
4	0.125	0	ahol h^*(n) az n csomópontból a célcsomópontba való eljutás valódi költségét jelöli. Majdnem minden, a gyakorlatban használt heurisztikus függvény esetén a hiba legalább arányos az útköltséggel, és az ebből adódó exponenciális növekedéssel egyetlen számítógép sem tud megbirkózni. Ezért ahhoz ragaszkodni, hogy egy optimális megoldást találjunk, gyakran nem is praktikus. Használhatjuk az A^* olyan változatát, amely a szuboptimális megoldásokat gyorsan megtalálja, vagy pedig dolgozhatunk pontosabb, de nem elfogadható heurisztikákkal. Egy jól megválasztott heurisztikus függvény ettől függetlenül a nem informált keresési algoritmusokhoz képest jelentős megtakarítást eredményezhet. A  alfejezetben megvizsgáljuk, hogy hogyan is lehet jó heurisztikus függvényt tervezni.
9	0.448276	1	1972 után sem állt meg a munka, és nem a babérjaikon ültek a készítők, hanem felismerték az első verziójú Prolog hibáit és nekiláttak a tökéletesítésének. 74 – 75 között kezdték el terjeszteni, és innentől nem volt megállása. 1979-82 között elkészült a Prolog II, az első olyan Prolog verzió, amit már számítógépekre (pontosabban Apple II-re) szántak. Egy Apple II gép még mindösszesen 64kByte memóriával rendelkezett. A Prolog II legnagyobb újítása a nem egyenlő operátor ([]――――――――――――――――――――) bevezetése volt.
14	0.869565	1	Függvény definiálásánál is érvényes a pontosvesszőre vonatkozó szabály. Amennyiben pontosvesszővel zárul az utasítás, csak definiálja a függvényt, de nem jeleníti meg az értékeket, a pontosvessző elhagyásakor pedig kiíródnak a függvényértékek.
24	0.958333	1	 A sűrű, lombos koronával rendelkező fa árnyékában számos világos foltot lehet látni. Meglepetésre mind körkörös. Miért? Hiszen, ha úgy vesszük, a levelek közötti rések, amelyeken keresztül átvilágít a nap, nagy eséllyel nem ilyenek.
10	0.727273	0	Vegyük észre, hogy a leíró logika hatékonyan teszi lehetővé azt, hogy a predikátumokon direkt logikai műveleteket hajtsunk végre anélkül, hogy először mondatokat alkotnánk, amiket azután összekapcsolunk kötőszavakkal. Bármilyen leírás a Classic-ban kifejezhető elsőrendű logikával, de bizonyos leírások a Classic-ban sokkal világosabbak. Például az emberek egy olyan halmazának leírásához, akiknek legalább három fiuk van, és a fiúk mind munkanélküliek, és a feleségeik orvosok, valamint maximum két lányuk van, akik vagy fizika, vagy matematika tanszéken professzorok, azt használnánk, hogy:
20	0.321429	0	összefüggés írja le, ahol x jelenti az adatpont attribútumait. Folytonos adatok esetén a komponensekre természetesen adódik a többváltozós Gauss-eloszlás, ami az úgynevezett kevert Gauss- (mixture of Gaussians) eloszlás családot adja. A kevert Gauss-eloszlás paraméterei: w[i] = P(C = i) (az egyes komponensek súlya), μ[i](az egyes komponensek várható értéke) Σ[i] (az egyes komponensek kovarianciája). A  (b) ábra három Gauss-eloszlás keverékét mutatja, valójában ez volt az (a) ábrán látható adathalmaz forrása.
24	0.166667	1	A vizsgáló berendezésektől beérkező vizsgálatokat (képek, vizsgálati és páciens adatok) az archiváló szerver fogadja, adatbázist épít, gyors elérésű on-line RAID tömbben (1,7 TB) tárolja. Ezt követően költséghatékony off-line archiváló eszközre másolja (4 DVD/nap). A beérkezett vizsgálatok azonnal elérhetők a jogosult felhasználók részére. A rendszer kapacitása az igények növekedésével folyamatosan bővíthető. MySQL (adatbázis-kezelő) tartalmazza az összes páciens információt.
1	0.241379	0	Nem a célokat, hanem az eszközöket mérlegeljük. Az orvos nem azt fontolgatja, hogy gyógyítson-e, a szónok sem, hogy meggyőzzön-e, az államférfi sem azon hezitál, hogy jogot és törvényt teremtsen, és senki sem a célt mérlegeli. Mindenki feltételezi a célt, és azt fontolgatja, hogy az hogyan, milyen eszközökkel érhető el, és hogy azáltal könnyen és a lehető legjobban érhető-e el. És ha valamilyen eszközzel elérhető a cél, azt fontolgatjuk, hogy azzal az eszközzel hogyan, milyen módon érhetjük el, amíg a legelső okhoz el nem jutunk. Ez az ok a felfedezés sorában a legutolsó… és ami az elemzés rendjében az utolsó, a megtörténés rendjében elsőnek tűnik. És ha lehetetlenséghez jutunk, a keresést feladjuk, például ha pénzre van szükségünk, azt viszont megszerezni nem lehet. Ha azonban valami lehetségesnek tűnik, akkor megpróbálkozunk vele.
17	0.333333	0	Ha a Bellman-frissítést végtelen sokszor alkalmazzuk, garantált, hogy egyensúlyi helyzetet érünk el (lásd következő alfejezet), és ekkor a végső hasznosságértékeknek a Bellman-egyenletek megoldását kell adniuk. Valójában ezek egyértelmű megoldások is, és a hozzájuk tartozó eljárásmód optimális (amit a   egyenlettel nyerhetünk). Az algoritmus, amit Értékiteráció-nak nevezünk, a  ábrán látható.
4	0.958333	1	* Információk ábrázolása a (biológiai) kromoszómákban * A természetes és mesterséges genetikus algoritmusok alapfogalmai (kromoszóma-karakterfüzér, gén - karakter, allél - jellemző érték, lókusz - karakter pozíció,genotípus - karakterfüzér szerkezet, fenotítus - karakter készlet) * A mesterséges genetikus algoritmusok alkalmazásának feltételei és megoldási módjai (rendszer leírás egy karakterfüzérbe, reprezentatív populáció, mérési módszer) * Genetikus algoritmusok operátorai : alap operátorok ( szelekció, kereszteződés, mutáció) alacsonyszintű operátorok (dominancia, halkítás, törlődés, kikapcsolás,…), populáció szintű operátorok („házassági” korlátozások, jóság átalakító függvények,…) * Az alap operátorok alkalmazási algoritmusai: „elitista” és „rulett kerék” algoritmusok, keresztezés és mutáció * A genetikus algoritmusok alkalmazásának menete, korlátai, és előnyei a hagyományos algoritmusokhoz képest
5	0.181818	1	Vegyük észre, hogy amennyiben az AC3/MAC megkezdésekor, az NSW=RED értékadás hatására nem redukáltuk volna az NSW változó értékkészletét {RED}-re, úgy az AC3/MAC algoritmus semmi érdemlegeset sem tudott volna kikövetkeztetni, hiszen ekkor minden változó értékkészlete a teljes {RED, GREEN, BLUE} lett volna, és így minden él esetében teljesült volna, hogy a rajta lévő egyik változó minden értékéhez van a másiknak konzisztens értéke. Ebből következik, hogy a kiindulási KKP esetében, amennyiben az AC3-at előfeldolgozási jelleggel futtattuk volna (csak azért, hogy még a visszalépéses mélységi keresés előtt lehetőség szerint picit redukáljuk egyik-másik változó értékkészletét, amennyiben lehetséges), sajnos semmilyen érdemleges eredménnyel nem jártunk volna. Ezért van tehát az, hogy az AC3/MAC esetében az aktuális értékadást/behelyettesítést nyomban átvezetjük az érintett változó értékkészletébe.
7	0.12	0	Egy következtetési eljárást, amely csak vonzat mondatokat vezet le, helyesnek (sound) vagy igazságtartónak (truth-preserving) nevezzük. A helyesség egy igencsak kívánatos tulajdonság. Egy nem helyes következtetési eljárás kitalál olyan dolgokat ahogy előrehalad, olyan tűk megtalálását jelenti be, amelyek nem is léteznek. Egyszerű belátni, hogy a modellellenőrzés, ha alkalmazható,^[64] akkor helyes eljárás.
19	0.909091	0	A releváns információval funkcionális függőségek formájában először az adatbázis-kutatásnál foglalkoztak, ahol ez a nagy attribútumhalmazok kezelhető részhalmazokra való strukturálásának eszköze volt. Funkcionális függőségeket analógiás következtetésre Carbonell és Collins, majd logikai színezettel Bobrow és Raphael használtak (Carbonell és Collins, 1973; Bobrow és Raphael, 1974). Davies és Russell (Davies, 1985; Davies és Russell, 1987) a függőségeket másoktól függetlenül újra felfedezték, és az analógiás következtetés szempontjából teljes körű logikai elemzésnek vetették alá. A függőségeket deklaratív elfogultság céljából Russell és Grosof használták (Russell és Grosof, 1987). A meghatározások és a leszűkített szótárral rendelkező hipotézistér közötti ekvivalenciát Russell (Russell, 1988) bizonyította be. A meghatározásokat tanuló algoritmust és az RADFT megnövelt hatékonyságát először a Focus algoritmusban mutatták be (Almuallim és Dietterich, 1991). Tadepalli a meghatározások tanulására egy ügyes algoritmust közölt, amely a tanulási sebességben igen lényeges javulást mutat (Tadepalli, 1993).
27	0.6	0	Megkockáztathatjuk azt is, hogy a KO- vagy az AKO-programok – nagy teljesítőképességű számítógépek és bonyolult környezetek esetén – nem fognak szükségszerűen egyszerű és elegáns struktúrával rendelkezni. Láttuk már, hogy az általános rendeltetésű intelligenciához bizonyos fokú reflexszerű és tudatos képesség szükséges, ami a tudás és a döntéshozatali formák sokaságát, ezen formák mindegyikéhez a tanuló és a kompilálási mechanizmusokat, a következtetés vezérlésének módszereit és a tárgyterületre vonatkozó specifikus tudás nagy tárát jelenti. A korlátozottan optimális ágensnek adaptálódnia kell ahhoz a környezethez, amelyben tartózkodik, így belső szervezettsége végül az adott környezetre jellemző optimalizálási sémákat tükrözheti. Ez elvárható, hasonlóképpen ahhoz, ahogy a súlyukban és a lóerőben korlátozott versenyautók szélsőségesen komplikált konstrukciókig jutottak el. Az a sejtésünk, hogy a korlátozott optimalitáson alapuló mesterséges intelligencia tudománya nagy részben olyan folyamatok tanulmányozásából fog állni, amelyek révén egy ágensprogram a korlátozott optimalitáshoz fog konvergálni, és talán kevésbé fog az eredményül kapott, nehezen áttekinthető programok részleteivel törődni.
4	0.625	0	Az „α egy kis konstans” kifejezés mögött az α-t beállító módszerek óriási választéka rejlik. Az alapprobléma az, hogyha α túl kicsi, túlságosan sok lépésre van szükség. Ha α túl nagy, a keresés könnyűszerrel túllő a maximumon. A vonalkeresés (line search) módszere e problémát úgy kísérli megoldani, hogy a pillanatnyi gradiens irányát – általában α ismételt megduplázásával – meghosszabbítja, amíg f nem kezd újra csökkeni. Az a pont, ahol ez megtörténik, lesz az új aktuális állapot.
5	0.181818	1	A listán a (WA, SA) él következik. Szerencsére ez konzisztens, hiszen WA egyetlen RED értéke konzisztens SA jelenlegi egyetlen GREEN értékével. Tehát ezt az élet törölhetjük a listáról, és következhet az (NT, SA) él. Szerencsére ez az él is konzisztens, hiszen NT egyetlen BLUE értéke konzisztens SA egyetlen GREEN értékével. Ezt az élet is töröljük tehát a listáról, és vesszük a következő, (Q, SA) élet.
22	0.111111	0	Szintézis (synthesis). A beszélő létrehozza W szavak fizikai realizációját, W'-t. Ezt teheti tintával papíron, rezgésekkel levegőben vagy valamilyen más médiumon. A  ábrán egy olyan ágenst mutatunk, amely a  szakasz - Beszédfelismerés részben definiált fonetikus ábécével leírt W' hangfüzér szintézisét végzi: „[thaxwahmpaxsihzdehd]”. A szavak egybefolytak, ami tipikus a gyorsan beszélt nyelv esetében.
8	0.516129	0	Az első axióma azt mondja ki, hogy ha hozzáadunk egy 0-t bármely m természetes számhoz, akkor m-et kapunk. Figyeljük meg a „+” bináris függvényszimbólum használatát a +(m, 0) termben. A matematika jelölése szerint a termet a következőképpen írnánk: m + 0, infix (infix) jelölés használatával. (Az eddigiekben az elsőrendű logikához használt jelöléseket prefixnek (prefix) nevezzük.) Azért, hogy könnyebben olvashatóvá tegyük a számokról szóló mondatainkat, lehetővé tesszük az infix jelölések használatát. Így az S(n)-t leírhatjuk úgy is, hogy n + 1, ami által a második axióma a következő lesz:
21	0.75	0	Most egy egyszerű trükköt alkalmazunk, hogy ezt az összegzést approximálni tudjuk a π[θ](s, a) által meghatározott valószínűség-eloszlásból generált mintákkal. Tegyük fel, hogy összesen N kísérletünk van, és a j-edik kísérletben az a[j] cselekvést választottuk. Ekkor
7	0.92	0	A hasonló Megara és sztoikus iskolák (az i. e. 5. században indultak, és több száz éven keresztül működtek) vezették be az implikációt és más alapvető szerkezeteket, amelyeket ma is használunk a modern ítéletlogikában. Logikai összekötőjelek definiálására vezette be az igazságtábla használatát Philón és Megara. A sztoikusok öt alapvető következtetési szabályt használtak, amelyeket igazolás nélkül érvényesnek tartottak, köztük azt a szabályt, amelyet ma Modus Ponensnek nevezzünk. Számos szabályt vezettek le ebből az ötből, felhasználva többek között a dedukció elméletének alapelvét  szakasz - Az ítéletkalkulus következtetési mintái részben, és sokkal tisztábban használták a bizonyítás fogalmát, mint azt Arisztotelész tette. A sztoikusok azt állították, hogy az ő logikájuk teljes abban az értelemben, hogy tartalmaz minden érvényes következtetést, de ami fennmaradt munkájukból, az túlságosan töredékes ahhoz, hogy elemezhető legyen. A Megara és a sztoikus logikák történetének, már amennyire ezek ismertek, jó beszámolóját készítette el Benson Mates (Mates, 1953).
25	0.074074	1	A mobilrobotok fejlesztése világszerte elterjedt kutatási tevékenység. Ez nem csupán annak a vágynak köszönhető, hogy minél okosabb mozgó berendezéseket tudjunk építeni, hanem talán annak a ténynek is, hogy ez a terület magába foglalja a mesterséges intelligencia szinte összes területét. A hatlábú robotok nagy részét a rovarokhoz hasonló alakúra készítik. Speciális erdészeti feladatok megoldására tervezték a MECANT nevű robotot (Halme). Az 1100 kg tömegű robotot 2 hengeres ultrakönnyű repülőgép motorral hajtják. A lábak úgynevezett pantográf szerkezetűek és három-három forgatómozgást biztosítanak. A járművet rádió-távvezérlés segítségével operátor irányítja.  ábra - MECANT lépegető robot (Halme) MECANT lépegető robot (Halme)
19	0.454545	0	Ez a szabály annyira érvényes, mint az AritmetikaiIsmeretlen-t felhasználó szabály, bár annál általánosabb, mivel olyan esetekre is vonatkozik, amikor z numerikus értékű. Még általánosabb szabályokat is kinyerhetünk, ha az Egyszerűsítés(y + z, w) után metszünk. Ekkor a szabály:
24	0.708333	1	Alapvetően más megközelítést igényel, ha például a felismerendő objektum egy háromdimenziós modellje adott, illetve ha csak a vetületeiről áll rendelkezésre információ. Utóbbi eset is többféleképpen lehetséges: adott lehet egy kétdimenziós modell vagy közelítő struktúra, ami leírja az előforduló képeket, vagy azok egy részét, de előfordulhat, hogy csak néhány felvétel ismert a céltárgyról. Ha a bemenet néhány vetületből áll, egy lehetséges út lenne a háromdimenziós alakzatok képekből történő rekonstruálása, azaz a probléma visszavezetése az első esetre. A tapasztalatok szerint ezek a próbálkozások kevés sikerrel jártak, amennyiben a kamera pozíciója nem volt ismert.
6	0.75	0	Schaeffer úgy gondolja, hogy megfelelő számítási teljesítménnyel a végjátékok adatbázisát annyira ki lehetne bővíteni, hogy a kezdeti pozíciótól induló előre keresés valamelyik már megoldott pozíciót mindig el tudná érni, vagyis a dámajáték teljesen megoldható lenne (volt, hogy a Chinook már az 5-ik lépésnél győzött). Az ilyen kimerítő elemzést kézi módszerekkel a 3 × 3-as amőbára meg lehet tenni és számítógépen a 4 × 4 × 4-es amőbára (Qubic), a Go-Mokura (öt egy sorban) és a Nine-Men’s Morrisra is elvégezték (Gasser, 1998). Ken Thompson és Lewis Stiller figyelemre méltó munkája (Thompson és Stiller, 1992) az összes öt- és hatfigurás sakkvégjátszmát is megoldotta, az eredményeket az interneten hozzáférhetővé téve. Stiller egy olyan kényszermatt esetét is felfedezte, amely 262 lépést igényelt. Ez egy kis felfordulást okozott, mert a sakk szabályai megkövetelik, hogy 50 lépés alatt valamilyen „előrehaladásnak” kell történnie.
22	0.111111	0	Beépítés (incorporation). H eldönti, hogy elhiszi P[i]-t (vagy nem). Egy teljesen naiv ágens mindent elhihet, amit hall, de egy kifinomultabb ágens úgy kezeli a szólásaktust, mint egy P[i]-t alátámasztó tényt, és nem mint annak a megerősítését.
8	0.548387	0	Némi munkával meg lehet mutatni, hogy ezek a mondatok együtt logikusan egyenértékűek a   egyenletben leírt ekvivalenciamondatokkal. Maga az ekvivalencia is tekinthető ok-okozatinak, mert megmutatja, hogy a Szellős igazságértéke a világ állapota alapján határozható meg.
14	0.826087	1	Egy adott betegségre (például diabétesz) kidolgozott modell rendszerint nagyszámú (több száz) matematikai összefüggést tartalmaz, és az proaktív medicina sikere attól függ, hogy ezek segítségével mennyire megbízhatóan és milyen időtávlatban tudjuk előre látni a betegség kialakulását és kimenetelét. A modell viselkedését számítógépes szimulációval tanulmányozhatjuk, különböző változatokat játszhatunk le, miközben egy vagy több feltételt változtatunk.
19	0.863636	0	Ebben a fejezetben különböző módszereket vizsgáltunk meg arra vonatkozóan, hogy az előzetes tudás hogyan segítheti az ágenst abban, hogy új tapasztalatokból tanuljon. Mivel az előzetes tudás zöme inkább a relációs modellekkel, és nem attribútumalapú modellekkel van megadva, a relációs modellekből tanuló rendszerekkel is foglalkoztunk. Az alábbiakban összefoglaljuk a fontos tudnivalókat. * Az előzetes tudás felhasználása a tanulásnál a kumulatív tanuláshoz (cumulative learning) vezet, ahol az ágens az új tudás beszerzésével javítja a tanulási képességét. * Az előzetes tudás segít a tanulásban, mert a különben konzisztens hipotéziseket eliminálja, és a példák magyarázatának „kitöltésével” rövidebb hipotézisekhez vezet. Ezek a tulajdonságok javítják a tanulás minta- és számítási komplexitását. * Az előzetes tudás által betöltött különböző – vonzatkényszerek (entailment constraints) formájában kifejezett – logikai szerepeknek a megértése segít a különféle tanulási módszerek definiálásában. * A magyarázatalapú tanulás (MAT) (explanation-based learning, EBL) az egyedi példákból úgy emeli ki az általános szabályokat, hogy a példákat először megmagyarázza, majd a magyarázatot általánosítja. Ezzel a deduktív módszerrel az elsődleges tudást hasznos, hatékony, speciális rendeltetésű szaktudássá változtatjuk. * A relevanciaalapú tanulás (RAT) (relevance-based learning, RBL) az előzetes tudást meghatározások formájában használja a releváns attribútumok azonosítására. Ily módon egy redukált hipotézisteret generál, és a tanulási folyamatot meggyorsítja. A RAT lehetővé teszi az egyedi példák deduktív általánosítását is. * A tudásalapú induktív tanulás (TIT) (knowledge-based inductive learning, KBIL) induktív hipotéziseket keres, amelyek a háttértudás segítségével megmagyarázzák a megfigyelések halmazát. * Az induktív logikai programozási (ILP) (inductive logic programming) technikák a TIT-hez folyamodnak, az elsőrendű logikában kifejezett háttértudást felhasználva. Az ILP-módszerek olyan relációs tudás megtanulására is alkalmasak, amelyet az attribútumalapú rendszerekben nem lehet kifejezni. * Az ILP felülről lefelé megközelítéssel, a nagyon általános szabályok finomításával, vagy pedig lentről felfelé megközelítéssel, a deduktív folyamat invertálásával valósítható meg. * Az ILP-módszerek természetes módon generálnak új predikátumokat is, amelyekkel új elméletek tömören kifejezhetők, és általános célú tudományos elméletformáló rendszerekként is ígéretesnek mutatkoznak.
18	0.894737	1	Az ESTAIC (European Society for Computing and Technology in Anaesthesia and Intensive Care) társaság célja a számítástechnika mind szélesebb körű alkalmazása a szakmának, akár teljes körű anaesthesiológiai adatforgalomról jegyzőkönyv-készítéssel, akár infúziós pumpák vezérléséről van szó. Ezen kívül az ún. „Minimal data set in Anasthesia” rendszer elkészítésére törekszenek. Becslések szerint évente Európában több mint 1 millió anaesthesia zajlik. Ennek feldolgozásához igyekeznek egységesíteni az anaesthesia nomenklatúráját, adatait.
1	0.37931	1	A víz T1 súlyozott képeken jelszegény, fekete, T2 súlyozott képeken pedig jeldús, fehér. Az egyes szervek többnyire valamilyen köztes, szürke árnyalatban jelennek meg. A vízben szegény kötőszövet, ín, porc, szalag alig ad jelt. A véralvadék relaxációs ideje az idő függvényében változik, mert a haemoglobin bomlása folyamán a vas időről időre más molekuláris környezetbe kerül. A légtartó területek és az ásványi anyagokban gazdag csontok vagy meszesedések, kövek jeladása alig vagy nem mérhető, a zsíros csontvelő azonban a csontot is kirajzolja.
25	0.592593	0	PD szabályozót használva K[P] = 0,3 és K[D] = 0,8 paraméterekkel a  (c) ábrán lévő trajektóriát kapjuk. A pálya sokkal simább, és nem látható oszcilláció sem. Ahogy a példa is mutatja, egy differenciáló tag stabillá tehet egy szabályozót, amely enélkül nem az.
15	0.592593	0	Eddig csupán felületesen érintettük a komplex folyamatok reprezentálásának problémáját. Az állapotátmenet-modellek változatossága óriási, magában foglalva egymástól olyan távol eső témákat, mint például az emberi endokrin rendszer (hormonális működés) és az autópályákon közlekedő járművek modellezését. Az érzékelő modellezés egymagában is hatalmas terület, de még az olyan nehezen megfogható jelenségek, mint például az érzékelő elállítódása, hirtelen dekalibrálása és a külső körülményeknek (mint az időjárásnak) a hatásai az érzékelő jelzésein is kezelhetők explicit reprezentációkkal a dinamikus Bayes-hálóknál.
22	0.925926	0	Az első fontos eredmény a nyelvtan indukciós (grammar induction) tanulásának területén egy negatív eredmény volt: Gold (Gold, 1967) megmutatta, hogy nem lehetséges megbízhatóan egy helyes környezetfüggetlen nyelvtan megtanulása annak szövegei alapján. Az ötlet lényege szerint ha adott egy s[1], s[2], … s[n] füzérhalmaz, akkor a helyes nyelvtan lehet a mindent magába foglaló (S → word*), vagy a bemenet másolata, az (S → s[1] | s[2] | … | s[n]), vagy bármi a kettő között. Jeles nyelvészek, mint például Chomsky (Chomsky, 1957; 1980) és Pinker (Pinker, 1989; 2000) felhasználták Gold eredményeit annak megmutatására, hogy lennie kell egy öröklött univerzális nyelvtannak (universal grammar), amellyel minden gyermek születésénél fogva rendelkezik. Az úgynevezett Ingerszegénység (Poverty of the Stimulus) érvelés szerint a gyerekeknek nincs más nyelvi példájuk, mint pozitív: szüleik és társaik nyelvük legtöbbször pontos példáit állítják elő, és igen ritkán javítanak ki hibákat. Ezért, mivel Gold bebizonyította, hogy pozitív példákból nem lehet CFG-t tanulni, a gyerekeknek már „tudniuk” kell a nyelvtant, és pusztán ezen öröklött nyelvtan paramétereit állítják, illetve a szókészletet tanulják. Bár ez az érvelés még befolyással bír a Chomskyt követő nyelvészek körében, egyes nyelvészek (Pullum, 1996; Elman és társai, 1997) és a legtöbb számítástudománnyal foglalkozó elvetette. Igen hamar, már 1969-ben Horning megmutatta, hogy meg lehet tanulni PAC értelemben egy valószínűségi környezetfüggetlen nyelvtant. Azóta számos meggyőző, kizárólag pozitív példákból tanuló empirikus demonstráció jelent meg, mint például Mooney, illetve Muggleton és De Raedt ILP-munkái (Mooney, 1999; Muggleton és De Raedt, 1994), valamint Schütze és de Marcken emlékezetes PhD-értekezései (Schütze, 1995; de Marcken, 1996). Más nyelvtani formalizmusok, mint például a reguláris nyelvek (Oncina és Garcia, 1992; Denis, 2001), reguláris fa nyelvek (Carrasco és társai, 1998), valamint a véges automaták (Parekh és Honavar, 2001) tanulása is lehetséges.
3	0.208333	1	n = 7 esetén az analitikus megoldásokat azok az y = a * x + b alakú függvények adják, ahol „a” = 2, 3, 4, 5 és „b” = 0, 1, 2, 3, 4, 5, 6. Ebből látható, hogy összesen 4 x 7 = 28 analitikus megoldást találhatunk. [15]
20	0.107143	0	  ábra - (a) Bayes-háló modell az ismeretlen arányban citrom-, illetve meggyízű cukorkák esetére. (b) Annak a modellje, amikor a csomagolópapír színe függ (valószínűségi alapon) a cukorka ízétől. (a) Bayes-háló modell az ismeretlen arányban citrom-, illetve meggyízű cukorkák esetére. (b) Annak a modellje, amikor a csomagolópapír színe függ (valószínűségi alapon) a cukorka ízétől.
13	0.772727	0	Az ilyen valószínűségi eloszlásokat naiv Bayes-modellnek hívjuk – „naiv”, mert gyakran használják (egyszerűsítésként) olyan esetekben is, ahol az „okozati” változók valójában nem függetlenek az „ok” fennállása esetén. (A naiv Bayes-modellt néha Bayes-osztályozónak (Bayes classifier) is hívják némileg meggondolatlanul, ami arra sarkallta az igazi Bayes-következtetést alkalmazókat, hogy a naiv Bayes-modellt együgyű Bayes- (idiot Bayes) modellnek hívják.) A naiv Bayes-modellek a gyakorlatban akkor is meglepően jól működnek, ha a valószínűségi feltételezés nem igaz. A  fejezetben olyan módszereket írunk le, amelyekkel a naiv Bayes-eloszlások megtanulhatók a megfigyelésekből.
12	0.904762	0	A Strips programban található a macrops – elemi lépések sorozatából álló „makróoperátorok” (macro operators) – tanulásra szolgáló eszköztár, az első hierarchikus mechanizmusnak tekinthető (Fikes és társai, 1972). A hierarchiát szintén alkalmazták a Lawaly rendszerben (Siklossy és Dreussi, 1973). Az Abstrips rendszer (Sacerdoti, 1974) az absztrakciós hierarchia (abstraction hierarchy) ötletét vezette be, ahol a magasabb szintű tervezés megengedte a cselekvések alacsonyabb szintű előfeltételeinek figyelmen kívül hagyását, hogy egy működő terv általános struktúráját származtathassa. Austin Tate PhD-tézise (Tate, 1975b) és Earl Sacerdoti (Sacerdoti, 1977) munkája a HTM tervkészítés modern formájának alapötleteit vezette be. Számos gyakorlati tervkészítő, beleértve az O-Plan és a Sipe tervkészítőket, HFH-tervkészítő. Yang (Yang, 1990) a HFH-tervkészítést hatékonnyá tevő cselekvések jellemzőit tárgyalja. Erol, Hendler és Nau (Erol és társai, 1994, 1996) egy teljes hierarchikus dekompozíciót alkalmazó tervkészítőt mutat be, valamint számos komplexitásbeli eredményt a tiszta HFH-tervkészítőkhöz. Más szerzők (Ambros-Ingerson és Steel, 1988); Young és társai (Young és társai, 1994); Barrett és Weld (Barett és Weld, 1994); Kambhampati és társai (Kambhampati és társai, 1998) az ebben a fejezetben bemutatott hibrid megközelítést javasolták, melyben a dekompozíciók mindössze a részben rendezett tervkészítéshez használható finomítások egy másik formáját jelentik.
5	0.181818	1	A behelyettesítést tehát {NSW=RED}-re állítjuk vissza, ahogyan az 1. lépésben adódott, illetve a 3. lépésben elkövetett WA=RED értékadást követő AC3/MAC-es következtetés eredményeképp 4. lépésben kivitelezett, NT változó értékkészletére vonatkozó redukciót, aminek során a RED érték kikerült az értékkészletéből, semmissé tesszük, azaz az NT változó értékkészletét visszaállítjuk {RED, GREEN, BLUE}-ra.
6	0.1	1	Most pedig erre alapozva bebizonyítsuk a Minimax tételt! Próbáljuk meg bebizonyítani, hogy ha teljesül a bekeretezett, ún. Minimax-feltétel (amely szerint, ha ugyanazt a hasznot kapjuk függetlenül attól, hogy előbb vagy utóbb maximalizálunk q1 szerint és előtte/utána minimalizálunk q2 szerint), akkor létezik q* nyeregpont, avagy egyensúly.
19	0.954545	0	Mutassa ki a konjunktív normál formába való átalakításával és a rezolúció alkalmazásával, hogy a  szakasz - Tanulás releváns információ alapján részben található és a brazilokra vonatkozó konklúzió helyes.
12	0.952381	0	A kockavilágban két Strips cselekvést kellett bevezetnünk, hogy az Üres predikátumot helyesen megtartsuk, a Mozgat és az AsztalraTesz cselekvéseket. Mutassuk meg, hogy a feltételes következmények hogyan használhatók mindkét eset egyetlen cselekvéssel történő leírására.
9	0.931034	1	 A Szereti( János, Fagylalt) mondatból kiindulva logikusnak tűnik arra következtetni, hogy ∃x Szereti(x,Fagylalt)  . Adjon meg egy általános következtetési szabályt, az egzisztenciális bevezetést (Existential Introduction), amely megerősíti ezt a következtetést. Gondosan vizsgálja meg a feltételeket, amelyeket ki kell elégíteni a felhasznált változókkal és termekkel.
1	0.172414	0	Egy fontos dologról nem szabad elfeledkezni: rövidesen meglátjuk, hogy összetett környezetben a tökéletes racionalitást – mindig helyesen cselekedni – lehetetlen elérni. A számítási szükségletek egyszerűen túl nagyok. A könyv nagyobb részében azonban azzal a munkahipotézissel fogunk élni, hogy a tökéletes döntéshozatal megértése jó kiindulópont. A probléma így egyszerűbbé válik, és megfelelő keretet nyújt a területhez tartozó alapozó anyag többségéhez. A korlátozott racionalitással (limited rationality) – azaz megfelelően cselekedni, miközben az összes kívánt számítás elvégzésére nincs elegendő idő – explicit módon a 6. és a  fejezet foglalkozik.
17	0.933333	0	A kő-papír-olló gyerekjátékban mindegyik játékos egyszerre felmutatja a választását, ami kő, papír vagy olló. A papír becsomagolja a követ, a kő kicsorbítja az ollót, az olló elvágja a papírt. A kiterjesztett kő-papír-olló-tűz-víz változatban a tűz üti a követ, papírt és ollót, a kő, papír és olló üti a vizet, és a víz üti a tüzet. Írja fel a jutalmazási mátrixot, és keressen egy kevert stratégiájú megoldást a játékhoz.
25	0.814815	0	A CES, C++ beágyazott rendszerekhez (C++ for embedded systems), a C++ nyelv kiterjesztése, amely már valószínűségeket és tanulást is tartalmaz (Thrun, 2000). A CES adattípusai valószínűségi eloszlások, amelyek a programozó számára lehetővé teszik a bizonytalan információk kezelését a korábbi nehézségek nélkül. Ami még fontosabb, hogy a CES lehetőséget nyújt a robot szoftverpéldákkal való tanítására, nagyon hasonlóan a  fejezetben tárgyalt tanulási algoritmusokhoz. Ennek kihasználásával a programozók hagyhatnak helyet a programban a később megtanulható függvények számára – ezek tipikusan differenciálható parametrikus reprezentációk, mint például a neurális hálók. Ezeket a függvényeket a külön tanulási fázisban tanulja meg a rendszer, ahol a tanító határozza meg a kívánt kimeneti viselkedést. A CES sikeresnek bizonyult részlegesen megfigyelhető és folytonos esetekben is.
6	0.1	1	Hasonlóképp látható, hogy az 1-es játékos v stratégiája immár, az x stratégia eliminálását követően, dominálja az u stratégiát (van, ahol nagyobb kifizetést ad, de általában sehol sem kevesebbet, mint az u stratégia). Tehát a fentebb kapott 2x2-es játékot 1x2-es méretűre redukálhatjuk.
16	0.043478	0	Ámbár az MVH-elv bármely döntési helyzet esetén meghatározza a helyes cselekvést, a szükséges számítások lehetnek kivitelezhetetlenek, és néha maga a probléma megfogalmazása is bonyolult. A világ kezdeti állapotának ismerete érzékelést, tanulást, tudásreprezentációt és következtetést igényel. A P(Eredmény[i](A)|Tesz(A), E) kiszámítása a világ teljes okozati modelljét igényli, és – ahogyan azt a  fejezetben láttuk – NP-teljes számítást a valószínűségi hálózatokban. Az egyes állapotok U(Eredmény[i](A)) hasznosságának a kiszámítása gyakran keresést vagy tervezést igényel, mivel az ágens nem tudja, hogy egy állapot mennyire jó addig, ameddig nem tudja, hogy hova is kerülhet ebből az állapotból. Így a döntéselmélet nem csodaszer, ami megoldja az MI-problémát. Másrészről azonban, ez egy olyan keretet ad, amelyben áttekinthető egy MI-rendszer összes részének a beilleszkedése. Fontos Az MVH-elv egyértelműen kapcsolódik a  fejezetben felvetett teljesítménymértékek elképzeléshez. Az alapötlet nagyon egyszerű. Tekintsük azokat a lehetséges környezeteket, amelyek érzékeléssel és memóriával rendelkező ágenseket tesznek lehetővé, és gondoljuk át azt, hogy milyen lehetséges ágenseket tudnánk tervezni. Ha egy ágens maximalizálja a hasznosságfüggvényét, és az helyesen tükrözi a teljesítmény mértékét, amivel a viselkedését megítélik, akkor ez a lehető legmagasabb teljesítménypontszámot éri el, ha a hasznosságot azon lehetséges környezetek felett átlagoljuk, amelyekbe az ágens kerülhet. Ez az alapvető igazolása az MVH-elvnek. Bár az állítás tautológiának tűnhet, valójában nagyon fontos átmenetet jelent a racionalitás globális, külső kritériumaitól – a múltbeli környezetek felett vett teljesítménytől – egy lokális, belső kritériumig, ami a következő állapotra vonatkozó hasznosságfüggvény maximalizálását jelenti.
13	0.590909	0	Ezért a táblázatos formában megadott teljes együttes valószínűségi eloszlás a gyakorlatban nem használható eszköz következtető rendszerek felépítésére (mindemellett a fejezet végén található történeti megjegyzésekben találkozhatunk egy ilyen módszeren alapuló valós alkalmazással). E technikát úgy kell tekintenünk, mint egy elméleti alapot, amelyre a hatékonyabb módszerek épülhetnek. A fejezet további részeiben bemutatjuk azokat az alapötleteket, amelyekre szükségünk lesz a  fejezet valós rendszereinek kifejlesztéséhez.
5	0.181818	1	A változó, amelynek most értéket adtunk (NT) értékkészlete 1-elemű, mint látjuk. Ezért tehát az AC3/MAC algoritmus első lépésének, melyben az értékadásnak megfelelően egy-eleműre redukálja a változó értékkészletét, felesleges lenne. Sőt, mivel az értékkészlet redukciója effektíve nem történik meg, ezért igazából következtetni sincs értelme, hiszen az NT=RED értékadástól az AC3/MAC szempontjából nézve nem változik semmi. Tehát az AC3/MAC ebben az esetben, amikor 1-elemű értékkészlettel rendelkező változó kap (egyértelműen) értéket, nem csinál semmit.
6	0.1	1	A teljes állapothalmaz (nagy Omega) bármely E részhalmazát eseménynek nevezzük, és azt mondjuk, hogy az i játékos tudja az E eseményt, amennyiben az aktuálisan igaz w világállapotban a Pi(w) információs halmaza része az E eseménynek. Ebből kiindulva definiálható egy i játékos Ki(E) tudásfüggvénye. A Ki(E) tudásfüggvény gyakorlatilag azokat a világállapotokat adja vissza, amelyekben az i játékos tudja az E eseményt. Belátható, hogy a tudásfüggvény által visszaadott állapothalmaz éppen a megfelelő Pi(w) információs halmazok uniója (mivel minden Pi(w) diszjunkt és tartalmazza w-t). Éppen emiatt igaz a következő fólia utolsó állítása, azaz Ki(E)=E akkor, ha E nyilvánvaló esemény i számára, azaz ha E egyértelműen „kitapétázható” Pi(w) halmazok által.
6	0.1	1	A játékosok tehát, mikor saját stratégiájukat megválasztják az itt indukált játékban, akkor végső soron az ui hasznosságukat, ami az egyéni értékelésük, és a kifizetésük összege, próbálják maximalizálni. Namármost, ha az egyéni értékelésüket (-ti) hozzáadjuk a kifizetési függvény (1)-es tagjához, akkor gyakorlatilag -ti értékek egy szummáját kapjuk minden i-re (utilitariánus társadalmi összhaszon), ami negatív. A (2)-es tagtól eltekintve, amire az i játékosnak úgysincs befolyása, végső soron tehát az i játékos ezt a szummát próbálja meg maximalizálni ahhoz, hogy a hasznát maximalizálja. Magyarán egyiknek sem érdeke nagyobb ti költséget közölni annál, mint ami valójában van (hiszen akkor a szumma kisebb volna, negatívabb). ...és bizonyára kisebb típust sem éri meg közölni, hiszen a kapott mechanizmus jól láthatóan VCG mechanizmus, ami olyan játékot indukál, amiben az igazmondás a domináns egyensúly, azaz mindenki a saját valódi ti típusát fogja bejelenteni, avagy a megfelelő, igazi ti stratégia szerint fog játszani, aminek köszönhetően valóban meghatározhatjuk a globálisan optimális megoldást, azaz a valóban legrövidebb utat x-ből y-ba.
8	0.387097	0	Az elsőrendű logika a predikátumok és termek korábban leírt használatán kívül még egy lehetőséget nyújt atomi mondatok készítésére. Alkalmazhatjuk az egyenlőségszimbólumot (equality symbol) állítások készítésére is annak kifejezésére, hogy két term ugyanarra az objektumra vonatkozik. Például az
18	0.684211	1	A kutatási eredmények alapján úgy tűnik, hogy lehetséges a tanuló algoritmus becslési teljesítményének javítása a becslések torzításának és várható értékének tükrében [4]. (Ha a becslés várható értéke és a becsülni kívánt célváltozó várható értéke megegyezik, akkor a becslés torzítása, tanulás esetében a becslés elfogultsága (bias) nulla.) Továbbá, az eljárás úgy tűnik nem érzékeny a túltanulás jelenségére [4]. (Tanuló algoritmus túltanulása azt jelenti, hogy olyan szabályokat alkot az osztályozó eljárás, amelyek csak a tanuló adathalmazra érvényesek. Például csak barna és zöld szemű zsokék lovai nyertek a tanuló mintán, és az eljárás azt a szabályt határozza meg, hogy más szemszínű zsoké lova nem lehet győztes befutó.)
5	0.181818	1	A következő, (WA, NT) él konzisztens, hiszen WA egyetlen GREEN értékével konzisztens NT egyetlen RED értéke. Az élet töröljük. A következő, (SA, NT) él is konzisztens, mivel SA egyetlen BLUE értékével konzisztens NT egyetlen RED értéke. Ezt az élet is töröljük tehát. A következő, (Q, NT) él is konzisztens, és az utána listában következő további 5 él is, így ezeket is mind-mind töröljük a listáról, amely így kiürül jelezve, hogy a következtetés végére értünk anélkül, hogy ellentmondásra jutottunk volna. Ezt a szerencsés állapotot mutatja a következő ábra.
2	0.894737	1	Jegyezzük meg, hogy az ekvivalencia ezen definíciója semmit nem mond az ágensprogram hatékonyságáról! Könnyen előfordulhat, hogy két ágensprogram ekvivalens, de az egyik lényegesen hatékonyabb, mint a másik. A jó ágensprogram szerkesztésekor a feladat tulajdonképpen az, hogy megtaláljuk az adott ágensfüggvényt megvalósító ekvivalens ágensprogramok közül a legoptimálisabbat!
23	0.333333	1	A teszt eredmények szemléltetésére, főleg a nemzetközi szakirodalomban, alkalmazott módszer a ROC analízis. A ROC görbét egységnégyzetben ábrázolják, melynek x-tengelyén az (1-specificitás), az y-tengelyén a diagnosztikai szenzitivitás értékeket jelenítik meg. A négyzet jobboldalán feltűntethetők az (1-diagnosztikai szenzitivitás) értékek, a négyzet felső tengelyén pedig a diagnosztikai specificitás értékek is. A ROC görbe az alkalmazott teszt eredményeinek átfedését ábrázolja a betegek és az egészségesek csoportjainak adataiból, a döntési szintek teljes tartományában. A görbe minden pontja egy diagnosztikai szenzitivitás/diagnosztikai specificitás pontpárt jelenít meg egy döntési szinten. A teszt diagnosztikai hatékonysága akkor a legjobb, ha a diagnosztikai szenzitivitás és diagnosztikai specificitás is maximális, ebben az esetben a ROC görbe áthalad az egységnégyzet bal felső csúcsán. Hamis pozitív és hamis negatív eredmények ilyenkor nem adódtak, a betegek és az egészségesek eredményeit jellemző Gauss-görbék nem fedik egymást. Ha a teszt a vizsgált betegség szempontjából nem tud különbséget tenni, akkor a ROC görbe pontjai az egységnégyzet bal alsó és jobb felső csúcsát összekötő diagonális egyenes körül helyezkednek el.
25	0.074074	1	Szinte mindegyik területen rendkívül fontos a külső érzékelés, mert segítségével pl. a technológiai folyamat tűréshatáron kívüli eltéréseit is kezelni lehet. A külső szenzorok által szolgáltatott információk növelik a robot intelligencia szintjét, segítségükkel módosíthatók az eredeti mozgáspályákat megvalósító programok.
14	0.913043	0	A valószínűség és az elsőrendű nyelvek közötti kapcsolatot Carnap tanulmányozta (Carnap, 1950). Gaifman, illetve Scott és Krauss megadott egy nyelvet, amelyben valószínűségeket elsőrendű mondatokhoz lehet kapcsolni, és amelyre a modellek valószínűségi mértékek voltak lehetséges világokon (Gaifman, 1964; Scott és Krauss, 1966). Az MI-n belül ezt az ötletet az ítéletlogikára Nilsson, a predikátumlogikára pedig Halpern fejlesztette ki (Nilsson, 1986; Halpern, 1990). A tudásreprezentációs kérdések első kiterjedt vizsgálatát ilyen nyelvek esetén Bacchus végezte (Bacchus, 1990), Wellman és társainak a tanulmánya a korai implementációkat tekinti át (Wellman és társai, 1992), amelyek egy ekvivalens (ítéletlogikai) Bayes-háló létrehozásán alapulnak. Napjainkra a kutatók elkezdték megérteni a teljes tudásbázisok fontosságát, azaz olyan tudásbázisok fontosságát, amelyek akár a Bayes-hálók, egy egyértelmű együttes eloszlást definiálnak az összes lehetséges világ felett. Az erre szolgáló eljárások a logikai programozás valószínűségi verzióin (Poole, 1993; Sato és Kameya, 1997) vagy szemantikus hálókon (Koller és Pfeffer, 1998) alapultak. A fejezetben ismertetett típusú relációs valószínűségi modelleket Pfeffer vizsgálta részletesebben (Pfeffer, 2000). Pasula és Russell mind a relációs, mind az azonossági bizonytalanságot vizsgálta az RVM-ekben és az MCMC következtetés felhasználásában (Pasula és Russell, 2001).
5	0.818182	1	A kisebb négyszögeket kell valamilyen formában változókkal felírnunk. Erre kézenfekvő módszer lehet, hogy a csúcsaik koordinátáit mint rendezett párokat tároljuk minden négyszöghöz (a négyszögek száma kötött). Így tehát egy Xi változó egy rendezett párokból (a koordinátákból) álló rendezett négyes (Xi = ((x1,y1), (x2,y2), (x3,y3), (x4,y4))). Még azt kell megfogalmaznunk ezen változók segítségével, hogy a négyszögek sehol nem fedik egymást. Ehhez írjuk fel az Xi négyszöget az oldalai segítségével! Egy (x,y) pont benne van az Xi négyszögben, ha teljesülnek rá az
20	0.107143	0	Tegyük fel, hogy új gyártótól vásárolunk egy zsák citrom- és meggycukorkát, a meggyarány teljesen ismeretlen, bárhol lehet 0 és 1 között. Ez esetben kontinuum számosságú hipotézisünk van. A paraméter (parameter), amelyet θ-val jelölünk, most a meggycukorkák aránya, a hipotézis pedig h[θ]. (A citromízűek aránya egyszerűen 1 – θ.) Ha feltételezzük, hogy a priori minden arány egyformán valószínű, akkor a maximum-likelihood megközelítés az ésszerű. Ha Bayes-hálóval modellezzük a helyzetet, akkor csupán egyetlen véletlen változóra van szükségünk. Legyen ez az Íz nevű változó (a zacskóból véletlenszerűen választott cukorka íze). Lehetséges értékei a meggy és a citrom, ahol a meggy valószínűsége θ (lásd  (a) ábra). Tegyük fel, hogy kibontunk N cukorkát, amelyek közül c meggyízű és ℓ = N – c citromízű. A   egyenlet alapján ennek a speciális adathalmaznak a valószínűsége:
6	0.1	1	Láthatjuk például, hogy a 2-es játékos y stratégiája dominálja az x-et, hiszen minden esetben nagyobb kifizetést garantál a 2-es játékos számára. Az x stratégia tehát dominált stratégia, így a 2-es játékosnak nem volna ésszerű ezt választania, azaz eliminálhatjuk.
21	0.5625	0	Ezeknek a problémáknak egy lehetséges kezelési módja, ha függvényapproximációt (function approximation) használunk, ami egyszerűen azt jelenti, hogy a leképezésnek bármilyen reprezentációját használhatjuk, kivéve a táblázatos reprezentációt. A reprezentációt közelítőnek tekintjük, mivel nem áll fenn biztosan, hogy az igazi hasznosságfüggvény vagy Q-függvény reprezentálható a választott formában. A  fejezetben például leírtunk egy sakkjátékban használható kiértékelő függvényt (evaluation function), amelyet tulajdonságok (feature) (vagy bázisfüggvények (basis function)) f[1],…, f[n] halmazának lineáris kombinációjával reprezentáltunk:
24	0.916667	0	Stephen Palmer munkája, a Vision Science: Photons to Phenomenology (Palmer, 1999) a legjobb összefoglaló munka az emberi látás leírására; David Hubel Eye, Brain and Vision (Hubel, 1988) és Irvin Rock Perception c. műve (Rock, 1984) rövid bevezetőt nyújtanak a neuropszichológia, illetve az észlelés területeibe.
11	0.423077	0	Egy ilyen megközelítésnek megvan az az előnye is, hogy rugalmas a terv összeállításának sorrendjében. A tervkészítő így nem kényszerül arra, hogy a lépéseken időrendi sorrendben dolgozzon, hanem először inkább a „nyilvánvaló” vagy „fontos” döntéseken dolgozhat. Például egy Berkeleyben lévő tervkészítő ágens, amely Monte Carlóba igyekszik, először egy San Francisco–Párizs járatot vizsgál meg, majd amikor ismeri a pontos indulási és érkezési dátumokat, foglalkozhat a reptérre kijutás, illetve az onnan továbbjutás problémájával.
20	0.214286	0	Ha már az volt az ötletünk, hogy az ismeretlen paramétereket valószínűségi változókkal reprezentáljuk – amilyen például Θ –, akkor természetes módon adódik, hogy azokat beépítsük magába a Bayes-hálóba. Ahhoz, hogy ezt megtehessük, minden egyes példa leírásához másolatot kell készítenünk a változókról. Ha például három cukorkát figyeltünk meg, akkor szükségünk van a következő változókra: Íz[1], Íz[2], Íz[3] és Csomagoló[1], Csomagoló[2], Csomagoló[3]. A Θ paraméterváltozó határozza meg minden egyes Íz[i] változó valószínűségét:
21	0.1875	1	Tehát alapfeltevés, hogy egy folyamat esetében a folyamat állapotai azonos eloszlású, független valószínűségi változók, melyek egyetlen paramétere ismeretlen. Néhány feltétel mellett ismert a probléma aszimptotikusan optimális megoldása [2]. (Ismert a feladat aszimptotikusan optimális megoldása Markov tulajdonság megléte esetén is [7].)
14	0.826087	1	A betegség progresszióját a beteg általános egészségi állapota (ÁP), az észlelt genetikai mutációk és polimorfizmusok (GE), a beteg demográfiai és klinikai paraméterei (KLP, például nem, életkor, inzulinérzékenység stb.), a környezeti paraméterek (KP, például légszennyezettség mértéke, stb.), a beteg életmódja (ÉM, például fizikai aktivitás mértéke, étkezési szokások, dohányzás stb.) és az alkalmazott terápia (TH, például gyógyszerezés) határozza meg.
6	0.1	1	A következő két tulajdonság már nem konkrétan a játékokra, hanem a stratégiákra, illetve azok kombinációira vonatkozik. Vázlatosan már előbb is említettük mindkettőt. Az si* stratégia gyengén dominálja az si stratégiát, ha a többi játékos összes lehetséges stratégia-kombinációja esetén legalább akkora kifizetést eredményez, mint si, továbbá legalább egy esetben még nagyobb is az általa elért kifizetés. Erős dominanciánál minden esetben nagyobb kifizetést kell eredményeznie si*-nak, mint si-nek. Egy stratégia gyengén, vagy erősen domináns, ha minden más stratégiát gyengén, vagy erősen dominál. Ha pedig minden játékosnak van domináns stratégiája, úgy ezek kombinációját a játék domináns egyensúlyának nevezzük.
16	0.434783	0	Kezdjük a determinisztikus esettel. Emlékezzünk vissza, hogy determinisztikus környezetben az ágensnek egy értékfüggvénye van, : a cél ennek a tömör reprezentálása. A determinisztikus preferenciastruktúrában megtalálható alapvető szabályszerűséget preferenciafüggetlenségnek (preference independence) nevezzük. Két attribútum, X[1] és X[2] preferenciálisan független X[3]-tól, ha a preferencia 〈x[1], x[2], x[3]〉 és  között nem függ X[3] konkrét értékétől.
5	0.181818	1	Mit tegyünk most? Hát az algoritmus szerint pillanatnyilag az NT változó szintjén járunk a rekurzióban, és ennek a GREEN értéket adtuk ugye a legutóbb (az 5. lépésben). Tehát most rá kellene térnünk az NT változó következő lépésére a FOR-ciklusban. Ez az érték a BLUE lesz (NT=BLUE).
16	0	0	A  alfejezet a döntéselmélet alapvető elveit vezeti be: a várható hasznosság maximálását. A  alfejezet megmutatja, hogy bármely racionális ágens viselkedése leírható egy hasznosságfüggvény feltételezésével és egy azon alapuló maximálással. A  alfejezet részletesebben megvizsgálja a hasznosságfüggvény tulajdonságait, különösen ezek kapcsolatát olyan egyedi mennyiségekhez, mint a pénz. A  alfejezet ismerteti, hogyan lehet a több mennyiségtől függő hasznosságfüggvényeket kezelni. A  alfejezet leírja a döntéshozó rendszerek megvalósítását. Nevezetesen, bevezetjük a döntési hálózatok (decision networks) formalizmust – más néven hatásdiagramot, (influence diagram) –, ami kiterjeszti a valószínűségi hálózatokat, hogy a „cselekvéseket” és a „hasznosságokat” is tudják kezelni. A fejezet többi része azokat a kérdéseket vizsgálja, amelyek a döntéselméletnek a szakértői rendszerekkel kapcsolatos alkalmazásakor lépnek fel.
9	0.931034	0	A deduktív adatbázisokként (deductive databases) ismert kutatási terület szintén hozzájárult az előrefelé következtetés megértéséhez. Egy Toulouse-i szellemi műhelyben kezdődött a munka 1977-ben, amelyet Jack Minker szervezett, összehozva a logikai következtetési és az adatbázisrendszerekkel foglalkozó szakembereket (Gallaire és Minker, 1978). Egy történeti áttekintés (Ramakrishnan és Ullman, 1995) szerint: a „deduktív [adatbázis-] rendszerek megkísérlik a Prolog adaptálását, a »kis mennyiségű adat« megközelítésről a »nagymennyiségű adat« világára.” Így tehát, ennek a munkának a célja az, hogy egybeolvassza a relációs adatbázis technológiát, amelyet nagyméretű tényhalmazok előhívására terveztek, a Prolog-alapú következtetési technológiával, amely jellemzően egyszerre csak egy tényt hív elő. A deduktív adatbázisokról szóló szövegek közé tartoznak az (Ullman, 1989) és a (Ceri és társai, 1990) munkák.
5	0.181818	1	Az ábrán is látható, hogy a jelenlegi {NSW=RED, WA=RED, NT=BLUE} behelyettesítésben az SA és Q változónak történt értékadások a dupla visszalépés következtében érvénytelenítve lettek. Tehát most újra azon a rekurzió 3. szintjén járunk, ahol a harmadik, jelen esetben NT nevezetű változó számára keresünk elfogadható értéket. Az NT=BLUE értékadás, és az így előalló behelyettesítés szerencsére ellentmondásmentes, így az algoritmus újfent meghívhatja önmagát.
24	0.833333	1	Az illesztett szűrő egy előre megadott minta részének vagy egészének keresésére alkalmas egy képen. A jelek korrelációja alapján, a keresett alak helyén a kimeneten egy impulzus jelenik meg. A szűrő ezt a működést kétdimenziós diszkrét esetben a bemenetnek és a keresett jel x majd y tengely menti tükörképének a konvolúciójával éri el. A szűrés jellemezhető az alábbi képlettel.
4	0.083333	0	A h(n) minimalizálása érzékeny a hibás kezdő lépésekre. Tekintsük például azt az esetet, amikor Iaşiról Fogarasra akarunk eljutni. A heurisztika alapján Neamtot kellene először kifejteni, hiszen ez fekszik Fogarashoz a legközelebb, azonban ez zsákutca. A megoldás, hogy először elmegyünk Vasluira – egy olyan lépést teszünk, ami a heurisztika szerint a céltól távolabb visz – és aztán elmegyünk Csalánosra, Bukarestre, majd Fogarasra. Ebben az esetben a heurisztika szükségtelen csomópontok kifejtését eredményezi. Továbbá, ha nem ügyelünk arra, hogy felismerjük az ismétlődő állapotokat, akkor soha nem találjuk meg a megoldást – a keresés Neamt és Iaşi között fog oszcillálni.
19	0	0	Az előbbi három fejezetben bemutatott tanulási módszerek mindegyikében az volt az alapötlet, hogy egy olyan függvényt konstruálunk, amelynek bemeneti/kimeneti viselkedése megegyezik azzal, amit az adatoknál megfigyeltünk. Bármilyen esetet is nézünk, a tanulási módszer tulajdonképpen nem más, mint egy megfelelő függvénynek a hipotézistérben történő megkeresése, a függvény formájára vonatkozó igen elemi feltételezésekből kiindulva. Ilyen feltételezés lehet például, hogy a függvény „egy másodrendű polinom” vagy „egy döntési fa”, vagy az az elfogultság, hogy „az egyszerűbb a jobb”. Ennek megvalósítása felért azzal, mintha azt mondanánk, hogy mielőtt valami újat tanulnánk, el kellene felejteni (majdnem) mindent, amit tudunk. Ebben a fejezetben olyan tanulási módszereket tanulmányozunk, amelyek a priori tudásból (prior knowledge) merítenek előnyöket. Az esetek többségében az a priori tudást elsőrendű elméletek segítségével reprezentáljuk. Így most először fogjuk összekapcsolni a tudásreprezentációra és a tanulásra vonatkozó eredményeket.
8	0.129032	0	Bármely mondat igazságát egy modell és a mondat szimbólumainak az interpretációja határozza meg. Így tehát a vonzat, az érvényesség és más jellemzők az összes lehetséges modell és az összes lehetséges interpretáció termjeinek felhasználásával vannak meghatározva. Fontos megjegyezni, hogy a tárgyterület elemek száma minden egyes modellben korlátlan lehet – a tárgyterület elemei például lehetnek egész vagy valós számok. Ebből következően, a lehetséges modellek száma korlátlan, mint ahogy az interpretációk száma is. A maga után vonzásnak az összes lehetséges modell felsorolásával történő vizsgálata, ami az ítéletlogikában működik, nem lehetséges az elsőrendű logikában. Még ha az objektumok száma korlátos is, a kombinációk száma nagyon nagy lehet. A példánkban szereplő objektumokkal hozzávetőlegesen 10^25 a kombinációk száma, egy öt objektummal rendelkező tárgyterületben (lásd  feladat).
5	0.181818	1	Az ábrából is jól látszik, hogy az így kapott {NSW=RED, WA=GREEN, NT=RED, Q=RED} behelyettesítés ellentmond a 4-es és 8-as korlátoknak (amik szerint NT és Q, illetve Q és NSW változóknak nem lehet azonos értéke).
12	0.428571	0	Vegyük a porszívóvilág egy speciális példáját. A kiinduló állapotban a robot a tiszta világ jobb oldali négyzetén van. Mivel a környezet teljesen megfigyelhető, az ágens ismeri a teljes OttJobb ∧ TisztaBal ∧ TisztaJobb állapotleírást. A célállapotban a robot a tiszta világ bal oldali négyzetén van. Ez a feladat elég triviális lenne, ha nem a „dupla-Murphy” porszívóval lenne dolgunk, amely néha piszkot hagy maga után, amikor egy tiszta célnégyzetre lép, és néha bepiszkolja a tiszta négyzetet, ha a Szívás cselekvés végrehajtódik.
27	0.4	1	A tökéletes racionalitás a filozófia és a közgazdaságtan klasszikus racionalitás-fogalma. Arisztotelész etikájából fejlődött ki, míg végül a döntés-elméletben [1] nyert formális megfogalmazást. Immár a racionalitás fogalma nem csak az etika, hanem a mesterséges intelligencia és a közgazdaságtan meghatározó tényezője is.
19	0.136364	0	H[2]: ∀x VárjunkE(x) ⇔ Alternatíva(x) ∧ Vendégek(x, Néhány) * A harmadik példa – X[3] – pozitív. H[2] alapján negatív lenne, így hamis negatív. Tehát általánosítanunk kell H[2]-t. Ezt elérhetjük, ha töröljük Alternatíva feltételt, amely a következő hipotézisre vezet:
14	0.086957	1	Az ábra intuitíve jelzi, hogy egyedül a hipotézis változó befolyásolja direkt módon a megfigyelhető szimptómákat, azok között direkt interakció nem lehetséges, továbbá hogy a nyílak által jelzett függéseket kell valószínűségek megadásával definiálni. Mint látni fogjuk ennek az értelmezésnek a formalizálása és általánosítása eredményezi majd a valószínűségi hálózatok elméletet.
18	0.947368	0	Tegyük fel, hogy egy attribútum a példák E halmazát E[i] részhalmazokra bontja, és mindegyik részhalmazban p[i] pozitív és n[i] negatív példa van. Mutassa meg, hogy ha a p[i]/(p[i] + n[i]) arány nem egyforma minden i-re, akkor az attribútum információnyeresége biztosan pozitív!
7	0.92	1	Az ágens kezdetben nagyon keveset tud a környezetről (mindössze annyit, hogy melyik mezőn áll és hogy valamely szomszédos mezőben érheti-e baj) és ahhoz, hogy új információkat szerezzen, el kell indulnia és felderítenie a területet. Ezt a felderítést addig ésszerű végeznie, amíg egyértelműen ki nem derül, hogy a további felderítés nem lehetséges (minden biztonságos mezőt felderített), vagy megtalálta a kincset. Azonban ha az ágensnek fel kell derítenie, akkor a viselkedése már nem lehet optimális!
6	0.1	1	A számítás részleteitől most tekintsünk el. Az 1-lapos póker Nash-egyensúlya, ahogy az a fentebbi fólián is látszik, ((1/3, 2/3, 0, 0), (2/3, 1/3)), azaz eszerint az 1-es játékos 1/3 valószínűséggel játssza az 11 stratégiáját, és 2/3 valószínűséggel az 12 stratégiáját, míg a többi 0 valószínűséggel választja. A 2-es játékos 2/3 valószínűséggel játssza az 1-es stratégiáját, és 1/3 valószínűséggel a 2-est. E kevert stratégia-kombináció eredményeképp a játékosok haszna a következő kifizetési vektor szerint alakul: (1/3, -1/3). Ebből pedig látszik, hogy az 1-es játékos átlagosan/várhatóan előnyben van a 2-es játékossal szemben. Amennyiben tehát például egymás után nagyon sokszor játszanák ezt a játékot, úgy az 1-es játékos 1/3-al növelné pénzét, míg a 2-es játékos pénze 1/3-dal csökkenne. Nagyobb töke/tét esetén ez akár már számottevő is lehet.
13	0.636364	0	Azt a tulajdonságot, ami alapján a   egyenletet felírtuk függetlenségnek (más szóval marginális függetlenségnek vagy abszolút függetlenségnek) (independence, marginal independence, absolute independence) nevezzük. Esetünkben az időjárás független bárkinek a fogászati problémáitól. Az a és b állítások függetlensége felírható:
27	0.4	0	Világos, hogy sürgető szükség van az általánosabb döntéshozó helyzetekben is működő módszerekre. Az utóbbi időben két kecsegtető módszertan is napvilágot látott. Az első az akármikor algoritmusok (anytime algorithms) alkalmazása (Dean és Boddy, 1988; Horvitz, 1987). Egy akármikor algoritmusnál az algoritmus kimenetének minősége az idő múlásával fokozatosan javul, bármikor szakítjuk is meg tehát az algoritmust, ésszerű döntéshez jutunk. Az ilyen algoritmus vezérlését egy metadöntési eljárás végzi, amely meghatározza, hogy érdemes-e a számításokat tovább folytatni. Az akármikor algoritmusra egy egyszerű példa a kétszemélyes játékoknál ismertetett iteratív mélyítő keresés. Azonban bonyolultabb rendszerek – amelyek számos ilyen, együttesen működő algoritmusból állnak – is konstruálhatók (Zilberstein és Russell, 1996). A másik módszer a döntéselméleti metakövetkeztetés (decision-theoretic metareasoning) (Horvitz, 1989; Russell és Wefald, 1991; Horvitz és Breese, 1996). Ebben a megközelítésben az információérték elméletét ( fejezet) a számítások megválasztására használjuk. A számítás értéke mind a költségétől (a késleltetett cselekvés miatt), mind a hasznosságától (a döntés javított minősége miatt) függ. A metakövetkeztetési sémákkal jobb keresési algoritmusokat lehet előállítani, automatikusan garantálva az akármikor tulajdonságot. A metakövetkeztetés természetesen költséges, de a kompilálás arra is felhasználható, hogy a túlmunka költsége eltörpüljön a számítás költsége mellett, lévén hogy a számítás is felügyelt.
20	0.928571	0	A számítógépes tanulás elmélete területén tevékenykedő kutatók foglalkoztak a neurális háló tanulás komplexitásával. Az első számítási eredményeket Judd kapta (Judd, 1990), aki megmutatta, hogy egy példahalmazzal konzisztens súlyhalmaz megtalálásának általános problémája – még nagyon erősen korlátozó feltételek esetén is – NP-teljes. A mintakomplexitásra vonatkozó eredmények közül néhány Baum és Haussler munkájához fűződik, akik megmutatták, hogy W súly esetén a hatékony tanításhoz szükséges mintaszám W log W arányában nő (Baum és Haussler, 1989).^[211] Azóta Anthony és Bartlett egy sokkal fejlettebb elméletet fejlesztettek ki (Anthony és Bartlett, 1999), amely magában foglalja azt a fontos eredményt, hogy a háló reprezentációs képessége a súlyok nagyságrendjétől és számától egyaránt függ.
21	0.1875	1	Ez a feladat megegyezik az eredeti MAB problémával, annyi eltéréssel, hogy a folyamatok közti váltás büntetéssel jár (ez lehet váltási utáni késleltetés, vagy egyéb költség). Az eddig alkalmazott stratégia nem vezet optimális megoldáshoz sőt, egyáltalán nem ismert optimális előrefele következtető stratégia erre a feladatra.
9	0.965517	1	Az Oncoline rendelkezik egy felhasználóbarát navigációs rendszerrel, és keresővel. Az ugyanazon a szabványon alapuló fejezetek struktúrája biztosítja az egészségügyi szakemberek számára, hogy minden különösebb nehézség nélkül megtalálják azokat a témákat, amelyek iránt érdeklődnek. Az oncoline-hoz közvetlen kötődnek online cikkek, vagy ha ezek a cikkek épp nem elérhetőek, akkor találhatók hozzájuk összefoglalók. A cikkek a Medline-ból, az adatbankban lévő absztraktok bizonyos egészségügyi, és orvosi folyóiratokból valók.  ábra - Oncoline menü felépítése Oncoline menü felépítése
2	0.894737	1	Teljesítménymérték: Lőtt gólok száma, gólhelyzetek száma illetve azok minősége (mekkora esélyük volt, hogy sikeresek legyenek), adott gól-passzok száma, adott passzok száma, megszerzett labdák száma, kicselezett ellenfelek száma, kivédett gólhelyzetek száma, szabálytalanságok száma, fáradtság (üzemanyag, ha úgy jobban tetszik).
6	0.1	1	A Nim egy kétjátékos matematikai játék, mely során a játékosok elemeket vesznek el diszjunkt elemhalmazokból. Minden lépés során egy játékos pontosan egy halmazból elvesz legalább egy elemet és legfeljebb az adott halmaz összes elemét.
16	0.695652	0	Tételezzük most azt fel, hogy nyári időben választunk a két földút közül, amikor a lavinák igen valószínűtlenek. Ebben az esetben a műholdjelentések azt mutathatják, hogy az egyik útvonal látványosabb, mint a másik, a virágzó hegyi rétek miatt, vagy talán csak nedvesebb az arra kanyargó patakok miatt. Ekkor igen valószínű, hogy ha megkapjuk ezt az információt, megváltoztatjuk a tervünket. Azonban ebben az esetben, a különbség a két út között még mindig igen kicsi, így nem foglalkozunk a jelentések megszerzésével. Ezt a helyzetet a  (c) ábra mutatja. Fontos Összegzésül azt mondhatjuk, hogy az információnak annyiban van értéke, amennyire valószínű, hogy a terv megváltozását okozza, és amennyire az új terv jelentősen jobb lesz, mint a régi.
9	0.689655	1	Írjuk át az alábbi mondatokat predikátum kalkulus állításaira, majd klóz formára, és bizonyítsuk be rezolúciós bizonyítással a kérdéses állítást! Figyelem: ha a predikátumnevek adott megválasztása mellett a bizonyítással gond van, kíséreljék meg a feladatot más, de jellegre helyes predikátumok felhasználásával a logikai szinten átfogalmazni!
20	0.857143	0	Egy turbózott neurális háló (boosted neural network) három LeNet-architektúrát kombinált: a másodikat egy olyan mintakeverékkel tanították, amelyen az első 50%-os hibát produkált, a harmadikat pedig olyan mintákkal, amelyekre az első kettő különböző eredményt adott. A tesztelés során a három háló a tíz lehetséges számjegy mindegyikére egy-egy súllyal szavazott, ezeket összeadva határozták meg a győztest. A teszthibaarány 0,7% volt.
16	0.913043	0	Az információérték-elméletet Ron Howard elemezte először (Howard, 1966). Ez a cikke a következő megjegyzéssel ér véget: „Ha az információérték-elmélet és a hozzá kapcsolódó döntéselméleti struktúrák a jövőben nem képezik igen nagy részét a mérnökök képzésének, akkor a mérnöki szakma azt fogja látni, hogy hagyományos szerepét, a tudományos és közgazdasági erőforrásoknak az emberiség előnyére történő kezelését, egy másik szakma elorozta.” A hivatkozott forradalom a vezetési módszerekben a mai napig nem következett be, bár ez változhat amint az információérték-elmélet felhasználása a bayesi szakértő rendszerekben elterjedtebbé válik.
2	0.631579	0	Ezen belső állapot frissítése az idő előrehaladtával kétféle tudás beépítését igényli az ágensprogramba. Először is szükségünk van olyan információra, hogy a világ hogyan alakul az ágenstől függetlenül – például egy előző autó általában közelebb lesz most, mint egy pillanattal azelőtt. Másodszor, szükségünk van valamilyen információra arról, hogy az ágens saját cselekvései hogyan változtatják meg a világot – például amikor az ágens a kormányt az óramutató járásának megfelelően tekeri, az autó jobbra fordul, vagy öt percig északnak tartó vezetés után egy autópályán általában körülbelül öt mérfölddel lesz északabbra, mint ahol öt perce volt. Ezt, a „világ működésének mikéntjéről” szóló tudást – akár egyszerű logikai áramkörökkel, akár teljes tudományos elméletekkel valósítjuk meg – a világ modelljének (model) hívjuk. Egy ilyen modellt használó ágenst pedig modellalapú ágensnek (model-based agent).
12	0.666667	0	Ha mindkét ágens ugyanazzal a tudásbázissal rendelkezne, és ez lenne az egyetlen megoldás, akkor minden rendben lenne; minden ágens meghatározná a megoldást, és együttesen végrehajtanák. Az ágensek számára sajnálatos (és hamarosan látni fogjuk, hogy ez miért sajnálatos), hogy van egy másik terv is, ami az elsőhöz hasonlóan kielégíti a célt:
17	0.133333	0	ahol a γ leszámítolási tényező (discount factor) egy 0 és 1 közötti szám. A leszámítolási tényező fejezi ki egy ágens preferenciáját a jelenlegi és a jövőbeli jutalmak között. Amikor γ közel 0, akkor a távoli jövőbeli jutalmakat jelentéktelennek tekinti. Amikor γ értéke 1, akkor a leszámítolt jutalmak pontosan megegyeznek az additív jutalmakkal, így az additív jutalmak a leszámítolt jutalmak speciális esetei. A leszámítolás jó modellnek tűnik mind az állati, mind az emberi időbeli preferenciákra. Egy γ leszámítolási tényező ekvivalens egy (1/ γ) – 1 kamatlábbal.
10	0.121212	0	Egy hasznos megközelítés szétválasztani mindazt, ami a kategória minden egyedére igaz, attól, ami csupán a kategória tipikus egyedeire igaz. A Paradicsom kategória mellett szükség van még a Tipikus(Paradicsom) kategóriára. A Tipikus függvény egy kategóriát egy olyan alosztályra képez le, amely csak tipikus egyedekből áll:
3	0.916667	1	Figyeljük meg a különbséget az állapottér-gráf bonyolultsága és az állapotátmenet-függvény leírásának bonyolultsága között! Míg a gráf (megfelelően felrajzolva) egyszerűnek látszik (hisz abban már csak a valóban legális cselekvéseknek megfelelő élek szerepelnek), addig az állapotátmenetek kellően precíz megfogalmazása igen körülményes. Mint sok más esetben is, ha lerajzoljuk a feladatot, az nagyon sokat segíthet a megoldásában, de ha fejben próbálkozunk, nagyon gyorsan elveszítjük a fonalat!
6	0.1	1	R. P. Sprague 1935-ben és P. M. Grundy 1939-ben egymástól függetlenül publikálták kombinatorikus játékelméleti felfedezésüket, melyet azóta Sprague–Grundy-tételnek hívnak. Mielőtt a tételt kimondjuk, definiáljuk az impartial (nem részrehajló, vagy egyenlő) játék fogalmát:
7	0.92	0	Az áramköralapú ágensek gondolata visszavezethető McCulloch és Pitts nagyhatású cikkére (McCulloch és Pitts, 1943), amely a neurális hálózatok témakör kezdetét jelentette. Népszerű vélekedésekkel szemben a cikk valójában logikai áramköralapú ágensterveknek az agyban történő megvalósításával foglalkozott. Azonban az áramköralapú ágens kis figyelmet kapott a mesterséges intelligenciában. A leginkább megjegyzendő kivétel Stan Rosenschein munkája (Rosenschein, 1985; Kaelbling és Rosenschein, 1990), aki módszert dolgozott ki áramköralapú ágensek lefordítására a feladat környezetének deklaratív leírására. A regiszterekben tárolt állítások frissítésének módszere közeli kapcsolatban van a Reiter által az elsőrendű logikára kifejlesztett követő állapot axiómához (successor-state axiom) (Reiter, 1991). Rod Brooks munkája (1986, 1989) demonstrálta az áramköralapú megvalósítások hatékonyságát robotok vezérlésére – a  fejezetben foglalkozunk ezzel a témával. Brooks amellett érvelt (Brooks, 1991), hogy az áramköralapú ágensen kívül más nem is szükséges a mesterséges intelligenciához – mivel más módszerek nehézkesek, drágák és szükségtelenek. A mi nézetünk szerint, egyik módszer sem elégséges önmagában.
6	0.1	1	Egy másik alapvetően fontos állítás, hogy a programnak tudnia kell, hogy melyik lépés a legjobb számára, azaz valami módon rangsorolnia kell a lépéseket [2], [3]. Amíg a kereső algoritmusok viszonylag általánosok, függetlenek a sakk szabályaitól, addig a lépések értékeléséhez szükséges algoritmusok nagyon szorosan a szabályokhoz kapcsolódnak. Ebben a fejezetben ezeket szeretném sorra bemutatni.
17	0.933333	0	Alkalmanként az MDF-ek megadása tartalmaz egy R(s, a) jutalomfüggvényt, ami a véghezvitt cselekvéstől függ, vagy egy R(s, a, s′) jutalomfüggvényt, ami még a kimeneteli állapottól is függ. a. Írja fel a Bellman-egyenleteket ezt a formalizmust használva. b. Mutassa meg, hogyan lehet egy R(s, a, s′) jutalomfüggvényt tartalmazó MDF-et átalakítani egy másik, R(s, a) jutalomfüggvényt tartalmazó MDF-be úgy, hogy az optimális eljárásmódok az új MDF-ben pontosan megfeleljenek az eredeti MDF-beli optimális eljárásmódoknak. c. Most ugyanígy konvertálja az R(s, a)-t tartalmazó MDF-eket R(s)-t tartalmazó MDF-ekbe.
14	0.869565	1	Az indexmeghatározás után, ha egy sorba kerül az utasításokkal, akkor vesszőt kell írni, egyébként nem kötelező. Az utasítások végére ha egy sorba írjuk őket a for kulcsszóval, akkor vesszőt, különben pedig pontosvesszőt kell írni.
6	0.1	1	A 70-es években a személyi számítógépek komoly memória gondokkal küszködtek, tehát minél tömörebb volt egy reprezentáció, annál könnyebben és gyorsabban volt megvalósítható. Magától értetődőnek tűnt egy 64 byte-os tömbbel dolgozni, amelyben minden egyes byte egy-egy mezőnek feleltethető meg, és a hozzájuk tartozó egész szám reprezentálja a rajta álló figurát. Érdekességként megemlíteném, hogy ezen kívül minden egyes struktúrához szükség volt pár tartalék byte-ra, hogy az en passant lépést is kezelni lehessen, de ettől most tekintsünk el.
9	0.965517	0	 Megjegyzés Ebben a feladatban megvizsgáljuk egy sorbarendezés megvalósítását a Prologban. a. Írjon Prolog-klózokat, amelyek definiálják a rendezés(L) predikátumot, amely akkor és csakis akkor igaz, ha az L lista emelkedő sorrendben van rendezve. b. Írjon egy Prolog-definíciót erre a predikátumra: perm(L,M), amely akkor és csakis akkor igaz, ha az L a permutációja az M-nek. c. Definiálja a rendez(L, M)-et (az M egy válogatott verziója az L-nek) a perm és a rendezés használatával. d. Futtassa a rendez predikátumot minél hosszabb listákon, amíg el nem veszíti a türelmét. Mekkora a programjának az időkomplexitása? e. Írjon egy gyorsabb rendező algoritmust Prologban, mint amilyen például a beszúrásos válogatás vagy a gyorsválogatás (quicksort).
5	0.181818	1	Ezzel az {SA=RED, NSW=GREEN, NT=GREEN, WA=BLUE, Q=BLUE, V=GREEN} behelyettesítéshez jutottunk, ami még továbbra is ellentmond a korlátoknak (pontosabban csak a 9-es korlátnak). Az algoritmus tehát kénytelen tovább lépni, és V-nek a BLUE értéket adni (V=BLUE).
4	0.583333	0	A genetikus algoritmus, GA (genetic algorithm) a sztochasztikus nyaláb keresés egy olyan variánsa, ahol a követő állapotokat nem egy állapot módosításával, hanem két szülő állapot összekombinálásával állítjuk elő. A természetes kiválasztódás analógiája itt is ugyanaz, mint a sztochasztikus nyaláb keresés esetén, azzal a különbséggel, hogy most az utódlétrehozásnak a szexuális és nem az aszexuális mechanizmusáról van szó.
19	0.363636	0	A memoizálás (memoization) módszerét a számítógép-tudományban régóta alkalmazzák, miszerint a számítások meggyorsíthatók az eredmények eltárolása révén. A memofüggvény alapgondolata, hogy bemenet/kimenet párokat gyűjtünk ki egy külön adatbázisba. Meghíváskor a függvény először megvizsgálja az adatbázist, hátha a probléma teljes újbóli megoldását így meg tudja kerülni. A magyarázatalapú tanulás ezt az ötletet továbbfejleszti úgy, hogy egy általános szabályt fogalmaz meg, amely az esetek egész osztályát képes lefedni. A differenciálás esetében a memoizálás emlékezne ugyan arra, hogy az X^2-nek X szerinti deriváltja 2X, a Z^2 Z szerinti deriváltjának kiszámítását azonban teljes egészében az ágensre hagyná. Célszerű lenne, ha egy olyan általános szabályt^[190] tudnánk megfogalmazni, amely minden lehetséges u aritmetikai ismeretlen esetén megadná, hogy az u^2-nek u szerint deriváltja 2u. A logikában ezt az alábbi szabállyal fejezhetjük ki:
10	0.060606	1	A kereső a netes képobjektum alternatív szövegében illetve a honlap kontextusában lévő szövegben keres. Egy olyan oldalon, ahol a honlap tervezői netes tartalmaikat metaadattal is ellátták, a szemantikus keresés, olyan képeket is megtalálhat, amelyek csak a kép emberi értelmezése után tűnnek relevánsnak illetve egy találatból kikövetkeztetheti, mely találatok lehetnek még fontosak a keresés céljából. Kidobja találatként a közelben lévő napraforgó magot árusító boltokat, mert rájött, hogy lehet, nekünk erre volt szükségünk. Az ilyenfajta keresés hatékonysága érdekében, meg kell követelnünk a formalitást, egy egységes leíró nyelv meglétét.
18	0.684211	0	Ez ugyanaz a mennyiség, mint amelyet az előzőkben bemutatott tanulási görbékkel mértünk a gyakorlatban.  ábra - A hipotézistér sematikus ábrázolása a keresett f függvény körül felvett „ ε -gömb” ábrázolásával A hipotézistér sematikus ábrázolása a keresett f függvény körül felvett „ ε -gömb” ábrázolásával
10	0.454545	0	Ne tévessze össze a GeorgeWashington fizikai objektumot az atomok egy gyűjteményével. George Washington logikailag nem azonos semmilyen konkrét atomgyűjteménnyel, mert az az atomhalmaz, amiből áll, időben lényegesen változik. Neki rövid élettartama van, minden atomnak saját hosszú élettartama van. Bizonyos periódusban metszik egymást, amikor is az atom temporális szelete a RészEseménye George-nak, majd külön útjukat járják.  ábra - Az Elnök(USA) objektum sémaszerű ábrázolása létezésének első 15 évében Az Elnök(USA) objektum sémaszerű ábrázolása létezésének első 15 évében
10	0.939394	0	A nemmonoton következtetés mind a három fő formalizmusát – a körülírást (McCarthy, 1980), az alapértelmezett logikát (Reiter, 1980) és a modális nemmonoton logikát (McDermott és Doyle, 1980) – az AI Journal egyetlen különszámában publikálták. A válaszhalmaz-programozást a negálás mint kudarc kiterjesztésének vagy a körülírás finomításának lehet nézni. A mögötte lévő stabil modell szemantikát Gelfond és Lifschitz vezették be (Gelfond és Lifschitz, 1988). A vezető válaszhalmaz-programozási rendszerek a DVL (Eiter és társai, 1998) és Smodels (Niemelä és társai, 2000). A diszkmeghajtó példa a Smodels felhasználói kézikönyvéből származik (Syrjänen, 2000). A válaszhalmazprogramozás használatát a tervkészítés számára Lifschitz tárgyalja (Lifschitz, 2001). A nemmonoton logika különböző megközelítéseiről jó áttekintést ad Brewka (Brewka és társai, 1997). A logikai programozás negálás mint kudarc megközelítésével és a Clark-lezárással Clark foglalkozik (Clark, 1978). Van Emden és Kowalski azt mutatták ki, hogy minden negálás nélküli Prolog programnak létezik egyértelmű minimálmodellje. Az utóbbi években tanúi lehetünk, ahogy növekszik az érdeklődés a nemmonoton logika nagyméretű tudásreprezentációs rendszerekben való alkalmazása iránt. Egy nemmonoton öröklődési rendszer első sikeres kereskedelmi alkalmazása talán a BenInq rendszereké volt a biztosítási feltételek megtudakolásához (Morgenstern, 1998). A Logic Programming and Nonmonoton Reasoning (LPNMR) konferenciák kiadványai sok különböző, logikai programozáson alapuló nemmonoton következtető rendszerről számolnak be.
24	0.833333	1	A Hough transzformáció kibővíthető tetszőleges, paraméterekkel leírható alakzatokra – például ellipszisre –, akár a háromdimenziós térben is, de a tapasztalatok szerint a 3-4 paraméternél többel leírható alakzatokra már nem hatékony a paramétertér robbanása miatt. További problémája, hogy érzékeny a zajos bemeneti képre, és inkább csak kisebb felbontások mellett alkalmazható.
5	0.181818	1	Tehát annak érdekében, hogy ez így működjön, a tankönyv 5.3-as ábráján látható visszalépéses keresést némileg ki kell egészítenünk: bele kell szőnünk a KÖVETKEZTETÉS-t (ami lehet előretekintés, vagy éppenséggel a következő szakaszokban bemutatásra kerülő AC3 algoritmus). A KÖVETKEZTETÉS-t az 5.3-as ábrán látható kódon belül, a FOR-ciklus elején, közvetlenül a változó-értékadást (az értékadás behelyettesítéshez történő hozzáadását) követően kell elhelyeznünk. A KÖVETKEZTETÉS eljárásnak 3 bemenete lesz: (1) az aktuális KKP probléma, (2) az aktuálisan vizsgált változó, melynek értékein a FOR-ciklus halad végig, és (3) az aktuális behelyettesítés, amiből kihámozható az is, hogy a FOR-ciklus aktuálisan milyen értéket adott a vizsgált változónak.
1	0.310345	1	Az fMRI vizsgálat során a vér oxigenizációját mérjük non-invazív módon a teljes agytérfogatban, ebből következtetünk a lezajló idegi aktivitásokra. A módszer térbeli felbontása mm-s, időbeli felbontása másodperces nagyságú. A BOLD (blood oxigenation level dependent) funcionális MR vizsgálat alapja az oxyhemoglobin és deoxyhemoglobin mágneses tulajdonságainak különbsége. Aktívabb szövetben az oxy-/deoxyhemoglobin arány megváltozik a nyugalmi helyzethez képest (1.sz ábra)
14	0.73913	1	Az ütközés feloldására a hitelességi értéket használjuk. Tehát a szabály létrehozásakor a hitelességi értéket is ki kell számolni, ami a rendelkezésre álló tagsági értékek (bemeneti változók és kimeneti változó) szorzataként áll elő. Ebből következik, hogy a szabálybázisban nem csak az aktuális szabályt kell tárolni, hanem a hozzá tartozó hitelességi értéket is. Értelemszerűen azt a szabályt kell megtartani, aminek nagyobb a hitelességi értéke.
2	0.894737	1	Első megközelítésben tervezzünk olyan robotot, amely teljesen úgy viselkedik és ugyanazokkal a megszorításokkal rendelkezik, mint egy normál futballjátékos: lábakon jár és szalad, élő szóban kommunikál, csak egy irányba lát egyszerre, nem rendelkezik speciális érzékelőkkel, stb.
25	0.074074	1	Jelenleg az egészségügyi ellátórendszer számos problémával néz szembe. A fenntartható egészségügyi ellátás, a túlterheltség csökkentése a hagyományos technológiák mellett többé nem biztosítható. Az ellátási színvonal megtartása, sőt növelése a stagnáló források mellett csak az informatikai eszközök célszerű alkalmazásával oldható meg.
24	0.208333	1	Vonali érzékelőt tartalmazó eszközök, melyek közé az optikai lapolvasókat sorolhatjuk. Ezeknél a készülékeknél egy-egy sor minden egyes pontjához külön érzékelő tartozik. Az egyes érzékelők a jelenlegi technikai szinten százalékos pontossággal azonos érzékenységűek, tökéletesebb azonosság a működtető programba épített kiegyenlítéssel oldható meg. A vonali érzékelőt kétdimenziós képalkotáshoz kiegészítő mechanizmussal kell ellátni, mely a vonalra merőlegesen való mozgatást biztosítja. Pl.: telefax.
13	0.409091	0	Bizonyos esetekben könnyebb a konjunkciók feltétel nélküli (a priori) valószínűségeit használni, azonban mi az esetek többségében feltételes valószínűségeket fogunk alkalmazni valószínűségi következtetéseink eszközeként.
3	0.416667	0	A szélességi keresés (breadth-first search) egy egyszerű keresési stratégia, ahol először a gyökércsomópontot fejtjük ki, majd a következő lépésben az összes a gyökércsomópontból generált csomópontot, majd azok követőit stb. Általánosságban a keresési stratégia minden adott mélységű csomópontot hamarabb fejt ki, mielőtt bármelyik, egy szinttel lejjebbi csomópontot kifejtené.
17	0.066667	0	A kockázat és a jutalom egyensúlyának megváltozása függ az R(s) értékétől a nem végső állapotoknál. A  (b) ábrán az R(s) értékének négy különböző intervallumához tartozó optimális eljárásmódot találhatunk. Ha R(s) ≤ –1,6284, akkor az élet anynyira elviselhetetlen, hogy az ágens egyenesen a legközelebbi kijárathoz tart, annak ellenére, hogy ez –1 értékű. Amikor –0,4278 ≤ R(s) ≤ –0,0850, az élet elég kellemetlen; az ágens a +1 állapothoz vezető utat választja, vállalva annak kockázatát, hogy esetleg a –1 állapotba kerül. Nevezetesen az ágens a (3, 1)-ben választja az átvágást. Amikor az élet csak kevéssé bánatos (–0,0221 < R(s) < 0), az optimális eljárásmód nem vállal semmilyen kockázatot. A (4, 1) és (3, 2) állapotokban az ágens teljesen elkerüli a –1 állapotot, így nem tud véletlenül beleesni, még ha ez azt is jelenti, hogy elég sokszor beveri a fejét a falba. Végül, ha R(s) > 0, akkor az élet kifejezetten élvezhető, és az ágens mindkét kijáratot elkerüli. Mindaddig, amíg a (4, 1), (3, 2) és (3, 3) állapotokban a cselekvések azok, amelyek az ábrán láthatók, minden eljárásmód optimális, és az ágens végtelen teljes jutalmat ér el, mivel soha nem lép be a végállapotba. Meglepő módon megmutatható, hogy hat más optimális eljárásmód is létezik az R(s) különböző intervallumaira. A  feladat kéri majd ezek megkeresését.  ábra - (a) Egy optimális eljárásmód a sztochasztikus környezetre R(s) = –0,04 esetén nem végállapotoknál. (b) Optimális eljárásmódok R(s) négy különböző értéktartománya esetén. (a) Egy optimális eljárásmód a sztochasztikus környezetre R(s) = –0,04 esetén nem végállapotoknál. (b) Optimális eljárásmódok R(s) négy különböző értéktartománya esetén.
13	0.909091	1	* A legtöbb módszer speciális hardvert igényel, amelyek ára még elég magas. * Fogyatékos emberek esetén a módszer van hogy nem alkalmazható. * A fizikai kontaktust igénylő megoldások problémásak lehetnek higiéniai szempontból. * A vizsgált jellemzők változhatnak. * Érzékeny pontja ezeknek a rendszereknek a hibatűrés mértéke, A leolvasások eredménye soha nem egyezik meg teljesen. Ez ronthatja az azonosítás megbízhatóságát. * Visszajátszásos megtévesztés lehetséges például hangalapú azonosítás során. * A számítógép nem biztos, hogy le tudja ellenőrizni a leolvasó hardver hitelességét. * Jogi, adatvédelmi kérdéseket vethet fel, ha a leolvasás az adott személy beleegyezése nélkül is megtörténhet (például arc-azonosítás).
24	0.833333	0	A látás egyik legfontosabb alkalmazása az, hogy információt szolgáltat az objektumok manipulálásához – hogy felszedhessük, megfoghassuk, elforgathassuk stb. azokat –, valamint hogy akadályok kikerülésével navigálhassunk. Az a képesség, hogy a látást ezen célokra használják, a legprimitívebb állati látórendszerekben is jelen van. Sok esetben a látórendszer minimális abban az értelemben, hogy a rendelkezésre álló látómezőből csak annyi információt nyer ki, ami az állat viselkedésének a tájékoztatására szükséges. Igen valószínű, hogy a modern látórendszerek a korai, primitív organizmusokból fejlődtek ki, amelyek egy fényérzékeny foltot használtak az egyik végükön, és így tudták magukat a fény felé vagy azzal ellentétes irányba orientálni. A  alfejezetben láttuk, hogy a legyek egy nagyon egyszerű optikai folyamra alapozó látást használnak, hogy le tudjanak szállni a falon. A What the Frog’s Eye Tells the Frog’s Brain c. klasszikus tanulmány (Lettvin és társai, 1959) megfigyeli, hogy egy béka „éhen fog halni, ha olyan étellel van körülvéve, amely nem mozog. Csak a méret és a mozgás alapján állapítja meg, hogy mi élelem.”  ábra - Az út képe egy autóban lévő kamerával lefényképezve. A vízszintes fehér csíkok jelzik azokat a keresési ablakokat, amiken belül a vezérlő az útvonali jeleket keresi. A gyenge képminőség nem szokatlan az alacsony felbontású fekete-fehér videók esetében. Az út képe egy autóban lévő kamerával lefényképezve. A vízszintes fehér csíkok jelzik azokat a keresési ablakokat, amiken belül a vezérlő az útvonali jeleket keresi. A gyenge képminőség nem szokatlan az alacsony felbontású fekete-fehér videók esetében.
13	0.954545	0	X, Y és Z legyenek logikai véletlen változók. A P(X, Y, Z) együttes eloszlás nyolc lehetséges esetét jelöljük a, …, h-val. Fejezze ki az „X és Y adott Z mellett feltételesen függetlenek” állítást az a, …, h-t összekapcsoló egyenletek segítségével. Hány lesz ezek közül redundanciamentes?
5	0.363636	0	Az élkonzisztencia-ellenőrzés alkalmazható előfeldolgozó lépésként a keresés megkezdése előtt, vagy a keresési folyamat minden egyes hozzárendelését követő terjesztési lépésként (az előrenéző ellenőrzéshez hasonlóan). (Az utóbbi algoritmust Élkonzisztencia fenntartásának is, angol rövidítéssel MAC-nak nevezik.) Mindkét esetben addig kell ismételve alkalmazni a folyamatot, amíg nem marad inkonzisztencia. Erre azért van szükség, mert amikor egy élinkonzisztenciát eltávolítandó egy érték kikerül egy változó tartományából, az ehhez a változóhoz mutató éleknél új inkonzisztencia jöhet létre. Az AC-3, az élkonzisztencia teljes algoritmusa egy sort használ annak nyilvántartására, hogy mely élek inkonzisztenciáját kell még ellenőriznie (lásd  ábra). Minden egyes (X[i], X[j]) élet sorban egyenként levesszük a tennivalók listájáról és ellenőrizzük; ha pedig X[i] tartományának bármely változóját törölni kell, akkor minden X[i] -be mutató (X[k], X[i]) élet visszateszünk ellenőrzésre a sorba. Az élkonzisztencia-ellenőrzés komplexitása az alábbiak szerint vizsgálható: egy bináris kényszerkielégítési problémában legfeljebb O(n^2) él van; minden egyes (X[k], X[i]) él csak d alkalommal kerülhet napirendre, mert X[i]-ben összesen d törölhető érték van; egy él konzisztenciájának ellenőrzése elvégezhető O(d^2) időben; tehát a legrosszabb esetben vett teljes idő O(n^2d^3). Ez ugyan lényegesen költségesebb, mint az előretekintő ellenőrzés, de az extra költség általában kifizetődik.^[48]  ábra - Az AC-3 élkonzisztencia algoritmus. Az AC-3 alkalmazását követően vagy mindegyik él élkonzisztens, vagy néhány változó tartománya üres, azaz a kényszerkielégítési probléma nem hozható élkonzisztens alakra (tehát nem oldható meg). Az „AC-3” nevet az algoritmus kitalálója (Mackworth, 1977) vezette be, mert ezt az algoritmust mutatta be cikkében harmadikként. Az AC-3 élkonzisztencia algoritmus. Az AC-3 alkalmazását követően vagy mindegyik él élkonzisztens, vagy néhány változó tartománya üres, azaz a kényszerkielégítési probléma nem hozható élkonzisztens alakra (tehát nem oldható meg). Az „AC-3” nevet az algoritmus kitalálója (Mackworth, 1977) vezette be, mert ezt az algoritmust mutatta be cikkében harmadikként.
16	0.043478	0	Egy S állapotnak a döntést meghozó ágens szempontja szerinti hasznosságára az U(S) jelölést fogjuk használni. Mostani vizsgálódásunknál az állapotokat a világ teljes pillanatfelvételeinek fogjuk tekinteni, hasonlóan a  fejezetben szereplő szituációkhoz (situations). Bár ez egyszerűsíti a kezdeti fejtegetésünket, a hasznosság definiálása minden egyes állapotra külön-külön elég nehézkessé válhat. A  alfejezetben látni fogjuk, hogy az állapotok hogyan bonthatók fel bizonyos körülmények között a hasznosság hozzárendelése érdekében.
23	0.944444	0	Amennyiben megnéz egy angol–francia szótárt, a „hear” ige fordítása „entendre”.^[269] Azonban ha az IBM Model 3-at a kanadai Hansard alapján tanítjuk, akkor a „hear” legvalószínűbb fordítása „Bravo”. Magyarázza meg, hogy mi ennek az oka, és becsülje meg, hogy mi lehet a „hear” termékenységi eloszlása. (Segítség: ha Hansard-szövegeket szeretne megnézni, írja be egy webkeresőbe a [Hansard hear] lekérdezést.)
24	0.833333	1	A sarokpontok speciális kulcspontok, azaz különböző objektumokat jól jellemző struktúrák. Jó kiindulásként szolgálnak alakzatok felismeréséhez. Lehetnek az objektumok sarkai, a fényesség szélsőértékei, vonalvégek, görbék legnagyobb görbületei, stb.. A sarkokat leggyakrabban leegyszerűsítik két él találkozására, hogy megkönnyítsék a felismerést. A sarokpont keresők számára fontos, hogy minél több invariáns tulajdonságuk legyen. A lényeg, hogy hasonló, de nem azonos képeken megtalálják az egymásnak megfelelő sarkokat, tehát megismételhetők legyenek.
16	0.956522	1	A bármilyen technikai szinten megoldott jegyzőkönyvkészítő rendszernek azonban egységes szerkezeti elvet kell követnie. Ez pedig az érzéstelenítés jegyzőkönyve, amely az ambuláns laphoz hasonlóan első részében a beteg adatait tartalmazza akár annak közvetlen átvételével a közös adatbázisból. Ezt követően a megtörtént anesztézia és műtét adatait, az érzéstelenítés menetét, a mért paraméterek trendjeit, az események és megjegyzések rovatát és a közvetlen posztoperatív állapot rögzítését kell összegeznie. (2.sz ábra)
25	0.074074	1	A kézügyesség és a durva mozdulatok elkerülése alapvető követelmények az idegsebészetben. A sebészrobotok bevonása tehát érdekes dilemma és nagyszerű lehetőség is egyben. A robotok előnyei az emberel szemben, hogy nagyon precízek, képesek apró, remegésmentes mozgásokra, nagy geometriai pontosságra, stabilak és fáradhatatlanok a gyakran ismétlődő mozgássorozatokra nézve is, valamint nagyon megbízhatóak. A fő előnyük abból származik, hogy képesek nagy mennyiségű, részletes kvantitatív információ felhasználásával pontos, ismétlődő mozdulatokat elvégezni, és képesek extrém környezetében dolgozni, mint például a telerobotika esetén.
3	0.5	0	A mélységi keresés hátrányos tulajdonsága, hogy egy rossz választással egy hosszú (akár végtelen) út mentén lefelé elakadhat, miközben például egy más döntés elvezetne a gyökérhez közeli megoldáshoz. A  ábrán például a mélységi keresés kifejti az egész bal oldali részfát, annak ellenére, hogy a C csomópont a megoldás. Ha a J csomópont szintén megoldás lenne, a mélységi keresés azt adná vissza megoldásul, következésképpen a mélységi keresés nem optimális. Ha a bal oldali részfa korlátlanul mély lenne és nem tartalmazna megoldást, a mélységi keresés soha nem állna meg, következésképpen a mélységi keresés nem teljes. A legrosszabb esetben a mélységi keresés a keresési fában az összes O(b^m) csomópontot generálni fogja, ahol m a csomópontok maximális mélysége. Jegyezzük meg, hogy m sokkal nagyobb lehet, mint d (a legsekélyebb megoldás mélysége), és korlátlan fák esetén értéke végtelen.  ábra - Mélységi keresés egy bináris keresési fában. A kifejtett csomópontok, amelyeknek a peremben nincsenek követőik, el is hagyhatók a memóriából. Ezeket feketével jelöltük meg. A 3-as mélységű csomópontokról feltételezzük, hogy nincsenek követőik, valamint azt is feltesszük, hogy M az egyetlen célcsomópont. Mélységi keresés egy bináris keresési fában. A kifejtett csomópontok, amelyeknek a peremben nincsenek követőik, el is hagyhatók a memóriából. Ezeket feketével jelöltük meg. A 3-as mélységű csomópontokról feltételezzük, hogy nincsenek követőik, valamint azt is feltesszük, hogy M az egyetlen célcsomópont.
15	0.962963	0	Ebben a feladatban azt vizsgáljuk, hogy mi történik a valószínűségekkel az esernyős világban, ha az idősorok hossza a végtelenbe tart. a. Tételezzük fel, hogy a napok olyan végtelen sorát figyeljük meg, amikor az esernyő mindig feltűnik. Mutassa meg, hogy a napok múlásával az eső valószínűsége az aktuális napon monoton növekszik egy határértékhez. Számítsa ki ezt a határértéket. b. Most gondolja át az előrejelzés-t az egyre távolabbi jövőben, csupán a két első esernyő megfigyelés ismeretében. Először számolja ki a P(R[2+k] |U[1], U[2]) valószínűséget k = 1…20 esetén, és ábrázolja az eredményeket. A valószínűségnek láthatóan konvergálnia kell egy határértékhez. Számítsa ki a határérték pontos értékét.
19	0.590909	0	Ahogy ezt a fejezet bevezetőjében már megemlítettük, az előzetes tudás hasznos a tanulás szempontjából, azonban valahogy ezt is meg kell tanulni. Hogy a relevanciaalapú tanulást teljes mértékben megfogalmazhassuk a meghatározások tanulási mechanizmusát meg kell még adnunk. A most bemutatásra kerülő algoritmus alapja a megfigyelésekkel konzisztens legegyszerűbb meghatározás megtalálása. Egy P ≻ Q meghatározás azt jelenti, hogy ha egy példa illeszkedik P-re, akkor Q-ra is kell illeszkednie. Egy meghatározás konzisztens a példák egy halmazával, ha minden példapár, amely a bal oldali predikátumokon illeszkedik egymásra, a célpredikátumon is illeszkedik, magyarán, ha a besorolása azonos. Tegyük fel, hogy bizonyos anyagi mintákat megmérve a vezetőképesség alábbi méréseivel rendelkezünk:
11	0.923077	0	Napjainkban a tervek bináris döntési diagram (binary decision diagram) alakú reprezentációja hódít, ami egy véges automata tömör leírási módja, melyet a hardververifikációval foglalkozó közösség részletesen tanulmányozott (Clarke és Grumberg, 1987; McMillan, 1993). A bináris döntési diagramok jellemzőinek mint egy tervkészítési probléma megoldásának való megfelelés tulajdonságának bizonyítására számos technika elérhető. Cimatti és társai egy ezen a megközelítésen alapuló tervkészítőt mutattak be (Cimatti és társai, 1998). Más reprezentációkat szintén felhasználtak; például Vossen és társai az egész programozás tervkészítésre való felhasználhatóságát vizsgálja (Vossen és társai, 2001).
7	0.08	0	Az első érzékelés a [Nincs, Nincs, Nincs, Nincs, Nincs], amiből az ágens arra tud következtetni, hogy a szomszédos négyzetek biztonságosak. A  (a) ábra mutatja az ágens tudásának állapotát ezen a ponton. Az ábrán a tudásbázis néhány mondatát soroljuk fel, betűket használva a megfelelő négyzetekben, mint az Sz (szellő) és az OK (biztonságos, nincs se csapda, se wumpus). A  ábra ezzel szemben magát a világot írja le.
13	0.045455	0	A világ a valóságban nagyságrendekkel bonyolultabb a wumpus világnál. Egy logikai ágens nem biztos, hogy képes kimerítő és helyes leírást adni arról, hogy a cselekedetei mennyire lesznek eredményesek. Tegyük fel például, hogy az ágens ki szeretne vinni valakit a repülőtérre egy bizonyos járathoz. Ehhez egy A[90 ]nevű tervet tekint, amely szerint a járat indulása előtt 90 perccel kell elindulnia otthonról és normális sebességgel kell vezetnie. Mindemellett, még ha a repülőtér csak 15 kilométerre van is, az ágens nem juthat a következő határozott kijelentésre: az A[90] terv alapján időben kiérünk a repülőtérre, hanem csak egy gyengébb következtetésre: az A[90] terv alapján időben kiérünk a repülőtérre, ha az autóm nem romlik el vagy nem fogy ki belőle az üzemanyag, továbbá, ha nem történik velünk baleset, valamint a hídon sem lesz baleset, és a gép nem száll fel korábban, továbbá ha nem lesz földrengés… E feltételek egyike sem vezethető le, így a terv sikere sem következtethető ki biztosan. Mindez a  fejezetben említett minősítési problémára (qualification problem) mutat példát.
24	0.833333	1	Esetenként önmagukban is alkalmasak alakzat felismerésre, követésre, szegmentálásra – például a hisztogram szegmentálására – és textúra analízisre. Affin transzformációkra kiinduló állapotukban nem invariánsak, de azzá tehetők a detektorok megfelelő torzításával. A következőkben néhány foltdetektáló algoritmust mutatok be.
19	0.818182	0	Az ILP-rendszerek egyelőre Galilei- vagy Joule-szintű felfedezéseket nem tettek, a felfedezéseit azonban tudományos irodalomban való publikálásra érdemesnek találták. Így például Journal of Molecular Biology-ban Turcotte írja le a fehérje összehajtogatási szabályok automatikus felfedezését a Progol ILP programmal (Turcotte és társai, 2001). A Progol által felfedezett szabályok közül sokat az ismert elvekből ugyan le lehetett volna következtetni, a többségét azonban a standard biológiai adatbázisok részeként korábban mégsem publikálták (lásd  ábra példája). Egy ehhez kapcsolódó kutatás részeként Srinivasan (Srinivasan és társai, 1994) molekula-struktúraalapú szabályok felfedezésével foglalkozott nitroaromatikus komponensek mutagenicitására. Ilyen komponensek a gépkocsik által kibocsátott kipufogógázban találhatók. A standard adatbázisokban lévő komponensek 80%-ában lehetséges a négy fontos jellemzőt azonosítani, és az erre épülő lineáris regresszió jobb az ILP-nél. A maradék 20% esetén a jellemzők önmagukban nem elegendők az előrejelzéshez, az ILP relációkat azonosít, amelyekkel a lineáris regresszió, a neurális hálók és a döntési fák képességein túltesz. King (King és társai, 1992) azt mutatta meg, hogy a különböző gyógyszerek gyógykezelési hatását hogyan lehetne előre jelezni. Ezen esetek mindegyikében úgy tűnik, hogy az ILP nagy hatékonyságához a relációk reprezentálási képessége és a háttértudás használata járulnak hozzá. Az a tény, hogy az ILP által megtalált szabályokat az emberek is képesek interpretálni, inkább segíti ezeknek a technológiáknak az elfogadását a biológiai folyóiratokban, mint a számítógépes tudománnyal foglalkozó folyóiratokban.
2	0.526316	1	A simple_debug ágens célja kettős: egyrészt mintául kíván szolgálni saját Java belső cselekvések készítéséhez, másrészt univerzálisan beépíthető hibakereső felületet kíván nyújtani minden hallgatói ágens számára. Az ágens AgentSpeak forráskódja szinte teljesen azonos a simple ágensével. Az egyetlen eltérés, hogy minden olyan helyen, ahol az ágens fizikai cselekvést hajt végre (például lép, fordul, eszik, stb.), szerepel egy további mentális cselekvés is, méghozzá a debug.DebugAction nevet viselő.
5	0.181818	1	Nyilván a „Zebra feladvány” az „Ausztrália térképének kiszínezésé”-vel ellenben már túl összetett ahhoz, hogy minden egyes algoritmust/következtetést/heurisztikát lépésről-lépésre, áttekinthető formában bemutathassunk, viszont az egyes módszerek futását jellemző adatokat az alábbi táblázatban összefoglalnánk.
8	0.354839	0	Így valójában nincs szükségünk egyszerre mind az ∀-ra, mind az ∃-re, mint ahogy nincs szükség egyszerre mind az ∧-ra és az ∨-ra sem. Mégis, mivel az olvashatóság fontosabb, mint a takarékosság, használni fogjuk mindkét kvantort.
11	0.461538	0	A példa szintén rámutat néhány javítási lehetőségre. Például egy próbálkozás duplán történt: az Indít az Eltávolít(Pótkerék, Csomagtartó) cselekvéshez kapcsolódik még mielőtt az ütközés visszalépést váltana ki, és a visszalépés hatására a kapcsolat felbomlik, bár nem vesz részt az ütközésben. A keresés folytatásakor a kapcsolat újra létrejön. Ez tipikus az időrendi visszalépés esetén és elkerülhető, ha függőségvezérelt visszalépést használunk.
5	0.181818	1	Mivel az előretekintés során nem állt elő üres értékkészlet (egyetlen változó esetében sem), ezért az algoritmus tovább folytatja futását: újra meghívja magát, újra változók, annak pedig értéket választ. A változó kiválasztása immár a következő MRV értékek szerint történik:
4	0.916667	0	A genetikus programozást övező jelenlegi érdeklődést John Koza (Koza, 1992) munkája váltotta ki, a módszer azonban visszavezethető Friedbergnek (Friedberg, 1958) a gépi kóddal folytatott korai kísérleteihez és Fogelnek (Fogel és társai, 1996) a véges állapotú automatákkal folytatott vizsgálataihoz. Mint a genetikus algoritmusok esetén itt is vita folyik a módszer hatékonyságát illetően. Koza (Koza és társai, 1999) sok olyan kísérletet ír le, amelyeket genetikus programozás felhasználásával az automatizált áramkörtervezés területén végzett.
5	0.181818	1	Melyik ház is lesz a piros? Az 1-es, a 2-es, netán az 5-ös? Melyik változóra milyen értékkényszert is kellene kimondanunk? A House1Person, House2Person, ..., House5Person változók közül melyiknek adjuk most akkor az Englishman értéket, és miért lesz éppen arra a házra igaz, hogy a színe piros (Red)? ...nem az algoritmus dolga volna ezeket az összefüggéseket meghatározni? Mégis hogyan bírhatnánk rá erre?
27	0.8	0	David Lodge az irodalomkritikusok egyetemi világáról szóló Small world (Kis világ) (Lodge, 1984) c. novellájában a főhős megdöbbenést okoz, amikor a kiváló, ámde egymással vitatkozó tagokból álló irodalomelméleti bizottságtól megkérdezi: „Mi van, ha igazuk van?” Az elméletalkotók egyike sem gondolt még erre a kérdésre (valószínűleg azért, mert megcáfolhatatlan elméleteken vitatkozni csak öncél lehet). Néha hasonló zavart okozhatunk, ha MI-kutatóktól kérdezzük azt: „Mi van, ha sikerrel jársz?” A mesterséges intelligencia izgalmas dolog, az intelligens számítógépek pedig nyilvánvalóan jobbak, mint buta társaik, miért hát az aggodalom?
11	0.423077	0	Emlékezzünk vissza, hogy a keresésünk állapotai (többnyire még befejezetlen) tervek lesznek. Hogy elkerüljük a valós cselekvésekkel való keveredést, itt tervekről és nem állapotokról fogunk beszélni. Minden terv a következő négy komponensből áll, ahol az első kettő a terv lépéseit definiálja, míg az utolsó kettő naplózásra szolgál, hogy abból meghatározzuk, hogyan bővíthetők a tervek: * Cselekvések (actions) halmaza, amelyek a terv lépéseit adják. Ezeket a tervkészítési probléma cselekvéshalmazából vesszük. Egy „üres” terv csak az Indít és a Befejez cselekvéseket tartalmazza. Az Indít-nak nincsenek előfeltételei, míg a következményrésze a tervkészítési feladat kiindulási állapotának literáljait tartalmazza. A Befejez cselekvésnek nincsen következmény része, míg előfeltételei megegyeznek a célállapot literáljaival. * Rendezési kényszerek (ordering constraints). Minden rendezési kényszer A ≺ B alakú, amit „B előtt A”-nak olvasunk, és azt jelenti, hogy az A-t valamikor a B előtt kell végrehajtani, de nem feltétlenül közvetlen előtte. A rendezési kényszerek egy megfelelő részben rendezést kell leírjanak. Bármilyen ciklus (mint az A ≺ B és a B ≺ A) ellentmondást jelent, ezért olyan rendezési kényszer nem adható a tervhez, amely ciklust hozna létre. * Okozati kapcsolatok (causal links). Az A és B cselekvések közötti okozati kapcsolatot  -vel jelöljük és úgy olvassuk, hogy „A teljesíti p-t B-hez”. Például a  okozati kapcsolat jelentése, hogy a JobbZokniFenn egy következménye a JobbZokni cselekvésnek és előfeltétele a JobbCipő-nek. Tartalmazza azt a megkötést is, hogy a JobbZokniFenn-nek igaznak kell maradnia a JobbZokni cselekvéstől a JobbCipő cselekvésig. Más szavakkal, a terv nem mindig bővíthető egy új C cselekvéssel, ami ütközik egy okozati kapcsolattal. Egy C cselekvés ütközik az  -vel, ha C következménye a ¬p, és ha C az A után és B előtt jöhet (a rendezési kényszereknek megfelelően). Néhány szerző az okozati kapcsolatokat védett tartományoknak (protection intervals) nevezi, mert az  megvédi p-t a negálástól az A–B intervallumban. * Nyitott előfeltételek (open preconditions). Egy előfeltétel nyitott, ha nem teljesül a terv egy akciójának hatására. A tervkészítők feladata, hogy a nyitott előfeltételek halmazát üres halmazra csökkentse, ellentmondások bevezetése nélkül.
6	0.1	1	Az 1-es játékos, miután kézhez kapja C-től a lapot, amit ugyebár a 2-es játékos nem lát, eldöntheti, hogy emeli (Raise) az eredetileg 1 dolláros tétet (mindkét játékos a játszma megkezdésekor 1-1 dollárt tett be a közösbe), vagy pedig bedobja a lapjait, pontosabban lapját (Fold). Ha C-től a Red lapot kapta, akkor az 1:1 jelű döntési csúcsban van, és ott kell cselekednie. Ha itt bedobja lapját (Fold), ami végső soron nem volna túl ésszerű, akkor elveszti az játszma kezdetén közösbe helyezett 1 dollárját, amit így a 2-es játékos elnyer. Tehát ennek a kimenetelnek a kifizetési vektora, ahogyan az a fentebbi fólián is jól látszik, (-1, 1).
5	0.181818	1	Használjuk is nyomban fel frissen definiált változóinkat, és mondjuk ki velük az előbbi 03-as és 14-es korlátok duális megfelelőjét, pontosabban a primér esethez hasonlóan most is modell-szintű értékkészlet-szűkítéssel oldjuk meg a dolgot.
11	0.961538	0	Az eredeti Strips programot a Shakey robot irányítására készítették. A  ábra a Shakey világának egy változatát mutatja, melyben négy szoba sorakozik egy folyosó mentén, melyek mindegyikének van egy ajtaja és van benne egy villanykapcsoló.
10	0.393939	0	Primitív állapotok vagy események kombinálásával bonyolultabb képződményeket is kialakíthatunk. Ez a megközelítés a folyó esemény kalkulus (fluent calculus). A folyó esemény kalkulus nem egyedi folyó eseményeket, hanem folyó események kombinációit reifikálja. Láttuk már annak a módját, hogy az egyszerre történő két dolog eseményét hogyan reprezentáljuk, azaz láttuk a Mindkettő(e[1], e[2]) függvényt. A folyó kalkulusban ezt általában az e[1] o e[2] infix jelöléssel rövidítik. Hogy megmondhassuk, hogy például „valaki sétált és közben rágógumit rágott”, azt írhatjuk, hogy:
5	0.181818	1	A szemfüles olvasó már bizonyára észrevette, hogy az algoritmus innen már visszalépés nélkül meg fogja találni a KKP probléma (első) megoldását. Mi azonban még na szaladjunk annyira előre. Lássuk lépésről lépésre. Most tehát az SA=RED értékadás következtében az {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=RED} behelyettesítés adódott, ami sajnos ellentmond a 3-as és 6-os korlátoknak.
16	0.913043	1	Az új adatok miatt a kórlap felépítése is eltér a megszokottól. Az új kórlapon a páciens állapotának leírására az úgynevezett egészségprofilt használjuk. Ez a szubjektív és objektív (mért) adatok összefoglalására szolgál. Itt a páciens komplex állapotleírása, és a különböző genetikai, környezeti és életmódbeli kockázatokra vonatkozó bejegyzések kapnak helyet. Az ellátási terv elemei között a tervezett vizsgálatokat és terápiás beavatkozásokat, valamint azok időbeli ütemezését is megtaláljuk. Tartalmaznia kell a legkülönbözőbb ellátási eseményeket függetlenül attól, hogy ezek hol (kórházban, orvosi rendelőben vagy a beteg otthonában) történtek.
25	0.259259	0	Ugyanakkor van még egy nehézség, amit szép csöndben figyelmen kívül hagytunk eddig: az M térkép méretét nem tudjuk előre. Ebből kifolyólag a végső becsléshez tartozó μ[t] és Σ[t] elemeinek száma szintén ismeretlen. Ezeket dinamikusan kell meghatározni, ahogy a robot újabb referenciapontokat talál. A probléma megoldása elég egyszerű: amikor a robot felfedez egy új referenciapontot, egyszerűen hozzáad egy új elemet a posteriorhoz. Ha ennek az új elemnek a varianciáját nagyon nagy kezdeti értékűre választjuk, akkor az eredményül kapott posterior ugyanaz, mintha a robot már korábban is tudott volna annak a referenciapontnak a létezéséről.
17	0.4	0	A gyakorlatban sokszor előfordul, hogy π[ i] jóval hamarabb optimálissá válik, mielőtt U[i] konvergált volna. A  ábrán látható, ahogy a 4 × 3-as környezetben a maximális U[i]-beli hiba és az eljárásmód vesztesége az értékiteráció folyamatának előrehaladtával nullához közelít, γ = 0,9 értéknél. A π[ i] eljárásmód már i = 4-nél optimális, pedig az U[i]-beli maximális hiba még 0,46.
10	0.939394	0	Az MI-ben az idő és a cselekvés legkorábbi kezelő apparátusa John McCarthy szituációkalkulusa volt (McCarthy, 1963). A QA3 volt az első MI-rendszer, amely nagyban felhasználta a cselekvésre vonatkozó általános rendeltetésű elsőrendű logikai következtetést (Green, 1969b). Kowalski fejlesztette ki az állítások reifikálását a szituációkalkuluson belül (Kowalski, 1979b).
22	0.074074	1	A számítógépes nyelvészet, mint tudományterület meghatározása nehéz feladat. A The Association for Computational Linguistics (ACL), a számítógépes nyelvészettel foglalkozó nemzetközi tudományos és szakmai egyesület szerint „a számítógépes nyelvészet a nyelv tudományos tanulmányozása számítástechnikai szemszögből”. Két kapcsolódó terület is említve van a mondatban: a „nyelv tudományos tanulmányozása”, azaz a (hagyományos) nyelvészet, valamint a számítástechnika. A számítógépes nyelvészet tehát egy interdiszciplináris terület, melyet igények és eszközök szintjén is szoros kapcsolat fűz a fent említett két tudományterülethez.  ábra -  ábra: a számítógépes nyelvészet, mint interdiszciplináris terület egyszerű megközelítésben  ábra: a számítógépes nyelvészet, mint interdiszciplináris terület egyszerű megközelítésben
14	0.565217	0	Bármilyen mintavételi algoritmusban a válasz kiszámítása a generálás során előálló minták megszámlálása alapján történik. Tételezzük fel, hogy N teljes mintánk van, és jelölje N(x[1], …, x[n]) az x[1], …, x[n] esemény gyakoriságát. Azt várjuk, hogy ez a gyakoriság határértékben konvergáljon a várható értékéhez a mintavételi valószínűség szerint:
14	0.608696	0	Itt csupán az MCMC-nek egy egyszerű változatát tárgyaltuk, nevezetesen a Gibbs-mintavételezőt. Legáltalánosabb formájában az MCMC hatékony módszer valószínűségi modellekkel való számolásra, és számos változatát fejlesztették ki, közöttük a  fejezetben bemutatott szimulált lehűtés algoritmust, a  fejezetben a sztochasztikus kielégíthetőség algoritmust, valamint a  fejezetben a Metropolis–Hastings-mintavételezőt.
24	0.166667	1	A PACS Picture Archiving and Communication System. Képarchiváló és-továbbító rendszer, melynek feladata az, hogy a különböző helyekről (modalitásoktól) származó digitális képeket összegyűjtse, szabványos formátumban tárolja, és a felhasználó számára a megfelelő helyre továbbítsa.
9	0.758621	0	Az első lépés elvégzéséhez szükségünk lesz három új fogalomra: * Herbrand-univerzum: Ha S a klózok egy halmaza, akkor a H[S] a Herbrand-univerzuma S-nek, vagyis az összes alaptermből álló halmaz, amelyet létrehozhatunk a következőkből: a. Az S függvény szimbólumai, ha vannak ilyenek. b. Az S konstansszimbólumai, ha vannak ilyenek. Ha nincs ilyen, akkor az A konstans szimbólum.
5	0.181818	1	A következőkben a könyv  fejezetében szereplő “Ausztrália térképének kiszínezése” példán (lásd. könyv  ábrája) mutatjuk be részletesen, lépésről-lépésre a könyvfejezetben említett KKP algoritmusokat és heurisztikákat, továbbá a valamivel összetettebb, 5.13-as feladatot is megoldjuk (kezdve a modellezéstől egészen az eredmények kiértékeléséig). A következőkről lesz tehát szó:
9	0.482759	0	A Prolog messze a legszélesebb körben használt logikai programozási nyelv. Több százezer használója van. Elsősorban gyors prototípusnyelvként használták, valamint szimbólummanipulációs feladatokhoz, mint például fordítóprogramok írására (Van Roy, 1990) vagy természetes nyelvek elemzésére (Pereira és Warren, 1980). Számos szakértőrendszert írtak Prologban jogi, orvosi, pénzügyi és más tárgyterületeken.
10	0.090909	1	Előfordulhat, hogy a felhasználó kérdése alulspecifikált, például, mert a kérdezőnek nincsenek pontos ismeretei az adott szakterületről. Ilyen kérdés lehet a „Mik az agyhártyagyulladás tünetei?”, mert a rendszer referenciaszövegében az „Agyhártyagyulladás” szócikk két szakaszában is előfordul a ’Tünetek’ szemantikai annotáció. A helyes válaszadáshoz szükséges felismerni, hogy a szócikk az agyhártyagyulladás két típusát is körülírja, vagyis taxonomikus kapcsolatokat tartalmaz, és hogy emiatt a felhasználót a kérdése pontosítására kell megkérni.
8	0.032258	0	A következő alfejezetben elkezdjük az elsőrendű logika részletes tárgyalását. Ahogy egy fizikát tanuló diáknak valamilyen szinten rendelkeznie kell matematikai ismeretekkel, a mesterséges intelligenciát tanulmányozóknak is el kell sajátítaniuk bizonyos jártasságot a logikai jelölési rendszerek használatában. Másrészt az is nagyon fontos, hogy ne bonyolódjunk bele a logikai jelölési rendszerek sajátosságaiba – hiszen számos különböző változat létezik. A lényeges az, hogy tudatában legyünk annak, hogy a nyelv miként könnyíti meg tömör reprezentációk létrehozását, és hogy a szemantika miként vezet el helyes következtetési folyamatokhoz.
6	0.65	0	A leszűrendő lecke az, hogy amikor hiányos az információ, meg kell fontolni, hogy milyen információval fogunk rendelkezni a játék minden pillanatában. max algoritmusával az a probléma, hogy feltételezi, hogy minden lehetséges leosztásnál a játék úgy folytatódik, mintha minden kártya látható lenne. Ahogy a példánk mutatja, ez olyan cselekvésre készteti max-ot, mintha minden jövőbeli bizonytalanság feloldódna, ha eljön az ideje. max algoritmusa sem fog soha információgyűjtéshez folyamodni (vagy a partner informálásához), mert egy-egy leosztáson belül erre nincs szüksége. Az olyan játékoknál, mint a bridzs, gyakran értelmes dolog olyan kártyával indulni, amely segíti kideríteni az ellenség leosztását, vagy a partnerünket a saját leosztásunkról informálja. Ilyen viselkedést automatikusan generálhatunk a nem tökéletes információjú játékokra kifejlesztett optimális algoritmussal. Az ilyen algoritmus nem a világállapotok terében (kártyaleosztások), hanem a hiedelmi állapotok terében (belief states) (hiedelmek, hogy kinek milyen kártyája van, milyen valószínűséggel) keres. Az algoritmust a  fejezetben tudjuk majd megfelelően elmagyarázni, miután felépítettük a szükséges valószínűségi apparátust. Abban a fejezetben azzal a nagyon fontos szemponttal is fogunk foglalkozni, hogy a nem tökéletes információjú játékokban az a legjobb, ha minél kevesebb információt adunk ki az ellenségnek, és ennek legjobb módszere, ha nem megjósolható módon cselekszünk. Ez az oka annak, hogy az étteremellenőrök véletlen módon választják meg az ellenőrzések időpontját.
1	0.241379	0	A célalapú analízis hasznos, de nem segít akkor, amikor a célt több cselekvéssel is el lehet érni, vagy pedig, ha annak eléréséhez egy cselekvés sem elegendő. Antoine Arnauld (1612–1694) helyesen adta meg azt a kvantitatív formulát, hogy ilyen esetekben milyen cselekvéshez kellene folyamodni (lásd  fejezet). John Stuart Mill (1806–1873) Utilitarianism c. művében (Mill, 1863) a racionális döntés kritériumának a gondolatát az emberi cselekvés minden aspektusára kiterjesztette. A döntéshozatal egy jobban formalizált elméletéről a következő részben lesz szó.
7	0.2	0	A precedencia nem oldja fel a többértelműséget az olyan mondatoknál, mint az A ∧ B ∧ C, amelyet olvashatunk ((A ∧ B) ∧ C)-ként vagy (A ∧ (B ∧ C))-nek. Mivel a mondatnak ez a két olvasása ugyanazt jelenti a következő részben definiálandó szemantika szerint, az olyan mondatok, mint az A ∧ B ∧ C megengedettek. Szintén megengedjük az A ∨ B ∨ C és az A ⇔ B ⇔C mondatokat. Olyan mondatok, mint az A ⇒ B ⇒ C nem megengedettek, mert a két olvasásnak különböző jelentései vannak, ebben az esetben ragaszkodunk a zárójelhez. Végül, néha használni fogunk szögletes zárójelet az egyszerű zárójel helyett, ami a mondatot áttekinthetőbbé teszi majd.
15	0.666667	0	  ábra - A részecskeszűrés frissítési ciklusa az esernyő DBH-nál N = 10 esetén, bemutatva minden egyes állapot mintapopulációját. (a) A t időpontban 8 minta jelez Eső-t és 2 ¬Eső-t. Mindegyiket továbbterjesztjük a következő állapotátmenet-modell szerinti mintavételezésével. A t + 1 időpontban 6 minta jelez Eső-t és 4 ¬Eső-t. (b) A t + 1 időpontban ¬Esernyő a megfigyelés értéke. Mindegyik mintát súlyozzuk a mintának a megfigyelésre vett feltételes valószínűségével, amit a körök nagysága jelez. (c) Egy új 10-es mintahalmaz generálódott az aktuális halmazból történő súlyozott sorsolással, 2 olyan mintát eredményezve, ami Eső-t jelez, és 8 olyat, ami ¬Eső-t. A részecskeszűrés frissítési ciklusa az esernyő DBH-nál N = 10 esetén, bemutatva minden egyes állapot mintapopulációját. (a) A t időpontban 8 minta jelez Eső-t és 2 ¬Eső-t. Mindegyiket továbbterjesztjük a következő állapotátmenet-modell szerinti mintavételezésével. A t + 1 időpontban 6 minta jelez Eső-t és 4 ¬Eső-t. (b) A t + 1 időpontban ¬Esernyő a megfigyelés értéke. Mindegyik mintát súlyozzuk a mintának a megfigyelésre vett feltételes valószínűségével, amit a körök nagysága jelez. (c) Egy új 10-es mintahalmaz generálódott az aktuális halmazból történő súlyozott sorsolással, 2 olyan mintát eredményezve, ami Eső-t jelez, és 8 olyat, ami ¬Eső-t.
22	0.814815	0	E nyelvtan szerint a szöveg szegmensekből áll, ahol minden szegmens vagy egy mondat, vagy mondatok egy csoportja, és a szegmenseket koherenciarelációk (coherence relations) kötik össze. A „Go two blocks. Turn right” szövegben a koherenciareláció az, hogy az első mondat engedélyezi a másodikat: a hallgatónak akkor kell jobbra fordulnia, miután ment két háztömbnyit. Különböző kutatók koherenciarelációk különböző készletét javasolták; a  ábra felsorol egy reprezentatív halmazt. Most vizsgáljuk meg a következő történetet: 1. A funny thing happened yesterday. 2. John went to a fancy restaurant. 3. He ordered the duck. 4. The bill came to $50. 5. John got a shock when he realized he had no money. 6. He had left his wallet at home. 7. The waiter said it was all right to pay later. 8. He was very embarrassed by his forgetfulness.
5	0.181818	1	Az előretekintés tehát nem tesz semmit. Az algoritmus újra meghívja önmagát immár a megoldással, mint aktuális behelyettesítéssel. A rekurzív hívás során ezt azonnal észre isveszi, és így nyomban vissza is tér ezzel a megoldással a rekurzió egyel magasabb szintjére. Ott ugyanez történik, majd újra, és újra, mígnem végül a megoldás átadódik a felhasználónak (vagy programnak/ágensnek), aki/ami az egész KKP megoldási folyamatot indítványozta.
24	0.833333	1	A detektorok csoportosíthatók az invariáns tulajdonságaik szerint. Léteznek fix skálájú detektorok, melyek egy előre meghatározott méretű objektumot keresnek. Ezek akkor hasznosak, ha az adott alakzat a felnagyítása után is ugyanúgy néz ki, ilyen például egy szigorú értelemben vett sarok. Léteznek skála invariáns detektorok, melyek érzéketlenek a keresett objektum átméretezésére. A legáltalánosabb detektorok tetszőleges lineáris torzításra és eltolásra – azaz tetszőleges affin transzformációra – invariánsak, ezeket affin invariáns detektoroknak nevezzük. Érezhető, hogy túl sokféle transzformáció megengedése több hamis találatot eredményezhet, ellenben javítja a megismételhetőséget.
5	0.181818	1	Az  szakasz -  A probléma modellje felépített modellt, avagy formálisan adott KKP problémát immár az 5.1. szakasz - 1. Ausztrália térképének kiszínezése ismertetett módszerek bármelyikével megpróbálhatjuk megoldani. Mivel csak bináris korlátokat definiáltunk, ezért bármelyik ott bemutatott algoritmus módosítás nélkül futtatható ezen a problémán. Az ezzel kapcsolatos futási eredményeket a következő szakasz foglalja össze. Ebben a szakaszban viszont most magát a megoldását ismertetjük.
20	0.678571	0	A neurális hálóstruktúrák két fő csoportja: a hurokmentes vagy előrecsatolt hálók (feed-forward network) és a visszacsatolt vagy rekurrens hálók (recurrent network). Az előrecsatolt háló a pillanatnyi bemenet függvényét reprezentálja, azaz nincs semmilyen más belső állapota, csak maguk a súlyok. A rekurrens háló viszont a kimeneteit visszacsatolja a bemeneteire. Ez azt jelenti, hogy a háló aktivációs szintjei dinamikus rendszert alkotnak, elérhetnek stabil állapotot, de mutathatnak oszcillációt, sőt kaotikus viselkedést is. Ezenfelül a háló egy adott bemenetre adott válasza a kezdeti állapotától függ, amely a korábbi bemenetektől függhet. Ennélfogva a rekurrens hálók (ellentétben az előrecsatolt hálókkal) rövid távú memóriát is biztosíthatnak. Ezáltal érdekesebbé válnak mint agymodellek, de egyben nehezebben is érthetők. Ez a rész az előrecsatolt hálókra koncentrál, a fejezet végén néhány hivatkozást adunk, segítve a rekurrens hálók további tanulmányozását.
5	0.181818	1	Természetesen ekvivalencia-korlátot is előírhatnánk. Ez is teljesen szabatos bináris korlát volna, ugyanúgy, mint a fentebbi táblázatokban foglalt bináris érték-korlátok. Később lesz is szükség hasonlóra. Most azonban még ne rohanjunk előre. Azok után, hogy a 5-ös állításnak 3 bináris érték-korlátot feleltettünk meg (lásd. fentebb a 2-3., 2-4., és 2-5. táblázatot), rátérhetünk a 6-os állításra:
4	0.583333	0	Az állapotok következő generációjának az előállítása a  (a)–(e) ábrán követhető. A (b)-ben minden állapotot a kiértékelő függvény vagy (GA-terminológiában) a fitness-függvény (fitness function) alapján rangsoroljuk. Egy fitness-függvénynek a jobb állapotokra magasabb értékeket kell visszaadnia, így a 8-királynő problémában fitness-függvényként a nemtámadó királynőpárok számát használjuk. Ennek értéke egy megoldás esetén 28. A négy állapot értéke 24, 23, 20 és 11. A genetikus algoritmus e konkrét változatában a szaporodásra való kiválasztás valószínűsége a fitness-értékkel egyenesen arányos. A százalékos mennyiségeket a fitness-értékek mellett adjuk meg.
10	0.939394	0	Hihetőnek hangzik (Briggs, 1985), hogy a formális tudásreprezentáció kezdete a sásztrai szanszkrit nyelvtanáról alkotott klasszikus indiai elméletekkel kezdődött az i. e. első évezredben.^[110] A nyugati világban az ókori görög matematikusok által használt definíciók tekinthetők a tudásreprezentáció legkorábbi megjelenésének. Tény, hogy a műszaki szóhasználat vagy egy mesterséges nyelv kialakítása, bármilyen területről van is szó, tekinthető a tudásreprezentáció egyfajta formájának.
16	0.304348	0	A többség B-t választja A-val szemben, és C-t D-vel szemben. De ha elfogadjuk, hogy U(0 dollár) = 0, akkor az első választás arra utal, hogy 0,8U(4000 dollár) < U(3000 dollár), míg a második választás pontosan a fordítottjára. Másképpen fogalmazva, nincs olyan hasznosságfüggvény, ami ezekkel a választásokkal konzisztens lenne. Az egyik lehetséges következtetés, hogy az emberek egyszerűen irracionálisak a hasznosságelmélet axiómái alapján. Egy alternatív nézet, hogy az elemzés nem veszi figyelembe a megbánást (regret) – azt az érzést, amiről az emberek tudják, hogy érezni fognak, ha egy biztos nyeremény (B) helyett egy 80%-os valószínűségű nagyobb nyereményt választanak, majd vesztenek. Más szavakkal, ha A-t választja, 20% esélye van, hogy nem lesz pénze, és úgy érzi magát, mint egy komplett idióta.
18	0.842105	0	Ebben a fejezetben determinisztikus függvények példák alapján való induktív tanulására koncentráltunk. A főbb pontok a következők voltak: * A tanulásnak számos formája van, amely a cselekvő alrendszer jellegétől, a javítani kívánt komponenstől és a rendelkezésre álló visszacsatolástól függ. * Ha akár egy tanár, akár a környezet lehetővé teszi a minták helyes értékének visszacsatolását, akkor ellenőrzött tanulási (supervised learning) problémáról beszélünk. A feladat, amelyet induktív tanulásnak (inductive learning) is nevezhetünk, abban áll, hogy egy függvényt kell megtanulnunk annak bemeneti és kimeneti mintái alapján. Diszkrét értékkészletű függvény tanulását osztályozásnak (classification), folytonos értékű függvény tanulását pedig regressziónak (regression) nevezzük. * Az induktív tanulás magában foglalja, hogy egy, a példákkal konzisztens hipotézist kell találnunk. Az Ockham borotvája (Ockham’s razor) elv értelmében célszerű a legegyszerűbb konzisztens hipotézis választása. Ennek a feladatnak a nehézségét a választott reprezentáció döntően befolyásolja. * A döntési fák (decision trees) alkalmasak tetszőleges Boole-függvény reprezentálására. Az információnyereségre (information gain) alapozó heurisztika hatékony módszert biztosít egyszerű, konzisztens döntési fák konstruálására. * A tanulási algoritmus teljesítményét a tanulási görbén (learning curve) mérhetjük le, amely a teszthalmazon (test set) mért predikciós pontosságot mutatja a tanító halmaz (training set) méretének függvényében. * Az együttes tanulási módszerek, például a turbózás (boosting), gyakran jobb eredményt érnek el, mint az egyedi módszerek. * A tanulás számítási elmélete (computational learning theory) az induktív tanulás minta komplexitásának és számítási komplexitásának analízisére koncentrál. Kompromisszumot kell kötnünk a hipotézis nyelv kifejezőképessége és a tanulás nehézsége között.
1	0.724138	0	1981-ben a japánok meghirdették az „ötödik generációs” (Fifth Generation) projektjüket – egy 10 éves tervet a Prolog nyelvet gépi kódként használó, intelligens számítógépes rendszerek építésére. Válaszul az Egyesült Államokban létrehozták az MCC (Microelectronics and Computer Technology Corporation) kutatótársulatot, amelynek célja a nemzeti versenyképesség biztosítása volt. Mindkét esetben az MI egy olyan általánosabb erőfeszítés része lett, amely a chiptervezésre és az ember–gép interfész kutatására is irányult. Az MCC és az Ötödik Generáció MI-komponensei azonban az ambiciózus célkitűzéseket mégsem tudták elérni. Nagy-Britanniában az Alvey-jelentés visszaállította a Lighthill-jelentés következtében leállított finanszírozást.^[16]
10	0.393939	0	Az ilyen tulajdonságú események kategóriáit folyamat- (process) kategóriáknak, illetve folytonos esemény (liquid event) kategóriáknak nevezzük. Egy folyamat akármilyen részintervalluma ugyanannak a folyamatkategóriának a tagja. A diszkrét eseményekre kialakított jelölést alkalmazva mondhatjuk például, hogy Shankar valamikor tegnap repült:
20	0.035714	0	Használjuk fel az információkódolás és a valószínűség között a  fejezetben bevezetett kapcsolatot. Azt látjuk, hogy a –log[2]P(h[i]) tag nem más, mint a h[i ]hipotézis specifikálásához szükséges bitek száma. A –log[2] P(d|h[i])-tag viszont azoknak a további biteknek a száma, amelyek ahhoz szükségesek, hogy az adott hipotézis feltételezésével specifikáljuk az adatokat. (Ennek demonstrálására mutatjuk be azt az esetet, amikor a hipotézis pontosan megjósolja az adatokat, ilyenkor nincs szükség egyetlen bitre sem az adatok specifikálásához. Ilyen például a h[5] hipotézis esete, amikor sorban érkeznek a citromízű cukorkák – és valóban log[2] 1 = 0.) Ebben az értelemben a MAP-tanulás jellemzője, hogy maximálisan tömöríti az adatokat. Ezt a feladatot sokkal közvetlenebbül célozza a minimális hosszúságú leírás (MHL) (minimum description length, MDL) tanulási módszer, amely a valószínűségekkel való foglalkozás helyett a hipotézis méretének és az adat kódolásának minimalizálására törekszik.
14	0.782609	1	Orvos-szakmai szempontból az határozandó meg, hogy milyen mértékű legyen egy változás. Egy recept felírása, egy vizsgálatra küldés vagy egy pozitív eredményű vizsgálati lelet visszaérkezésének dokumentum-értéke más és más. Ezért egy orvos-beteg találkozási esemény más mértékű változást okozhat a ki indexben kifejezett szám értékében.
14	0.73913	1	Egy másik esetben, a bemeneti változókhoz hét, a kimeneti változóhoz 41 fuzzy halmazt rendeltünk, statisztikai alapon. A kontroll hónap eredményein az látszik, hogy a mért értékek és a generált értékek, közel azonos tartományban mozognak. Az hogy ez a becslés elég pontos-e, azt az adott probléma dönti el.  ábra - Használható fuzzy rendszer Használható fuzzy rendszer
14	0.086957	1	Az oksági következtetések modern formalizálásában úttörőt szerepet játszó J.Pearl-től származó hasonlat szerint az oksági és valószínűségi modellek kapcsolata hasonló a térbeli tárgyak és adott síkbeli ábrázolásuk kapcsolatához [?].
23	0.444444	0	A valószínűségi rendezési elv szerint vegyünk egy eredményhalmazt, és a relevancia valószínűségének megfelelően sorba rendezve prezentáljuk a felhasználónak. Ennek akkor van értelme, ha a felhasználó az összes releváns dokumentum minél hamarább történő megtalálásban érdekelt. Azonban bajba kerül, mert nem veszi figyelembe a hasznosságot. Például ha a legrelevánsabb dokumentum két példányban szerepel a gyűjteményben, akkor az első megnézése után a második azonos relevanciájú, de zérus hasznosságú. Számos IR-rendszer rendelkezik mechanizmusokkal, amelyek eliminálják az előző találatokhoz túlzottan hasonlító eredményeket.
16	0.130435	0	(Az egyetlen következménnyel rendelkező szerencsejáték A-val vagy [1, A]-val jelölhető.) Általában egy szerencsejáték bármely következménye lehet egy atomi állapot vagy egy másik szerencsejáték. Az elsődleges kérdés a hasznosságelmélet számára annak megértése, ahogyan az összetett szerencsejátékok közötti preferenciák viszonyulnak ezen szerencsejátékokat meghatározó állapotok közötti preferenciákhoz.
6	0.1	1	Látszik tehát, hogy amennyiben b-ben, d-ben, vagy f-ben lennénk, akkor a 2-es játékos immár meg tudná mondani a kalapja színét. Viszont mivel a-ban vagyunk, ezért a 2-es is „Nem”-mel válaszol (hiszen a 2-es a-ban még a c-t is esélyesnek tartja).
5	0.818182	1	Ezen heurisztikák lényege, hogy a következőnek megvizsgálandó változó illetve a változónak adott érték a lehető leggyorsabban elvigyen az esetleges konfliktusokhoz. Amennyiben találunk megoldást a változóknak való megfelelő értékek kiválasztásával (azaz nem kell visszalépni), úgy nincs jelentősége, milyen sorrendben választjuk ki a változókat és az értékeket. Ha azonban szükség van visszalépésre, úgy érdemes minél előbb megtenni ezeket a visszalépéseket, ugyanis az a munka, amit egy ilyen 'zsákutcában' végzünk, teljesen felesleges a megoldás szempontjából. A leginkább korlátozott változót és a legkevésbé korlátozott értéket kiválasztva biztosíthatjuk, hogy a lehető leggyorsabban észrevesszük egy zsákutcáról, hogy az.
15	0.555556	0	Egy dinamikus Bayes-háló vagy DBH (dynamic Bayesian network, DBN) egy olyan Bayes-háló, ami egy a  alfejezetben leírt típusú időbeli valószínűségi modellt reprezentál. (Ahogy korábban is említettük az index időbeli értelmezése helyett bármely szekvenciális értelmezés lehetséges, gyakori például az indexnek mint egy egydimenziós helyzeti pozíciónak az értelmezése is – a ford.) A DBH-kra már láttunk példákat, a  ábrán az esernyős hálót és a  ábrán a Kalman-szűrő hálót. Általában egy DBH minden egyes szeletének tetszőleges számú állapotváltozója (X[t]) és bizonyítékváltozója (E[t]) lehet. Az egyszerűség kedvéért fel fogjuk tenni, hogy a változók és kapcsolataik szeletről szeletre pontosan ismétlődnek, és hogy a DBH egy elsőrendű Markov-folyamatot reprezentál, így minden változónak csak a saját szeletében vagy a közvetlenül megelőző szeletben lehetnek szülei. Fontos Nyilvánvaló, hogy minden rejtett Markov-modell reprezentálható mint egy DBH, egyetlen állapotváltozóval és egyetlen bizonyítékváltozóval. Az is fennáll, hogy minden diszkrét változós DBH reprezentálható mint egy RMM; ahogyan a  alfejezetben megmutattuk, a DBH összes állapotváltozója összekombinálható egyetlen állapotváltozóvá, aminek az értékei az egyes állapotváltozók értékeinek az összes lehetséges együttese. Azonban ha minden RMM egy DBH, és minden DBH átfordítható egy RMM-be, akkor mi a különbség? A különbség abban rejlik, hogy egy komplex rendszer állapotának az őt alkotó változókra történő dekomponálásával a DBH képes kihasználni az időbeli valószínűségi modell ritkaságát. Tegyük fel például, hogy egy DBH-nak 20 bináris állapotváltozója van, amelyek mindegyikének három szülője van az előző szeletben. Ekkor a DBH állapotátmenet-modellje 20 × 2^3 =160 valószínűségi értéket tartalmaz, míg a hozzátartozó RMM-nek 2^20 állapota és ezért 2^40, azaz durván egybillió átmenet-valószínűség értéke van az állapotátmenet-mátrixban. Ez legalább három ok miatt is rossz: először, hogy az RMM maga sokkal több tárat igényel, másodszor, hogy a hatalmas állapotátmenet-mátrix az RMM-következtetést sokkal költségesebbé teszi, harmadszor, hogy ilyen hatalmas számú paraméter megtanulásának problémája a tiszta RMM-modelleket alkalmazhatatlanná teszi nagy problémák esetén. A DBH-k és az RMM-ek közötti kapcsolat nagyjából analóg a hagyományos Bayes-hálók és a teljes táblázatos együttes eloszlások közötti kapcsolathoz.
3	0.208333	1	Az algoritmus elindításához csak meg kell hívnunk a „proba” metódust azzal az oszlopindexszel, amely oszloptól kezdve akarjuk a királynőket letenni. A metódus visszatérési értéke a lerakás sikeressége lesz (igaz = sikerült, hamis = nem sikerült). Ha a lerakás sikeres volt, akkor a módosított adatszerkezetből (például az előbbi tömbből) kiolvasható a bábuk helyzete.
14	0.782609	1	Az egészségi állapotbecslésekhez nagyon sok mindent pontosan kellene meghatározni, ez gyakorlatilag lehetetlen. Egy új egészségmegfigyelési, monitorozási rendszer bevezetésével szemben a legfontosabb ellenérv szokásosan az, hogy nem lehet bevezetni, mert nincsenek pontos betegnyilvántartások. Ahhoz pedig, hogy legyenek, olyan leíró jellegű adathalmazt kell definiálni, melyet a szakma elfogad, ez pedig rengeteg idő. A rendszerben az eseményvezéreltség és az esetszámmal való korreláció nyújt lehetőséget arra, hogy a módszer hasznossága belátható legyen. A fuzzy logikáról elmondható, hogy például az az egyszerű tény, hogy ki milyen magas, relatív, mert más számít magasnak a kosárlabdacsapatban és más a harckocsizó személyzet kiválasztásában. Lehet valaki ágyat nyomó lázas beteg és munkaképtelen egy influenza miatt, és lehet valaki cukorbeteg és munkaképes. Allergiás betegségeknél sem egyértelműen Boole-algebrai fogalmak, nem kategorizálhatjuk egyszerűen beteg, nem beteg kategóriába.
9	0.931034	1	A probléma abból adódik, hogy egy valamely lépésben a célmondat negáltját rezolválhatjuk az összes lehetséges válasszal. Figyeljük meg, hogy egy definit klóz konjunktív normál formára hozva pontosan egy pozitív literált tartalmaz (az eredeti alak következmény literálját). A célmondat negáltja viszont negatív literálként fogja tartalmazni a lehetséges választ. Ebből viszont az következik, hogy klózonként csak egy literállal tudjuk rezolválni.
9	0.965517	0	Ebben a problémában a  feladatban bemutatott mondatokat fogjuk használni. Válaszolja meg a következő kérdéseket hátrafelé láncolást alkalmazva! a. Rajzolja fel egy kimerítő hátrafelé láncolás algoritmus bizonyítási fáját a következő mondat igazolásához: ∃h Ló(h) b. Mi figyelhető meg erről a tárgyterületről? c. Hány megoldás származtatható le h-ra a mondatokból? d. Tudna-e olyan módszert mondani, amellyel mindet megkaphatjuk? (Segítség: érdemes megnézni (Smith és társai, 1986).)
3	0.916667	1	Kiinduló állapot: A majom és a két láda a földön helyezkednek el, egymás mellett, a banán pedig egy adott ponton lóg le a plafonról. (Pl. a majom helyzete (0,0,0), az egyik láda helyzete (0,0,1), a másik láda helyzete (0,0,-1), a banán helyzete pedig (0,2,0). A banán esetében ez azt jelenti, hogy a majomnak 2 méter magasan kell állnia, hogy már elérje.)
24	0.166667	0	reláció áll fenn, ahol f a lencse fókusztávolsága. Ha a lencse optikai középpontja és a képsík közötti távolságot valamilyen Z'[0]-nak választjuk, a jelenet azon tárgyai, amelyek a Z[0] körül egy adott mélységtartományban fekszenek, ahol Z[0] a megfelelő tárgytávolság, nagyjából élesen fognak látszani. A jelenet ezen mélységi tartományát mélységélességnek (depth of field) nevezzük.
25	0.925926	0	Az első kereskedelmi forgalomba került robot a Unimate (universal automation) manipulátor volt. A Unimate-et Joseph Engelberger és George Devol fejlesztette. 1960-ben adták el az első példányt a General Motorsnak, ahol tv-képcsövek gyártásánál használták. Szintén 1960-ben nyújtotta be Devon az első robotokra vonatkozó szabadalmat az Egyesült Államokban. 11 évvel később a Nissan Corp. az elsők között oldotta meg egy teljes szerelősor automatizálását. A fejlesztést a Kawasaki végezte Engelberger és Devol Unimation nevű cégétől származó robotokkal. Főként Japánban és az USA-ban ez az előrelépés jelentős átalakulásnak nyitott utat, amely mind a mai napig tart. A Unimationt a PUMA robot fejlesztése követte 1978-ban. A PUMA a Programmable Universal Machine for Assembly (programozható univerzális gép szereléshez) névből származik, és eredetileg a General Motors számára fejlesztették. A következő évtizedekben ez lett a robotmanipulátorok de facto szabványa. Manapság egymillióra becsülik a világon dolgozó robotok számát, és ezeknek több mint fele Japánban tevékenykedik.
13	0.272727	0	Minden valószínűségi változóhoz tartozik egy értéktartomány (domain), amelyből az értékeit veheti. Például a Lyuk tartománya az 〈igaz, hamis〉 lehetne.^[134] (Az értékeket kisbetűs nevekkel fogjuk jelölni.) Az állítások legegyszerűbb fajtája azt jelenti ki, hogy a valószínűségi változó valamilyen konkrét értéket vesz fel a tartományon belül. Például a Lyuk = igaz azt reprezentálja, hogy nekem valóban lyukas a bal alsó bölcsességfogam.
18	0.736842	1	A hétköznapi életben nagyon gyakran találkozunk olyan helyzetekkel, amikor valamilyen általános módszert, megoldást bizonyítottnak tekintenek, és el akarnak velünk fogadtatni azzal érvelve, hogy néhány (időnként ráadásul nehezen ellenőrizhető) esetben jól működött.
17	0.733333	0	Annak belátásához, hogy a b[i ]=[ ]v[i]domináns stratégia, vegyük észre, hogy amikor (v[i] – b[m]) pozitív, akkor bármelyik ajánlat optimális, ami megnyeri az árverést, és v[i] megtétele nevezetesen megnyeri az árverést. Másrészt, amikor (v[i] – b[m]) negatív, akkor bármelyik ajánlat optimális, ami elveszti az árverést, és v[i] megtétele nevezetesen elveszti az árverést. Így a v[i] árajánlat optimális az összes lehetséges b[m ]értékre, és valójában ez csak a v[i]árajánlatra teljesül. Az egyszerűsége miatt, továbbá mind az árverező, mind az ajánlattevő számára jelentkező minimális számítási igénye miatt a Vickrey-árverést széles körben használják elosztott MI-rendszerek létrehozásában.
16	0.913043	0	Az orvosi döntéseknél történő korai alkalmazásoktól eltekintve meglepően kevés MI-kutató alkalmazta a  fejezetben tárgyalt döntéselméleti eszközöket. A kevés kivételek egyike Jerry Feldman volt, aki a döntéselméletet a látás problémájára (Feldman és Yakimovsky, 1974) és a tervkészítés problémájára (Feldman és Sproull, 1977) alkalmazta. Az 1980-as években aztán hirtelen újra megnőtt az érdeklődés az MI részéről a valószínűségi módszerek iránt, a döntéselméleti szakértő rendszerek széles körben elterjedtekké váltak (Horvitz és társai, 1988) – valójában 1991-től még az Artificial Intelligence fedőlapja is egy döntési hálót ábrázolt, bár élve művészi szabadságukkal egyes nyilak irányát megváltoztatták.
4	0.916667	1	c) Módosítsa úgy a hegymászó algoritmust, hogy az 1 mélységű keresés helyett k mélységű keresést használjon annak eldöntésére, hogy a következő lépésben hová menjen. Meg kell keresnie a legjobb k lépéses utat, e mentén egy lépést megtenni, majd az eljárást megismételni.
14	0.347826	0	Ennek a kifejezésnek a kiszámításához négy tagot kell összeadnunk, amelyek mindegyikét öt szám összeszorzásával kapjuk. Legrosszabb esetben, amikor majdnem minden változó felett összegezni kell, az algoritmus komplexitása egy n bináris változós háló esetén O(n2^n).
10	0.212121	1	A következőkben néhány példát is felhozok a kifejezőerők eltéréseire. A példákban egy közlekedési lámpa állapotai (piros, piros-sárga, zöld, sárga, villogó sárga) szerepelnek. * LTL és CTL-kifejezésekkel egyaránt kifejezhető, hogy a lámpa minden esetben mindaddig piros marad, amíg piros-sárgára vagy villogó sárgára nem vált: LTL-lel: piros U (piros-sárga vagy villogó sárga), CTL-lel A[piros U (piros-sárga vagy villogó sárga)], feltéve hogy a lámpa kiindulási állapota piros. * CTL-kifejezéssel leírható, de LTL-kifejezéssel nem, hogy létezik olyan jövő, melyben a lámpa villogó sárgára vált: EF(villogó-sárga). * LTL-kifejezéssel leírható, de CTL-kifejezéssel nem, hogy minden esetben zöldre válthat a lámpa, majd ezt sárga jelzés követi: F(zöld és X sárga). * Sem LTL, sem CTL-kifejezésekkel nem írható le, de CTL*-kifejezésekkel leírható, hogy létezik olyan lehetséges állapotsorozat, hogy a piros jelzés után két lámpaváltással újra piros jelzés lesz (például úgy, hogy piros után villogó sárga, majd újra piros jelzés lesz): EF(piros és X(X piros)).
5	0.181818	1	Ezzel tehát a {SA=RED} behelyettesítést kapjuk. Ezek után az algoritmus a tankönyv 5.3-as ábrája szerint rekurzíve meghívja magát immár ezzel (és nem pedig az eddigi üres) behelyettesítéssel. Az újbóli meghívás során, mivel a behelyettesítés még nem teljes, ezért újfent a következő vizsgált, még be nem helyettesített változó kiválasztásához érkezünk, és ehhez újfent a DEG heurisztikát fogjuk segítségül hívni. A jelen behelyettesítés fényében a még be nem helyettesített változók fokszáma a következő táblázat szerint alakul momentán:
4	0.916667	0	Az RLEK (Korf, 1991, 1993) valójában egy kicsit bonyolultabb, mint a  ábrán bemutatott algoritmus, amely közelebb áll a függetlenül kifejlesztett ún. iteratívan kifejtő (iterative expansion) vagy IK (IE) (Russell, 1992) algoritmushoz. Az RLEK felső és alsó korlátot használ. A két algoritmus viselkedése azonos elfogadható heuriszitikák esetén. Az RLEK azonban a csomópontokat a legjobbat-először sorrendben akkor is kifejti, ha a heurisztika nem elfogadható. A legjobb alternatív út számontartásának gondolata korábban jelent meg Bratkónál (Bratko, 1986) az A^* elegáns Prolog implementációjában és a DTA^* algoritmusban (Russell és Wefald, 1991). Ez utóbbi a metaállapotterekkel és a metaszintű tanulással is foglalkozik.
5	0.181818	1	A fentebbi táblázat „változó fokszáma” oszlopában azért szerepel mindenhol zérus, mert a T változótól eltekintve, amely ugyebár nincs kapcsolatban a KKP egyetlen másik változójával sem, a többi még be nem helyettesített változó, a WA, NT, Q, és V változók értékkészlete rendre egy-elemű. Épp ezért a fokszám (DEG) heurisztika ezeket a változókat nem veszi figyelembe a fokszámok kiszámításakor. Ezért lett tehát mindegyik táblázatban szereplő változó fokszáma zérus.
24	0.75	0	A feldolgozatlan képpontok fényességértékei jellemzőként történő felhasználása helyett felismerhetünk adott helyen levő jellemzőket, mint például régiókat vagy éleket (lásd  alfejezet). Két motivációnk van az élek használatára. Az egyik az adatmennyiség csökkentése – sokkal kevesebb él van, mint képpont. A másik a megvilágításfüggetlenség – a kontraszt egy megfelelő tartományában az éleket nagyjából azonos helyen ismerjük fel, függetlenül a tényleges fényforrás-konfigurációtól. Az élek egydimenziós jellemzők; kétdimenziós és nulladimenziós tulajdonságokat (régiókat, illetve pontokat) szintén használunk. Vegyük észre a térbeli elhelyezkedés kezelésében jelentkező különbséget a fényességalapú és a jellemzőalapú módszerek között! A fényességalapú módszerekben az (x,y) hely a jellemző.
25	0.148148	0	A robotok beavatkozó szerveik segítségével mozognak és változtatják alakjukat. Ahhoz, hogy megértsük a beavatkozó szervek felépítését, először is általános értelemben kell beszélnünk a mozgás és az alak elvont értelmezéséről, a szabadságfokok (degree of freedom, DOF) koncepciójának felhasználásával. Szabadságfoknak számít minden olyan irány, amelyben a robot vagy egyik beavatkozó szerve mozogni képes. Például egy merev, szabadon mozgó robotnak (mint amilyenek az AUV-k) hat szabadságfoka van, három az (x, y, z) térbeli elhelyezkedés, három pedig a szögelfordulás (orientáció). Ezeket szokták csavarásnak, billentésnek és forgatásnak is hívni (RPY – roll, pitch, yaw). Ez a hat szabadságfok meghatározza a robot kinematikus állapotát,^[276] más néven a pozícióját és az orientációját együttesen. A robot dinamikai állapota (dynamic state) minden egyes kinematikai paraméter változási sebességét is tartalmazza, így minden kinematikai dimenziónál egy-egy további dimenziót hoz be.  ábra - (a) A Stanford manipulátor: egy korai robotkar öt rotációs (R) és egy transzlációs (prizmatikus) csuklóval (P), összesen hat szabadságfokkal. (b) Egy elsőkerék-kormányzású nemholonomikus négykerekű jármű mozgása. (a) A Stanford manipulátor: egy korai robotkar öt rotációs (R) és egy transzlációs (prizmatikus) csuklóval (P), összesen hat szabadságfokkal. (b) Egy elsőkerék-kormányzású nemholonomikus négykerekű jármű mozgása.
6	0.95	0	Adja meg és/vagy implementálja az alábbi játékok egyikére vagy akár többre is az állapotleírást, lépésgenerálást és a kiértékelő függvényt: Monopoly, Játék a betűkkel, bridzs (egy konkrét licitet feltételezve) és póker (válassza meg a kedvenc változatát).
16	0	0	Ebben a fejezetben visszatérünk a hasznosságelmélet gondolatához, amit a  fejezetben vezettünk be. Megmutatjuk a hasznosságelméletnek a valószínűség-számítással való összekapcsolását egy döntéselméleti ágens létrehozásához, amely a meggyőződéseinek és célkitűzéseinek megfelelő racionális döntéseket képes hozni. Az ilyen ágensek képesek döntéseket hozni olyan esetekben is, amikor a bizonytalanság és az ellentétes célok egy logikai ágens számára nem tennék lehetővé a döntést. Egy célorientált ágens valójában az állapotokat két csoportba, egy jó (cél) és egy rossz (nem cél) csoportba sorolja be, míg egy döntéselméleti ágens az állapotok jóságát egy folytonos mértékkel fejezi ki.
22	0.925926	0	Az Association for Computational Linguistics (ACL) rendszeresen rendez konferenciákat, és kiadja a Computational Linguistics folyóiratot. Ezenkívül van egy nemzetközi konferencia a témában, az International Conference on Computational Linguistics (COLING). A Readings in Natural Language Processing (Grosz és társai, 1986) a terület sok fontos korai cikkét tartalmazó antológia. A (Dale és társai, 2000) az NLP-rendszerek építésére szolgáló gyakorlati eszközökre helyezi a hangsúlyt. Jurafsky és Martin jegyzete alapos bevezetőt nyújt a területhez (Jurafsky és Martin, 2000). Az (Allen, 1995) egy kicsit régebbi munka. Pereira és Sheiber, valamint Covington Prolog-implementációkon alapuló tömör áttekintést ad (Pereira és Sheiber, 1987; Covington, 1994). Az Encyclopedia of AI-ben sok hasznos cikk található a területről; kiemelendő a „Computational Linguistics” és a „Natural Language Understanding”.
2	0.894737	1	Igen. A környezet térképét építhetjük fel a belső állapotban, ami segíthet elkerülni a céltalan bolyongást. Továbbra sem lesz azonban az ágens racionális, mert először fel kellene derítenie a környezetet, mielőtt egy optimális útvonalat meg tudna határozni.
16	0.913043	1	Az alternatív lehetőségek mérlegelésénél hasznosak lehetnek a számítógépes betegség szimulátorok, melyek segítségével kellő pontossággal előreláthatjuk, hogy az adott páciens miként fog reagálni a tervezett megelőző programokra és gyógyító beavatkozásokra, és ez által kiválaszthatjuk az optimális, egyénre szabott eljárást. A különböző döntéstámogató rendszerek közvetlenül és aktív módon vesznek részt a problémák megoldásában.
16	0.26087	0	A valóságos hasznossági függvényekről szóló úttörő jelentőségű tanulmányban Grayson azt találta, hogy a pénz hasznossága majdnem teljesen arányos a mennyiségének logaritmusával (Grayson, 1960). (Ezt először Bernoulli vetette fel [Bernoulli, 1783]; lásd  feladat.) Egy ilyen görbe, egy bizonyos Beard úré, a  (a) ábrán látható. A Beard úrtól kapott preferenciák konzisztensek a következő hasznossági függvénnyel:
14	0.347826	0	A  fejezet elmagyarázta, hogy bármely feltételes valószínűség kiszámítható a teljes együttes eloszlás tagjainak összegzésével. Pontosabban, egy P(X∣e) lekérdezés megválaszolható a   egyenlet felhasználásával, amit a jobb követhetőség kedvéért itt megismétlünk:
1	0.034483	0	Eddig arról beszéltünk, hogy miért izgalmas az MI, de nem mondtuk meg, hogy mi is valójában? Az MI definícióit, nyolc jelenlegi tankönyvet követve, az  ábra mutatja. Ezek a definíciók két dimenzió mentén értelmezhetők. Az ábra felső részében levők a gondolati folyamatokat és a következtetést célozzák, míg az alsó részben levők tárgya a viselkedés. A bal oldali definíciók a sikert az emberi teljesítményhez mérik, míg a jobb oldaliak mércéje az intelligencia egy ideális koncepciója, amit mi racionalitásnak (rationality) fogunk nevezni. Egy rendszer racionális, ha tudásához viszonyítva helyesen cselekszik.  ábra - Az MI néhány meghatározása négy kategóriába szervezve Az MI néhány meghatározása négy kategóriába szervezve
6	0.9	0	A várhatóminimax algoritmust Donald Michie vetette fel (Michie, 1966), habár az közvetlenül következik Neumann és Morgenstern játékfa-kiértékelési elméletéből. Bruce Ballard az alfa-béta nyesést kiterjesztette a véletlen csomópontokat is tartalmazó fákra (Bruce Ballard, 1983). Az első sikeres ostáblaprogram a BKG volt (Berliner, 1977; 1980b). Csak 1 mélységig keresett és bonyolult, manuálisan összeállított kiértékelő függvényt használt. Ez volt az első számítógépes program, ami képes volt legyőzni egy emberi világbajnokot az ismert klasszikus táblajátékok egyikében (Berliner, 1980a), habár Berliner elsőként ismerte el, hogy ez csak egy rövid, bemutató mérkőzés volt (nem egy világbajnoki mérkőzés), és hogy a BKG nagyon szerencsés „kézzel” dobott a kockával. Gerry Tesauro kutatásai, először a Neurogammon (Tesauro, 1989), majd a TD-Gammon (Tesauro, 1995) programokkal, azt mutatták, hogy sokkal jobb eredmény érhető el a megerősítéses tanulással (amely területtel a  fejezetben foglalkozunk).
14	0.826087	1	A modellben a betegség progresszióját valamilyen jellemző paraméter (BP) időbeli változásával jellemezzük. Például a cukorbetegek esetében BP lehet például az éhgyomri vércukor értéke, mely kezeletlen betegeknél fokozatosan emelkedik a betegség előrehaladásával.
2	0.526316	1	Ha az ágens meglát egy ennivalót, akkor azt célként tűzi ki magának és odamegy megenni. Ha az ágens ennivalóra lép, akkor azt ösztönösen megeszi. Ha az ágensnek elfogy az energiája, akkor a továbbiakban a várakozás cselekvést hajtja végre.
2	0.526316	1	A játék egy cellákból álló, 60 x 60-as méretű, falakkal határolt játéktéren zajlik. Egy játékban két, egyenként legfeljebb 5-5 fős ágenscsapat vesz részt. Az ágensek célja a pályán található ennivaló elfogyasztásával a saját energiájukat növelni úgy, hogy a játék végén a csapatuk összesített energiája szignifikánsan több legyen az ellenfélnél. A játék döntetlen, ha a második helyezett csapat energiája több mint a nyertes csapat energiájának 85%-a.
2	0.947368	0	Az eddigi feladatok porszívókörnyezetei determinisztikusak voltak. Vizsgáljon meg lehetséges ágensprogramokat a következő sztochasztikus variációkra: a. Murphy törvénye: az idő 25%-ában a Felszívás művelet nem tudja feltakarítani a padlót, ha az piszkos, illetve kiönti rá a koszt, ha az tiszta. Hogyan érinti az ágens programját az, ha a piszokérzékelő az idő 10%-ában rossz választ ad? b. Kisgyerekek: minden időlépésben minden négyzetnek 10% esélye van bekoszolódni. Tud javasolni egy racionális ágenstervet erre az esetre?
3	0.083333	1	Keresési algoritmusok vizsgálatában alapvető különbséget jelent egyrészt, hogy a kereső (döntést hozó) ágens egy élő ágens (ember, állat, ...), vagy az emberi intelligencia megvalósítására megtervezett gépi ágens (szoftver program, vagy robot), másrészt az is, hogy a keresés milyen keresési térben történik. Ha az alternatívák feltárása fizikailag érzékelhető térben (légtér, erdő, város utcái, irodaház folyosói, stb.) történik, akkor a kereséssel valódi mozgás, ill. más fizikai hatás párosul. Keresünk utat, helyet, tárgyat, szerelünk órát, motort, polcon rendezünk könyveket, vagy spájzban befőttes üvegeket, …. A tér azonban lehet matematikai absztrakt tér, aminek kapcsolata a közvetlenül tapasztalt valósággal általában sokkal összetettebb. Ilyen terekben keresünk matematikai problémák megoldását, egy logikai állítás bizonyítását, egy feladatot megvalósító tervet. Az iIlyen absztrakt térben valósul meg szintén az ágens tanulási folyamata.
6	0.05	0	A kétszemélyes játékok az egyik legrégebbi, az MI által vizsgált területet jelentik. 1950-ben, alighogy a számítógépek programozhatóvá váltak, Konrad Zuse (az első programozható számítógép és az első programozási nyelv megalkotója), Claude Shannon (az információelmélet atyja), Norbert Wiener (a korszerű szabályozáselmélet megteremtője) és Alan Turing elkezdtek sakkprogramokkal foglalkozni. Azóta a játékok színvonala sokat fejlődött, addig a szintig, hogy a gépek túlszárnyalták az embert dámajátékban és Othellóban, megverték (bár nem minden alkalommal) ostáblában és sakkban az emberi bajnokokat, és versenyképesek más játékokban is. Kivétel a gó, ahol a számítógép csak amatőr szinten játszik.
8	0.483871	0	Tisztán logikai nézőpontból egy tudásbázis csak axiómákat, és nem tételeket tartalmaz, mert a tételek nem növelik meg a konklúziók halmazát, amelyeket a tudásbázis maga után vonz. Gyakorlati szempontból a tételek elengedhetetlenek az új mondatok előállításánál a számítási költségek csökkentéséhez. Nélkülük egy bizonyítási rendszernek minden egyes alkalommal az első alapelvektől kellene indulnia, mintha egy fizikusnak mindig újra le kellene vezetnie a számítások szabályait az összes új problémánál.
15	0.777778	0	A háromállapotú beszédhangmodell állapotátmenet-diagramja a  ábrán látható. A modell egy konkrét beszédhanghoz tartozik, az [m]-hez, de az összes beszédhangnak hasonló topológiájú modellje van. Az ábrán láthatók az egyes beszédhang állapotokhoz kapcsolódó akusztikai modellek is, feltételezve, hogy a jelet egy VK címke reprezentálja. Például a modell szerint P(E[t] = C[1]|X[t] = [m][Kezdet]) = 0,5. Vegyük észre a hurkokat az ábrán; például az [m][Közép] állapot 0,9 valószínűséggel fennmarad, ami azt jelenti, hogy az [m][Közép] állapot várható időtartama 10 keret. A modellünkben az egyes beszédhangok hossza független a többi beszédhang hosszától; egy kifinomultabb modell képes lenne a gyors és lassú beszédet megkülönböztetni.
27	0.4	1	… programja kellően nagy teljesítményű számítógépen futtatva a lehetséges gyógykezelések, illetve a páciensek, kórházi infrastruktúra, és személyzet adottságai mellett várhatóan maximalizálja a gyógyult páciensek számát miközben várhatóan minimalizálja a gyógyítás költségeit és az esetleges peres ügyek számát.
14	0.086957	1	Tételezzük fel, hogy a változók halmaza tartalmaz egy hipotézis ( Y  ) változót és megfigyeléseket ( X 1 ,…, X n  ). Elterjedt más elnevezések az ok, modell, diagnózis, illetve okozat, bizonyíték, megfigyelés, tünet, szimptóma. A megfigyelések csoportot tekinthetjük különböző típusú megfigyeléseknek (például tüneteknek egy orvosi problémában) vagy azonos típusú, de eltérő idejű megfigyelések szekvenciáinak. Ideiglenesen feltesszük, hogy célunk a P(Y, X 1 ,…, X n )  eloszlás modellezése, azaz a bayesi paradigmától eltérve egyetlen valószínűségi modellt szeretnénk konstruálni. Feltételezzük továbbá a P(Y, X 1 ,…, X n )  eloszlásról, hogy az X i  megfigyelések teljesen függetlenek ha ismert az Y  hipotézis, azaz P( X j | X i 1 ,…, X i m ,Y)=P( X j |Y)  bármely X i 1 ,…, X i m  részhalmazra. Ha ekkor a P( X 1 |Y)  ,..., P( X n |Y)  feltételes eloszlások, lokális valószínűségi függések ismertek, akkor a hipotézis eloszlását adott X i 1 ,…, X i m  megfigyelések esetén a következőképpen adódik. A Bayes szabály alkalmazásával
14	0.73913	1	A fuzzy halmaz kialakítása során csak két megkötés van a Wang-Mendel módszerben: * Minden változóhoz páratlan számú fuzzy halmazt kell felvenni. * A tagsági függvénynek egyenlőszárú háromszöget kell mintáznia.
8	0.967742	0	Ezt a reprezentációt felhasználva definiálja a  ábrán látható egybites összeadót és a  ábra négybites összeadóját, és magyarázza meg, milyen lekérdezéseket használna, hogy igazolja a megoldásokat. Milyen fajta lekérdezéseket nem fogad el ez a reprezentáció, amelyeket pedig a  alfejezetben lévő reprezentáció elfogadott?  ábra - Egy négybites összeadó Egy négybites összeadó
18	0.736842	1	A probléma az, hogy a vizsgálathoz általában nem tudunk nagyon sok mintát gyűjteni (pl. elég ritkán van péntek 13.-a ahhoz, hogy több száz esetet átéljünk). Ezért fontos azt tudnunk, hogy hány minta biztosítja, hogy nagy valószínűséggel igaz a minden vizsgált esetben fennálló hipotézis, vagy megfordítva kis valószínűséggel nem igaz a hipotézis, ha minden vizsgált esetben fennáll.
27	0.4	1	Kezdjük először is néhány definícióval: adott Környezet-ben adott Architektúrá-n futtatott Program várható hasznosságát V(Program, Architektúra, Környezet) jelöli (lásd. korlátozott optimalitás). Vezessünk be egy komplexitás-mértéket, amely megadja, hogy mennyire bonyolult egy-egy ilyen Környezet. Jelölje ezt n(Környezet). A környezetek komplexitásának ne legyen felső korlátja.
16	0.826087	0	Végezzen érzékenységvizsgálatot. Ez a fontos lépés azt ellenőrzi, hogy a legjobb döntés érzékeny-e a megadott valószínűségek és hasznosságok kis változására, ehhez szisztematikusan változtassuk meg ezeket a paramétereket, és futtassuk le a kiértékelést újra. Ha kis változások jelentősen eltérő döntést eredményeznek, akkor lehet, hogy megéri több energiát rászánni, hogy pontosabb adatokat gyűjtsünk. Ha minden változtatás ugyanahhoz a döntéshez vezet, akkor a felhasználó biztos lehet, hogy ez a helyes döntés. Az érzékenységvizsgálat különösen fontos lehet, mivel az egyik fő kritikája a szakértői rendszerek valószínűségi megközelítésének, hogy nagyon nehéz a szükséges numerikus valószínűségek megbecslése. Az érzékenységvizsgálat gyakran kimutatja, hogy sok numerikus értéket elég közelítőleg meghatározni. Például bizonytalanok lehetünk a P(tachycardia) a priori valószínűségben, de ha kipróbálunk különböző értékeket erre a valószínűségre, és minden egyes esetben a javasolt cselekmény a hatásdiagram alapján ugyanaz, akkor kevésbé kell foglalkoznunk ezzel az ismerethiánnyal.
6	0.1	1	Stratégiailag fontos pontoknak számítanak a pálya két legközelebbi csúcsa közti pontok. Melyek nagy előnyt jelenthetnek a játék folytatásában. Ezek nagyon jó helyen vannak ahhoz, hogy csatlakozást hozhassunk létre a legközelebbi saját szélünkhöz, és blokkoljuk az ellenfelünket a saját széle felé. Ugye egy páratlan oldalszámú pályának van mondhatni abszolút középpontja, mely egyértelmű előnyt adhat az első játékosnak. Emiatt ha azt lépi az első játékos és érvényes a cserélő szabály, a második játékos valószínűsíthetőleg meg fogja cserélni a színeket, hogy övé legyen ez a nagyon fontos lépés.
18	0.052632	0	Az ágens előtt álló tanulási folyamat meghatározásában rendszerint a visszacsatolás jellege a legfontosabb faktor. A gépi tanulás területén általában három esetet különböztetnek meg: ellenőrzött (supervised), nem ellenőrzött (unsupervised) és megerősítéses (reinforcement) tanulást.
23	0.444444	0	Egy másik lehetséges megközelítés az eredményhalmaznak egy rendezett lista helyett egy címkézett faként történő prezentálása. A dokumentumosztályozás (document classification) során az eredményeket egy előre definiált témakör-taxonómiának megfelelően osztályozzuk. Például újsághírekből álló gyűjteményt a következő kategóriákba lehet sorolni: külföldi, belföldi, üzleti hírek, szórakozás és sport. Dokumentumklaszterezés (document clustering) esetén minden eredményhalmazra teljesen új kategóriafa készül. Az osztályozás akkor használható, ha a gyűjteményben kevés számú témakör található, míg a klaszterezést a világhálóhoz hasonló széles körű gyűjtemények esetén érdemes használni. Mindkét esetben, miután a felhasználó megad egy lekérdezést, az eredményhalmazt a kategóriáknak megfelelő mappákba rendezve kapja meg.
12	0.571429	0	A  ábra a Folytonos-RRT-Ágens-t mutatja be. Ennek ciklusa az „érzékelés, eltávolítás a folyamatból, cselekvés”. Tudásbázisában egy állandó tervet tart, és minden lépésben eltávolít egy folyamatot ebből a tervből. Ezután cselekszik (bár gyakran ez a cselekvés a NoOp) és ismétli a ciklust. Ez az ágens az  szakasz - Végrehajtás monitorozása és újratervezése részben tárgyalt újratervező ágenshez felsorolt problémák nagy részét képes kezelni. Nevezetesen valós időben cselekszik, kezeli a kedvező helyzeteket, saját célokat fogalmaz meg, és kezeli a váratlan eseményeket, melyek a jövőbeli terveket érintik.  ábra - A Folytonos-RRT-Ágens, egy folytonos, részben rendezett tervkészítő ágens. Egy érzékelés után az ágens eltávolít egy lépéssorozatot a folytonosan javított tervéből, és visszaad egy cselekvést. Gyakran számos cselekvéssor-eltávolító tervkészítési lépésre van szükség, mialatt csak a NoOp-ot adja vissza, mielőtt készen állna egy valós cselekvés végrehajtására. A Folytonos-RRT-Ágens, egy folytonos, részben rendezett tervkészítő ágens. Egy érzékelés után az ágens eltávolít egy lépéssorozatot a folytonosan javított tervéből, és visszaad egy cselekvést. Gyakran számos cselekvéssor-eltávolító tervkészítési lépésre van szükség, mialatt csak a NoOp-ot adja vissza, mielőtt készen állna egy valós cselekvés végrehajtására.
19	0.727273	0	(Vegyük észre, hogy a Szülője-t definiáló klózzal a háttértudás már rendelkezik.) E három eset közül az első az összes 12 pozitív példát helytelenül negatívnak sorolja be, így ezt az esetet kizárjuk. A második és a harmadik az összes pozitív példával összhangban van. A második eset azonban a negatív példák nagyobb halmazán – pontosabban kétszer annyi példán – helytelen, mert az anyákat és az apákat is megengedi. Így a választásunk a harmadik esetre esik.
6	0.1	1	A kölcsönös tudás e két definíciója ekvivalens (ámbár az utóbbi sokkal használhatóbb, mint az előbbi, amely viszont intuitívebb). Például előbb az E={a,c,e,g} esemény kölcsönös tudás volt az a világállapotban, hiszen E nyilvánvaló volt mindhárom ágens számára, avagy az E eseménynek nem volt olyan további F részeseménye, amely nyilvánvaló lett volna mindhárom ágens számára, viszont F=E esetén a eleme F-nek. Tehát E={a,c,e,g} esemény kölcsönös tudás a fenti második definíció értelmében.
10	0.363636	0	Az eseménykategória fogalma segít megválaszolni azt a kérdést, amit igyekeztünk elkerülni, amikor a  alfejezetben a cselekvések hatásairól beszéltünk. Mire hivatkoznak pontosan az olyan logikai termek, mint a Megy([1, 1], [1, 2])? Események ezek?  ábra - Általánosított események. Az univerzumnak térbeli és időbeli dimenziója van. Ezen az ábrán csak egy térbeli dimenziót mutatunk. Minden esemény az univerzum Része. Az olyan esemény, mint a MásodikVilágHáború a tér-idő egy tartományában történik, melynek határai kissé szabadon választhatók, és időben változók. Egy Intervallum, mint amilyen a HuszadikSzázad, rögzített és korlátos időbeli, valamint maximális térbeli kiterjedéssel rendelkezik. A Hely, amilyen például Ausztrália, nagyjából rögzített térbeli és maximális időbeli kiterjedéssel rendelkezik. Általánosított események. Az univerzumnak térbeli és időbeli dimenziója van. Ezen az ábrán csak egy térbeli dimenziót mutatunk. Minden esemény az univerzum Része. Az olyan esemény, mint a MásodikVilágHáború a tér-idő egy tartományában történik, melynek határai kissé szabadon választhatók, és időben változók. Egy Intervallum, mint amilyen a HuszadikSzázad, rögzített és korlátos időbeli, valamint maximális térbeli kiterjedéssel rendelkezik. A Hely, amilyen például Ausztrália, nagyjából rögzített térbeli és maximális időbeli kiterjedéssel rendelkezik.
18	0.736842	1	- megállapították valamilyen anyagról (sugárzásról, eszközről stb.), hogy betegséget, pl. rákot okoz, hiszen azok közül, akik ilyen anyagot tartalmazó élelmiszert fogyasztottak, tizenheten meghaltak rákban
25	0.407407	1	Az összefüggés meghatározása érdekében, legyen P[5] a P[4] végpont merőleges vetülete a P[1]P[2] szakaszra (vagy meghosszabítására), d jelölje P[4]P[5] szakasz hosszát, végül a P[6] pontot úgy vegyük fel, hogy P[3]P[6]P[4] egyenlőszárú háromszög legyen. Ekkor a P[3]X[2]X[1] és a P[4]P[5]P[6 ]háromszögek hasonlóságát felhasználva:
6	0.1	1	A digitális számítógép feltalálása után, az 1950-es években komoly energiát fektettek a sakkprogramok kutatásába és fejlesztésébe. A 70-es években a szakértők komolyan aggódni kezdtek a sakk gépek térhódítása miatt, és potenciális veszélynek érezték, hogy egy gép már legyőzheti az embert. 1978-ban David Levy - miután megverte a Chess 4.7-et – az akkori legerősebb sakk számítógépet – kijelentette, hogy az elkövetkező tíz évben sem lesz olyan gép, ami megverné őt. Pontosan tíz évet kellett várnia, hogy a Deep Thought sakkprogram legyőzze, 1996-ban pedig Kaszparov is kikapott a Deep Blue programtól, majd pár évre rá Kramnyik is vereséget szenvedett a Deep Fritztől. A korszakok bajnokait sorra őrölte fel a technika. [2]
10	0.818182	0	Ennek két minimálmodellje van: {P} és {Q}. Az elsőrendű logika szemszögéből van ennek értelme, mivel a P ⇐ ¬Q a P ∨ Q-val ekvivalens. A Prolog szemszögéből azonban aggódni kellene: Q soha nem jelenik meg a nyíl bal oldalán, hogyan lehet hát egy következmény?
13	0.909091	0	Pascal többféleképpen használta a valószínűség fogalmát, így igényelte mind az objektivista értelmezést – amely szerint a valószínűség a világhoz tartozó, szimmetrián vagy relatív gyakoriságon alapuló sajátság –, mind pedig a valószínűség meggyőződési mértéken alapuló szubjektív megközelítését: előbbit a szerencsejátékokra vonatkozó valószínűség elemzéseiben, míg az utóbbit a híres pascali fogadás érvelésében Isten létezése vagy nemléte kapcsán. Mindemellett, Pascal nem látta világosan a két megközelítés közötti különbséget. Ezt jól érthetően először James Bernoulli (1654–1705) fogalmazta meg.
26	0.214286	0	Először is Gödel nemteljességi tétele csak olyan formális rendszerekre vonatkozik, amelyek elég erősek az aritmetikához. Ezek közé tartozik a Turing-gép is, és Lucas állítása részben azon a feltételezésen alapul, hogy a számítógépek Turing-gépek. Ez jó közelítés, ám nem teljesen igaz. A Turing-gépek végtelenek, a számítógépek azonban végesek, és ezért bármely számítógépet le lehet írni egy nagyon nagy logikai állításrendszerrel, amelyre már nem vonatkozik Gödel nemteljességi tétele.
12	0.142857	0	Az egyik legelterjedtebb módszer a komplexitás kezelésére a hierarchikus dekompozíció (hierarchical decomposition). Az összetett szoftvereket szubrutinok vagy objektum osztályok hierarchiájából építik fel, a hadseregek különböző egységek hierarchiái, a kormányok és cégek igazgatóságokból, osztályokból és alosztályokból állnak. A hierarchikus struktúra fő előnye, hogy a hierarchia minden szintjén egy számítási feladat, egy hadművelet vagy egy adminisztratív feladat az eggyel alatta lévő szint néhány cselekvésére épül, így e cselekvések megfelelő elrendezése a magasabb szinten lévő feladat megoldásához kis számítási költséggel jár. Másrészről a nem hierarchikus módszerek a feladatot nagyszámú, független cselekvésre bontják fel, ami nagy léptékű feladatok esetén egyáltalán nem praktikus. A legjobb esetben – amikor a magas szintű megoldásokhoz mindig kielégítő alacsony szintű megvalósítás tartozik – a hierarchikus megoldások az exponenciális idejű tervkészítő algoritmusokkal szemben lineáris időre vezetnek.
24	0.833333	1	Az EBR a kép éleit használja fel érdekes régiók, foltok kijelölésére. Bemenetként használhatja például a Canny detektor eredményét. A régió keresés két él metszéspontjából indul ki. A vizsgált régiók olyan parallelogrammák, melyeknek egyik csúcsa a két él metszéspontja, az ezzel szomszédos két csúcsa pedig a két élen helyezkedik el egy speciális távolságmérték szerint egyenlő távolságra a metszésponttól. A parallelogrammák akkor minősülnek érdekes régiónak, ha egy meghatározott textúra mérőszámot minimalizálnak, vagy maximalizálnak. A módszer előnye, hogy a parallelogrammáknak köszönhetően a régiók affin transzformációra invariánsak, feltéve, hogy mindkét felvételen látszik ugyan az a két metsző él.  ábra - Az EBR által megtalált régiók. (forrás: 24.5. szakasz - Hivatkozások) Az EBR által megtalált régiók. (forrás: 24.5. szakasz - Hivatkozások)
26	0.857143	0	A modern analitikus filozófia általában elfogadja a materializmust (gyakran az agyállapot-azonosság elmélet (identity theory) formájában [Place, 1956; Armstrong, 1968], ami szerint a mentális állapotok azonosak az agyi állapotokkal), de sokkal megosztottabb a funkcionalizmust, az emberi elme gépi analógiáját tekintve, valamint abban a kérdésben, hogy szó szerinti értelemben véve tudnak-e gondolkodni a gépek. Turing (Turing, 1950) Computing Machinery and Intelligence c. cikkére adott korai filozófiai válaszok egy része, például Scriven (Scriven, 1953), megpróbálta cáfolni, hogy értelmes lenne azt mondani, hogy a gépek gondolkodhatnak, arra alapozva, hogy ez sértené a szó jelentését. Ezt a nézetet, legalábbis Scriven, cikkének újranyomásához illesztett függelékének tanúsága szerint 1963-ra visszavonta (Anderson, 1964). A számítástechnika-kutató Edsger Dijkstra szerint „Az a kérdés, hogy tud-e egy gép gondolkodni, nem érdekesebb annál, hogy tud-e úszni egy tengeralattjáró.” Ford és Hayes (Ford és Hayes, 1965) amellett érvelnek, hogy a Turing-teszt semmi segítséget sem nyújt a mesterséges intelligencia számára.
5	0.090909	0	A diszkrét változók lehetnek végtelen tartományúak is: például ilyen az egész számok halmaza vagy a füzérek halmaza. Például amikor egy építkezési munka naptárát ütemezzük, minden feladat kezdési ideje egy változó, amelyeknek lehetséges értékei az aktuális dátum napjait megadó egész számok. Végtelen tartományok esetén már nem lehet a kényszereket a megengedett értékkombinációk felsorolásával leírni. Ehelyett egy kényszernyelvet (constraint language) kell használni. Például ha Munka[1] öt napig tart, és meg kell előznie Munka[3]-t, akkor kényszernyelvként az algebrai egyenlőtlenségek nyelvére van szükségünk, mint például KezdMunka[1] + 5 ≤ KezdMunka[3]. Továbbá az ilyen kényszereket többé már nem lehet megoldani az összes lehetséges hozzárendelés felsorolásával, mert végtelen sok van belőlük. Különleges megoldó algoritmusok (melyekre itt nem térünk ki) léteznek egész értékű változók lineáris kényszereire, azaz olyan kényszerekre, mint a fenti, ahol mindegyik változó csak lineáris műveletekben jelenik meg. Megmutatható, hogy nem létezhet algoritmus egész értékű változók általános nemlineáris kényszereinek megoldására. Néhány esetben az egész értékű kényszerproblémák egyszerűen azzal visszavezethetők véges tartományúakra, hogy korlátozzuk az összes változó értékeit. Egy ütemezési problémában például egy felső korlátot szabhatunk az összes ütemezendő munka teljes hosszára.
14	0.869565	1	Fontos: az utasítássor szerkezetében a hozzárendelés (= egyenlőségjel) jelének bal oldalán általában a kiszámításra, megadásra kerülő változó neve szerepel, míg jobb oldalán az hozzárendelés leírás. Ha a baloldali változónevet nem adjuk meg, akkor a hozzárendelés eredménye az ans nevű mátrixban helyezi el, amit ezen a néven hívhatunk, amíg felül nem írj azt egy hasonló számítás.
4	0.958333	1	Az informatikában kezdetektől az egyik fontos kutatási irányzat, hogy az élőlények rendkívül hatékony információ-feldolgozó működését technikai eszközökkel, (számítógépekkel) utánozzuk. Az egyik –máig domináns- modell a digitális modell, melyben az univerzálisan programozható számítógépek végzik az információ feldolgozást. A másik kezdetektől ígéretes megközelítésben az élőlények –lényegileg nem bináris- működése szolgáltatja a mintát. E biológiai indíttatású informatikának új neve is kialakult „lágy számítási modellek” (Soft computing) néven, mely irányzat egyik fontos fókuszpontja az élőlények alkalmazkodását (egyben a faj fennmaradását) szolgáló genetikus folyamatok átültetése számítógépes programokba. A természetes genetikus folyamatok lényege, hogy az élőlényre vonatkozó legtöbb információ (ami a szervezetésének felépítését, működését, és gyakran az élőlény viselkedését is meghatározza) a sejtek örökítő anyagaiban (DNS, RNS) rögzített, és az utódok létrehozása során az utódoknak átadódik (átörökítődik). Az utódok létrehozását célzó infomáció-feldolgozó folyamat a környezethez legjobban alkalmazkodó egyed kiválasztását szolgáló kereső algoritmusként is felfoghatók, és főbb elemei mesterséges genetikus algoritmusok formájában digitális számítógépre is átültethetők. Az előadás bemutatja a genetikus folyamatok algoritmikus szemléletét, technikai alkalmazásának feltételeit és folyamatát. Kitér a probléma ábrázolására mesterséges kromoszóma formájában, a populáció létrehozásnak szempontjaira és lehetséges megoldásaira, valamint az új egyed létrehozására szolgáló „szülő”-kiválasztó („elitista” és „rulett kerék”) és információ módosító algoritmusaira (keresztezés, mutáció,…. stb.)
1	0.241379	0	Most, hogy van már elképzelésünk arról, hogy az elme formális, racionális részét milyen elvek alapján lehet leírni, a következő lépésként az elmét fizikai rendszernek tekintjük. René Descartes (1596–1650) elemezte először világosan az elme és az anyag közötti különbséget és az ebből adódó problémákat. Az elme tiszta fizikai megközelítésének egyik problémája az, hogy kevés helyet hagy a szabad akarat számára. Ha az elmét csupán fizikai törvények uralják, nincs több szabad akarata mint egy sziklának, amely „eldönti”, hogy a föld középpontja felé fog esni. Annak ellenére, hogy Descartes a következtetés hatalmának szószólója volt, ő volt az is, aki a dualizmust (dualism) javasolta. Azt tartotta, hogy az elmének (vagy a léleknek) van olyan része, amely nem része a természetnek és nem alanya a fizikai törvényeknek. Ezzel szemben úgy érezte, hogy az állatok nélkülözik ezt a dualista természetet, lényegében gépeknek tekintendők. A dualizmus alternatívája a materializmus (materialism), amely azt tartja, hogy éppen az agynak a fizikai törvények szerinti működése valósítja meg az elmét. A szabad akarat nem más, mint az a mód, ahogyan a választási lehetőségek észlelése a döntési folyamat számára megjelenik.
25	0.148148	1	E témakörben megkülönböztetünk durva és finom pályatervezést. Durva pályatervezés esetén a cél a pálya főbb sarokpontjainak megtalálása, míg finom pályatervezéskor (a durva pályatervezés eredményét felhasználva, két sarokpont között) az összes izületre a lehető legfinomabban lebontva kell leírni a bejárandó utat. A pályatervezés készülhet előre ismert, részben ismert, vagy teljesen ismeretlen munkakörnyezetet feltételezve. Az akadályok elhelyezkedése lehet statikus, vagy időben változó. Ha előírásaink vannak az útvonalon kívül még az időbeli ütemezésre is, trajektória-tervezésről beszélünk. Más szempontokat figyelembe véve, szintén megkülönböztethetünk valós időben történő és egylépéses pályatervezést aszerint, hogy az útvonaltervezést csak egy egységnyi távolságra végezzük el, majd rögtön végrehajtjuk, vagy az egész útra előre megtervezzük az útvonalat, s azt a végrehajtás során már nem módosítjuk.
5	0.181818	1	Ezek után a WA változó értékkészlete {RED, GREEN, BLUE}-ról {RED, GREEN} redukálódott, az NT változó értékkészlete {RED, BLUE}-ról csupán {RED}-re, míg a V változó értékkészlete {GREEN, BLUE}-ról {GREEN}-re.
4	0.291667	0	A heurisztikus függvény minősítésének egyik lehetséges módja a b^* effektív elágazási tényező (effective branching factor) megadása. Amennyiben az A^* algoritmus által kifejtett összes csomópont száma egy adott problémára N, és a megoldás mélysége d, akkor b^* annak a d mélységű kiegyensúlyozott fának az elágazási tényezőjével egyezik meg, amely N + 1 csomópontot tartalmazna. Ebből adódóan:
3	0.291667	0	Fontos visszaidéznünk a csomópontok és az állapotok közti különbséget. A csomópont egy adatnyilvántartásra használt adatszerkezet, amit egy keresési fa leírására használunk. Egy állapot a világ egy konfigurációja. Így a csomópontok a Szülő-Csomópont mutatók által definiált meghatározott úton találhatók, míg az állapotok nem. Továbbá könnyen előfordulhat, hogy két különböző csomópont egyazon állapotot tartalmaz, ha ezt az állapotot két különböző cselekvéssorozattal generálták le. A csomópont-adatstruktúrát a  ábra mutatja.  ábra - A keresési fa alapvető építő adatstruktúrái a csomópontok. Minden csomópontnak van szülője, állapota és számos adminisztráló adatmezeje. A nyilak a gyerekektől a szülőkig mutatnak. A keresési fa alapvető építő adatstruktúrái a csomópontok. Minden csomópontnak van szülője, állapota és számos adminisztráló adatmezeje. A nyilak a gyerekektől a szülőkig mutatnak.
23	0.277778	0	A legkorábbi IR-rendszerek a Boole-kulcsszó modell (Boolean keyword model) szerint működtek. A dokumentumgyűjtemény minden egyes szavát úgy kezelik, mint egy Boole-tulajdonságot, amely igaz, ha a szó előfordul a dokumentumban, és hamis, ha nem. Azaz a „visszakeresés” tulajdonság igaz erre a fejezetre, de hamis a  fejezetre. A lekérdezőnyelv a tulajdonságok feletti logikai kifejezések nyelve. Például az [információkeresés ÉS lekérdezés] lekérdezés igaz erre a fejezetre, de nem igaz a  fejezetre.
24	0.625	0	A poliéderes jelenetelemzéssel először Huffman és tőle függetlenül Clowes próbálkoztak (Huffman, 1971; Clowes, 1971). Huffman és Clowes elemzésüket a nem átlátszó triéderes (trihedral) testekből – azaz olyan testekből, amelyeknél mindegyik sarokpontjánál pontosan három felület fut össze – álló jelenetek esetére korlátozták. A több objektumot tartalmazó jelenetek esetén kizárták a triéderes feltételt megsértő objektumkonfigurációkat is, mint amilyen például az egyik élük mentén érintkező két kocka. Nem engedték a repedéseket (cracks) sem, azaz olyan „éleket”, amelyek mentén a tangenciális síkok folytonosan változnak. A triéderes világban Huffman és Clowes kimerítő listát adtak az összes különböző sarokponttípusról meg arról is, hogy azok hogyan látszhatnak általános nézőpontból szemlélve. Az általános nézőpont feltétel lényegében azt tételezi fel, hogy az összes csatlakozás megtartja a jellegét, ha a szem csak kissé mozdul el. Ha például a képen három vonal metszi egymást, akkor a feltételből következik, hogy a jelenet hozzájuk tartozó éleinek szintén metszeniük kell egymást.  ábra - A triéderes csúcsok négy fajtája A triéderes csúcsok négy fajtája
12	0.714286	0	Ez a reprezentáció a többtörzsű problémakörökhöz alkalmazott, részben rendezett tervkészítővel ekvivalens. Kiterjeszthetnénk ezt a megközelítést az utolsó két fejezet finomításaival – HFH-ek részleges megfigyelhetőség, feltételek, végrehajtás-monitorozás és újratervezés –, de ez túlmutat a könyv célkitűzésein.
9	0.448276	1	Visszatértek az SL-rezolúcióhoz. Hasonlóan működött a dolog, mint egy általános programozási nyelv procedúra kezelése esetén, attól eltekintve, hogy nem elmentették és visszatöltötték az állapotokat, hanem egy nem-determinisztikus backtrack módszert használtak a visszatéréshez, amit még Robert Floyd fejlesztett ki 1967-ben. Az SL-rezolúció lett az alapköve Roussel azon tézisének, hogy miként kéne kezelni a formális egyenlőségeket az automatizált tételbizonyítás során. A formális egyenlőség azért fontos dolog, mert ugyan kevésbé kifejező, mint a hagyományos, de ugyanakkor hatékonyabb. Roussel be akarta vezetni a dif predikátumot már a Prolog legelső verziójába [12].
15	0.703704	0	A P(jel|szavak) alkotják az ún. akusztikai modellt (acoustic model). Ez írja le a szavak hangzását – a „ceiling (mennyezet)” egy lágy „c”-vel kezdődik és ugyanúgy hangzik, mint a „sealing (pecsételés/tömítés/fókavadászat)”. (Az azonos hangzású szavakat homofon (homophone) szavaknak nevezzük.) A P(szavak) értékei képezik az ún. nyelvi modellt (language model). Ez adja meg az a priori valószínűségét minden egyes kijelentésnek – például hogy a „magas mennyezet (high ceiling)” sokkal valószínűbb szókapcsolat, mint a „magas pecsételés (high sealing)”.
20	0.857143	0	Egy 25 000 szupport vektort használó szupport vektor gép (support vector machine) (lásd  alfejezet) 1,1% hibaarányt ért el. Ez azért figyelemre méltó, mert az SVM-technika – éppúgy mint az egyszerű legközelebbi-szomszéd megközelítés – szinte nem igényelt gondolkodást vagy iteratív kísérletezést a fejlesztőtől, mégis az évekig fejlesztett LeNet-et megközelítő eredményt ért el. A szupport vektor gépek valójában nem használják ki a probléma struktúráját, tehát ugyanolyan jól teljesítenének, ha a pixeleket valamilyen permutált sorrendben használnánk.
12	0.047619	0	Az ötlet az, hogy az ES(Indít) értékének 0-ra állításával indítunk. Ezután, amint elérünk egy olyan B cselekvést, hogy minden cselekvés, ami közvetlenül B előtt jön, már rendelkezik ES értékekkel, az ES(B) értéket a közvetlenül megelőző cselekvések közül a legkorábbi befejezési idő maximumára állítjuk be, ahol a legkorábbi befejezési időt úgy definiáljuk, mint a cselekvés kezdési időpontja plusz a cselekvés időtartama. A folyamat addig folytatódik, amíg minden cselekvéshez egy ES értéket rendelünk. Az LS értékeket hasonlóképpen számítjuk ki a Befejez cselekvéstől visszafelé haladva. A részleteket egy későbbi feladat tartalmazza.
6	0.2	0	A minimax algoritmus (minimax algorithm) ( ábra) az optimális döntést az aktuális állapotból számítja ki, felhasználva az egyes követő állapotok minimax értékeinek kiszámítására a definiáló egyenletekből közvetlenül származtatott, egyszerű rekurzív formulát. A rekurzió egészen a falevelekig folytatódik, majd a minimax értékeket a fa mentén visszafelé terjesztjük (back-up), ahogy a rekurzió visszalép. A  ábrán például az algoritmus először rekurzív módon leereszkedik a három bal alsó csomóponthoz, a Hasznosság függvénnyel kiszámítva, hogy az értékek rendre 3, 12, és 8. Majd az algoritmus előveszi ezen értékek minimumát, azaz 3-t, és ezt adja vissza, ahogy a B csomóponthoz visszatér. Hasonló procedúra eredményezi a további visszaadott értékeket: 2-t a C és 2-t a D csomópont számára. Végül vesszük a 3, 2 és 2 értékek maximumát, hogy a gyökér által visszaadott 3-as értéket megkaphassuk.
13	0.590909	0	Ezt a folyamatot marginalizálásnak (marginalization) vagy kiátlagolásnak (summing out) hívjuk, mivel a Lyuk-on kívüli változókat „kiátlagoljuk”. A következő általános behatárolási szabályt fogalmazhatjuk meg a változók tetszőleges Y és Z halmaza esetén:
7	0.12	0	Amikor szükséges, hogy pontosak legyünk, a modell (model) kifejezést fogjuk használni a „lehetséges világ” helyén. (Szintén használni fogjuk az „m modellje α-nak” kifejezést, ami azt jelenti, hogy az α mondat igaz az m modellben.) Miután a lehetséges világokat úgy képzelhetjük el, mint (potenciálisan) valós környezeteket, amelyekben az ágens ott lehet vagy nem lehet ott, a modellek olyan matematikai absztrakciók, amelyek csak rögzítik az igazság vagy hamisság értékét minden releváns mondatnak. Például, tegyük fel, hogy x és y a férfiak és nők száma, akik egy kártyaasztal körül ülnek és bridzset játszanak, és az x + y = 4 mondat igaz, amikor négyen vannak összesen. Formálisan, a lehetséges modellek nem mások, mint minden lehetséges hozzárendelés az x és y változókhoz. Minden ilyen hozzárendelés bármely olyan aritmetikai mondat igazságát rögzíti, amely az x és y változókat tartalmazza.
5	0.181818	1	A táblázatból jól látható, hogy az előbbiekben értékkészlet-szűkített három változó jön csak számításba: Q, SA, vagy pedig V. Tegyük fel, hogy az algoritmus ezek közül a Q-t választja, és ezt helyettesíti be az első lehetséges értékre, azaz GREEN-re (Q=GREEN).
20	0.535714	0	A k-legközelebbi-szomszéd tanulási algoritmus nagyon egyszerűen megvalósítható, kevés hangolást igényel, és gyakran elég jól működik. Jó dolog, ha először egy új tanulási problémán próbáljuk ki. Mindazonáltal nagy adathalmazokban hatékony mechanizmust kell találnunk arra, hogy a kérdéses x pont legközelebbi szomszédjait megtaláljuk, hiszen túl hosszú lenne minden pontra kiszámítani a távolságot. Egy sor szellemes, a tanító adatok előfeldolgozásán alapuló módszert javasoltak ennek a lépésnek a hatékonynyá tételére. Szerencsétlen módon a legtöbb ilyen módszer nem viselkedik jól a tér dimenziójának növekedésével (azaz a tulajdonságok számának növekedésével).
25	0.703704	1	Az off-line feladatleírás ugyanakkor nem zárja ki az on-line programozás („mutatva tanítás") előnyeinek felhasználását. Azokat a pályapontokat, amelyeknek definiálása nehézkes lenne, a robot rávezetésével lehet definiálni – az előre megírt robotprogramban ezek a pontok szimbolikus nevükkel szerepelnek. Ezzel a módszerrel lehetőség van a menet közbeni programmódosításra és az érzékelés útján történő koordináta-meghatározásra is.
15	0.666667	0	A részecskeszűrés így konzisztens, de hatékony-e? A gyakorlat azt mutatja, hogy a válasz igen: a részecskeszűrés, úgy tűnik, az igazi a posteriori eloszlás egy jó közelítését tartja fenn állandó számú mintát használva. Azonban jelenleg nincs elméleti garancia; a részecskeszűrés jelenleg aktívan kutatott terület. Számos javítást és változatot javasoltak, és az alkalmazások köre is egyre bővül. Mivel ez egy mintavételező algoritmus, a részecskeszűrés könnyen felhasználható hibrid és folytonos DBH-kban, lehetővé téve az alkalmazását akár olyan területeken is, mint komplex mintázatok követése videofelvételben (Isard és Blake, 1996) és tőzsdei előrejelzés (de Freitas és társai, 2000).
10	0.848485	0	ahol P-t előfeltételnek, C-t konkluziónak és a J[i]-ket igazolásoknak nevezik – ha ezek közül bármelyik igazolhatóan hamis, a konklúziót levonni nem szabad. A C-ben és a J[i]-ben előforduló minden változónak P-ben is meg kell jelennie. A Nixon-gyémánt példáját alapértelmezett logikában egy ténnyel és két alapértelmezett szabállyal fejezhetjük ki:
5	0.181818	1	Az anyag második felében egy komplexebb, informálisan adott feladat KKP problémaként való modellezésével, és megoldásával foglalkoztunk. Áttekintettük az anyag első felében foglalt módszerek, következtetési eljárások, és heurisztikák futási időre és lépésszámra gyakorolt hatását egy Java-nyelvű referencia implementáció felhasználásával. A vizsgált módszerek közül egyértelműen az AC3 és/vagy MAC következtetési algoritmussal kiegészített visszalépéses mélységi keresés tűnt ki mind sebesség, mind pedig lépésszám tekintetében.
25	0.074074	1	A lépegető robotok kutatása az utóbbi években a kétlábúak felé fordult. A leghíresebb kétlábú robot a HONDA (Hirai). A 11 éves kutatássorozat célja olyan intelligens és mobilis berendezés létrehozása volt, amely képes az ember mellett tevékenykedni, olyan jellemzőket mutat, amelyekre az ember nem képes és a mozgása új értéket jelent az egész emberiségnek.  ábra - HONDA robot (Hirai) HONDA robot (Hirai)
24	0.833333	1	Esetenként önmagukban is alkalmasak alakzat felismerésre, követésre, szegmentálásra – például a hisztogram szegmentálására – és textúra analízisre. Affin transzformációkra kiinduló állapotukban nem invariánsak, de azzá tehetők a detektorok megfelelő torzításával.
21	0.125	1	Az ebbe a kategóriába tartozó algoritmusok azt a mintát választják címkézésre, melyek a leginkább csökkentik a modell várható hibáját. A címkézett L mintahalmaz ismeretében nézzük a (L U <x,y>) halmaz várható hibáját a nem címkézett U halmazra vonatkoztatva:
25	0.592593	0	ahol X[t] a robotkar t időpontbeli állapota. K[P] a szabályozó úgynevezett erősítési tényezője (gain parameter), ami azt határozza meg, hogy milyen hevesen reagál a szabályozó az aktuális x[t] állapot és a kívánt y(t) között lévő eltérésre. A példánkban K[P] = 1. Első pillantásra azt gondolhatja valaki, hogy ha K[P]-t kis értékűre választjuk, akkor az megoldja a problémát. Sajnos nem így van. A  (b) ábrán látható K[P] = 0,1 esetben a trajektória, amely továbbra is oszcillál. A kisebb erősítési tényező csak lelassította az oszcillációt, de egyáltalán nem oldotta meg a problémát. Ha elhanyagoljuk a súrlódást, a P szabályozó tulajdonképpen egy rugó, és a végtelenségig oszcillál a rögzített egyensúlyi pont körül.
22	0.074074	0	Az NP, a VP és az S kategóriák úgynevezett nem záró szimbólumok (nonterminal symbols). A nyelvtanok átíró szabályok (rewrite rules) segítségével definiálják a nem záró szimbólumokat. Az átíró szabályok leírására a Backus–Naur-formát (BNF) fogjuk átvenni, amelyet a B) függelékben írunk le az B.1. szakasz - B1. Nyelvek definiálása Backus–Naur-Formában (BNF) részben. Ezen jelölés szerint egy
4	0.166667	0	Az EMA^* teljes, ha van egyáltalán elérhető megoldás – azaz ha D, a legsekélyebb célcsomópont mélysége kevesebb, mint a memória nagysága (csomópontokban kifejezve). Optimális, ha van elérhető optimális megoldás, másképpen az algoritmus a legjobb elérhető megoldással tér vissza. Gyakorlatilag az EMA^*-t messze a legjobb általánosan használatos algoritmusnak lehet tekinteni az optimális megoldások megkeresésére, különösképpen ha az állapottér egy gráf, a lépésköltség nem egyenletes, és a csomópontkifejtés drága a nyitott és zárt listák karbantartásának pótlólagos overheadjéhez képest. Fontos Nagyon nehéz problémák esetén azonban az EMA^* sokszor kénytelen folyamatosan oda-vissza kapcsolgatni a lehetséges megoldási utak között, amelyekből csak kevés fér be a memóriába (hasonló ez a diszkalapú memória lapozó rendszer vergődési (thrashing) problémájára). Az ugyanazon csomópontok ismételt újrakifejtéséhez szükséges extra idő azt jelenti, hogy azok a problémák, amelyeket a végtelen memóriájú A^* gyakorlatilag meg tudna oldani, az EMA^* számára kezelhetetlenek. Ez azt jelenti, hogy memóriakorlát a problémát a számítási idő szempontjából kezelhetetlenné teheti. Bár a memória és az idő közötti kompromisszum magyarázatára nincs elmélet, úgy tűnik, hogy ettől a problémától megmenekülni nem lehet. Egyetlen kiút elvetni az optimalitás követelményét.
14	0.73913	1	A fenti szabály az adott tanítási adatpárban szereplő ismeretet rögzíti. Nevezetesen ha a vízhozam aktuális értékével tagja az A1 halmaznak, hasonlóan a hőmérséklet a B3 halmaznak, valamint a lebegőanyag-tartalom a C5 halmaznak, akkor a kimeneti változó, a foszfor koncentrációjának értéke a D1 halmaznak lesz a tagja.
15	0.666667	0	Az algoritmus részletesen a  ábrán látható, és működését az esernyős DBH esetén a  ábra szemlélteti.  ábra - A részecskeszűrés algoritmus megvalósítása egy rekurzív frissítési művelettel és állapottal (ami a minták halmaza). A mintavételező lépések mindegyike az aktuális szelet változóinak a mintavételezését jelenti egy topológiai sorrendben, hasonlóan, mint a Prior-Minta-ban. A Súlyozott-Minta-Visszatétellel művelet megvalósítható O(N) várható futási idővel. A részecskeszűrés algoritmus megvalósítása egy rekurzív frissítési művelettel és állapottal (ami a minták halmaza). A mintavételező lépések mindegyike az aktuális szelet változóinak a mintavételezését jelenti egy topológiai sorrendben, hasonlóan, mint a Prior-Minta-ban. A Súlyozott-Minta-Visszatétellel művelet megvalósítható O(N) várható futási idővel.
15	0.666667	0	A  fejezet két következtető módszert írt le: a valószínűségi súlyozást (lásd  ábra) és a Markov lánc Monte Carlo módszert (MCMC, lásd  ábra). A kettő közül az első igazítható legkönnyebben a DBH-keretbe. Látni fogjuk azonban, hogy egy gyakorlati módszer kialakulásához a standard valószínűségi súlyozó algoritmuson számos javításra van szükség. Fontos Emlékezzünk vissza, hogy a valószínűségi súlyozás a működése során a nem bizonyítékváltozókat mintavételezi azok topológiai sorrendjében, minden mintát azzal a valószínűséggel súlyozva, amennyire egyezik a megfigyelt bizonyítékváltozókkal. Ahogyan az egzakt közelítő algoritmusok esetében is, a valószínűségi súlyozást közvetlenül alkalmazhatnánk egy kibontott DBH-ra, de ugyanazok a problémák jelentkeznének, nevezetesen, hogy a megfigyeléssorozat növekedésével a frissítésenkénti idő- és tárigény növekedne. A probléma az, hogy az alapalgoritmus az egyes mintákat egymás után sorban végigfuttatja a háló teljes hosszában. Ehelyett egyszerűen az összes N mintát együtt futtathatnánk a DBH-n keresztül, szeletenként egyszerre haladva. (Azaz a mintavételeket az újragenerálás költségének elkerülése miatt nyilvántartanánk és fokozatosan frissítenénk – a ford.) A módosított algoritmus illeszkedik a szűrési algoritmus általános mintájához, az N mintával mint előrefelé üzenettel. Az első kulcsgondolat az, hogy ekkor a mintákat magukat használjuk az állapoteloszlás egy közelítő reprezentációjaként. Ez eleget tesz a frissítésenkénti „állandó” időigénynek, bár az állandó értéke a minták számától függ, aminek elég nagynak kell lenni a valódi a posteriori eloszlás elfogadható közelítéséhez. Szintén nincs szükség a DBH kibontására, mivel csak az aktuális és a következő szeletet kell memóriában tartani.
9	0.172414	0	Ez a következtetés elvégezhető egyetlen következtetési szabály alkalmazásával, amelyet általánosított Modus Ponensnek (Generalized Modus Ponens) nevezünk: a p[i], p′[i ]és q atomi mondatokra, amelyekre létezik olyan θ helyettesítés, hogy Helyettesít (θ, p′[i]) = Helyettesít (θ, p[i]) minden i-re, akkor:
13	0.545455	0	Nem mutatjuk be de Finetti elméletének bizonyítását, de mutatunk rá egy példát. Tegyük fel, hogy az 1. ágens meggyőződése megfelel a   egyenletnek. A  ábra azt mutatja, hogy ha a 2. ágens azt választja, hogy 4 dollárt tesz a-ra, 3 dollárt b-re és 2 dollárt ¬(a ⋁ b)-re, akkor az 1. ágens mindig veszíteni fog, függetlenül attól, hogy a vagy b fog bekövetkezni.  ábra - Mivel az 1. ágens meggyőződése nem következetes, ezért a 2. ágens tud úgy téteket tenni, amely a és b kimenetelétől függetlenül biztosítja, hogy az 1. ágens veszítsen Mivel az 1. ágens meggyőződése nem következetes, ezért a 2. ágens tud úgy téteket tenni, amely a és b kimenetelétől függetlenül biztosítja, hogy az 1. ágens veszítsen
15	0.814815	0	Az emberi kommunikációban való részvételhez egy gépnek a folytonos beszédet (continuous speech) kell felismernie, és nem pusztán egyedülálló szavakat. Azt gondolhatnánk, hogy a folytonos beszéd nem több, mint szavak sorozata, amelyek mindegyikére alkalmazhatjuk az algoritmust az előző fejezetből. Ez a megközelítés két ok miatt is bukásra van ítélve. Először is, már láttuk (a 15. szakasz - A legvalószínűbb sorozat megtalálása részben), hogy a legvalószínűbb szavak sorozata nem a legvalószínűbb együttes szósorozat. Például a Take the Money and Run (Fogd a pénzt és fuss) c. filmben a banki alkalmazott félreérti Woody Allen irkafirka bankrablási üzenetét, és azt „I have a gub (Nálam van a slukker)”-nak olvassa (az „I have a gun, vagyis „Nálam van a stukker” helyett – a ford.). Egy jobb nyelvi modell az „I have a gun”-t javasolná, mint aminek sokkal nagyobb a valószínűsége, még ha a legutolsó szó inkább „gub”-nak és nem „gun”-nak olvasható. A második probléma, amivel folytonos beszéd esetén szembesülnünk kell, a szegmentálás (segmentation) – annak az eldöntése, hogy hol van egy szónak a vége, és hol kezdődik a következő. Mindenki, aki megkísérelt egy idegen nyelvet megtanulni, méltányolni fogja a probléma nehézségét: először úgy tűnik, hogy a beszédben a szavak egybefolynak, majd fokozatosan tanulunk meg egyedi szavakat kiemelni a hangok egyvelegéből. Ebben az esetben az első benyomás korrekt: a spektrográfiai elemzés azt mutatja, hogy a folyamatos beszédben a szavak tényleg szünetek nélkül követik egymást. A szavak határait annak ellenére tanuljuk meg megkülönböztetni, hogy a szavakat nem választják szét csendszakaszok.
12	0.571429	0	Ebből a példából látható, hogy a folytonos tervkészítés nagyban hasonlít a részben rendezett tervkészítéshez. Minden iterációban az algoritmus talál valami tervsérülésnek (plan flaw) nevezett javítanivalót a tervben, és megjavítja. A részben rendezett tervkészítő algoritmus egy sérüléseltávolító algoritmusnak tekinthető, ahol a kétféle sérülés a nyílt előfeltétel és az okozati ütközés lehet. A folytonos tervkészítő ágens másrészről sérülések egy jóval szélesebb körét kezeli: * Hiányzó cél: az ágens eldöntheti, új célt vagy célokat ad a Befejez állapothoz. (Folytonos tervkészítésben értelmesebb lenne a Befejez állapot nevét Örökkévalóság-ra és az Indít-ét Aktuális-ra változtatni, de ragaszkodunk a hagyományokhoz.) * Nyílt előfeltétel: egy okozati kapcsolatot ad a nyílt előfeltételhez, egy meglévő vagy egy új cselekvést választva (mint a részben rendezett tervkészítőben). * Okozati ütközések: adott az  ok-okozati kapcsolat és a ¬p következményű C cselekvés. Válasszunk az ütközés feloldásához egy rendezési megkötést vagy egy változómegkötést (mint a részben rendezett tervkészítésben). * Nem támogatott kapcsolat: ha van egy  ok-okozati kapcsolat, ahol a p nem igaz az Indít állapotban, akkor távolítsuk el a kapcsolatot. (Ez megóv minket attól, hogy végrehajtsunk egy olyan cselekvést, melynek előfeltételei hamisak.) * Redundáns cselekvések: ha egy A cselekvés nem eredményez ok-okozati kapcsolatokat, akkor távolítsuk el a kapcsolataival együtt. (Ez lehetővé teszi számunkra, hogy kihasználjuk a szerencsés helyzeteket.) * Végrehajtatlan cselekvés: ha egy (a Befejez-től eltérő) A cselekvésnek, melynek az előfeltételeit az Indít kielégíti, nincs (az Indít-tól eltérő) cselekvés elé sorolva, és nem ütközik okozati kapcsolatokkal, akkor távolítsuk el A-t és ok-okozati kapcsolatait, majd adjuk vissza mint a végrehajtandó cselekvést. * Szükségtelen történelmi cél: ha nincsenek nyílt előfeltételek és nincsenek a tervben cselekvések (azaz minden ok-okozati kapcsolat közvetlen az Indít-ból a Befejez állapotba mutat), akkor elértük az aktuális célhalmazt. Távolítsuk el a célokat és az ezekbe mutató kapcsolatokat, hogy új célokat tegyünk lehetővé.
3	0.083333	1	Azonban, ahogy valamelyik kezünket a nyílásból kivesszük, az oszlop forogni kezd és a véletlen számú negyed fordulat megtételével áll csak meg. Egyidőben tehát két kapcsoló állását megváltoztathatjuk, majd mindkét kezünket egyszerre rántjuk ki. Milyen stratégiát eszelhetünk ki a kincses kamra véges és kicsi számú lépésben történő kinyitásához? Tételezzük fel, hogy a forgás után a nyílások identitása külsőleg nem különböztethető meg.
5	0.181818	1	A visszalépéses algoritmus első lépésben szokás szerint választ egy még behelyettesítetlen változót a változók adott sorrendezése szerint haladva (momentán a következő fix változó-sorrend szerint: NSW, WA, NT, Q, SA, V, és végül T), majd ennek a választott változónak valamilyen sorrendezés szerint ad egy értéket az aktuális értékkészletéből (most balról jobbra haladva, kezdetben tehát RED, GREEN, aztán BLUE). Ezek szerint tehát az első értékadás az NSW változó kapcsán történik - a RED értéket rendeljük hozzá (NSW=RED).
5	0.181818	1	Mint látjuk, visszalépés nélkül meg tudtuk találni a KKP első megoldását, mivel az MRV heurisztika az előző szakasztól eltérően immár úgy irányította a következő vizsgált változó kiválasztását, hogy egyrészt nem adódott üres értékkészlet az előretekintés során (ami miatt vissza kellett volna lépni), illetve inkonzisztens behelyettesítésekhez sem jutottunk. Előretekintés esetén pedig, ne felejtsük el, esetünkben nem fordulhatott elő inkonzisztens behelyettesítések miatti visszalépés (mikor kifutunk egy változó értékkészletéből, mert egyetlen olyan értéke sincs, ami az aktuális behelyettesítés mellett konzisztens lenne a korlátokkal), hiszen az előretekintés ezt mindig megelőzte. Tehát az MRV heurisztika mondhatni ideális párja volt az előretekintésnek a visszalépéses keresés során, az adott KKP probléma esetén. Ugyanez a jó tulajdonság szerencsére a tapasztalat szerint általában is fennáll, bár nem minden esetben.
24	0.166667	1	A szoftver segítségével meg tudjuk határozni, hogy ez egyenlő azzal, egészen egyszerűen először rámutatva az egyik objektumra (szakaszra), majd a másikra. A számítógép alkalmazza a megadott feltételeket, ha a megfelelő kapcsolót átbillentjük. Ha ezt megtettük, töröljük ki a körünket, egyszerűen rámutatva és a delete (eltávolítás) gombot megnyomva. Ekkor a 3F ábrán bemutatott állapotot láthatjuk. Következő lépésként össze kell illesztenünk több hatszöget, hogy a kívánt méhsejtrács alakzatot kapjuk. Mint a bevezetőben is említettem, a program objektum orientált megközelítést alkalmaz, így a jelenlegi hexagont könnyűszerivel sokszorozhatjuk meg. Billentsünk át egy kapcsolót, így új munkaterületet, új lapot kaphatunk. Ekkor egy gomb megnyomására egy példányt kapunk a korábban létrehozott sokszögünkből. Helyezzünk el egyet középre, és hatot körülötte, ahogy a 3G ábrán is látszik. Az objektumok szabadon elhelyezhetők a fényceruza segítségével, tekerőgombok használatával forgathatók és nagyíthatók/kicsinyíthetők, valamint rögzíthető a helyzetük, de a korábban megadott belső formája fix, nem változtatható. Most következik a szabályos alakzatok összeillesztése. Mutassunk rá az egyik külső hexagon olyan pontjára, ami illeszkedik a belső hatszög egyik pontjával, így a számítógép elvégzi az összeillesztést. Ha ezt mindegyik alakzatra elvégezzük, megkapjuk a 3H részleten szereplő motívumot. Most, a program rugalmasságát kihasználva, ezt a csoportot kezelhetjük egyként, ebből hozhatunk létre egy példányt, így a teljes méhsejtrács struktúra kialakítása jóval gyorsabban elvégezhető. [2] [3]
7	0.64	0	A  (b) ábra mutatja a DPLL és a WalkSAT futási időit ennek a pontnak a környezetében, csak a kielégíthető problémákat véve figyelembe. Három dolog tiszta: először is, a kritikus pont körüli problémák sokkal nehezebbek, mint a többi probléma. Másodszor, a DPLL igen hatékony még a legnehezebb problémákra is – átlagosan néhány ezer lépést tesz, összehasonlítva az igazságtábla felsorolás 2^50 ≈ 10^15 számú lépésigényével. Harmadszor, a WalkSAT a teljes tartományban sokkal gyorsabb, mint a DPLL.
4	0.166667	0	A teljes algoritmus túlságosan bonyolult, hogy itt írjunk róla,^[37] azonban egy finom vonását érdemes megemlíteni. Azt mondtuk, hogy az EMA^* a legjobb levelet fejti ki és a legrosszabb levelet felejti el. Mi van akkor, ha minden levélnek ugyanaz az f-értéke? Az algoritmus ekkor ugyanazt a csomópontot kifejtésre is, és elhagyásra is kiválaszthatná. Az EMA^* ezt a problémát úgy oldja meg, hogy a kifejtésre a legújabb csomópontot választja, és a legrégebbi csomópontot törli. Ez a kettő ugyanaz a csomópont csak akkor lehet, ha csak egy levél van. Ebben az esetben az aktuális keresési fa egyetlen útból áll a gyökértől a levélig, ami kitölti a teljes memóriát. Ha a levél nem egy célcsomópont, akkor még ha a célhoz vezető optimális úton fekszik is, ez a cél az adott memóriával nem érhető el. Következésképpen a csomópontot ugyanúgy el lehet dobni, mintha nem is lenne követője.
14	0.869565	1	A MATLAB utasításokat soronként adjuk meg, vagy egy sorban egymás után pontosvesszővel (;) elválasztva őket. A ;-nek van még más szerepe is: a változóérték megadásakor nem írja vissza a csomag az értékeket, ha a sort ezzel a jellel zárjuk, de minden értékét kiírja a tömbnek, ha a ; nincs ott!
14	0.869565	1	Az alábbi ábrán a fuzzy szabályzó beillesztése látható. A szabályzó első bemente a kívánt szint és a jelenlegi szint különbsége, azaz az e hibának megfelelő bemenett a hagyományos Mamdani típusú rendszerben, míg a másik bemenetet ennek a különbségnek a két eltérő időpontban vett mintavételezésének különbsége, azaz a hiba változásának sebessége. A rendszer kimenetét ellenőrzés céljából rákötöttük egy kijelzőre.
6	0.2	0	A minimax algoritmus a játékfa teljes mélységi feltárását végzi. Ha a fa maximális mélysége m, és minden csomópontban b legális lépés létezik, akkor a minimax algoritmus időkomplexitása O(b^m). A tárkomplexitása O(bm) egy olyan algoritmus számára, amely az összes követőt egyszerre számítja ki, és O(m) egy olyan algoritmus esetében, amely a követőket egyenként generálja 3. szakasz - Mélységi keresés. Valós játékok esetén ez az időkomplexitás az algoritmust teljesen haszontalanná teszi, az algoritmus azonban jó alap a játékok matematikai elemzéséhez és a gyakorlati szempontból alkalmasabb algoritmusokhoz.  ábra - Egy algoritmus a minimax döntések kiszámítására. Az algoritmus a lehető legjobb lépéshez tartozó operátort adja vissza, vagyis ahhoz a lépéshez tartozó operátort, amelyik a legnagyobb hasznossági értékkel rendelkező eredményre vezet, feltételezve, hogy az ellenfél úgy játszik, hogy minimalizálja a hasznossági értéket. A Max-Érték és Min-Érték függvények végigmennek a teljes játékfán, le egészen a levélcsomópontokig, hogy meghatározzák a csomópont felfelé terjesztett értékét. Egy algoritmus a minimax döntések kiszámítására. Az algoritmus a lehető legjobb lépéshez tartozó operátort adja vissza, vagyis ahhoz a lépéshez tartozó operátort, amelyik a legnagyobb hasznossági értékkel rendelkező eredményre vezet, feltételezve, hogy az ellenfél úgy játszik, hogy minimalizálja a hasznossági értéket. A Max-Érték és Min-Érték függvények végigmennek a teljes játékfán, le egészen a levélcsomópontokig, hogy meghatározzák a csomópont felfelé terjesztett értékét.
7	0.24	0	Korábban azt mondtuk, hogy a tudásbázist mondatok halmaza alkotja. Most láthatjuk, hogy egy logikai tudásbázis ilyen mondatok konjunkciója. Tehát ha egy üres TB-vel kezdünk, és végrehajtjuk a Kijelent(TB, S[1]), ..., Kijelent (TB, S[n]) műveleteket, akkor a TB = S[1 ]∧ …∧ S[n ]áll elő. Ez azt jelenti, hogy tudásbázisokat és mondatokat egymással felcserélhetően használhatunk.
13	0.818182	0	Az intuíció azt súgja, hogy itt valamit még figyelmen kívül hagyunk. És tényleg, bárki megkérdezheti, hogy a többi négyzet nem lényegtelen-e? A [4, 4] tartalma nincs hatással arra, hogy az [1, 3] tartalmaz-e csapdát! Ez az intuíció valóban helyes. Jelölje Perem azokat a – lekérdezés változójától különböző – változókat, amelyek a meglátogatott négyzetekkel szomszédosak, esetünkben a [2, 2] és a [3, 1]. Továbbá Egyéb legyen a többi ismeretlen négyzet változója; példánkban – ahogy a  (b) ábra is mutatja – 10 ilyen négyzet van. A kulcs meglátás az, hogy megfigyelt szellők feltételesen függetlenek a többi változótól, ha adottak az ismert, a perem és a lekérdezés változók. A többi, ahogy mondják, már csak egy kis algebra.
19	0.181818	0	A  ábra a verziótér határhalmazokkal való ábrázolásának általános struktúráját mutatja. Ahhoz, hogy megmutassuk, hogy ez az ábrázolás elégséges, két tulajdonságra van szükségünk: 1. Mindegyik konzisztens hipotézis (amelyik nem valamelyik határhalmaz eleme) szűkebb, mint a G halmaz valamelyik eleme, és általánosabb, mint az S halmaz valamelyik eleme. (Azaz nincsenek kívül „kóbor” elemek.) Ez közvetlenül következik az S és G definíciójából. Ha lenne egy kóbor h, akkor az vagy nem lehetne szűkebb G valamely eleménél, tehát G-hez kellene tartoznia, vagy nem lehetne általánosabb S valamely eleménél, ebben az esetben viszont S-hez tartozna. 2. Mindegyik hipotézis, amelyik szűkebb a G halmaz valamely eleménél, és általánosabb az S halmaz valamely eleménél, konzisztens hipotézis (azaz a határok között nincsenek „lyukak”). Bármely – az S és G közé eső – h-nak az összes olyan negatív példát vissza kell utasítania, amelyet G minden egyes tagja visszautasít (mivel szűkebb), ugyanakkor el kell fogadnia az összes pozitív példát, amelyet az S akármelyik tagja elfogad (mivel általánosabb). Így h az összes példát jól kezeli, tehát nem lehet inkonzisztens. A  ábra mutatja be a helyzetet: nincs ismert példa, amely S-en kívül, de G-n belül helyezkedik el, így a kettő közt elhelyezkedő összes hipotézisnek konzisztensnek kell lennie.
25	0.074074	1	Az International Federation of Robotics (IFR) szerint a robotok másik nagy kategóriájába a helyhez nem kötött mobilrobotok tartoznak. Ezek a szerkezetek sokszor nem ipari szerelési, technológiai vagy anyagmozgatási feladatot látnak el, hanem rendszerint a kutatók segédeszközeiként funkcionálnak, ugyanis képesek olyan helyeket is felkeresni, ahová az emberek – valamilyen oknál fogva – nem juthatnak el. Az ilyen típusok esetében mindig található visszacsatolás (külső környezeti érzékelő), ugyanis a feladat végrehajtásához elengedhetetlen a folyamatos információgyűjtés. A mobilrobot feladata sok esetben nem egzakt módon definiált, nemegyszer csak „menj és gyűjts adatokat" típusú. Az, hogy mely adatok számítanak értékesnek és melyek a haszontalanok, rendszerint szintén a robot döntési körébe tartozik. Mindezekből kitűnik, hogy a mobilrobotokat komplex problémák megoldására tervezik.
12	0.952381	0	A következő idézetek samponos flakonok hátuljáról származnak. Azonosítsa mindegyiket, mint egy feltétel nélküli, feltételes vagy végrehajtás monitorozó tervet. (a) „Mosás. Öblítés. Ismételje.” (b) „Tegye a sampont a fejére, és hagyja ott néhány percig. Öblítsen és ismételje, ha szükséges.” (c) „Amennyiben az irritáció nem szűnik, forduljon orvoshoz.”
3	0.916667	1	Fentről lefelé (azaz a kezdőállapotból indulva) az elágazási tényező 2, ez rögtön látható a feladat megfogalmazásából. Lentről felfelé (azaz a végállapotból indulva) pedig 1, hiszen bármely állapotot csak egy korábbi állapotból lehet elérni. (Mindkettő megfigyelhető az a) ábrán.)
20	0.964286	0	Hozzon létre egy olyan szupport vektor gépet, amely az xor függvényt számítja ki. Kényelmesebb lesz, ha mind a bemeneteknél, mind a kimenetnél –1-et és +1-et használ 0 és +1 helyett. Ennek megfelelően egy minta például ([–1, 1], 1) vagy ([–1, –1], –1) lesz. Tipikus, hogy az x bemenetet egy ötdimenziós térre képezzük le, ahol kettő az eredeti x[1] és x[2] dimenzió, a másik három pedig x[1]^2, x[2]^2, illetve x[1] x[2] kombinációi. Ebben a feladatban viszont csak két dimenziót használunk: x[1]-et és x[1] x[2]-t. Rajzolja fel ebben a térben a négy bemeneti pontot és a maximális tartalékkal rendelkező osztályozót. Mekkora a tartalék? Rajzolja meg a határoló vonalat az eredeti, euklideszi térben.
4	0.916667	1	ii) w = 0: f(n) = (2-0)g(n) + 0h(n) = 2g(n). A heurisztikus függvény eliminálódik az egyenletből, tehát ez egy nem informált algoritmus. Lényegében (konstanssal való szorzástól eltekintve) megegyezik az egyenletes költségű kereséssel.
5	0.181818	1	Az eddigiek után nem meglepő, hogy a kapott {NSW=RED, WA=RED, NT=BLUE, Q=GREEN, SA=GREEN} behelyettesítés ellentmondásban van a korlátokkal (nevezetesen az 5-ös korláttal). Ezért tehát SA következő lehetséges értékére kerül a sor a FOR ciklusban (SA=BLUE).
8	0.935484	1	b) Explicit mondatnak nevezzük az olyan mondatot, amelyet a reprezentáció létrehozója közvetlenül leír. Az implicit mondatok az explicit mondatokból keletkeznek az analóg reprezentáció tulajdonságai szerint. Adjon három példát a térképnyelv implicit és explicit mondataira.
7	0.92	1	7.8 Vizsgálja meg a következő mondatokat, és döntse el mindegyikre, hogy érvényesk, kielégíthetetlenek, vagy egyik sem. Igazolja a döntését igazságtáblával, vagy felhasználva a  ábra ekvivalencia szabályait. Van-e olyan, amit elsőre eltévesztett?
16	0.521739	0	Sok esetben csupán egy egyszerűsített formát használunk. A jelölés ugyanaz marad, de az a véletlen csomópont, ami a kimeneti állapotot jelöli, elmarad. Ehelyett, a hasznosságcsomópontot közvetlenül a jelenlegi állapot csomópontokhoz és a döntési csomóponthoz kötik. Ebben az esetben a hasznosságcsomópont ahelyett, hogy az állapotokon definiált hasznosságfüggvényt reprezentálná, az egyes cselekvésekre vonatkozó várható hasznosságokat reprezentálja, ahogy azt a   egyenlet definiálja. Ezért az ilyen táblákat cselekvéshasznosság tábláknak (action-utility tables) nevezzük. A  ábra a repülőtér probléma cselekvéshasznosság-reprezentációját mutatja.
10	0.939394	1	d) Értelmezhető a negáció időtől függő és független formában. Jelentse a Nem(p, i) függvény azt, hogy adott i intervallum alatt p nem teljesül, a Sohasem(p) függvény pedig azt, hogy p semmilyen időintervallum alatt sem teljesül. Formálisan:
11	0.961538	0	A  ábra a kockavilág problémát mutatja, ami Sussman-anomáliaként (Sussman anomaly) ismert. A problémát azért tekintették anomáliának, mert az 1970-es évek nem összefésülős tervkészítői nem tudták megoldani. Írjuk fel a probléma definícióját Strips alakban, és oldjuk meg, kézzel vagy egy tervkészítő programmal. A nemösszefésülő tervkészítő egy olyan tervkészítő, ami ha két G[1] és G[2] részcélt kap, akkor vagy egy G[1] elérésére szolgáló tervet fűz hozzá egy G[2] elérésére szolgáló tervhez, vagy fordítva. Magyarázza meg, hogy egy nem összefésülő tervkészítő miért nem tudja megoldani a kockavilág problémát.
9	0.172414	0	Az a következtetés, hogy János gonosz a következőképpen megy végbe: találjon egy x-et, amelyre igaz, hogy x egy király és x mohó, majd következtesse ki, hogy x gonosz. Általánosabban, ha van valamely θ helyettesítés, amely az implikáció premisszáját megegyezővé teszi a tudásbázisban már létező mondatokkal, akkor a θ helyettesítés elvégzése után az implikációkövetkezmény részét hozzáadhatjuk a tudásbázishoz. Ebben az esetben az {x/János} helyettesítés eléri ezt a célt.
9	0.551724	0	A mélységi keresésen alapuló hátrafelé láncolásnak is akad problémája a felesleges számításokkal. Például amikor meg akarunk találni egy útvonalat az A[1]-ből a J[4]-be a  (b) ábrán, a Prolog 877 következtetést hajt végre, amelyek legnagyobb részét a csomópontokhoz tartozó összes lehetséges útvonal megtalálása képezi, amelyekből pedig nem lehet elérni a célt. Ez hasonló a  fejezetben megtárgyalt ismételt állapot problémához. A következtetési lépések teljes száma a generált alaptények számának exponenciális függvénye lehet. Ha az előrefelé láncolást alkalmazzuk ehelyett, akkor legfeljebb n^2 útvonal(X, Y) tény generálható az n csomópont összekötésével. A  (b) ábrán látható problémához csak 62 következtetési lépés szükséges.  ábra - (a) Az A-ból a C-be vezető útvonal megtalálása a Prologot egy végtelen hurokba vezetheti. (b) Egy gráf, amelyben minden csomópontot két véletlenszerű következő rétegbeli csomóponthoz kapcsolunk a következő rétegben. Egy útvonal megtalálása az A[1]-ből a J[4]-be 877 következtetést igényel. (a) Az A-ból a C-be vezető útvonal megtalálása a Prologot egy végtelen hurokba vezetheti. (b) Egy gráf, amelyben minden csomópontot két véletlenszerű következő rétegbeli csomóponthoz kapcsolunk a következő rétegben. Egy útvonal megtalálása az A1-ből a J4-be 877 következtetést igényel.
13	0.590909	0	Ha adott a teljes együttes valószínűségi eloszlás, akkor a Felsorol-Együttes-Kérdezés egy teljes algoritmus, amely alkalmas minden diszkrét változóra vonatkozó valószínűségi lekérdezés megválaszolására. Azonban nem minősíthető jónak: egy n db Boole-típusú logikai változó által leírt tartományban O(2^n) méretű bemeneti táblára van szüksége, és a tábla feldolgozása is O(2^n) időt igényel. Valós problémák esetén nem csupán három, hanem több száz vagy több ezer véletlen változó figyelembevételére van szükség. Nagyon hamar teljesen kivitelezhetetlenné válik a szükséges hatalmas számú valószínűség definiálása – nem létezik ugyanis olyan tapasztalat, amellyel a táblázat egyes bejegyzései külön-külön becsülhetők lennének.
9	0.931034	0	A hatékony Prolog fordítókat általában a Warren Abstract Machine (WAM) számítási modelljére alapozzák, amelyet David H. D. Warren (Warren, 1983) fejlesztett ki. Van Roy (Van Roy, 1990) megmutatta, hogy a további fordítási technikák alkalmazása, mint amilyen a típusinterferencia, versenyképessé teszi a Prolog programokat a C programokkal a sebesség tekintetében. A Japán Ötödik Generációs projekt, amely egy 1982-ben kezdődő 10 éves kutatási erőfeszítés volt, teljes egészében a Prologon, mint az intelligens rendszerek kifejlesztésének alapeszközén alapult.
10	0.424242	0	Két intervallum Találkozik, ha az egyiknek a végideje megegyezik a másiknak a kezdeti idejével. Már egyedül a Találkozik segítségével is lehetséges olyan további predikátumokat definiálni, mint az Előtte, az Utána, a Közben és az Átlapolódik. Azonban sokkal intuitívebb, ha a definiálásuk az időskála pontjainak segítségével történik (lásd  ábrán a grafikus reprezentációt).
16	0.391304	0	Az attribútumok eloszlásai közötti pontos kapcsolat, amely a sztochasztikus dominancia megállapításához szükséges, legkönnyebben az eloszlásfüggvény megvizsgálásával látható, ahogy azt a  (b) ábra is illusztrálja. Az eloszlásfüggvény annak a valószínűségét méri, hogy a költség kisebb-e egy adott összegnél, vagy egyenlő vele – azaz az eloszlásfüggvény az eredeti eloszlást integrálja. Ha S[1] eloszlásfüggvénye mindig jobbra esik S[2] eloszlásfüggvényétől, akkor sztochasztikus szemszögből S[1] olcsóbb, mint S[2]. Formálisan, ha az A[1] és az A[2] cselekvések a p[1](x) és a p[2](x) valószínűség-eloszlásokra vezetnek az X attribútumon értelmezve, akkor A[1] sztochasztikusan dominálja A[2]-t az X-en, ha
9	0.655172	1	Legyen a kötetlenül elmesélt történet az következő: „A nagynénim szerint, mindenki, aki nyughatatlan és gyufával játszik, az megégeti magát. Azon túl, szerinte, mindenki újabban nyughatatlan, de azért van olyan is, aki gyufával játszik. Ennek alapján a nagynénim szentül meg van győződve, van, aki meg fogja magát égetni.” Igaza van-e? Döntsük ezt a rezolúciós bizonyítással!
21	0.4375	0	Hogyan történhet meg, hogy optimális cselekvéseket választva szuboptimális eredményhez jutunk? A válasz abban rejlik, hogy a megtanult modell nem azonos az igazi környezettel, tehát az, ami optimális a megtanult modellben, szuboptimális lehet az igazi környezetben. Sajnálatos módon az ágens nem tudja, hogy milyen a valódi környezet, így nem képes az igazi környezetre nézve optimális cselekvést meghatározni. Mit kell akkor tennünk?  ábra - Annak a mohó ADP-ágensnek a felmutatott teljesítménye, amely végrehajtja a tanult modell alapján optimálisnak tűnő cselekvést. (a) A kilenc nem végállapot alapján számolt átlagos RMS-hiba. (b) Az a szuboptimális stratégia, amely felé ebben a kísérletsorozatban a mohó ágens konvergál. Annak a mohó ADP-ágensnek a felmutatott teljesítménye, amely végrehajtja a tanult modell alapján optimálisnak tűnő cselekvést. (a) A kilenc nem végállapot alapján számolt átlagos RMS-hiba. (b) Az a szuboptimális stratégia, amely felé ebben a kísérletsorozatban a mohó ágens konvergál.
15	0.962963	0	Gyakran szeretnénk megfigyelni egy olyan folytonos állapotú rendszert, aminek a viselkedése megjósolhatatlanul vált k különböző „mód” között. Például egy repülőgép egy rakéta elkerülése közben különböző manővereket hajthat végre, melyeket a rakéta megpróbálhat követni. Egy ilyen váltó Kalman-szűrő Bayes-háló reprezentációja a  ábrán látható. a. Tételezzük fel, hogy az S[t] diszkrét állapotnak k lehetséges értéke van, illetve, hogy a P(X[0]) a priori folytonos állapotbecslés egy többváltozós Gauss-eloszlás. Mutassa meg, hogy a P(X[1]) előrejelzés Gauss-eloszlások keveréke (mixture of Gaussians) – azaz Gauss-eloszlások súlyozott összege, ahol a súlyok 1-re összegződnek. b. Mutassa meg, hogy ha a jelenlegi folytonos állapot becslése, P(X[t]|e[1:t]), m Gauss-eloszlás keveréke, akkor általános esetben a P(X[t+1]|e[1:t+1]) frissített állapotbecslés km Gauss-eloszlás keveréke lesz. c. Az időbeli folyamatnak milyen jellegét reprezentálják a súlyok a Gauss-keverékben?
3	0.916667	1	Fordítsuk meg a feladatot! Legyen a 11-es a kezdőállapot, az 1-es a célállapot, az állapotátmenet-függvény pedig a k sorszámú állapothoz rendelje a [k/2] (alsó-egészrész) sorszámú állapotot. Így, mivel minden állapothoz az állapotátmenet-függvény csak egy másik állapotot rendel, így a megoldás gyakorlatilag automatikusan adódik. (Az állapottér leegyszerűsödik egy négy elemből álló sorra (a többi állapot ugyanis nem érhető el a megadott műveletekkel), és ezen futunk végig egyenesen.)
5	0.181818	1	A következő lépésben az algoritmus meghívja önmagát (rekurzíve) az immár nemüres {NSW=RED} behelyettesítéssel, és a KKP problémával (változók, aktuális értékkészletük, és rájuk vonatkozó kényszerek). Tegyük fel, hogy az algoritmus a behelyettesítetlen változók közül a következő lépésben a WA változót választja, és az előbbi lépéshez hasonlóan ennek is a RED értéket adja először (WA=RED).
25	0.111111	0	A harmadik fontos osztályt az önérzékelők (proprioceptive sensors) alkotják, amelyek a robot saját állapotáról adnak tájékoztatást. Annak érdekében, hogy a robot csuklóinak pontos állásáról információnk legyen, a motorok tengelyét sokszor szöghelyzet-dekódolókkal (shaft decoders) látják el, amelyek kis lépésekben követik a tengely elfordulását. A robotkarokon a tengelyre szerelt dekódolók bármikor pontos helyzetinformációt tudnak szolgáltatni. Mobil robotokon a szöghelyzet-dekódolókat a kerék mozgásának figyelésére használják, amely alapján számítható a megtett út. Ezt hívják odometriának (odometry). Sajnálatos módon az odometria – a kerekek csúszása és sodródása miatt – csak kis távolságokban használható. A külső hatások, mint például az áramlások az AUV-knél (autonóm víz alatti jármű) vagy a szél az UAV-k (autonóm légi jármű) esetében tovább növeli a mérés bizonytalanságát. Az inerciaszenzorok (inertial sensors), mint például a giroszkóp, javítanak a pontosságon, de önmagukban még nem küszöbölik ki a pozíciómérés hibájának elkerülhetetlen halmozódását.
1	0.344828	1	Ha a vizsgálandó testtel rádiófrekvenciás impulzus formájában energiát közlünk, azt csak az adott pillanatban és helyen éppen a rádióhullámok rezgésszámával azonos precessziós frekvenciájú protonok tudják átvenni. Az energia felvétel során az addig más-más fázisban köröző protonok mozgása összehangolódik, valamennyi pólus a körpálya ugyanazon pontjára mutat. Az impulzus kis is billenti a párhuzamosan rendeződött protonok perdületét. A spinek külön-külön gyenge mágnesességéből egy jól mérhető nagyságú, a külső mágnes erővonalakra merőleges, harántirányú forgó mágneses vektor épül fel.
5	0.818182	1	a) Mint általános keresési problémát. Válasszon egy megfelelő keresési algoritmust, és specifikálja a heurisztikus függvényt (amennyiben elképzelése szerint szüksége van rá). A fehér kockákba egyszerre egy betűt vagy egész szavakat érdemes-e beírni?
22	0.333333	0	Eszerint ha az s[1] füzér az eset változó által meghatározott esetű Pronoun, akkor s[1] egy ugyanolyan esetű NP is. Általánosságban egy kategóriaszimbólumot tetszőleges számú argumentummal kiterjeszthetünk, és az argumentumok egyben paraméterek, amelyek a szokásos Horn-klóz következtetés egyesítésének tárgyai.
9	0.965517	0	Kövesse nyomon a  ábrán látható hátrafelé láncolási algoritmus végrehajtását, amikor azt a bűntény probléma megoldására alkalmazzuk. Mutassa be azt az érték-szekvenciát, amelyet a célok változó vesz fel, és rendezze egy fa formába.
5	0.181818	1	A lista első éle, a (WA, NT) szerencsére konzisztens, hiszen a WA változó egyetlen RED értékével konzisztens az NT változó egyetlen BLUE értéke. Tehát a (WA, NT) élet töröljük a listáról, és tovább lépünk az (SA, NT) élre. Sajnos ez az él már nem konzisztens, mivel az SA változó értékkészletében a BLUE értékhez nem tudunk konzisztens értéket találni az NT változó értékkészletében. Ezért tehát az SA változó értékkészletéből eltávolítjuk a BLUE értéket, azaz SA értékkészletét {GREEN}-re szűkítjük, és az (SA, NT) él listáról való törlését követően a lista végére tesszük az összes SA-ba irányuló élet. Ekkor tehát a következő él-lista áll elő:
18	0.736842	1	Nézzünk meg egy konkrét esetet a fenti 6 hipotézissel: azt szeretnénk, ha a mintáinkkal konzisztens hipotézis (ami mind az N esetben helyes választ ad, minden esetben az adott példa kimenetére f(x) által meghatározott -1-et vagy 1-et) a későbbiekben 1%-nál kisebb hibával működne. Ezt legalább 98% biztonsággal szeretnénk állítani, tehát δ=0,02. Ez számszerűen:
6	0.1	1	1. 6.1. szakasz - 1. Játékelmélet háttere 2. 6.1. szakasz - 2. Fogolydilemma és változatai 3. 6.1. szakasz - 3. Normál formájú játékok 4. 6.1. szakasz - 4. Példák ismertebb dilemmákra 5. 6.1. szakasz - 5. Kevert stratégiák 6. 6.1. szakasz - 6. Egyensúlyi tételek 7. 6.1. szakasz - 7. Nash-egyensúly meghatározása (példa) 8. 6.1. szakasz - 8. Szekvenciális (dinamikus) játékok 9. 6.1. szakasz - 9. Extenzív formájú játékok 10. 6.1. szakasz - 10. Nem-teljes információs játékok 11. 6.1. szakasz - 11. Kölcsönös tudás 12. 6.1. szakasz - 12. Mechanizmustervezés
14	0.695652	1	Míg intuitíve azt várnánk, hogy a fenti kijelentés azt írja le, mennyi az adott terület objektumai között azoknak az aránya, amelyekre teljesül a ’pred’ tulajdonság, a fenti rendszer értelmezése szerint azt adja meg, hogy mi azon világok össz-valószínűsége, amelyekben minden objektumra teljesül az adott tulajdonság. Vagyis az állítás akkor is 0 lesz (az elvárt 0.9-del szemben), ha minden világban csak az objektumok 0.1-ére nem teljesül.
1	0	0	Az MI jelenleg az általános rendeltetésű területektől, mint az észlelés és a tanulás, egészen olyan specifikus feladatokig, mint a gépi sakk, a matematikai tételbizonyítás, a gépi költészet vagy az orvosi diagnózis, a legkülönbözőbb részterületek óriási választékát öleli át. Az MI az intellektuális képességeket igénylő feladatokat rendszerezi és automatizálja, és így potenciálisan releváns az értelmes emberi cselekvés minden területén. Ilyen értelemben az MI igazán univerzális tudomány.
6	0.1	1	Vizsgáljuk még egy érdekes tulajdonságát a nimbereknek. Legyen g egy nemnegatív egész. Vegyük a mátrix főátló alatti koordinátáit, melyeken a g szám áll az alsó sortól felfele. Jelöljük p n g =( a n g , b n g )  -vel a g szám n-edik előfordulását a sorozatban. Például p 3 4 =( a 3 4 , b 3 4 )=(6,7) 
6	0.1	1	Vegyünk egy véges játékot, és rendeljünk minden pozícióhoz egy egész számot a következők szerint, ezt nevezzük nimbernek: a „vesztő” pozíciókhoz, azaz amelyből indulva a soron következő játékos veszít, 0-t rendelünk. Ha egy X pozícióból elérhető összes pozícióhoz rendeltünk számot, akkor X-hez rendeljük ezen számok alkotta halmaz legkisebb kizártját.
18	0.684211	1	Látható, hogy az AdaBoost algoritmus futása során képes volt a „körbezárt” kék egyedeket jó közelítéssel megkülönböztetni a pirosaktól. Vegyük észre, hogy az algoritmus működése során a súlyok a nehezen osztályozható minták körül csoportosultak, azaz a felsúlyozott minták a döntési felszín körül alakultak ki. Érezhető, hogy az algoritmus a döntési felszín közelében elhelyezkedő tesztminták esetében pontatlanabb becslést fog adni. A  ábra alapján észrevehető, hogy az AdaBoost algoritmus hatékony megoldást tud nyújtani a példában felvázolt osztályozási problémára.
10	0.030303	0	Milyen haszna van egy felső ontológiának? Gondoljunk vissza a  alfejezet áramköri ontológiájára. Megkonstruálásánál igen sok egyszerűsítő feltételezéssel éltünk. Így például az időt teljes egészében ki is hagytuk. A jelek rögzítettek voltak, és a jeltovábbterjedésről nem is esett szó. Az áramkörök struktúrája változatlan maradt. Az általánosság felé úgy tudnánk lépni, hogy a jeleket konkrét időpillanatokban definiálnánk és foglalkoznánk a vezetékek hosszával, valamint a vezetékekben és a berendezésekben fellépő jelterjedési késleltetésekkel. Ezzel szimulálni tudnánk az áramkör időzítési tulajdonságait; és valóban az áramkörtervezők gyakran folyamodnak is az ilyen elemzéshez. A kapuk érdekesebb osztályait is be lehetne vezetni, például leírva a technológiát (TTL, MOS, CMOS stb.) és a bemeneti/kimeneti specifikációkat is. Ha a megbízhatósággal vagy diagnózissal szeretnénk foglalkozni, engedélyezni kellene, hogy az áramkör struktúrája spontán módon megváltozhasson. A szórt kapacitások figyelembevételéhez a tisztán topológiai reprezentációval fel kellene hagyni, és át kellene térni a geometriai tulajdonságok valósághűbb leírására.  ábra - A világ ontológiájának felsőbb szintjei, amelyek a fejezetben később tárgyalt témákat mutatják. Minden él azt jelzi, hogy az alsó fogalom a felső fogalom egy specializálódása. A világ ontológiájának felsőbb szintjei, amelyek a fejezetben később tárgyalt témákat mutatják. Minden él azt jelzi, hogy az alsó fogalom a felső fogalom egy specializálódása.
3	0.833333	0	A hiedelmi teret a probléma e változatánál elemezve könnyen megállapíthatjuk, hogy semmilyen rögzített cselekvésszekvencia sem garantálja a probléma megoldását. De lesz megoldásunk, ha a cselekvések szigorú sorrendjéről lemondunk:
24	0.083333	1	[4] C. Lu, Y. Cao, D. Mumford, „Surface Evolution under Curvature Flows”, Submitted for the special issue on Partial Di_erential Equations (PDE's) in Image Processing, Computer Vision, and Computer Graphics, p. 19, 2002.
9	0.689655	1	Modellezzünk egy egyszerű csőrendszert az alábbiak szerint: Ha nyomás van, szelep nyitva és lyuk nincs, akkor vizes a padló (Nyomás ^ Szelep ^ ¬Lyuk → Víz). Ha nyomás van, szivárog a cső, akkor vizes a padló (Nyomás ^ Lyuk → Víz). Ha a nyomáskijelző nyomást mutat és kijelző nem rossz, akkor nyomás van (NyomásKijelző ^ ¬NyomásKijelzőRossz → Nyomás). Ha a szelepállás kijelző nyitott szelepet mutat és a szelepállás kijelző nem rossz, akkor szelep nyitva van (SzelepÁllásKijelző ^ ¬SzelepÁllásKijelzőRossz → Szelep).
12	0.52381	0	Az újratervező (replanning) ágens tudja, hogy váratlan események esetén mit kell tennie: újra meghívja a tervkészítőt, hogy a cél eléréséhez egy új tervet biztosítson. Annak elkerülésére, hogy túl sok időt töltsünk tervkészítéssel, ez rendszerint a régi terv javításával történik, azaz utat keresünk a fennálló nem várt állapotból vissza, a meglévő tervhez.
24	0.916667	0	A háromdimenziós objektumfelismerés területén Roberts az MIT-n benyújtott diszszertációja adott lényegi eredményeket (Roberts, 1963). Sokan úgy tartják, hogy ez a számítógépes látás területén az első PhD-disszertáció, amely sok kulcsfontosságú ötletet vezetett be, az éldetektálást és a modellalapú illesztést is beleértve. A Canny-féle éldetektálást (Canny, 1986) vezette be. A Roberts által bevezetett illesztés gondolata később Lowe, Huttenlocher és Ullman munkájában újra megjelent (Lowe, 1987; Huttenlocher és Ullman, 1990). A helyzet összerendelési módszer alapján történő becslésének hatékonyságát jelentős mértékben Olson növelte (Olson, 1994). A háromdimenziós objektumfelismerés kutatásának egy másik nagy vonulata, az alakzatok térfogati primitívekre, ún. általánosított hengerekre (generalized cylinders) alapuló leírása, amelyet Tom Binford vezetett be, különösen népszerűnek bizonyult (Binford, 1971).
5	0.181818	1	16. lépés: mivel előretekintés effektíve nem volt az előbbi értékadás következtében (mivel az NT változó szomszédai közt már nem volt olyan behelyettesítetlen változó, amelynek értékkészletében szerepelt volna a RED érték), ezért ebben a lépésben LCV-től független a Q=GREEN értékadás történik. Ennek oka végső soron az, hogy a heurisztikus értékek most a következőképp alakulnak: Q{GREEN(1), BLUE(3)}. E szerint tehát nem meglepő, hogy egyértelműen az NT=GREEN értékadásra kerül sor. De pontosan miért is ezek a heurisztikus értékek? GREEN(1) azért, mert az NT-vel szomszédos változók, azaz WA, SA, és Q közül aktuálisan már csak NSW értékkészletében van ott a GREEN érték, viszont a BLUE érték mindhárom változó értékkészletében szerepel.
1	0.275862	0	Ez az alapvető eredmény úgy is interpretálható, hogy léteznek az egész számokon értelmezhető olyan függvények, amelyek algoritmikusan nem írhatók le, magyarán nem számíthatók ki. Ez motiválta Alan Turingot (1912–1954), hogy megkísérelje a kiszámítható függvények pontos jellemzését. Ez a megfogalmazás kissé problematikus, mert egy számítási procedúrának vagy egy hatékony eljárásnak a formális definícióját valójában lehetetlen megadni. Általánosan elfogadott azonban, hogy a Church–Turing-tézis, amely azt állítja, hogy a Turing-automata (Turing, 1936) képes minden kiszámítható függvényt kiszámítani, elegendő definíciót szolgáltat. Turing azt is kimutatta, hogy vannak olyan függvények, amelyeket semmilyen Turing-automata nem képes kiszámítani. Így például nincs olyan automata, amely általánosságban el tudná dönteni, hogy egy adott program egy adott bemenetre választ fog-e adni, vagy pedig örökké futni fog.
3	0.083333	1	Az egységes orvosi nyelv UMLS kialakítását az NLM kezdte 1986-ban azzal a céllal, hogy olyan rendszerek, kiépítését támogassa, melyek segítségével a szakemberek és kutatók képesek lesznek azoknak az orvos biológiai információknak a visszakeresésére, amelyek különböző forrásokból származnak. Ezzel lehetővé teszik a felhasználók számára, hogy eltérő információs rendszereket, így pl. a számítógépes betegadat feldolgozórendszereket, bibliográfiai és faktografikus adatbázisokat összekapcsoljanak.
1	0.413793	1	A neuronhálózatok tehát serkentő és gátló szinapszisokkal összekötött sejtekből állnak. Szigorúan véve a "serkentő" és "gátló" minősítés egyetlen szinaptikus kapcsolatra jellemző és a transzmitter-receptor kölcsönhatás határozza meg, de gyakorlatilag a preszinaptikus sejt típusa a döntő (Dale-elv). Így aztán a kialakult terminológia szerint serkentő és gátló neuronok vannak, korántsem egyenlő számban. Az agykéregben például a sejtek 80-90 százalékát alkotja a serkentő sejtek legelterjedtebb fajtája, a piramissejt.
10	0.848485	0	Ha az Abnormális[2]-t és az Abnormális[3]-at körülírjuk, két preferált modellt kapunk: az egyikben igaz az Abnormális[2](Nixon) és a Pacifista(Nixon), a másikban igaz az Abnormális[3](Nixon) és a ¬Pacifista(Nixon). A körülíró következtető rendszer tehát megfelelően tudatlannak mutatkozik a pacifista Nixon ügyében. Ha ezentúl szeretnénk kijelenteni, hogy a vallásos meggyőződések elsőbbséget élveznek a politikai nézetekkel szemben, a prioritásos körülírás (prioritized circumscription) formalizmusát használhatjuk, hogy azoknak a modelleknek adjunk elsőbbséget, ahol az Abnormális[3] minimálizálva van.
14	0.086957	1	A teljesen önkényes, tárgyterület specifikus hasznosság/veszteség függvények mellett gyakori választások a 0−1  veszteség L 0  , az abszolút veszteség/hiba L 1  és a négyzetes hiba L 2  . Az optimális értékek ekkor rendre a következőek
6	0.1	1	Visszatérve az 1-lapos extenzív póker elemzésére, próbáljunk megadni a játék megoldását! Mit kellene a fenti extenzív alak esetében tennie az 1-es és 2-es játékosnak? A válasz nem túl triviális, így mielőtt még megválaszolnánk a kérdést, ismerkedjünk meg azzal, hogy valójában mit is értünk a játékosok stratégiáján extenzív játékok esetén.
5	0.181818	1	A kapott {SA=RED, NSW=GREEN, NT=GREEN, WA=BLUE, Q=RED} nem meglepő módon inkonzisztens, hiszen sérti az 5-ös korlátot (miszerint SA és Q értékének különböznie kell). Az algoritmus tehát Q következő értékére lép (Q=GREEN).
27	0.4	1	Például egy tökéletesen racionális sakkozó ágens mindig, minden lépésben az adott állás és a későbbi összes lehetőség fényében vett leghasznosabb lépést választaná. Ha nincs időkorlátja annak, hogy egy-egy lépést mennyi idő alatt tesz meg (számol ki és lép meg), akkor végső soron ez nem egy irreális elvárás, csak esetleg kivárhatatlanul sokáig tart majd, míg az ágens kiszámolja az összes lehetőség fényében vett globálisan optimális lépést.
6	0.1	1	Ez tehát egy ésszerű, racionális, ámde nem-kooperatív megoldása ennek a játéknak. Látható, hogy a Vall-Vall, mint ésszerű kimenetel, szub-optimális Pareto értelemben (hiszen a játékosoknak van olyan részhalmaza, akiknek megérné együttesen stratégiát változtatniuk úgy, hogy a többiek nem járnak rosszabbul: mindkét játékosnak együttesen megérné áttérnie Tagad-ra). Tehát ilyen értelemben mondhatnánk, hogy a Nash-egyensúly racionalitása talán egy picit „sántít”, ha a kooperativitást is megengedjük, viszont nem-kooperatív esetben teljesen helyénvaló (erre lett kitalálva).
3	0.125	1	Az előbbi megjegyzés egyenes következménye, hogy egy élő ágens igazából soha nem képes (de nem is törekszik erre) ideálisan optimális megoldást megtalálni. A ténylegesen legjobb megoldás megtalálásához a keresési teret rendszeresen, kimerítően végig kell nézni, aminek ódiuma össze-mérhető a nyers erő módszer nehézségeivel. Azt is szokás mondani, hogy az ember (és más élő ágens) majdnem (közel) optimális megoldásra törekszik, mert a valós életben ez az igazán kifizetődő.
10	0.848485	0	Az alapértelemzett logika (default logic) egy olyan formalizmus, ahol alapértelmezett szabályokat (default rules) lehet írni feltételes, nemmonoton következtetések generálásához. Egy alapértelmezett szabály a következőképpen néz ki:
9	0.724138	0	A rezolúció a TB ⊨ α állítást úgy igazolja, hogy bebizonyítja, hogy a TB ∧ ¬α nem kielégíthető, vagyis a bizonyítás az üres klóz származtatásával történik. Az algoritmikus megközelítés megegyezik az ítéletlogikában lévővel, amelyet a  ábrán már bemutattunk, így ezt itt most nem ismételjük meg. Ehelyett inkább két példabizonyítást adunk meg. Az első a bűntény példa a  alfejezetből. A mondatok CNF-ben a következők:
22	0.555556	0	Ezek után át kell alakítanunk a kvázilogikai formát valódi elsőrendű logikaivá a kvantifikált termek igazi term-mé alakításával. Ezt egy egyszerű szabállyal tesszük meg: minden egyes QLF kvázilogika formán belüli [q x P(x)] kvantifikált termet a cseréljük ki x-re, és cseréljük a QLF-et q x P(x) op QLF formára, ahol az op operátor ⇒ akkor, ha a q ∀, és ∧, amennyiben a q ∃ vagy ∃!. Például az „Every dog has a day (Minden kutyának van egy napja)” mondat a következő kvázilogikai formával rendelkezik:
4	0.958333	0	Jegyezze meg, hogy ez az eshetőségi terv az adott leírást kielégítő minden lehetséges környezet számára megoldás. A keresés és a végrehajtás átlapolódása tehát egy ismeretlen környezetben nem szigorúan szükséges.
26	0.571429	0	Patricia Churchland (Churchland, 1986) rámutat arra, hogy ha a funkcionalista érv működik a neuronok szintjén, akkor működnie kell bármely nagyobb funkcionális egység szintjén is, legyen az akár neuronok egy halmaza, egy mentális modul, egy lebeny, egy agyfélteke vagy akár az egész agy. Ezek szerint ha elfogadjuk, hogy az agyprotézis kísérlet tanulsága a tudat megmaradása az agy kicserélése során, akkor azt is el kell fogadnunk, hogy a tudat akkor is megmarad, ha az egész agyat lecserélik egy áramkörre, amely csak annyit tesz, hogy a bemenetekhez tartozó kimeneteteket visszakeresi egy óriási táblázatban. Ez zavarba hozza a legtöbb embert (beleértve magát Turingot is), akik intuíciója szerint a visszakereső táblák nem tudatosak, vagy legalábbis az általuk generált tudati tapasztalatok nem azonosak azokkal a tapasztalatokkal, amelyeket egy olyan rendszer generálna, amit le lehetne írni úgy (akár csak az egyszerűen vett számítási értelemben), mint ami hiedelmeket, önismeretet, célokat és hasonlókat tart nyilván és hoz létre. Mindez sugallja, hogy ha meg akarjuk őrizni az agyprotézis-kísérletet mint az intuíciónkat vezérlő segédeszközt, akkor nem folyamodhatunk az agy egy lépésben történő lecseréléséhez, de azt nem jelenti, hogy kénytelenek lennénk a lépésenkénti neuroncseréhez folyamodni, amit Searle szeretne velünk elérni.
5	0.181818	1	Az értékadás eredményeképp előálló {NSW=RED, WA=RED} behelyettesítés konzisztens, így következhet az előretekintés. Ennek során a WA-hoz kapcsolódó változók értékkészletéből távolítjuk el a WA=RED értékadással inkompatibilis értékeket. Azaz, mivel előbb az SA változó értékkészletét az NSW=RED értékadás miatt már megkurtítottuk, ezért most csak az NT változó értékkészletéből távolítjuk el a RED értéket.
17	0.933333	0	Tegyük fel, hogy egy állapotsorozat hasznosságát a sorozat állapotaiban kapott jutalmak maximumaként definiáljuk. Mutassuk meg, hogy ez a hasznosságfüggvény nem eredményez stacionárius preferenciákat az állapotszekvenciák között. Lehetséges-e mégis olyan hasznosságfüggvényt definiálni az állapotokon, hogy a MVH-döntéshozatal optimális viselkedést adjon?
14	0.130435	1	Hasonlóan épül fel a többi csomópont feltételes valószínűségi táblája is, ami mindig a szülő(k) értékeinek függvényében határozza meg az adott változó feltételes valószínűségét. Mivel a táblázatban a szülők lehetséges értékeinek minden kombinációjához tartozik egy érték, a táblázat mérete exponenciálisan nő a szülők számával. A tárolás még így is gazdaságosabb, mint hogyha az egész hálózatot egyszerre tárolnánk. (Az egész influenza háló értékeinek a tárolásához, mivel öt bináris változóból áll, 32 cella szükséges, míg a bemutatott feltételes valószínűségi táblák révén elegendő 10. )
8	0.032258	0	Továbbra is nagyon érdekes kérdés, hogy mi a pontos mechanizmusa annak, ahogyan a nyelv lehetővé teszi és formálja a gondolatok reprezentációját az emberekben. A híres Sapir–Whorf-hipotézis szerint az általunk beszélt nyelv nagymértékben befolyásolja gondolkodásunk és döntéseink mikéntjét, különösen abban, ahogy kategóriarendszereket állítunk fel, amelyet felhasználva aztán felosztjuk a világot különböző fajta objektumokra. Whorf szerint (Whorf, 1956), azáltal, hogy az eszkimóknak számos szavuk van a hóra, másképpen is érzékelik a havat, mint más nyelvek beszélői. Néhány nyelvész vitatja ennek az állításnak a tényszerűségét – Pullum úgy érvel (Pullum, 1991), hogy az inuitoknak, a yupiknak és más rokon nyelvet beszélőknek ugyanannyi szavuk van a hóval rokonítható fogalmakra, mint az angoloknak – vannak azonban olyanok is, akik támogatják az állítást (Fortescue, 1984). Vitathatatlanul igaznak tűnik, hogy az olyan embercsoportok, amelyeknek több ismeretük van a világnak egy bizonyos részéről, sokkal részletesebb szókinccsel rendelkeznek erre a részre vonatkozóan – például a gyakorló rovarszakértők az általunk bogaraknak nevezett lényeket fajok százezreire osztják fel, és sokról ezek közül személyes ismeretekkel rendelkeznek. (Az evolúciós biológus J. B. S. Haldane meg is állapította, hogy a Teremtő „Bogarak iránti mértéktelen szeretete” különös.) Mi több, a tapasztalt síelőknek rengeteg szavuk van a hóra – porhó, latyak, tört krumpli, aludttej, kukorica, cukor, aszfalt, kordbársony, pehely, trutymó és így tovább –, és ezek olyan különbségeket mutatnak, amelyek ismeretlenek egy kívülálló számára. Az ok-okozati viszony iránya azonban ismeretlen – kérdés, hogy a síelők csak azért ismerik fel a különbségeket, mert megtanulják a szavakat, vagy a különbségek keletkeznek először a személyes tapasztalat alapján, és ezeket címkézik fel aztán a közösségben már ismert fogalmakkal. Ez a kérdés különösen a gyermekek fejlődésének tanulmányozása szempontjából fontos. Egyelőre kevés ismeretünk van arról, hogy milyen mértékben fonódik egymásba a nyelvtanulás és a gondolkodás elsajátítása. Például egy olyan fogalom nevének ismerete, mint például az agglegény, megkönnyíti-e bonyolultabb, erre épülő fogalmak előállítását és használatát, amelyek tartalmazzák ezt a nevet – partiképes agglegény?
1	0.068966	1	1946-ban Norbert Wienernek és Arturo Rosenblueth-nak jelent meg „The mathematical formulation of the problem of conduction of impulses in a network of connected excitable elements, specifically in cardiac muscle” című tanulmánya, amelyben egy olyan sejtautomata modellt alkottak meg, amely matematikai leírást adott a keringési rendszerek ingerületvezetésére. Munkájukra a későbbi szívritmuszavarral és ingerlékeny rendszerekkel foglalkozó modern kutatások is hivatkoztak.
2	0.526316	1	A fenti cselekvésektől függetlenül az ágensek minden körben korlátlan számban küldhetnek üzeneteket egymásnak, illetve automatikusan fogadják egymás üzeneteit. A kommunikációs cselekvések mellett azonban minden körben kell szerepelnie pontosan egy cselekvésnek a fenti listából: ha az ágens az adott körben semmit nem kíván tenni, akkor a várakozás cselekvést kell végrehajtania. Az ágensek a játék kezdetén a pálya egyik sarkából indulnak. A játéknak 10 000 kör után van vége. Minden körben minden ágens köteles a fenti cselekvések közül pontosan egyet végrehajtani.
16	0.956522	1	A POCT diagnosztikai helyzetének felmérése érdekében klinikai audit szervezése szükséges. Az audit további célja, a helyi POCT meghatározások minőségfejlesztése, az eredmények valódiságának és pontosságának biztosítása, valamint a lehetséges analitikai, és egyéb pre- és posztanalitikai hibák csökkentése.
21	0.875	0	A rabló problematikát, amely a nemszekvenciális döntések területén történő felfedezést modellezi, részletesen Berry és Fristedt tanulmányozták (Berry és Fristedt, 1985). Számos helyzetben optimális felfedezési stratégia nyerhető a Gittins-index segítségével (Gittins, 1989). Barto és munkatársai a szekvenciális döntési problémákban alkalmazott felfedezési módszerek számos változatát tárgyalják (Barto és társai, 1995). Kearns és Singh, valamint Brafman és Tennenholtz olyan algoritmusokat írnak le (Kearns és Singh, 1998; Brafman és Tennenholtz, 2000), amelyek ismeretlen környezet felfedezését végzik, és bizonyított, hogy polinomiális idő alatt konvergálnak közel-optimális stratégiákhoz.
14	0.913043	0	A fejezetben leírt változó eliminációs módszer Shachter módszeréhez áll legközelebb, amiből a szimbolikus valószínűségi következtetés (SzVK) módszere alakult ki (Shachter, 1990). Az SzVK megkísérli optimalizálni az olyan kifejezési fák kiértékelését, mint amilyen a  ábrán látható. Az általunk ismertetett algoritmus a Zhang és Poole által kifejlesztetthez áll a legközelebb (Zhang és Poole, 1994; 1996). Irreleváns változók eltávolítására szolgáló kritériumokat Geiger és társai, illetve Lauritzen és társai fejlesztettek ki (Geiger és társai, 1990; Lauritzen és társai, 1990); az általunk megadott kritérium ezeknek egy egyszerű speciális esete. Rina Dechter (Dechter, 1999) mutatta meg, hogy a változó eliminálás ötlete lényegében megegyezik a nem folytatólagos dinamikus programozással (nonserial dynamic programming) (Bertele és Brioschi, 1972). Ez egy algoritmikus megközelítés, amit Bayes-hálókban előálló következtetési problémák széles körére lehet sikerrel alkalmazni. Ilyen probléma például megfigyelések egy adott halmazához a legvalószínűbb magyarázat megkeresése. Ez összekapcsolja a Bayes-hálós algoritmusokat a kényszerkielégítési problémákat megoldó kapcsolódó módszerekkel, és közvetlen módszereket szolgáltat az egzakt következtetés komplexitására a háló hiperfájának a szélessége alapján.
11	0.076923	0	Az s állapotból kiindulva az alkalmazható a cselekvés végrehajtásának eredménye az s' állapot, ami azonos s-sel, kivéve, hogy az a cselekvés következményrészében szereplő pozitív P literálokat az s’-höz adjuk, míg bármilyen ¬P negatív literált eltávolítjuk s’-ből. Így a Repül(P[1], JFK, SFO) cselekvés után az állapot a következő:
4	0.916667	0	A legtöbb összehasonlítás a genetikus algoritmusok és más megközelítések (különösképpen a hegymászó keresés) között azt találta, hogy a genetikus algoritmusok lassabban konvergálnak (O’Reilly és Oppacher, 1994; Mitchell és társai, 1996; Juels és Wattenberg, 1996; Baluja, 1997). Az ilyen eredmények a GA közösségben nem nagyon népszerűek, azonban e közösségen belül a legutóbbi olyan kísérletek, hogy a populációalapú keresést a Bayes-tanulás egy formájaként értelmezzük (lásd  fejezet) talán segít, hogy e terület és a kritikusai közötti szakadék eltűnjön (Pelikan és társai, 1999). A GA hatékonyságára magyarázatot adhat a kvadratikus dinamikus rendszerek (quadratic dynamical systems) elmélete (Rabani és társai, 1998) is, lásd például Lohn és társainak (Lohn és társai, 2001) a GA antennatervezésre alkalmazott példáját és Larrañaga (Larrañaga és társai, 1999) munkáját, ahol a GA-t az utazó ügynök problémára alkalmazták.
24	0.5	0	Normális látási körülmények között az emberek fixálnak, azaz összetartóan néznek előre (fixate), vagyis a jelenetben létezik egy olyan pont, amelyben a két optikai tengely metszi egymást. A  ábra egy P[0] pontra fixáló szemeket mutat, amely pont a két szem középvonalától Z távolságban helyezkedik el. Az egyszerűség kedvéért szögeltérést fogunk számítani radiánban. Az összetartás P[0 ]pontjában az eltérés zérus. A jelenet egy δZ-vel távolabbi P pontja esetén számíthatjuk a P[ ]pont P[L] bal és a P[R ]jobb oldali képének a szögeltolódását. Ha azok mindegyike a P[0 ]-hoz képest δθ/2 szöggel eltolt, akkor a P[L] és a P[R] eltolódása, ami a P képeltérése, pontosan δθ. Egyszerű geometriai átalakításokból azt fogjuk kapni, hogy:
15	0.222222	0	ahol a Hátra a   egyenlet által leírt frissítést hajtja végre. Ahogy az előrefelé rekurziónál, az egyes frissítésekhez szükséges idő- és tárigény állandó, és így t-től független itt is.  ábra - A simítás egy múltbeli k időpontban az állapot a posteriori P(X[k]|e[1:t]) eloszlását számítja ki egy teljes, 1-től t-ig terjedő megfigyelés sorozat ismeretében A simítás egy múltbeli k időpontban az állapot a posteriori P(Xk|e1:t) eloszlását számítja ki egy teljes, 1-től t-ig terjedő megfigyelés sorozat ismeretében
18	0.473684	0	Amikor a hipotézisek nagy halmaza lehetséges, akkor óvatosnak kell lennünk, nehogy arra használjuk az ebből eredő nagy szabadságot, hogy értelmetlen „szabályosságot” találjunk az adatokban. Ezt a problémát túlilleszkedésnek (overfitting) nevezzük. Ez rendkívül általános jelenség, akkor is jelentkezhet, amikor a keresett függvénynek egyáltalán nincs valószínűségi jellege. Mindamellett ez a probléma az összes tanulási algoritmust sújtja, nem csak a döntési fákat.
6	0.9	1	Vita? Ha a kérdőjelek helyett 0-kat írunk, akkor nem látom, miért fullad kudarcba a minimax. Abban az esetben mondhatjuk, hogy kudarcba fullad, ha van döntetlen eredmény, mert ekkor ehelyett esetleg egy végtelen ciklusban indulhat el az ágens, de ha a játékban nincs döntetlen eredmény, akkor MIN és MAX is csak akkor választaná a hurokállapotokat, ha a többi lépési lehetőség már biztosan vesztéshez vezetne számukra. Ilyenkor viszont biztosan lesz olyan elágazás valahol a fában, ahol ilyen probléma már nem lesz, különben vagy mégis lenne döntetlen állás (ez ellentmondás), vagy a játék végtelen hosszú, akkor pedig tulajdonképpen optimális viselkedés, ha a végtelenségig fenntartjuk a számunkra nem kedvezőtlen állapotot.
10	0.393939	0	A folytonos események a folyamatosan változó folyamatokon túlmenően képesek a folyamatosan nem változó folyamatok leírására is. Ezeket gyakran állapotoknak (states) nevezzük. A „Shankar New Yorkban tartózkodik” például egy olyan állapotkategória, amit Benne(Shankar, NewYork)-kal lehetne jelölni. Azt, hogy Sankar az egész mai napot New Yorkban töltötte, úgy írhatnánk, hogy:
22	0.074074	0	A nyelvtan (grammar) a nyelvet meghatározó szabályok véges halmaza. A formális nyelveknek mindig van egy hivatalos nyelvtana, amelyet kezelési útmutatókban vagy könyvekben határoznak meg. A természetes nyelveknek nincs hivatalos nyelvtana; bár a nyelvészek törekszenek a nyelv tulajdonságainak felfedezésére tudományos vizsgálatokkal, majd ezen felfedezések rögzítésére egy nyelvtanban. Eddig egyetlen nyelvész sem járt teljes sikerrel. Figyeljük meg, hogy a nyelvészek tudósok, akik a nyelvet úgy próbálják definiálni, ahogy az létezik. Vannak olyan előíró nyelvészek is, akik megpróbálják diktálni, hogy a nyelvnek milyennek kellene lennie. Olyan szabályokat alkotnak, mint például a „használd az ikes ragozást”, amelyeket néha megjelentetnek stílusútmutatókban, de kevés valódi hatásuk van a beszélt nyelvre.
27	0.4	1	Most már összefüggésbe hozhatjuk az ágens-programokat és az ágens-függvényeket azáltal, hogy definiáljuk az adott architektúrán futatott ágens-program által implementált ágens-függvényt. Jelölje ezt Ágens(Program, Architektúra). Ez tehát éppen azon f[Ágens] függvény, melyre teljesül, hogy tetszőleges környezet esetén:
15	0.925926	0	A Kalman-szűrés számos alkalmazásában nem csak a bizonytalan érzékeléssel és a dinamikával kell foglalkozni, hanem bizonytalan azonosítással is; azaz ha több objektumot kell megfigyelni, a rendszernek meg kell határozni, hogy melyik megfigyelést melyik objektum generálta, mielőtt az állapotbecsléseket felfrissíthetné. Ez az adattársítás (data association) problémája (Bar-Shalom és Fortmann, 1988; Bar-Shalom, 1992). Azon esetben, amikor n megfigyelés és n követés van (ami egy igen szelíd eset), a megfigyelések n! lehetséges módon rendelhetők a követésekhez; a helyes valószínűségi kezelés mindet figyelembe venné, ami megmutathatóan NP-teljes (Cox, 1993; Cox és Hingorani, 1994). Az MCMC-alapú polinom idejű közelítő módszerek úgy tűnik, jól működnek a gyakorlatban (Pasula és társai, 1999). Érdekes, hogy az adattársítás problémája egy elsőrendű nyelvben végzett valószínűségi következtetés egy esete; a legtöbb valószínűségi következtetési problémától eltérően, amelyek tisztán ítéletlogikai szinten vannak, az adattársítás objektumokat és azonossági relációt foglal magában. Ezért közvetlenül kapcsolódik a  fejezetben említett elsőrendű valószínűségi nyelvekhez. Új kutatások megmutatták, hogy általában az azonosság feletti érvelés és konkrétan az adattársítás elvégezhető az elsőrendű valószínűségi keretben (Pasula és Russell, 2001).
2	0.526316	1	Az ágenshez a grafikus felületen rendelt szín lecserélése az R, G és B paraméterekben adott RGB kódú színre. Az ágensek vizuális azonosíthatóságának segítésén kívül más gyakorlati hatása (a setlabel-hez hasonlóan) nincs.
14	0.347826	0	A  ábrán a Felsorol-Együttes-Kérdezés algoritmust adtuk meg a teljes együttes eloszlásból felsorolással történő következtetésre. Az algoritmus bemenetként fogadja a P teljes együttes eloszlást, és értékeket néz meg benne. Egyszerű módosítással elérhető, hogy az algoritmus egy bn Bayes-hálót fogad bemenetként, és az együttes bejegyzéseket a bn megfelelő FVT-bejegyzéseinek összeszorzásával „nézi meg”.
5	0.181818	1	Az algoritmus tehát, miután újfent konzisztens behelyettesítéshez ért, megpróbálja még teljesebbé tenni, és a rekurzív önhivatkozást követően egy újabb, eddig még nem behelyettesített változót választani. A fokszám heurisztika szerint a még lekötetlen változók (Q, V, és T) fokszáma továbbra is zérus, tehát bármelyik választhatjuk. Tegyük fel, hogy az algoritmus a Q változót választja, és ehhez is kezdetben a RED értéket rendeli (Q=RED).
3	0.083333	0	Az előbbi elemek definiálják a problémát és egy közös adatstruktúrába foghatók, amit a problémamegoldó algoritmus bemenetének tekintünk. A probléma megoldása (solution) nem más, mint a kiinduló állapotból a célállapotba vezető út. A megoldás kvalitását az útköltségfüggvény méri, és egy optimális megoldásnak (optimal solution) a megoldások közt a legkisebb lesz az útköltsége.
12	0	0	Az előző fejezet a tervkészítés legalapvetőbb fogalmait, reprezentációit és algoritmusait vezette be. A való világ feladataihoz, mint a Hubble-űrteleszkóp megfigyeléseinek ütemezésére, gyárak működtetésére vagy hadműveletek logisztikai kezelésére jóval összetettebb tervkészítőket használnak. Ezek kiterjesztik az alaptípusokat mind a reprezentációs nyelv, mind pedig a tervkészítés és a környezet együttműködésének szempontjából. Ez a fejezet bemutatja hogyan. A  alfejezet az idő- és erőforráskorláttal rendelkező tervkészítést mutatja be. A  alfejezet az előre definiált résztervekhez történő tervkészítést írja le. A 12.3– alfejezet olyan ágensarchitektúrákat mutat be, melyeket a bizonytalan környezet kezelésére terveztek. A  alfejezet bemutatja, hogyan tervezzünk, amikor a környezet más ágenseket is tartalmaz.
14	0.73913	1	A fuzzy rendszer működését a következő példa eseten mutatjuk be. Egy vízügyi szakember hallott a fuzzy rendszerekről. Munkája során, nyomon követi valamelyik folyó vízminőségét. Az elmúlt 10 évből napi mérési adatai vannak a folyó következő jellemzőiről: * Vízhozam (m^3/s), jelölés: Q. * Víz hőmérséklete (°C), jelölés: T. * Lebegőanyag-tartalom (g/m^3), jelölés: LA. * Foszfor koncentráció (g/m^3), jelölés: P.
9	0.689655	1	Akkor a teljes történet elsőrendű logikában lehetne pl.: 1. Szobabanvan(Banán) 2. Szobabanvan(Faláda) 3. Szobabanvan(Majom) 4. Ügyes(Majom) 5. Magas(Faláda) 6. Oda-teheti(Majom,Faláda,Banán) 7. Felmászhat(Majom,Faláda) 8. ¬Közelvan(Banán,Padló) 9. Ax Ay Felmászhat(x,y) → Rálép(x,y) 10. Ax Ay Ügyes(x) ^ Közelvan(x,y) → Elérheti(x,y) 11. Ax Ay Rálép(x,y) ^ Alattavan(y,Banán) ^ Magas(y) → Közelvan(x,Banán) 12. Ax Ay Az Szobabanvan(x) ^ Szobabanvan(y) ^ Szobabanvan(z) ^ Oda-teheti(x,y,z) → Közelvan(z,Padló) ^ Alattavan(y,z) 13. Elérheti(Majom,Banán)?
2	0.105263	1	* A technika rendszerek intelligenciáját meghatározó tényezők * Az érzékelők legfontosabb jellemzői * A leggyakrabban alkalmazott érzékelő elvek: (potenciometrikus (ellenállás változásos), nyúlásmérő, piezorezisztív, termoelektromos kapacitív elektromágneses (induktív) piezoelektromos, fotokonduktív (rezisztív), és fotoelektromos) + A hőmérséklet-függés hatásai és hőkompenzálás megoldásai (mérőátalakítók) + A tipikus technikai megoldások és jellemzőik: kapcsolók, potenciométeres érzékelők, „ikerfémes” érzékelők, nyúlásmérő bélyegek, nyomásmérő cellák, piezorezisztív érzékelők, termoelemek, áram érzékelők, hang érzékelők, fényérzékelők (ellenállás, dióda, tranzisztor, CCD), fotoelemek, optikai szöghelyzet érzékelők, helyzet és gyorsulás érzékelők, részecske (foton) sokszorozók, helymeghatározó rendszerek
20	0.035714	0	Tegyük fel például, hogy a cukorkás zsák valójában csupa citromtípusú (h[5]), és az első 10 kibontott cukorka mind citromízű, ekkor P(d|h[3]) = 0,5^10, mivel a h[3] típusú zsákokban a cukorkák fele citrom.^[195] A  (a) ábra mutatja, hogyan változik az öt hipotézis a posteriori valószínűsége, ahogy sorban észleljük a 10 citromízű cukorkát. Vegyük észre, hogy a valószínűségek az a priori értékekről indulnak, ennek megfelelően kezdetben h[3] a legvalószínűbb lehetőség, és ez így is marad még az első cukor felbontása után is. A második citromízű cukorka felbontása után h[4] a legvalószínűbb, 3 és több esetén h[5] (a rettegett csupa citrom zsák). 10 citromízű cukorka után már meglehetősen biztosak vagyunk végzetünket illetően. A  (b) ábra mutatja annak a   egyenlet alapján jósolt valószínűségét, hogy a következő cukorka citromízű. Várakozásunknak megfelelően monoton növekszik az 1 felé.  ábra - (a) A   egyenletből számított P(h[i]|d[1],…,d[N]) a posteriori valószínűségek. A megfigyelések száma 1-től 10-ig terjed, és mindegyik megfigyelés citromízű cukorka. (b) A   egyenlet alapján számított P(d[N+1 ]= citrom|d[1],…,d[N]) Bayes-predikció. (a) A   egyenletből számított P(hi|d1,…,dN) a posteriori valószínűségek. A megfigyelések száma 1-től 10-ig terjed, és mindegyik megfigyelés citromízű cukorka. (b) A   egyenlet alapján számított P(dN+1 = citrom|d1,…,dN) Bayes-predikció. Fontos Példánk azt mutatja, hogy a Bayes-predikcióban az igaz hipotézis végülis dominánssá válik. Ez jellemző a Bayes-tanulásra. Bármilyen rögzített priorra, amely nem zárja ki a helyes megoldást, a hamis hipotézisek a posteriori valószínűsége végülis nullához tart. Ennek egyszerűen az az oka, hogy elhanyagolhatóan kicsi annak valószínűsége, hogy végtelen ideig „nem jellemző” adatokat generáljunk. (Ezen a ponton érvelésünk hasonló a  fejezetben, a VKH-tanulásnál alkalmazottal.) Ennél is fontosabb, hogy a Bayes-predikció optimális, akár kicsi, akár nagy adathalmazunk van. Adott a priori hipotéziseloszlás mellett bármely más predikció ritkábban lesz helyes, mint a Bayes-predikció.
24	0.833333	1	A FAST detektor is egy vizsgált pont körüli kör mentén – például egy 3 sugarú, 16 kerületű – vizsgálódik, ha ebből valahány – például 9 – eltér a pixelnél legalább egy küszöbbel magasabb értékkel, akkor az adott középpont egy jellemző pont. Egyszerre csak egy irányú eltérést érdemes vizsgálni. A FAST implementációja elérhető a szerző honlapján (ld ábra forrása).  ábra - A FAST detektor által vizsgált tartomány egy potenciális sarokpont esetén. (forrás: www.eng.cam.ac.uk ) A FAST detektor által vizsgált tartomány egy potenciális sarokpont esetén. (forrás: www.eng.cam.ac.uk )
18	0.315789	0	A  ábrán látható, hogy hogyan indul az algoritmus. 12 példánk van, amelyeket pozitív és negatív példahalmazokba sorolunk. Ezek után eldöntjük, hogy melyik attribútumot teszteljük először a fában. A  (a) ábrán megmutattuk, hogy a Konyha attribútum rossz választás lenne, mert tesztjének 4 kimenetele van, és mindegyik esetén ugyannyi pozitív és negatív példánk lesz az eredményül kapott halmazokban. Másrészt viszont a  (b) ábrán látható, hogy a Vendégek egy meglehetősen fontos attribútum, hiszen ha értéke Senki vagy Néhány, akkor határozott választ tudunk adni (az első esetben Nem, a másodikban Igen a válaszunk). Ha az attribútum értéke Tele, akkor a példák vegyes halmazát kapjuk. Általánosságban megállapítható, hogy miután az első attribútum tesztje csoportokra bontotta a példákat, mindegyik teszteredmény egy újabb döntési fa tanulási problémát eredményez, kevesebb példával és egygyel kevesebb attribútummal. Négy esetet kell áttekintenünk ezekben a rekurzív problémákban: 1. Ha van néhány pozitív és néhány negatív példánk, akkor válasszuk a legjobb attribútumot a szétosztásukra. A  (b) ábrán bemutattuk, hogy az Éhes attribútum alkalmas a megmaradó példák osztályozására. 2. Ha valamennyi megmaradt példánk pozitív (vagy mind negatív), akkor készen vagyunk: válaszolhatunk Igen-t vagy Nem-et. A  (b) ábra bemutatja ezt a Senki, illetve a Néhány esetekben. 3. Ha nem marad példa a teszt egyik kimenetele esetén, akkor ez azt jelenti, hogy nem figyeltünk meg ilyen esetet, és a szülőcsomópontban többségben levő választ adjuk. 4. Ha nem maradt attribútumunk, amelyet tesztelhetnénk, de mind pozitív, mind negatív példáink maradtak, akkor bajban vagyunk. Ez azt jelenti, hogy ezeknek a példáknak pontosan azonos jellemzőik vannak, de különböző osztályokba tartoznak. Ez egyrészt akkor fordulhat elő, ha néhány adat nem megfelelő, azt mondjuk, hogy zajosak (noise) az adatok. Másrészt akkor is előállhat ez a helyzet, ha az attribútumok nem adnak elég információt a szituáció teljes leírására, vagy a problématér valójában nemdeterminisztikus. Egyszerű megoldása lehet ennek a problémának a többségi szavazás használata.
18	0.947368	0	 Megjegyzés A fejezetben leírt standard Döntési-Fa-Tanulás algoritmus nem képes azon esetek kezelésére, amelyekben néhány példa esetén hiányoznak attribútumértékek. a. Először is valamilyen módszerre van szükségünk, amellyel egy adott döntési fa alapján be tudunk sorolni példákat akkor is, ha a fában olyan attribútumokra vonatkozó tesztek szerepelnek, amelyek értéke hiányozhat egyes példáknál. Tegyük fel, hogy az X példa A attribútumra vonatkozó értéke hiányzik, és a döntési fa teszteli A-t egy olyan csomópontban, amit X elér. Ennek az esetnek egyik kezelési lehetősége, hogy úgy teszünk, mintha a példa az összes lehetséges attribútumértékkel rendelkezne, de súlyozzuk az egyes értékeket azzal a gyakorisággal, amelyet az összes olyan példán mérünk, amely eléri a döntési fa ezen csomópontját. A besorolási algoritmusnak minden olyan csomópont összes ágát követnie kell, amelyben egy érték hiányzik, és mindegyik út mentén össze kell szoroznia a súlyokat. Írja meg azt a módosított döntési fa algoritmust, amely rendelkezik ezzel a tulajdonsággal! b. Módosítsa az információnyereség számítást a következő módon: a fa építésének fázisában egy adott csomópontba jutó tetszőleges C tanító példahalmaznál azok a példák, amelyeknek hiányzik bármely hátralevő (még nem vizsgált) attribútumhoz tartozó értéke, a C halmazban ezen attribútumra előforduló értékgyakoriság szerint kapjanak „mint-ha” értéket!
14	0.869565	1	Meg kell adnunk az ügyfél egyhavi jövedelmét: alacsony, közepes vagy magas, 0-tól 1 millió Ft-ig terjedően (Jovedelem). Azt, hogy a számláján mennyi pénz van: üres-kevés, közepes vagy sok, 0-tól 10 millió Ft-ig (Szamla). Valamint, hogy mekkora adósságot halmozott fel: nincs-kevés, közepes, sok, 0-tól 1 millió Ft-ig (Adossag). Mindezek függvényében megkapjuk az ügyfél pénzügyi jellemzőjét.
8	0.387097	0	Az egyenlőségszimbólumot használhatjuk arra, hogy tényeket állapítsunk meg egy adott függvényről, ahogy ezt megtettük az imént az Apja szimbólummal. Alkalmazhatjuk az egyenlőségszimbólumot negációval is, annak a kifejezésére, hogy két term nem ugyanaz az objektum. Ha azt akarjuk állítani, hogy Richárdnak legalább két fivére van, ezt írjuk:
14	0.73913	1	A mesterséges intelligencia ezen ágának, a fuzzy rendszer megértéséhez, a mögötte lévő alapgondolatot kell megismerni. L. A. Zadeh 1965-ös Fuzzy Sets című munkája nyomán megszületett a fuzzy halmazelmélet, ami magába foglalja ezt az alapgondolatot.
3	0.541667	0	A mélységi korlátot néha a probléma ismeretére lehet alapozni. Például Románia térképén 20 város található, így tudjuk, hogy ha létezik egy megoldás, az maximálisan 19 lépés hosszú lehet, így az ℓ = 19 egy lehetséges választás. Ha azonban a térképet tüzetesebben tanulmányoznánk, felfedeznénk, hogy minden város bármelyik másik városból legfeljebb 9 lépésben elérhető. Ez a szám, amit az állapottér átmérőjének (diameter) nevezünk, jobb mélységkorlátot ad, ami hatékonyabb mélységkorlátozott keresést eredményez. A legtöbb probléma esetén azonban mindaddig nem tudunk jó mélységkorlátot adni, amíg meg nem oldottuk a problémát.
18	0.684211	0	Néhány definícióra szükségünk lesz ahhoz, hogy ezeket a felismeréseket a gyakorlatba át tudjuk ültetni: * Jelöljük X-szel az összes lehetséges példák halmazát. * Jelölje D azt a valószínűségi eloszlást, amely alapján a példákat választjuk. * Legyen H a lehetséges hipotézisek halmaza. * Legyen N a tanító halmaz elemeinek a száma.
10	0.484848	0	Az eddig megkonstruált ágenseknek hiedelmeik vannak, továbbá az ágensek új hiedelmek kikövetkeztetésére is képesek. Ennek ellenére hiedelmekre és következtetésre vonatkozó tudással egy ágens sem rendelkezik. Az egyágenses problématerületeken egy ágensnek a saját tudásáról és következtető eljárásáról meglévő tudása hasznos a következtetés irányításában. Ha például valaki tudatában van annak, hogy Románia földrajzáról semmit sem tud, nem kell óriási erőfeszítéseket tennie, hogy az Arad és Bukarest közötti legrövidebb utat kiszámítsa. Következtethetünk a saját tudás állapotunkról annak érdekében, hogy terveket készítsük annak megváltoztatására – például azáltal, hogy Románia térképét megvásároljuk. Többágenses problématerületeken fontos, hogy egy ágens más ágensek mentális folyamataira tudjon következtetni. Egy román rendőr nyilván jól tudja, hogy melyik a legjobb út Bukarest felé, így az ágens kérhet tőle segítséget.
14	0.086957	1	Természetesen a standard epidemiológiai definíciója ezeknek nem a beavatkozásos do szemantikát használja, hanem az ''adjustált" megfigyelési valószínűségéken alapulókat. Az ``adjustálás'' (vagy ''kontrollolálás") a zavaró tényezők Z _  eliminálására szolgál úgy, hogy X  hatását Y  -ra a potenciális zavaró tényezők azonos értékei mellett vizsgáljuk (azaz feltételbe emeljük őket és ''fixen tartjuk" őket.
24	0.125	1	A CT utóbbi években tapasztalható gyors fejlődése a nukleáris kardiológia terén dolgozó fejlesztőket ösztönözte, hogy csaknem minden gyártó új kardiológiai leképező rendszerrel jelenik meg a piacon. Ezen új rendszerek jellemzője, hogy a SPECT technika indulásakor jellemző, a teljes mellkasra vonatkozó kétirányú leképezés helyett egyre inkább a mellkason belül, a szívre koncentrálják a leképezést, ezt a térrészt viszont a lehető legtöbb irányból követik egy időben.. Ezen váltást egyrészről a fejlettebb rekonstrukciós algoritmusok (egyszerű szűrt visszavetítésről a számításigényesebb iteratív rekonstrukcióra áttérés), másrészt a kisebb helyigényű, mégis nagyobb érzékenységű „solid state” detektor rendszerek piacképessé válása tette lehetővé. A SPECT leképezés már ismert jellemzője volt a detektortól mért távolság arányában romló felbontó képesség. Az újabb rekonstrukciós algoritmusoknál ezt korrekciós faktorként számításba véve a képminőség oly mértékben javítható, hogy fele akkora impulzusszámmal a korábban megszokott képminőség létrehozható. A SPECT készülékek kombinálása CT berendezéssel ugyanakkor kínálja az CT-s abszorpciós algoritmusok alkalmazását. Az abszorpció korrigált képek homogenitása jelentősen javul, a vizsgálat normál volta nagyobb biztonsággal kimondható. Amennyiben a SPECT felvétel EKG kapuzása révén a falmozgás zavar jelenléte is kizárható, a nyugalmi vizsgálat biztonsággal elhagyható, tovább csökkentve a vizsgálat sugárterhelését. A fenti metodikák kombinációjával 1 mSv alatti sugárterhelésű SPECT vizsgálatok is realitássá válnak. Egy 2008-ban megjelent, 1000 tünetmentes egyén CT-koronarográfiás adatát feldolgozó tanulmány szerint bár a vizsgált populáció halálozása a másfél éves követési periódus alatt 0% volt, a betegek közel 10%-a invazív koronarográfiára került, több mint 1 %-ukban PCI is történt, miközben noninvazív morfológiai és funkcionális képalkotás csak betegeik 0,1%-ában valósult meg. A funkcionális és morfológiai képalkotás összekapcsolása a betegellátás szempontjából hasznos. Kedvező olyan diagnosztikus központok kialakítása, ahol a különböző metodikák azonos szakember gárda számára egyaránt hozzáférhetők, hogy a betegutakat ne a szakemberek jártassága, a metodikák hozzáférhetősége, hanem a betegek szükséglete határozhassa meg. Az alacsony-közepes rizikójú betegekben a koronária betegség jelenlétének igazolására a konzervatív terápia vezetéséhez a CT preferált alkalmazása javasolható. Kóros eredmény esetén a szűkület funkcionális szignifikanciájának megítélésére, invazív kezelés szükségességének mérlegelésére a CT-re épülő SPECT ajánlható. Ismert koronária betegség progressziójának, megítélésére, az invazív kezelés időzítésére elsősorban a funkcionális vizsgálat alkalmas. Direkt invazív koronarográfia elsősorban akkor javasolható, ha pozitív eredmény esetén a beteg egy ülésben történő invazív kezelésével idő nyerhető, és ezzel a beteg rizikója egyértelműen csökkenthető.
9	0.413793	0	A logikai következtetési algoritmusoknak a második nagy családja a  alfejezetben bemutatott hátrafelé láncolás (backward chaining) megközelítést használja. Ezek az algoritmusok a célból kiindulva hátrafelé dolgoznak, láncszerűen haladva a szabályokon keresztül, hogy megtalálják a bizonyítást alátámasztó már ismert tényeket. Először bemutatjuk az alapvető algoritmust, majd leírjuk, hogyan használják ezt a logikai programozásban (logic programming), amely a legelterjedtebb formája az automatizált következtetéseknek. Azt is látni fogjuk, hogy a hátrafelé láncolásnak vannak hátrányai is az előrefelé láncolással szemben, és meg fogjuk vizsgálni, milyen módon kerekedhetünk felül ezeken. Végül megmutatjuk a logikai programozás és a kényszerek kielégítésének problémája közötti szoros kapcsolatot.
23	0.055556	0	A  fejezet a nyelv logikai modelljét adta meg: CFG-ket és DCG-ket használtunk, hogy egy adott karakterfüzérről eldöntsük, eleme-e vagy sem egy nyelvnek. Ebben az alfejezetben számos valószínűségi modellt vezetünk be. A valószínűségi modellek számos előnnyel rendelkeznek. Kényelmesen taníthatók adatok alapján: a tanulás mindössze az előfordulások megszámlálásából áll (némi tűréssel a kis mintaméret okozta hibák miatt). Továbbá robusztusabbak (mivel bármely karakterfüzért elfogadnak, habár kis valószínűséggel), visszatükrözik azt a tényt, miszerint nem a beszélők 100%-a ért egyet abban, hogy mely mondatok részei a nyelvnek; valamint alkalmasak a többértelműség feloldására: a valószínűségre támaszkodva kiválasztható a legvalószínűbb értelmezés.
6	0.05	0	A matematikai játékelmélet (game theory) a gazdaságtan egyik ága, mely a többágenses környezeteket játéknak tekinti, feltéve, hogy egy-egy ágens hatása másokra „szignifikáns”, függetlenül attól, hogy az ágensek kooperatívak vagy versengők.^[54] Az MI-ben a „játékok” általában igen specializáltak – amit a játékelméleti szakemberek determinisztikus, váltott lépésű, kétszemélyes, zérusösszegű teljes információjú játékoknak (zero-sum games of perfect information) neveznek. A mi nyelvezetünkben ez azt jelenti, hogy két ágens helyezkedik el egy determinisztikus és teljesen megfigyelhető környezetben, a cselekvéseik váltják egymást, és a játék végén a hasznosságértékeik mindig azonosak és ellentétes előjelűek. A sakkban például, ha az egyik játékos győz (+1), akkor a másik szükségszerűen veszít (–1). Éppen a hasznosságértékekben tapasztalt ellentéttől lesz a helyzet ellenséges. Ebben a fejezetben röviden foglalkozunk a többjátékos játékokkal, a nem zérusösszegű játékokkal és a sztochasztikus játékokkal, de a tényleges játékelmélettel csak a  fejezetben fogunk foglalkozni.
24	0.666667	0	Vizsgáljunk meg most az objektumfelismerésre szolgáló speciális algoritmusokat! Az egyszerűség érdekében kétdimenziós összeállításban fogjuk a problémát vizsgálni, ahol mind a tanuló, mind a tesztminták kétdimenziós fényességábrák formájában adottak. Olyan területeken, mint például a kézírás-felismerés, ez nyilvánvalóan elegendő. Még háromdimenziós objektumok esetében is hatékony stratégia az objektumokat több kétdimenziós nézettel reprezentálni (lásd  ábra), és az új objektumokat a (valamilyen reprezentációjú) tárolt nézetekkel összehasonlítva osztályozni.  ábra - Két háromdimenziós tárgy többféle nézete Két háromdimenziós tárgy többféle nézete
21	0.125	1	1. A képlet a hasznosság-alapú un. időkülönbség megerősítéses tanulás képlete. 2. Az U(i) az aktuálisan frissített állapot hasznossága, az U(j) az azt követő (és a cselekvések mentén az U(i)-t időben követő) állapot hasznossága, az R a pillanatnyi megerősítés értéke és α a bátorsági tényező. 3. A képlet javítani szeretne a naiv megerősítéses tanulás gyenge konvergenciáján azáltal, hogy az adott állapot a visszaterjesztett megerősítéssel való hasznosság-frissítését nem függetleníti a vele kauzális kapcsolatban lévő állapotok hasznosság-értékeitől, amely a tényleges hasznosságra nyilván van befolyással, de az alap (naiv) megoldás ezt a hatást figyelembe nem veszi. 4. Megtanult állapotban az ágens ismeri az állapotok hasznosságát és tud racionális döntést is hozni, hogy melyik állapot felé kellene tartania. E célból azonban ki kell számítania, hogy milyen cselekvéshez kellene folyamodnia. A megtanult állapot-hasznosságokon túlmenően az ágensnek tehát rendelkeznie kell egy számítható önmaga modelljével, hogy mikor mire képes.
14	0.086957	1	Definition 1.5 Egy irányított, körmentes gráf (DAG) G  a p(V)  eloszlás viszonylatában Bayes háló, ha a valószínűségi változókat G  csomópontjai reprezentálják és (G,p)  eleget tesz a globális Markov feltételnek úgy, hogy G  minimális (azaz él már nem hagyható el a feltétel megsértése nélkül).
6	0.1	1	A „Vezérürü” játék nagyon hasonló a „Gyáva nyúl” játékhoz, hiszen ez is egy olyan vegyes motivációjú játék (melynek két szimmetrikus Nash-egyensúlya van), ahol a kölcsönös versengés a legrosszabb. Viszont itt a Nash-egyensúlyi kimenetelek esetén a játékosok kifizetése magasabb, mint kölcsönös kooperáció esetén. Tehát picit más a kimenetelek preferencia-sorrendje.
22	0.259259	0	[VP: [Verb: is][Adjective: dead]]] Fontos Az elemzés tekinthető egy levezetési fa megkeresésének folyamataként. A keresési tér meghatározásának két szélsőséges (és sok közbülső) módja van. Az egyik szerint kiindulhatunk az S szimbólumból, és kereshetünk egy olyan fát, amely leveleiben tartalmazza a szavakat. Ez az úgynevezett fentről lefelé elemzés (top-down parsing) (mivel S-et a fa tetejére helyezzük). Másrészt kiindulhatunk a szavakból, és kereshetünk egy fát, ahol S a gyökércsomópont. Ez a lentről felfelé elemzés (bottom-up parsing).^[223] A fentről lefelé történő elemzés pontosan definiálható a következő keresési problémaként: * A kezdeti állapot (initial state) egy elemzési fa, amelynek S a gyökércsomópontja, és egy ismeretlen gyerekcsomópontja van: [S: ?]. Általánosságban a keresési térben minden állapot egy levezetési fa. * Az állapotátmenet-függvény (successor function) kiválasztja azt a legszélső csomópontot bal oldalon a fában, amelynek ismeretlen gyereke van. Ezek után a nyelvtanban olyan szabályokat keres, amelyek ezt a csomópontot tartalmazzák gyökérelemként. Minden ilyen szabályra generál egy következő állapotot, ahol a ? szimbólumot felcseréli a szabály jobb oldalának megfelelő listával. Például az ℰ[0] nyelvtanban két szabály van S-re, így az [S: ?] fát a következő két származtatottal cseréli le:
10	0.606061	0	A termékhierarchián túlmenően rendelkeznünk kell a kategórianevek gazdag szótárával. Az élet sokkal egyszerűbb lenne, ha a kategóriák és az azokat megnevező füzérek között egy-egyértelmű kapcsolat állna fenn. A szinonima (synonymy) problémáját – két név, például „laptop számítógép” és „laptop” ugyanazon kategória számára – már láttuk. Van még továbbá az egyértelműsítés (ambiguity) problémája – egy név két vagy több különböző kategória számára. Ha például a  (b) ábrán látható tudásbázishoz a:
1	0.103448	1	Ontológiák széles körben használtak tudásbázisok, elosztott rendszerek esetén. Alap ontológiának nevezzük azokat az ontológiákat, amik nem tartoznak egy konkrét probléma tartományához, doménjéhez, általános használatra készülnek. Egyetemesen elfogadott alap ontológia még nem létezik, számos megvalósítással kapcsolatos problémába ütköztek: nem magától értetődő a világ fogalmakra bontása, a „létezők” meghatározása. Az ágens működésének hatékonysága pedig attól függ, hogy az ismereteit a világról milyen mértékben képes kategorizálni. A kategorizáció a tárgyak fogalmakhoz rendelése, mely lehetővé teszi a közvetlenül nem észlelt információk következtetését. Erre épül a meghatározó tulajdonságok modellje: egy fogalom jelentését tulajdonságainak összekapcsolt listájával adhatjuk meg. Egy ilyen listában szereplő tulajdonságoktól el kell várni, hogy legyen mindegyik szükséges a fogalom meghatározásához, illetve legyenek elemiek, azaz nem bonthatóak további tulajdonságokra. Ezáltal biztosítható, hogy egyértelműen besorolható egy fogalom egy kategóriába. Arisztotelész kezdte el a kategóriák kialakítását, fogalmazta meg Metafizika című művében [4]. Szerinte a tudományoknak három dologra van szüksége: * Genus (nem): mely dolgok képezik a vizsgálat tárgyát * Principium: a bizonyítás kiinduló állításai * Tulajdonságok: adott genushoz tartozó dolgok tulajdonságai
23	0.055556	0	Ez a könyv félmillió szavával nem tartalmaz elég adatot ahhoz, hogy jó minőségű bigram modellt lehessen előállítani belőle, nem is beszélve a trigram modellről. A könyv szókincse körülbelül 15 ezer különböző szót tartalmaz, tehát a bigram modell 15 000^2 = 225 millió szópárt tartalmaz. Világos, hogy a szópárok legalább 99,8%-a 0 gyakoriságú, de nem akarjuk, hogy a modell azt állítsa, hogy ezek a szópárok lehetetlenek. Szükségünk van valamilyen simításra (smoothing) a nulla gyakoriságok felett. A legegyszerűbb megoldás az adj-hozzá-egyet simítás (add-one smoothing): minden lehetséges bigram gyakoriságához hozzáadunk egyet. Azaz amennyiben a korpuszban N szó és B lehetséges bigram található, akkor minden c gyakoriságú bigramhoz egy (c + 1)/(N + B) értékű valószínűség-becslőt rendelünk. Ez a módszer megszünteti a nulla valószínűségű n-gramok problémáját, de az a követelmény, hogy minden gyakoriságot pontosan eggyel kell növelni, kétséges, és rossz becslésekhez vezethet.
14	0.73913	1	A változók az adott problémához kapcsolódó jellemzők. A fenti példánál maradva négy változónk van: vízhozam, víz hőmérséklet, lebegőanyag-tartalom és foszfor koncentráció. Megkülönböztetünk bemeneti és kimeneti változókat.
15	0.777778	0	A fonetikai változékonyság második forrása a koartikuláció (coarticulation). Például a [t] beszédhangnál a nyelv a szájpadlásnál helyezkedik el, az [ow]-nál viszont a száj alján. Gyors beszédnél a nyelv sokszor közbülső pozícióba kerül, melynek eredménye inkább a [t ah], és nem a [t ow]. A  ábra alsó része a „tomato” kiejtésének egy bonyolultabb modelljét mutatja, amely ezt a koartikulációs hatást figyelembe veszi. Ebben a modellben négy különböző út van, és azt kapjuk, hogy:
20	0.107143	1	2.) Missing at Random (MAR): Véletlen hiányzás, ahol a hiányzás valószínűsége valamely más megfigyelhető változó(k) értékeitől függ. Tehát ebben az esetben a hiányzás már valamilyen mértékben jósolható.
21	0.4375	0	ahol R^+ a tetszőleges állapotban kapható legnagyobb jutalom optimista becslése, míg N[e] egy rögzített paraméter. Ennek alkalmazásával az ágens minden állapot-cselekvés párt legalább N[e] alkalommal kipróbál.
21	0.5625	0	Tehát ha (θ[0], θ[1], θ[2]) = (0,5, 0,2, 0,1), akkor  . Adott kísérlethalmaz esetén egy sor értéket nyerünk az értékekre, és megtalálhatjuk a – mondjuk négyzetes értelemben – legjobb illesztést, standard lineáris regressziót használva (lásd  fejezet).
3	0.208333	1	Első megközelítésben alkalmazzunk egy egyszerű intuitív megoldást. A sakktábla legbaloldalibb oszlopába helyezzünk el egy királynőt (legfelső = legkisebb sorszámú sorba, a sorok sorszáma lefelé haladva növekszik). Ezt követően minden – még nem foglalt – legbaloldalibb (üres) oszlopba helyezzünk egy-egy királynőt, úgy hogy azt ne támadja egyetlen másik sem. Tehát az adott királynőt mindig a legkisebb sorszámú olyan sorba helyezzük, ahol az nem kerül ütésbe. Ha a királynő egy adott sorban ütésbe kerülne, akkor az adott királynő oszlopában ahhoz a sorhoz tartsuk nyilván, hogy hány darab másik királynő által kerülne ütésbe. Ha a lerakás során olyan eset fordulna elő, hogy az adott királynőt bármelyik sorba is helyeznénk, az mindig ütésbe kerülne más királynő/királynők által, akkor a királynőt helyezzük abba a legkisebb sorszámú sorba, ahol az a legkevesebb másik királynővel kerülne ütésbe. Ezzel a lépéssel azonban nem lenne helyes a lerakás, ezért a most lerakott királynőtől balra eső oszlopban (konkrétan abban az oszlopban, ahonnan a királynőnk „ütve van”), (nyilván ez az oszlop létezik, hiszen a tőlünk balra eső „térfélről” kerültünk ütésbe) helyezzük a királynőt az abban az oszlopban lévő legkisebb sorszámú olyan sorba, ahol az a legkevesebb, tőle balra eső királynővel kerülne ütésbe. Szerencsés esetben létezik olyan sor is, ahol a királynő nem kerül ütésbe. Nyilván ekkor az előbbi szabálynak megfelelően ezt a sort választjuk, illetve ha több ilyen sor is van, akkor ezek közül a legkisebb sorszámút. Ebben az esetben már helyes a lerakás, ellenkező esetben ismételjük az eljárást addig (mindig balra haladva), amíg végül helyes lerakáshoz jutunk (mindig lesz ilyen). Majd, ha még maradt bábunk, akkor azokat is hasonlóan próbáljuk meg lerakni. Ez az eljárás biztosan ad jó megoldást. Az eljárással csak kb. 2000 állapot fordul elő.
22	0.962963	0	Írjon három szintaktikailag helyes és három helytelen angol mondatot, amelyet a három előbbi nyelvtan állít elő! Lényegében különbözzenek egymástól, legalább hat szó hosszúak legyenek, és egy teljesen új szókincsre kell épülniük (amit lehetőleg Ön határozzon meg). Javasoljon mindhárom nyelvtanra olyan újítást, amely elkerüli a nem helyes mondatok előállítását!
10	0.818182	0	Egy alternatíva a stabil modell (stable model), ami egy olyan minimálmodell, ahol minden atomnak igazolása (justification) van, azaz létezik hozzá olyan szabály, amelyben a fej az atom, és ahol a törzs minden literálja kielégített. Formálisan M egy H program egy stabil modellje, ha M a H az M-re vonatkozó redukáltjának (reduct) egy egyértelmű minimálmodellje. Egy H program redukáltját úgy definiáljuk, hogy H-ból először minden olyan szabályt törlünk, amely törzsében a not A literál szerepel, ahol A a modell része, majd a maradó szabályokban a negatív literálokat töröljük. Mivel H redukáltja most már egy Horn-klóz lista, egy egyértelmű minimálmodellel kell rendelkeznie.
22	0.777778	0	Az utalásfeloldás (reference resolution) egy olyan névmás vagy határozott főnévi kifejezés értelmezése, amely a világ egy objektumára utal.^[235] A feloldás a világról szóló tudáson és a szöveg korábbi részein alapszik. Vizsgáljuk a következő szakaszt:
10	0.424242	0	Most egy időskálát konstruálunk, amelynek pontjait időpillanatokhoz rendeljük hozzá; ezzel abszolút időpontokat kapunk. Az időskála tetszőleges lehet. Az időt másodpercekben fogjuk mérni, és kimondjuk, hogy a 0. idő az 1900. január 1-jei (GMT) éjfél. A Kezdet és a Vég függvények az időintervallum legkorábbi és a legkésőbbi időpillanatát adják vissza, az Idő függvény egy időpillanathoz tartozó pontot keres ki az időskálán. Az IdőTartam függvény megadja a kezdeti idő és a végidő közötti különbséget.
17	0.4	0	Most tegyük fel, hogy a Bellman-frissítést (a   egyenletet) egy B operátornak tekintjük, aminek egyszeri alkalmazása az összes állapot hasznosságát frissíti. Jelölje U[i] az összes állapot i-edik iterációbeli hasznosságának a vektorát. Ekkor a Bellman-frissítési egyenletet felírhatjuk úgy, hogy
4	0.916667	0	A genetikus programozás (genetic programming) a genetikus algoritmusokkal közeli rokonságban van. Az elsődleges különbség az, hogy a mutált és az összekombinált reprezentációk nem bitfüzérek, hanem programok. A programokat kifejezésfák alakjában reprezentáljuk. A kifejezéseket valamilyen standard nyelvből meríthetjük, mint például a Lispből, de lehetnek egy olyan nyelv elemei, melyet kifejezetten áramkörök, robotszabályozók stb. reprezentálására terveztünk. A keresztezés a részfák és nem a részfüzérek összeillesztését jelenti. A mutáció ezen formája garantálja, hogy az utódok jól definiált kifejezések lesznek, ami nem biztos, hogy sikerülne, ha a programok manipulációját füzérszinten oldanánk meg.
24	0.958333	1	 Az illesztési algoritmust egy ipari alkalmazásnál szeretnénk használni, ahol lapos alkatrészeket egy szállítószalag visz, a szalag felett pedig egy függőlegesen elhelyezett kamera figyel. Az alkatrész elhelyezkedését három változó határozza meg, egy az elfordulást és kettő az alkatrész kétdimenziós pozícióját. Ez egyszerűsíti a problémát, és a TRANSZFORMÁCIÓT-KERES függvény az egymásnak megfelelő kép- és modelltulajdonságokból két párt igényel ahhoz, hogy az elhelyezkedést azonosítsa. Határozza meg csak ebben a környezetben az illesztésnek a legrosszabb esetre vett komplexitását.
11	0.230769	0	Másodszor az Üres(b) predikátumot úgy értelmezhetjük, hogy „b tetején van elég szabad hely, ahová a kockát letehetjük”. Ezek szerint az Üres(Asztal) mindig igaz. Az egyetlen probléma, hogy semmi nem gátolja a tervkészítőt abban, hogy a Mozgat(b, x, Asztal) cselekvést alkalmazza az AsztalraTesz(b, x) helyett. Vagy együtt élünk ezzel a problémával (amely egyébként a szükségesnél nagyobb keresési teret eredményez, de nem vezet hibás válaszokhoz), vagy bevezethetjük a Kocka predikátumot, és a Mozgat cselekvés előfeltételeihez hozzátehetjük a Kocka(x) ∧ Kocka(b) részt.  ábra - A kockavilág tervkészítési problémája: egy három kockából álló torony építése. A [Mozgat(B, Asztal, C), Mozgat(A, Asztal, B)] cselekvéssor egy lehetséges megoldás. A kockavilág tervkészítési problémája: egy három kockából álló torony építése. A [Mozgat(B, Asztal, C), Mozgat(A, Asztal, B)] cselekvéssor egy lehetséges megoldás.
4	0.125	0	Mivel g(n) megadja a kiinduló csomóponttól az n csomópontig számított útköltséget, és h(n) az n csomóponttól a célcsomópontba vezető legolcsóbb költségű út költségének becslője, így az alábbi összefüggést kapjuk:
19	0.454545	0	Az a döntés, hogy melyik szabályt érdemes létrehozni, végső soron a hatékonyságon múlik. A MAT által biztosított hatékonyságnövekedésnek három tényezője van: 1. A tudásbázishoz nagyszámú szabály hozzáadása a következtetési folyamatot lelassíthatja, mivel a következtetési mechanizmusnak ezeket a szabályokat akkor is meg kell vizsgálnia, amikor ezek nem járulnak hozzá a megoldáshoz. Másképpen fogalmazva, a keresési tér elágazási tényezője (branching factor) ilyenkor növekszik. 2. Ahhoz, hogy ezt a jelenséget kompenzáljuk, a létrehozott szabályoknak lényeges sebességnövekedést kell garantálniuk az általuk lefedett problémapéldányok esetében. Az ilyen sebességnövekedés főleg abból származik, hogy a származtatott szabályok révén elkerülhetjük azokat a holtágakat, amelyekbe különben a bizonyítás során belemennénk, illetve abból, hogy a bizonyítások rövidebbek lesznek. 3. A származtatott szabályoknak a lehető legáltalánosabbaknak kell lenniük, hogy a lehető legnagyobb esethalmazt fedjék le.
19	0.727273	0	A Foil program klózok egy halmazát alakítja ki, mindegyik Nagyszülője(x, y)-nal mint fejjel. A klózoknak a 12 pozitív példát a Nagyszülője(x, y) reláció példányosításának kell osztályozniuk, a többi 388-at viszont kizárni. A klózok Horn-klózok, melyeket negált literálokkal bővítünk ki, ahol a negálást mint kudarcot használjuk, hasonlóan a Prologhoz. Egy üres testű klózzal kezdünk:
27	0.4	1	A korlátozott optimalitás alapötlete, hogy már nem általában az ágens-függvényekre tesz megkötést, hanem adott ágens-architektúrán futtatott ágens-programokra. Egy ágens ugyebár tekinthető egy architektúra és egy program együttesének. Az ágens architektúráján futatott program eredményezi az ágens viselkedését (amit egy megfelelő ágens-függvénnyel is le lehet írni). Az ágens architektúrája fix. Például fix a házi robot váza, processzora, memóriája, szenzorai és beavatkozói (a hardvere), és találjuk meg ehhez az architektúrához a legjobb programot!
18	0.263158	0	Az ítéletlogikai nyelvek területén a döntési fák teljes kifejezőképességgel bírnak, ami azt jelenti, hogy tetszőleges logikai (Boole) függvény felírható döntési faként. Ezt triviálisan megvalósíthatjuk, ha a függvény igazságtáblájának minden sorát megfeleltetjük a döntési fa egy útjának. Ez exponenciálisan növekvő döntési fára vezet, mivel az igazságtábla exponenciálisan növekvő számú sort tartalmaz. Nyilvánvalóan a döntési fák sok függvényt jóval kisebb fával képesek reprezentálni.
9	0.103448	0	és megválhatunk az univerzális kvantorral ellátott mondattól. Mármost, a tudásbázist alapvetően ítéletkalkulus-belinek tekinthetjük, ha az alap atomi mondatokat, mint a Király(János), Mohó(János) stb., ítéletlogikai szimbólumoknak tekintjük. Így tehát a  fejezetben bemutatott bármely teljes ítéletlogikai algoritmust alkalmazhatjuk, hogy olyan következtetéshez juthassunk, mint a Gonosz(János).
5	0.181818	1	Látható, hogy egyetlen üres értékkészlet sem adódott, így folyhat tovább az algoritmus bármiféle visszalépés nélkül. Újfent (a rekurzió következő szintjén) a még behelyettesítetlen változók közötti választáshoz érünk. Az MRV heurisztika most a következő értékeket adja:
17	0.733333	0	Az angol árverés hátrányos tulajdonsága a nagy kommunikációs költség, így vagy egy szobában kell az árverésnek lezajlania, vagy az összes ajánlattevőnek nagysebességű, biztonságos kommunikációs csatornával kell rendelkeznie. Egy kevesebb kommunikációt igényő alternatív működésmód a zárt ajánlatú árverés (sealed bid auction). Ebben minden ajánlattevő egyetlen ajánlatot tesz, és ezt közli az árverezővel, és a legnagyobb ajánlat győz. Ennek a működésmódnak az esetében az a stratégia, aminek az árajánlata a valódi érték, már nem domináns. Ha valakinek az értéke v[i], és az elvárása szerint az összes többi játékos maximális ajánlata b[m] lesz, akkor az árajánlatának a v[i] és b[m] + ε közül az alacsonyabbnak kell lennie. A zárt ajánlatú árverés két hátránya, hogy előrdulhat, hogy a legnagyobb v[i] értékkel bíró játékos nem kapja meg az árukat, illetve az, hogy a játékosoknak fáradozniuk kell a többi játékos stratégiáján való elmélkedéssel.
1	0.068966	1	1983-ban Stephen Wolfram mutatta be a Rule 30 nevű egy dimenziós bináris sejtautomatát [KCA], amelyet A New Kind of Science című könyvében is részletez [KSW]. Wolfram osztályozását használva ez az automata 3-as osztályú, vagyis aperiodikus, kaotikus viselkedést mutat.
16	0.826087	0	Ahogy erről a  fejezetben szóltunk, a korai szakértői rendszerekkel kapcsolatos kutatás inkább kérdések megválaszolására irányult, mint döntések meghozatalára. Azok a rendszerek, amelyek cselekvéseket javasoltak a véleménynyilvánítás helyett, valójában ha-akkor szabályokkal érték ezt el, nem pedig a kimenetelek és preferenciák közvetlen reprezentációjával. A valószínűségi hálók megjelenése az 1980-as évek vége körül azonban lehetővé tette olyan nagy rendszerek megépítését, amelyek helyes valószínűségi következtetéseket származtattak a tényekből. A döntési hálók megjelenése azt jelentette, hogy olyan szakértői rendszereket lehet kifejleszteni, amelyek optimális döntéseket javasolnak a felhasználó preferenciáinak és az elérhető tényeknek megfelelően.
9	0.517241	0	Mielőtt Warren a Prolog fordítót elkészítette volna, a logikai programozás túl lassú volt általános célú felhasználáshoz. A Warren és mások által létrehozott fordítók lehetővé tették, hogy a Prolog kód olyan sebességet érjen el, amelyek – különböző standard tesztek szerint is – versenyképessé tették a C nyelvvel (Van Roy, 1990). Természetesen az a tény, hogy egy tervkészítőt vagy egy elemzőt egy természetes nyelvhez néhány tucat Prolog sorban meg lehet írni, lényegesen vonzóbbá teszi a Prologot a C-nél a legtöbb kisebb MI-kutatási projekt prototípusának az elkészítésénél.
17	0.666667	0	Most már tudjuk, hogy a játék valódi hasznossága –1/12 és –1/12 között helyezkedik el, azaz pontosan –1/12! (A tanulság az, hogy ebben a játékban jobb O-nak lenni, mint E-nek.) Továbbá, a valódi hasznosságot a [7/12: egy; 5/12: kettő] kevert stratégiával lehet elérni, amit mindkét játékosnak érdemes követnie. Ezt a stratégiát a játék maximin egyensúlyának nevezik (maximin equilibrium), és ez egy Nash-egyensúly. Vegyük észre, hogy az egyensúlyi kevert stratégia minden komponensének ugyanaz a várható hasznossága. Ebben az esetben mind az egy-nek, mind a kettő-nek ugyanaz a várható hasznossága, –1/12, mint magának a kevert stratégiának. Fontos A snóblijátékra vonatkozó eredményünk Neumann általános eredményének egy példája: minden kétszemélyes, zérusösszegű játéknak van egy maximin egyensúlya, amikor kevert stratégiák lehetségesek. Továbbá, egy zérusösszegű játékban minden Nash-egyensúly mindkét játékos számára egy maximin. A maximin egyensúly megtalálásának általános algoritmusa zérusösszegű játékokban kissé bonyolultabb, mint amit a  (e) és  (f) ábra sugallhatna. Ha n cselekvés lehetséges, akkor egy kevert stratégia egy pont az n dimenziós térben, és az egyenesek hipersíkok lesznek. Az is lehetséges, hogy a második játékos számára bizonyos tiszta stratégiák másokkal domináltak, így ezek nem optimálisak az első játékos egyetlen stratégiája ellen sem. Az összes ilyen stratégia eltávolítása után (amit lehet, hogy ismétlődően kell elvégezni), az optimális választás a gyökérnél a legmagasabb (vagy a legalacsonyabb) metszéspontja a megmaradt hipersíkoknak. Ennek a választásnak a megtalálása lineáris programozási feladat (linear programming): egy célfüggvény maximálása lineáris kényszerek mellett. Ilyen problémák szabványos technikákkal megoldhatók polinomiális időkomplexitással a cselekvések számában (és a jutalomfüggvény megadásához használt bitek számában, ha precízek akarunk lenni).
20	0.785714	0	Ha figyelembe akarunk venni nem teljesen összekötött hálókat is, akkor szükségünk van egy hatékony módszerre, amely a lehetséges összeköttetési topológiák nagyon nagy terében keres. Az optimális agykárosodás (optimal brain damage) módszere egy teljesen összekötött hálóból indul ki, és összeköttetéseket távolít el belőle. Miután a hálót első menetben tanítottuk, egy információelméleti megközelítés segítségével meghatározzuk az eltávolítható összeköttetések optimális készletét. A hálót ezek után újratanítjuk, és ha teljesítménye nem csökkent, az eljárást megismételjük. Az összeköttetések eltávolításán felül olyan neuronokat is eltávolíthatunk, amelyek nem sokkal járulnak hozzá a megoldáshoz.
7	0.8	0	A hozzáadott diszjunktok, a K(C[3,4])^t és a^ K(C[4,3])^t lehetővé teszik az ágens számára, hogy a szellő jelenlétét meghatározza a szomszédos négyzetekben levő csapdák jelenlétéből, ami teljesen ésszerűnek tűnik. Így viszont sajnos a szellő tulajdonság függ a szomszédos csapdáktól, és a csapdák függenek a szomszédos négyzetek szellő tulajdonságától, ahogy azt a   egyenlet leírja. Ezáltal a teljes áramkör tartalmazna hurkot.
24	0.833333	1	Az általánosított Hough transzformáció bármilyen alakzat keresésére alkalmazható, nem kell, hogy paraméterekkel leírható legyen. A keresendő alakzat modellje képként adott, az algoritmus pedig a vizsgál pixelekkel konzisztens transzformációkat keres.
15	0.222222	0	Az alapalgoritmus második hátránya, hogy a folyamatos (online) működéshez módosítást igényel. Ekkor ugyanis a korábbi időpontokhoz simított becsléseket kell kiszámítanunk, amint folyamatosan új megfigyelések érkeznek a sorozat végéhez. A leggyakoribb követelmény az állandó időkülönbségű simítás (fixed-lag smoothing), ami a P(X[t–d]|e[1:t]) simított becslés kiszámítását jelenti egy rögzített d-re. Azaz a simítást a jelenlegi t időpillanat előtt d lépéssel lévő időpontra végezzük el; t növekedését a simításnak is követnie kell. Nyilvánvaló, hogy lefuttathatjuk az előre-hátra algoritmust a d lépéses „ablakban”, amint egy új bizonyíték adódik, de ez nem tűnik hatékonynak. A  alfejezetben látni fogjuk, hogy az állandó időkülönbségű simításnál egy frissítés bizonyos esetekben állandó idő alatt megtehető, függetlenül a d időkülönbségtől.
27	0.4	1	Egy aszimptotikusan korlátozott optimális ágens tehát jó nyomon jár, csak egy valahányszor nagyobb teljesítményű architektúrára van szüksége. A hangsúly tehát továbbra is az ágens programján van, ámde ez a megkötés már valamivel enyhébb, mint a korlátozott optimalitás (hiszen nem kell máris az adott környezet és architektúra viszonylatában vett legjobb ágens-programot megadnunk, csak egy olyat, amelyik kellően nagy teljesítményű architektúrán futtatva az lenne).
6	0.1	1	Hogyan kapjuk például az (11, 1) tiszta stratégia-kombináció esetén a (0,0) kifizetési vektort, ha az extenzív alakban sehol sem szerepel zérus kifizetés? ...a válasz egyszerű: a normál alakban már csak várható értékek szerepelnek, és ezeknek nem feltétlen kell megegyeznie az extenzív alak leveleiben található értékekkel. Példának okáért nézzük tényleg az (11, 1) stratégia-kombinációt. Ha az 1-es játékos 11 szerint játszik, akkor ez azt jelenti, hogy akár Red-et kap, akár Black-et, mindig emelni fog (Raise). Ha ezek után (avagy emellett) a 2-es játékos az 1-es számú stratégiája szerint cselekszik, azaz tartja a tétet (Meet), akkor a lejátszás során, attól függően, hogy C mit oszt le az 1-es játékosnak, vagy a (2,-2), vagy pedig a (-2,2) kimenetel áll élő, mindkettő 1/2 valószínűséggel. Ennek alapján pedig az 1-es játékos várható haszna az (11, 1) tiszta stratégia-kombináció esetén 1/2*2+1/2*(-2)=0, míg a 2-es játékos haszna 1/2*(-2)+1/2*2=0. Tehát az (11, 1) tiszta stratégia-kombináció esetén így áll elő a normál alakban látható (0,0) kifizetési vektor. Hasonlóképpen az összes többi kifizetésnek is utánaszámolhatunk. Ezt a terjedelem csökkentése érdekében újfent a Tisztelt Olvasóra bíznánk.
24	0.208333	1	Színes képérzékelők, melyeknél a látható fényt több tartományra bontva érzékelik a fényességet, s minden képpontról több adatot szolgáltatnak. Ezek az adatok az egyes tartományokban érzékelt jelek erősségével függenek össze. Általában az adott pontbeli pirosságot, zöldességet, illetve kékességet jellemzik. A színes képalkotás történhet színváltással pl. olyan szkennerek esetében, melyek színszűrők cserélgetésével dolgoznak, vagy egyidejűleg pl. a képet alapszínekre bontó, három képérzékelőt tartalmazó színes kamerák esetében.
14	0.869565	1	A második csoportba a pénzügyi jellemzők kerültek: jövedelem, számla, adósság.  ábra -  ábra. Pénzügyi jellemzők: 3 bemenet, 1 kimenet, 27 szabály  ábra. Pénzügyi jellemzők: 3 bemenet, 1 kimenet, 27 szabály  ábra -  ábra. Pénzügyi jellemzők: 3 bemenet, 1 kimenet (jobb oldalon, lenn), kibontva  ábra. Pénzügyi jellemzők: 3 bemenet, 1 kimenet (jobb oldalon, lenn), kibontva  ábra -  ábra. Pénzügyi jellemzők: a bemenetek felülete  ábra. Pénzügyi jellemzők: a bemenetek felülete  ábra -  ábra. Pénzügyi jellemzők: az első öt szabály  ábra. Pénzügyi jellemzők: az első öt szabály
25	0.148148	1	2. Az ϑ izületi szög a két kapcsolódó kartag közös normálisának az egymással bezárt szöge, amelyet a z[i] izületi tengelyre merőleges síkban mérünk úgy, hogy az egyik normálist párhuzamosan a másik közös normálisig toljuk az izületi tengely mentén.
14	0.869565	1	A sorvektorok megadása szögelets zárójellel történik, ahol az elemek közti elválasztójel a szóköz, míg oszlopvektoroknál az elválasztójel a pontosvessző. Ebből következik a többsoros és többoszlopos mátrixok megadása úgy történik, hogy az azonos sorbeliek szóközzel, a sorok pedig pontosvesszővel vannak elválasztva. Így az m = [1 2; 4 5; 7 8] utasítás az m=( 1 2 4 5 7 8 )  mátrixot adja eredményül.
6	0.1	1	A játék célja, hogy olyan hidat/láncot készítsünk a két szemközti oldal között, mely nem szakad meg sehol. Ennek nem feltétlenül kell egyenesnek lennie, a lényeg hogy sehol ne szakadjon meg, ahogyan ez az ábrán is látható. Természetesen az ábrán a piros játékos győzött.
17	0.666667	0	A fogolydilemmánál csak a (tanúskodik, tanúskodik) stratégiaprofil Nash-egyensúlyi. Nehezen látható, hogy racionális játékosok hogyan tudják elkerülni ennek a kimenetelét, mivel bármely javasolt nem egyensúlyi megoldásnál legalább egy játékos kísértésben lenne, hogy változtasson a stratégiáján. Játékelméleti kutatók egyetértenek, hogy a Nash-egyensúly fennállása szükséges feltétel egy megoldás fennállásához – bár abban már nem értenek egyet, hogy ez elégséges feltétel-e.
6	0.1	1	Szerencsére azonban Salamon egy megfelelő, ámde hamis világképet, modellt, játékot „ültetett a játékosok fejébe”, így azok az igazságosság jegyében cselekedtek. Salamon tehát végső soron egy Mechanizmust tervezett (a témát általánosságban később tárgyaljuk): egy olyan játékot konstruált a szereplők számára, amelyben mindkét szereplő kénytelen felfedni kilétét (indíték kompatibilis mechanizmus - lásd később). Ezek után pedig fogta magát, és egészen más kimeneteleket rendelt a cselekvés-kombinációkhoz, mint amiket előzetesen mondott, azaz nem a ragaszkodónak ítélte a gyermeket, hanem a lemondónak (előre tudva, hogy mik a szereplők preferenciái a kimenetelek fölött, és hogy milyen elv szerint döntenek: egyéni haszon várható értékének maximalizálása).
18	0.736842	1	Legyen ismét az a konkrét eset, hogy azt szeretnénk, ha a mintáinkkal konzisztens hipotézis (ami mind az N esetben helyes választ ad, minden esetben az adott példa kimenetére f(x) által meghatározott -1-et vagy 1-et) a későbbiekben 1%-nál kisebb hibával működne. Ezt legalább 98% biztonsággal szeretnénk állítani. Ez számszerűen ismét:
14	0.347826	0	A következő egyszerű megfigyeléssel egy javításhoz juthatunk: a P(b) tag állandó, és ki lehet vinni az a és e feletti összegzések elé, a P(e) tag pedig kivihető az a feletti összegzés elé. Így azt kapjuk, hogy
3	0.458333	0	A szélességi keresés optimális, ha minden lépés költsége azonos, mert mindig a legsekélyebb ki nem fejtett csomópontot fejti ki. Egyszerű általánosítással egy olyan algoritmust találhatunk ki, amely tetszőleges lépésköltség mellett optimális. Az egyenletes költségű keresés (uniform cost search) mindig a legkisebb útköltségű n csomópontot fejti ki először, nem pedig a legkisebb mélységű csomópontot. Egyszerűen belátható, hogy a szélességi keresés is egyenletes költségű keresés, amennyiben minden lépésköltség azonos.
2	0.526316	1	A következő részben a mozgással kapcsolatos tennivalók kaptak helyet. Először is az ágensnek néha véletlen irányba kell fordulnia, amit a .random(R) beépített cselekvéssel hajt végre, aminek következtében az R változó egy 0-1 közötti véletlen értéket kap. Ezután az R*4 értékű paraméterrel végrehajtva a turn cselekvést, pont a kívánt célt értjük el.
4	0.666667	0	Eddig olyan ágensekre összpontosítottunk, amelyek offline keresési (offline search) algoritmusokat használnak. Egy teljes megoldást számítanak ki mielőtt a valós világba beteszik a lábukat (lásd  ábra), majd a megoldást az érzékelések megvizsgálása nélkül végrehajtják. Ezzel ellentétben az online kereső (online search)^[46] ágensek működésében a számítás és a végrehajtás átlapolódik (interleaving): először végrehajtanak egy cselekvést, majd megfigyelik a környezetüket és kiszámítják a következő cselekvést. Az online keresés jó ötlet a dinamikus és a szemidinamikus környezetekben – olyan környezetekben, ahol büntetik a semmittevést és a túlságosan hosszú számításokat. Az online keresés még jobb ötlet sztochasztikus környezetekben. Általánosságban egy offline keresésnek egy exponenciálisan nagy, minden lehetséges történést figyelembe vevő eshetőségi tervvel kellene előállnia, míg az online keresés csak az aktuálisan megtörténteket veszi figyelembe. Például ajánlatos, ha egy sakkozó ágens előbb megteszi az első lépést és csak ezután számítja ki a játszma teljes lefolyását.
2	0.789474	0	A tanuló elem módosíthatja az ágensdiagramokon (2.9., 2.11.,  és  ábrák) „tudás” komponensek bármelyikét. A legegyszerűbb esetek magukban foglalják az észlelési szekvenciából történő direkt tanulást. Az egymást követő környezeti állapot párok megfigyelése lehetővé teszi az ágens számára annak megtanulását, hogy a „világ hogyan változik”, és cselekvései eredményeinek megfigyelése lehetővé teszi a „mit okoznak a cselekvéseim” megtanulását. Például ha a taxi vezetője adott erővel fékez, mikor a taxi nedves úton halad, akkor hamarosan tapasztalni fogja, ténylegesen mekkora lassulást ért el. Világos, hogy ez a két tanulási feladat sokkal nehezebb, ha a környezet csak részlegesen figyelhető meg.
9	0.931034	1	 Adja meg az alábbi mondatok olyan logikai reprezentációját, amely alkalmas arra, hogy az Általánosított Modus Ponens szabályt alkalmazzuk rájuk: a. A lovak, a tehenek és a malacok emlősök. b. Egy ló leszármazottja is ló. c. Kékszakáll egy ló. d. Kékszakáll Charlie szülője. e. A leszármazott és a szülő inverz relációk. f. Minden emlősnek van szülője.
5	0.181818	1	A 2-1. táblázat tehát a ChesterfieldsHouse, a FoxHouse, és a CHC változót tartalmazó numerikus ternáris korlátnak az érték-korlát formájú megfelelője (azaz amely a numerikus ternáris korlátban szereplő 3 változó lehetséges értékkombinációit sorolja fel - ezek közül az értékkombinációk közül bármelyik előállhat, bármelyik megfelelő).
14	0.826087	1	A valószínűségi- és a súlyossági-kategóriák meghatározása után a tagsági függvény meghatározása következik. A meghatározott valószínűségi-kategória fuzzy tagsági függvényeinek maghatározása többféle módon lehetséges.
7	0.72	0	Az IK-Wumpus-Ágens igen jól működik kisméretű wumpus világban. Azonban mégis van valami erősen nem megnyugtató az ágens tudásbázisával kapcsolatban. A TB tartalmazza a fizikai leírást a   és   alakú egyenletek formájában minden egyes négyzetre. Minél nagyobb a környezet, annál nagyobb kezdeti tudásbázisra van szükség. Sokkal inkább azt szeretnénk, hogy csak két mondatunk lenne, amelyek kimondják, hogy hogyan is keletkezhet a szellő vagy a bűz bármely kockában. Ez mát túl van az ítéletkalkulus kifejezési képességén. A következő fejezetben látni fogunk egy nagyobb kifejezőerővel rendelkező logikai nyelvet, amelyben egyszerű lesz ilyen mondatot kijelenteni.
27	0.4	1	Például gondoljunk csak a sakkra. Tegyük fel, hogy a játékosoknak rendre csak 5 perc áll rendelkezésére ahhoz, hogy lépéseiket megtegyék (blitz-parti). Ekkor egy olyan program, amelyik kimerítő keresést végez a lehetőségek terében, nyilván túl lassú lenne, és túl sok erőforrást (memóriát, tárhelyet, stb) fogyasztana, hiszen a sakkban rengeteg variáció van. Viszont, ha ezek adottak lennének, előbb-utóbb megtalálná az optimális lépést. Ha tehát ezt a programot egy sokkal gyorsabb, illetve nagyobb tárhellyel rendelkező számítógépen futtatnánk, úgy adott esetben már bele is férhetnénk az 5 perces limitbe. Egy ilyen ágens-programra tehát mondhatnánk, hogy aszimptotikusan korlátozott optimális, hiszen kellően nagy teljesítményű számítógépen futtatva korlátozottan optimális.
25	0.148148	1	A navigálás alkalmával gyakran szimbolikus formájú adatokat használ a robotvezérlés az útjelzők és a környezet más objektumainak azonosítására. A környezeti elemeket, egyedeket (helyszínek, utak, stb.) három fajta jellemzőrendszerrel írják le (Stuck). Az első csoportba a helyzet-független jellemzők tartoznak. Ilyen például az egyed megnevezése, mérete, alakja, esetleges részei, vagy a színe. Ezeket az információkat használja azonosításra elsősorban a navigációs rendszer. A jellemzők egy másik csoportja helyzetfüggő: például arról nyújt információt, hogy milyen irányban és milyen messze helyezkedik el az adott tárgy az érkező robothoz viszonyítva és melyik oldala látható. A jellemzők harmadik halmaza a tévedések lehetőségének csökkentését célozza meg azzal, hogy megadja, hogy mely egyedekkel téveszthető össze az adott objektum. A navigációs rendszer olyan útleírást tartalmaz, amely sorrendben megadja azokat az instrukciókat, amiknek a segítségével a célba érhet a robot. Ezek az instrukciók tartalmazhatnak végrehajtható mozgásutasításokat, vagy leíró jellegű információkat. Az első csoportba tartozik például a "menj", "fordulj", stb. parancsok a távolság, szög és útjelző paramétereikkel. A leíró instrukciók arról adnak információt, hogy milyen egyedeket kell érzékelni az úton, vagy milyen globális orientációval kell haladni. (Például a jelzőfény mindig balról világít az adott útszakaszon.) Ebbe az osztályba tartozik az esetleges hibás tevékenységre utaló leírás is. (Ha például ezt és ezt érzékeli a szenzor, akkor túlfutott a robot az útjelzőn.)
6	0.1	1	Egy f közösségi döntési függvény (KDF) tehát a típuskombinációk teréből képez az alternatívák feletti eloszlások terébe. Az f hasznát a környezetből már ismert vi értékelési függvényekkel számíthatjuk egy i játékos ti típusa esetén.
10	0.30303	0	Minden időlépésnél tehát megnézzük az aktuális cselekvést, megkeressük a hatásait és az igaz folyó események halmazát felfrissítjük. Minden időlépésben átlagosan E ilyen frissítéssel kell számolnunk, ami az eredő komplexitásra O(Et)-t ad. Ez megadja a következtetési keretprobléma megoldását.
9	0.758621	0	Tehát megmutattuk (29 és fél oldalnyi levezetést átugorva), hogy bármely, a számelméletben definiálható igaz mondatokat tartalmazó halmaz esetében, bizonyos alapaxiómák feltételezése mellett, léteznek olyan igaz mondatok, amelyek nem bizonyíthatók az axiómákból. Ez az eredmény, más következmények mellett azt jelenti, hogy a matematika bármely axiómarendszerében megfogalmazható olyan tétel, amely nem bizonyítható az adott rendszer axiómáiból. Ez a matematikának egy igen fontos eredménye. A Gödel-tétel hatását a mesterséges intelligencia területére sokan vitatták, köztük maga Gödel is. A  fejezetben visszatérünk erre a kérdésre.
9	0.793103	0	Egy harmadik megközelítés az egyenlőségi következtetést teljes mértékben egy kiterjesztett egyesítési algoritmuson belül kezeli. Ez azt jelenti, hogy a termek egyesíthetők, ha bizonyíthatóan egyenlők egy bizonyos helyettesítés alatt, ahol a „bizonyíthatóan” lehetővé tesz egy bizonyos mennyiségű egyenlőségi következtetést. Például, azok a termek, hogy 1 + 2 és 2 + 1 normális esetben nem egyesíthetők, de egy egyesítési algoritmus, amely ismeri, hogy x + y = y + x, tudná őket egyesíteni az üres helyettesítéssel. Az ilyen fajta egyenleti egyesítés (equational unification) elvégezhető hatékony algoritmusokkal, amelyeket arra terveztek, hogy a felhasznált bizonyos axiómákat használja (kommutativitás, asszociativitás és így tovább), ahelyett hogy explicit következtetéseket tenne ugyanazokkal az axiómákkal. A tételbizonyítások, amelyek ezt a technikát használják, szoros kapcsolatban állnak a korlátozott logikai programozási rendszerekkel, amelyeket a  alfejezetben írtunk le.
10	0.939394	1	c) A könyvben szereplő Diszjunkt(s) éppen a páronként kölcsönös kizárást definiálja. Az általános diszjunkció ettől annyiban tér el, hogy az összes halmaz metszetének kell üresnek lennie, de két tetszőleges halmaz metszete lehet nem üres.
9	0.931034	0	A hetvenes évek elejére az előrefelé láncolás (forward chaining) jól megalapozottnak tekinthető az MI-ben, egy könnyen érthető alternatívája lett a rezolúciónak. Rendszerek széles körében került felhasználásra, Nevins geometriai tételbizonyítójától (Nevins, 1975) a VAX konfigurációjához használt R1 szakértői rendszerig (McDermott, 1982). Az MI-alkalmazások jellemzően nagyszámú szabályt tartalmaztak, tehát fontos volt kifejleszteni hatékony szabályillesztési technológiát, különösen az inkrementális frissítések problémájára. A produkciós rendszerek (production systems) technológiáját azért fejlesztették ki, hogy segítse az ilyen típusú az alkalmazások megvalósítását. Az Ops-5 produkciós rendszer nyelvet (Forgy, 1981; Brownston és társai, 1985) használták az R1-hez és a Soar kognitív szerkezetéhez (Laird és társai, 1987). Az Ops-5 tartalmazta a rete illesztési folyamatot is (Forgy, 1982). A Soar, amely új szabályokat generál, hogy megőrizze a megelőző számítások eredményeit, igen nagy szabályhalmazokat állíthat elő – több mint 1 000 000 szabályt a TacAir-Soar rendszer esetében, amely katonai repülőgépek szimulációját kontrollálja (Jones és társai, 1998). A CLIPS (Wygant, 1989) egy C-alapú produkciós rendszer nyelv, amelyet a NASA-nál fejlesztettek ki, és hatékony integrációt tett lehetővé más programokkal, eszközökkel és érzékelő rendszerekkel, valamint felhasználták űrjárművek automatizálására és egyéb harcászati alkalmazásokra.
22	0	0	Alkonyodik az Amboseli Nemzeti Park szavannás erdőségében, közel a Kilimandzsáró tövéhez. A fehérbarkójú cerkófmajom vagy grivet (Cercopithecus aethiops – a ford.) egy csoportja épp élelem után kutat, amikor az egyik grivet hangos kiáltó hívást hallat. A csoport többi tagja felismeri, hogy ez egy leopárdra figyelmeztető felhívás (amely különbözik a sasra figyelmeztető rövid köhintéstől vagy a kígyókra vonatkozó sziszegéstől), és a fákra sietnek. A grivet sikeresen kommunikált a csoporttal.
25	0.074074	1	Hatalmas fejlődést jelentett a Zeus a laparoszkópiában, és jól tudták használni nagy pontosságot igénylő szív- és érrendszeri beavatkozásoknál. 2001-ben abbahagyták gyártását, helyette új, modernebb rendszerek fejlesztésébe fogtak. Mai napig több száz Zeus dolgozik kórházakban és kutatóközpontokban.
13	0.318182	1	Ezek közül egyesekből további információkat nyerhetünk: * A görbe a magas, illetve alacsony értékeknél elhúzódó jellegű. * Ha az eloszlás görbe bi- (két csúcsa „púpja” van), trimodális (három csúcsa „púpja” van), akkor ez az inhomogén populáció következménye. Kétcsúcsú görbénél, ha az adatokból nemek szerint két alcsoportot képezünk (férfi/nő), és ezeket külön vizsgáljuk, akkor két homogén csoportot nyerhetünk, amelyek már Gauss-eloszlást mutatnak. * Kevés minta esetén lapos vagy csúcsos alakú ’harang’ görbe. Ebben az esetben vizsgálatok számának növelése a követendő feladat, majd a több mérés utáni újraértékelés.
9	0.448276	1	Vegyük mondjuk azt az állítást, hogy minden ember halandó. És azt, hogy a Mesterséges Intelligencia tantárgy oktatója ember (ilyen nevű tantárgynál ez akár nem is biztosan triviális), akkor ebből következik, hogy az oktató halandó.
16	0.826087	0	A gyermekek 0,8 százaléka szívrendellenességgel születik, ami többnyire aortaszűkület (aortic coarctation). Ez a rendellenesség sebészi beavatkozással, érműtéttel (kitágítják az aortát egy ballont helyezve az artériába) vagy gyógyszerrel kezelhető. A feladat a kezelés megválasztása és annak eldöntése, hogy mikor végezzék el: minél fiatalabb egy gyermek, annál nagyobb a kockázata bizonyos kezeléseknek, de túl sokáig sem szabad várni. A problémához egy döntéselméleti szakértői rendszer készíthető egy olyan csapattal, amelynek legalább egy orvosszakértő (egy gyermekkardiológus) és egy tudásmérnök tagja van. A folyamat a következő lépésekre bontható (amelyek összehasonlíthatók a logikai rendszerek tervezésének lépéseivel a  alfejezetben).
18	0.736842	1	N minta esetén a helyzet: 2 ( 2 n −N ) = | H | 2 N  hipotézis lesz konzisztens a mintahalmazzal az összes lehetséges hipotézis közül, de ezek közül csak egy a valóban helyes, a legnagyobb hibájú – de még az N mintával konzisztens hipotézisünk hibavalószínűsége:
20	0.107143	1	E jellemző megállapítása alapvető fontosságú, hiszen ettől függően eltérően kell kezelni a különböző típusú hiányzó adatokat. A kezelési módok széles skálája ismeretes, és folyamatosan bővül, mivel ez egy aktívan kutatott tárgyterület. A továbbiakban a legelterjedtebb megközelítési módokat ismertetjük.
19	0.136364	0	H[1]: ∀x VárjunkE(x) ⇔ Alternatíva(x) * A második példa – X[2] – negatív. H[1] alapján pozitív lenne, így hamis pozitív. Ezért szűkítenünk kell H[1]-et. Ezt megtehetjük például úgy, hogy egy olyan további feltételt adunk hozzá, amely feltétel kizárja X[2]-t. Egy lehetőség:
2	0.368421	0	Ezzel ellentétben bizonyos szoftverágensek (vagy szoftverrobotok, azaz szoftbotok) részletgazdag, korlátok nélküli környezetekben léteznek. Képzeljünk el egy szoftbotot, amelyik egy nagy utasszállító gép szimulátorával repül. A szimulátor egy részletgazdag, komplex környezet, amelyben más repülőgépekkel kapcsolatos és földi műveletek is vannak, és a szoftverágensnek valós időben kell választania az akciók széles választékából. Vagy képzeljünk el egy szoftbotot, amelyet internetes hírforrások figyelésére terveztek, és az érdekes híreket megmutatja az ügyfeleinek. A helyes működéshez szüksége lesz valamilyen természetes nyelv feldolgozási képességre, meg kell tanulnia, hogy melyik ügyfelét mi érdekli, és szüksége lesz a tervei dinamikus megváltoztatására – például amikor az egyik hírforráshoz megszűnik a kapcsolata vagy amikor egy új forrás létesül. Az internet egy olyan környezet, amelynek komplexitása versenyez a fizikai világéval, és amelynek lakói között sok mesterséges ágens van.
23	0.277778	0	A simított modell rendelkezik azzal az előnnyel, hogy kevésbé érzékeny a zajra, és hogy nemzérus relevancia-valószínűséget képes rendelni olyan dokumentumokhoz, amelyek nem tartalmazzák az összes szót. A simítatlan modellnek az az előnye, hogy könnyű sok dokumentumot tartalmazó gyűjteményekre kiszámolni: ha elkészítünk egy olyan indexet, amely megadja, hogy az adott szót mely dokumentumok tartalmazzák, akkor gyorsan elő tudjuk állítani az eredményhalmazt ezeknek a listáknak a metszeteként, és a P(Q|D[i]) értékeket csak a metszetben szereplő dokumentumokra kell kiszámolni, nem pedig mindegyikre.
5	0.181818	1	 ábra - 2. lépés: az előbbi, NSW=RED értékadás következményeként a RED érték eltávolítása a Q, SA, és V változók értékkészletéből az előretekintés miatt 2. lépés: az előbbi, NSW=RED értékadás következményeként a RED érték eltávolítása a Q, SA, és V változók értékkészletéből az előretekintés miatt
5	0.181818	1	Az értékadás következtében az {SA=RED, NSW=GREEN, WA=BLUE, NT=GREEN, Q=BLUE} behelyettesítés adódik, amely konzisztens, így következhetne az AC3/MAC következtetés, de ez az eddigiekhez hasonlóan most is hatástalan, hiszen Q értékkészlete is egy-elemű. A keresés tehát újra meghívja önmagát az új behelyettesítéssel és változatlan, aktuális KKP-vel, és rátér a következő, még behelyettesítetlen változó kiválasztására. Ezt lényegében a következő táblázat alapján teszi.
1	0.344828	0	A neurális tudományok (neuroscience) az idegrendszert, de különösen az agyat tanulmányozzák. Annak egzakt módja, hogy hogyan keletkeznek a gondolatok az agyban, a tudomány egyik nagy feladványa. Évezredek óta tudjuk, hogy az agy valahogy részese a gondolatnak, hiszen egy erős fejbeütés a mentális funkciók károsodásához vezethet. Hosszú ideje azt is tudjuk, hogy az emberi agy valahogy más. I. e. 335-ben Arisztotelész azt írta, hogy „az összes állat közül méretéhez képest az ember agya a legnagyobb”.^[6] Ennek ellenére csak a 18. század közepétől ismerték fel széles körben, hogy a tudat az agyban lakozik. Korábbi jelöltek között szerepelt a szív, a lép és a tobozmirigy.  ábra - Az idegsejt vagy neuron részei. Minden neuron sejttestből vagy szómából áll, amely sejtmagot tartalmaz. A sejttestből ágazik el néhány dendritnek nevezett és egy hosszú, axonnak nevezett szál. Az axon jó messzire elér, sokkal messzebbre, mint ahogy ezt a jelen ábra sugallja. Az axonok tipikusan 1 cm hosszúak (ez a sejttest átmérőjének 100-szorosa), de elérhetik az 1 m-t is. Egy neuron 10–100 000 más neuronnal tart kapcsolatot a szinapszisoknak nevezett csatlakozásokon keresztül. A jeleket neuronról neuronra egy összetett elektrokémiai reakció továbbítja. A jelek rövid távon szabályozzák az agy aktivitását, hosszú távon pedig befolyásolják a neuronok helyzetét és a kapcsolódási rendszerüket. Úgy tartják, e mechanizmusok képezik az agyi tanulás alapját. Az információfeldolgozás zöme az agykéregben történik, ami az agy külső rétege. A feldolgozás szervezeti egysége, úgy tűnik, egy kb. 0,5 mm-es átmérőjű szövetoszlop, amelynek magassága az egész kéregre kiterjed, ez az embereknél kb. 4 mm. Egy oszlop kb. 20 000 neuront tartalmaz. Az idegsejt vagy neuron részei. Minden neuron sejttestből vagy szómából áll, amely sejtmagot tartalmaz. A sejttestből ágazik el néhány dendritnek nevezett és egy hosszú, axonnak nevezett szál. Az axon jó messzire elér, sokkal messzebbre, mint ahogy ezt a jelen ábra sugallja. Az axonok tipikusan 1 cm hosszúak (ez a sejttest átmérőjének 100-szorosa), de elérhetik az 1 m-t is. Egy neuron 10–100 000 más neuronnal tart kapcsolatot a szinapszisoknak nevezett csatlakozásokon keresztül. A jeleket neuronról neuronra egy összetett elektrokémiai reakció továbbítja. A jelek rövid távon szabályozzák az agy aktivitását, hosszú távon pedig befolyásolják a neuronok helyzetét és a kapcsolódási rendszerüket. Úgy tartják, e mechanizmusok képezik az agyi tanulás alapját. Az információfeldolgozás zöme az agykéregben történik, ami az agy külső rétege. A feldolgozás szervezeti egysége, úgy tűnik, egy kb. 0,5 mm-es átmérőjű szövetoszlop, amelynek magassága az egész kéregre kiterjed, ez az embereknél kb. 4 mm. Egy oszlop kb. 20 000 neuront tartalmaz.
25	0.777778	0	A modellező réteg (deliberate layer) a beépített tudással komplex feladatokra globális megoldásokat generál, tervezéssel. A bonyolult feladatok nagy számítási igénye miatt a döntési ciklusidő perc nagyságrendű is lehet. A modellező vagy tervező rétegmodelleket használ a döntések meghozásához. Ezek a modellek lehetnek előzetesen betápláltak vagy adatokból tanulás útján létrejöttek, és általában a végrehajtó modell által gyűjtött állapotinformációt használják.
6	0.1	1	A dámajáték magas döntési komplexitású (a hosszantartó sikeres szerepléshez készség, tapasztalat is kell, nem elég a szerencse) és mérsékelt tér komplexitású (körülbelül 5*10^20-féleképpen lehetséges a korongok elhelyezése) játékok csoportjába sorolható [2].
20	0.928571	0	A Boltzmann-gépek is szimmetrikus súlyokat használnak, de tartalmaznak rejtett egységeket is (Hinton és Sejnowski, 1983; 1986). Ráadásul aktivációs függvényük sztochasztikus: a kimenet 1 értékének valószínűsége a teljes súlyozott bemenetnek valamilyen függvénye. A Boltzmann-gépek ennek megfelelően a szimulált lehűtés keresési eljárásra (lásd  fejezet) emlékeztető állapotátmenetek során jutnak el a tanító halmazt a legjobban közelítő konfigurációhoz. Kimutatható, hogy a Boltzmann-gépek nagyon közeli rokonságban vannak bizonyos speciális Bayes-hálókkal, amelyeket sztochasztikus szimulációs algoritmussal értékelünk ki. (Lásd  alfejezet.)
14	0.869565	1	A MATLAB elsősorban mátrix műveletekre specializált szoftver. Az adatokat mátrix formában kezeli, ami részben előny, másrészt egyszerű változók esetében zavaró lehet. Adjunk meg ezért most néhány változót, és azonnal ellenőrizzük a dimenziójukat!
9	0.448276	1	Április és május között ismét elhívták magukhoz Kowalsky-t. Ekkorra már tudták, hogy kell kisebb problémákat axiomalizálni (pl. egészek összeadása, listák összefűzése, lista megfordítása). A nagyobb problémák meg visszavezethetőek voltak kisebbekre. Kowalsky távozása után Colmerauer felfedezett egy módszert, miként lehet hatékony nyelv-analízálót készíteni. Innentől kezdve semmi sem állt útjukban ahhoz, hogy elkészítsék azt a rendszert, amivel az ember és a számítógép beszélgethet.
17	0.666667	0	Neumann módszerét maximin technikának nevezik, és a következő módon működik: * Tegyük fel, hogy úgy változtatjuk meg a szabályokat, hogy elsőként E-nek kötelező felfedni a stratégiáját, majd O következik. Így egy fordulókon alapuló játékot kapunk, amire a standard minimax algoritmust alkalmazhatjuk a  fejezetből. Tegyük fel, hogy ez egy U[E,O] kimenetelt ad. Nyilvánvaló, hogy ez a játék O-nak kedvez, így a játék igazi hasznossága (E szempontjából) legalább U[E,O]. Például ha csak tiszta stratégiákat nézünk, a minimax játékfának a gyökérbeli értéke –3 (lásd  (a) ábra), így tudjuk, hogy U ≥ –3. * Most tegyük fel, hogy a szabályokat úgy változtatjuk meg, hogy elsőként O-nak kötelező felfednie a stratégiáját, majd E következik. Ennek a játéknak a minimax értéke U[E,O], és mivel ez a játék E-nek kedvez, tudjuk, hogy U legfeljebb U[E,O]. Tiszta stratégiáknál az érték +2 (lásd  (b) ábra), így tudjuk, hogy U ≤ +2.
14	0.73913	1	Fontos, hogy a háromszögek alapjához tartozó magassága egy legyen, hiszen csak így kaphatunk nulla és egy közötti tagsági értékeket. Ezen felül a háromszögek átlógása egymásba is kulcsfontosságú lesz a hiányzó szabályok kialakításakor.
25	0.074074	1	Az otthoni betegápolás felkarolása több szempontból is időszerű. Az egészségügy több évtizeddel ezelőtti lehetőségeihez képest mára mind a finanszírozási, technológiai és egyéb lehetőségek is kiforrottabbak. Megemlítendő az is, hogy mára az otthoni betegápolás társadalmi elfogadása is belátható közelségben van.
6	0.1	1	Mielőtt még a külső szemlélő bejelenti, hogy „Legalább egy piros kalap van.”, az 1-es játékos például az a világállapotban gondolhatja, hogy esetleg az e állapot igaz, és e-ben a 2-es gondolhatja, hogy a g állapot igaz, sőt, azt is gondolhatja (1-es szerint a 2-es), hogy a 3-as ebben a g állapotban a h-t is tarthatja igaznak.
6	0.75	0	Kevesen próbálták meg túlszárnyalni ezt a teljesítményt, amíg Jonathan Schaeffer és kollégái ki nem fejlesztették a Chinookot, amely közönséges PC-n futott és alfa béta keresést alkalmazott. A Chinook egy olyan előre létrehozott adatbázissal dolgozott, amely az összes nyolc vagy kevesebb bábut tartalmazó 444 milliárd állásból épült fel, hogy a végjátéka hibátlan legyen. 1990-ben az U.S. Openen a Chinook másodikként futott be és megnyerte a jogot, hogy a világbajnoki címért mérkőzzön. Ekkor a program Marion Tinsley képében egy problémába ütközött. Dr. Tinsley már 40 éve világbajnok volt és ez alatt a 40 év alatt összesen csak három játszmát vesztett. A Chinookkal vívott első mérkőzésén elszenvedte a negyedik, majd az ötödik vereségét is, de a bajnokságot 20,5:18,5 pontra megnyerte. 1994 augusztusában a Tinsley és a Chinook közötti világbajnoki mérkőzés idő előtt félbeszakadt, amikor Tinsleynek egészségügyi problémák miatt vissza kellett vonulnia. A Chinook lett a hivatalos világbajnok.
14	0.73913	0	A helyzet még rosszabb, ha bizonyításokat láncolunk. Az igazságfüggvényeken alapuló rendszerekben léteznek A ↦ B alakú szabályok (rules), amelyek lehetővé teszik, hogy kiszámítsuk B-beli bizonyosságunk értékét, mint annak függvényét, hogy mennyire hiszünk a szabályban, és mennyire hiszünk A-ban. Ekkor természetesen mind előre-, mind hátrahaladó rendszereket is ki lehet fejleszteni. A szabálybeli bizonyosságunkat konstansnak tételezzük fel, amit általában a tudásmérnök határoz meg, például A↦[0,9 ]B.
2	0.894737	1	A környezet teljesen megfigyelhető (a tételek halmaza bővülhet, de az ágens erről fog tudni), determinisztikus (csak bizonyított tételeket veszünk fel a tételek halmazába), epizódszerű (ha az ágens képes ’bizonyítási trükköket’ tanulni, akkor lehet sorozatszerű), statikus (ha egy tételt egyszer már bebizonyítottunk, az igaz is marad), diszkrét (a tételek és definíciók száma véges), egyágenses.
9	0.931034	1	 Ebben a problémában a  feladatban bemutatott mondatokat fogjuk használni. Válaszolja meg a következő kérdéseket hátrafelé láncolást alkalmazva! a. Rajzolja fel egy kimerítő hátrafelé láncolás algoritmus bizonyítási fáját a következő mondat igazolásához: ∃h Ló(h)  b. Mi figyelhető meg erről a tárgyterületről? c. Hány megoldás származtatható le h-ra a mondatokból? d. Tudna-e olyan módszert mondani, amellyel mindet megkaphatjuk? (Segítség: érdemes megnézni (Smith és társai, 1986).)
1	0.103448	1	Arisztotelésznek a mesterséges intelligenciára (MI) gyakorolt hatásának megállapításához fontos tisztázni, hogy mit is értünk MI, értelem alatt. MI-nek négyfajta irányzata terjedt el [3], amiket két dimenzió mentén értelmezhetünk: gondolkodást vagy cselekvést célozó dimenzió, illetve a célszerűség mértéke, a racionalitás dimenziója. Ezek alapján a négyféle álláspont: * Emberi módon gondolkodó rendszerek: kognitív, azaz a megismeréssel kapcsolatos tudományok területe, céljuk az emberi elme modellezése, megértése, működésének minél jobb közelítése. * Emberi módon cselekvő rendszerek: ez a megközelítés Alan Turing nevéhez kötődik, aki a gondolkodás és a cselekvés kapcsolatának vizsgálatával próbálta elkészíteni egy számítógép modelljét. Szerinte a működés, az intelligencia mércéje az emberi viselkedés minél pontosabb imitálása. Ez figyelhető meg Turing tesztjében is: egy kérdező elkülönítve egy számítógépnek és egy embernek kérdéseket tesz fel, ezeket kell megválaszolniuk. Ha a kérdező a válaszokat vizsgálva nem tudja eldönteni, melyek a gép válaszai, akkor sikeres a teszt. * Racionálisan gondolkodó rendszerek: nem az emberi gondolkodás követése a cél, hanem formális következtetési szabályok alkalmazásával elérni a kívánt célt. * Racionálisan cselekvő rendszerek: ez a jelenleg használt megközelítése az MI-nek. Célja egy adott feladat minél pontosabb végrehajtása. Nem feltétel, hogy emberek módjára gondolkodjanak, cselekedjenek az így tervezett rendszerek.
5	0.181818	1	Az előálló {NSW=RED, Q=GREEN, SA=BLUE, NT=RED, WA=GREEN, V=GREEN, T=RED} behelyettesítés immár amellett, hogy konzisztens, még teljes is, de ezt az algoritmus egyelőre még a végrehajtásnak ezen a pontján nem tudja, nem vizsgálja. A következő lépés, mivel az előállt behelyettesítés konzisztens volt, ezért az előretekintés. Ennek során nyilván semmi sem fog történni, hiszen a T változónak nem hogy behelyettesítetlen szomszédja nincs, hanem egyáltalán nincs semmilyen szomszédja se (épp ezért is ésszerű ez a lefutás, ami szerint a T behelyettesítése a legvégére maradt).
24	0.541667	0	A mindennapi nyelvben a textúra vagy felületmintázat (texture) a felület kitapintható tulajdonságaira vonatkozik (az angol nyelvben ugyanazzal a szótővel rendelkezik, mint maga a szövet^[272]). A számítógépes látásban a textúra egy ehhez közeli fogalomra, egy felületnek a síkban ismétlődő, vizuálisan érzékelhető mintázatára vonatkozik. Példaként említhetjük egy épület ablakainak a mintázatát, egy szvetter kötési mintáját, a leopárd foltos bundáját, a pázsit fűszálainak a mintázatát, kavicsokat a strandon vagy embertömeget egy stadionban. Az elrendezés néha közel periodikus, mint például a kötési szemek a szvetteren, más esetekben, mint például a strandon lévő kavicsok esetén, a szabályosság csak statisztikai értelemben létezik – a kavicsok sűrűsége a strand különböző részein nagyjából azonos.  ábra - (a) A textúragradienseket illusztráló jelenet. Feltéve, hogy a valós mintázat egyforma, lehetővé teszi a felület irányágának a meghatározását. A számított irányt a képen oly módon elhelyezett fehér kör és nyíl jelzi, mintha a kört a felületre festették volna abban a pontban. (b) Egy ívelt felület alakjának meghatározása a mintázat alapján. (A képeket Jitendra Malik és Ruth Rosenholtz hozzájárulásával közöljük [Malik és Rosenholtz, 1994].) (a) A textúragradienseket illusztráló jelenet. Feltéve, hogy a valós mintázat egyforma, lehetővé teszi a felület irányágának a meghatározását. A számított irányt a képen oly módon elhelyezett fehér kör és nyíl jelzi, mintha a kört a felületre festették volna abban a pontban. (b) Egy ívelt felület alakjának meghatározása a mintázat alapján. (A képeket Jitendra Malik és Ruth Rosenholtz hozzájárulásával közöljük [Malik és Rosenholtz, 1994].)
6	0.1	1	Hasonlóképp, ha a 2-es jobbra lépne, az 1-es játékos haszna továbbra is csak a stratégia-kombinációtól függne. Ez nyilván egy redundanciát hoz be a fenti táblázatba, de sajnos ennek a jól áttekinthető ábrázolási módnak ez a velejárója. Ha tehát Bayes-i játékként, táblázatosan modelleznénk egy játék-szituációt, akkor ügyeljünk arra, hogy a fentieket tartsuk be (hacsak nem dolgozunk egy olyan modellel, ahol a játékosok haszna már nem csak saját típusuktól függ túl a stratégia-kombináción, hanem akár a teljes típuskombinációtól).
21	0.125	1	ahol y’ a modell válasza az ismeretlen címkéjű x bemenetre. A tanulórendszer nem képes befolyásolni a zajt, és a modellosztály megválasztása után az azzal járó biast sem. A tanulórendszer egyedül a tanult modell varianciáját csökkentheti. Ezen az elven alapul a Cohn et al. [3] által javasolt megoldás is, ahol három statisztikai módszer lett összehasonlítva: egy neurális hálózat, egy Gaussian mixture model (GMM), és egy lineáris regressziós megoldás Gaussi kernel függvénnyel. A neurális hálózat olyan gyengén teljesített, hogy a kiértékelésbe már nem került be.
19	0.681818	0	A Besorolások állításai azon múlnak, hogy milyen célfogalmat szeretnénk megtanulni. A célpredikátumok olyan fogalmak lehetnének, mint például a Nagyszülője, a Sógora, illetve az őse. A Nagyszülője esetén a Besorolások teljes halmaza 20 × 20 = 400
27	0.4	1	A sakk viszonylag egyszerű (diszkrét, epizodikus) környezet, körökre van osztva, és alapesetben nincs megkötés arra, hogy legfeljebb mennyi ideig lehet gondolkodni egy-egy lépésen. Ha viszont van ilyen megkötés (pl. egy valós környezetben általában egyáltalán nem mindegy, hogy mennyi idő alatt reagálunk), úgy bizony tökéletesen racionális esetben a rendelkezésre álló idő alatt kellene kiókumlálni a legjobb cselekvést. Az is elképzelhető, hogy a cselekvés annál jobb, minél kevesebb időt vesz igénybe a kiválasztása és kiszámítása (azaz ekkor a gyors reakcióidőt is jutalmazzuk). Ebben az esetben az azonnali válasz volna tökéletesen racionális, ami zérus gondolkodási időt feltételezve irreális.
26	0	0	A legtöbb MI-kutató elfogadja a gyenge MI-hipotézist, az erőssel pedig nem törődik: amíg a program működik, az nem érdekes, hogy az intelligencia szimulációjának nevezik-e vagy valós intelligenciának. Minden MI-kutatónak foglalkoznia kellene munkája etikai következményeivel.
3	0.083333	1	számmal majorizálhatjuk. A triviális redundáns (semmit nem változtató) lépések kiszűrése természetesen ezt a számot erőteljesen mérsékli (mennyire?), de a szélességi keresés komplexitása akkor is magas lehet, főleg, ha a megoldás mélységéről egyáltalán nincs elképzelésünk (emlékezzük, hogy szélességi keresés időben és tárban exponenciális, O(b^d)).
13	0.727273	0	Vagyis a nyakmerevedésről panaszkodó 5000 beteg közül várhatóan csak egynek lesz agyhártyagyulladása. Vegyük észre, hogy annak ellenére, hogy az agyhártyagyulladásnak igen gyakori tünete (0,5 valószínűséggel) a nyakmerevedés, annak valószínűsége, hogy egy nyakmerevedéses betegnek ténylegesen agyhártyagyulladása van, mégis csekély. Ez abból következik, hogy a nyakmerevedés a priori valószínűsége sokkal nagyobb, mint az agyhártyagyulladásé.
2	0.210526	0	Azt állítjuk, hogy ezen feltételek mellett az ágens igenis racionális: a várható teljesítménye legalább annyira jó, mint bármely más ágensé. A  feladatban azt kérjük majd, hogy ezt az állítást bizonyítsa be.
5	0.181818	1	 ábra - 16. lépés: az előbbi, T=RED értékadás következtében a T változó értékkészlete is egy-eleműre szűkült 16. lépés: az előbbi, T=RED értékadás következtében a T változó értékkészlete is egy-eleműre szűkült
18	0.894737	0	A tanulás számos másik algoritmikus megközelítését is vizsgálták. A pillanatnyilag-legjobb-hipotézis (current-best-hypothesis) megközelítés egyetlen hipotézissel foglalkozik, specializálva, ha túl tágnak bizonyul, általánosítva, ha túl szűk. Ez a filozófiában már régóta ismert elv (Mill, 1843). A kognitív pszichológia korai munkájában szintén ezt javasolták, mint az emberi fogalom tanulás természetes formáját (Bruner és társai, 1957). Az MI-területen ez a megközelítés elsősorban Patrick Winston munkájához köthető, aki PhD-disszertációjában (Winston, 1970) a komplex objektumok leírásának tanulásával foglalkozott. A verziótér (version space) módszer (Mitchell, 1977; 1982) eltérő megközelítésen alapul, az összes konzisztens hipotézissel egyszerre foglalkozik, elhagyva azokat, amelyek az új példákkal inkonzisztenciát mutatnak. Ezt a megközelítést a Meta-Dendral kémiai szakértő rendszerben használták (Buchanan és Mitchell, 1978), majd később Mitchell Lex rendszerében (Mitchell, 1983), ami matematikai analízis problémák tanulással történő megoldását célozta. A harmadik nagyhatású irányzat kialakítása Michalski és társai munkájához köthető, akik az AQ algoritmusok sorozatával foglalkoztak, amelyek logikai szabályok halmazát tanulták (Michalski, 1969; Michalski és társai, 1986b).
23	0.555556	0	A harmadik lépés az alapcsoportok (basic groups) kezelése, amelyek főnévi és igei csoportokat jelentenek. A lépés lényege, hogy ezeket darabokra kell vágni, hogy a későbbi lépések kezelhessék őket. A főnévi csoport a fejszerepet betöltő főnévből áll, amelyet opcionálisan megelőzhetnek névelők és egyéb módosítók. Mivel a főnévi csoport nem tartalmazza az NP ℰ[1]-beli teljes komplexitását, ezért nincs szükség rekurzív környezetfüggetlen nyelvtani szabályokra, a véges automaták által megengedett reguláris nyelvtanok is elégségesek. Az igei csoport az igéből és a hozzá kapcsolódó segédigékből, valamint határozókból áll, azonban nem tartalmazza a közvetlen és közvetett tárgyakat és az elöljárói kifejezéseket. Az előbbi példamondat a következő módon kerülne ki ebből a lépésből:
21	0.125	1	Szemléletesen az entrópia akkor tűnik a legalkalmasabbnak, ha a veszteségfüggvény logaritmusát szeretnénk minimalizálni, míg a kettes és hármas sorszámú módszer akkor tűnik alkalmasnak, ha az osztályozás hibáját szeretnénk csökkenteni.
20	0.571429	0	Normális esetben a kernelfüggvény csak az x és x[i] közötti D(x, x[i]) távolságtól függ. A legnépszerűbb kernelfüggvény (természetesen) a Gauss-függvény. Az egyszerűség kedvéért egy gömbszimmetrikus Gauss-függvényt feltételezünk, amelynek minden tengely mentén w a szórása, azaz:
9	0.965517	0	Ebben a feladatban megvizsgáljuk a keresési algoritmusok alkalmazását a Prologban. Tételezzük fel, hogy a következő(X, Y) akkor igaz, ha az Y állapot az X állapotot követi; és ha a cél(X) akkor igaz, amikor az X a célállapot. Írjon egy definíciót a megold(X,P)-re, ami azt jelenti, hogy a P az útvonal (az állapotok listája), amely az X-szel kezdődik, a célállapotban végződik, és szabályos lépésekből áll, amelyeket a következő határoz meg. Valószínűleg a mélységi keresés a legkönnyebb módja annak, hogy ezt végrehajtsa. Mennyire lenne könnyű egy heurisztikus keresési vezérlés hozzáadása?
25	0.074074	1	Az otthoni betegápolás és egészségmegőrzés alapműszerei nagyrészt adottak. Az otthonban használható eszközök – például a vérnyomás- cukormérő, többcsatornás EKG – megfelelő minőségben és megfelelő áron elérhetőek. Továbbá elérhetőek olyan integráló technológiák, melyek vészhelyzetekben (elesés) riasztási funkcionalitással rendelkeznek, vagy fizikai aktivitást figyelve, következtetéseket vonnak le, és ugyancsak léteznek a háziorvost, az otthonélő beteget és a kórházat összekötő információtechnológián alapuló rendszerek is. A továbblépéshez szükséges: * Szélesebb körben használható és integrált otthonápolási technológiák. * Orvosi tudás/intelligencia. Az orvosi értékelést meg lehet segíteni a személyre szabott viselkedést is jellemezni képes információs rendszerekkel; itt a ma elérhető informatikai megoldásoknak nagy lehetőségei vannak. Például: Egy stroke utáni rehabilitációját töltő beteg otthoni ápolásában nem csupán a fiziológiai adatok orvoshoz küldése a cél, hanem egy integrált rendszer hosszú távon „intelligens” következtetéseket is levonhat a beteg állapotával kapcsolatban, akár úgy, hogy a beteg hosszabb távon figyelt paramétereit tanuló algoritmusok segítségével összeveti a hasonló körülményekkel rendelkező ápoltak populációjával.
3	0.25	1	Kapcsolási rajzokon előfordul, hogy két vezeték metszi egymást, ennek megoldására a  ábrán látható táblarészletet használhatjuk fel. Látható, hogy a piros körrel jelölt bemenet értéke a kék körrel jelölt kimenetre kerül, a piros négyzettel jelölt a kék négyzettel jelöltre, egymástól függetlenül.  ábra - Két vezeték metszéspontja Két vezeték metszéspontja
5	0.545455	0	A lokális keresés másik előnye az, hogy alkalmazható online elrendezésben is, amikor a probléma változik. Ez különösen fontos az ütemezési problémákban. Egy légitársaság heti ütemezése járatok ezreit és emberekhez rendelt feladatok tízezreit tartalmazhatja, de egy rossz időjárás az egyik repülőtéren lehetetlenné teheti az ütemezést. Ezt a lehető legkevesebb változtatással szeretnénk helyrehozni, amit a jelenlegi ütemezésből kiinduló lokális keresési algoritmussal végezhetünk el könnyen. Egy visszalépéses keresés a kényszerek egy új halmazával általában jóval több időbe telik, és olyan megoldást is találhat, amely jelentősen különbözik az aktuálistól.  ábra - Egy kétlépéses megoldás a 8-királynő problémára a Min-Konfliktusok felhasználásával. Mindegyik fázisban egy királynőnek keresünk új oszlopot. A konfliktusok számát (esetünkben a támadó pozícióban lévő királynők számát) mindegyik négyzetben feltüntettük. Az algoritmus a királynőket a Min-Konfliktusok négyzetre viszi, véletlenszerűen törve fel ezzel a kötéseket. Egy kétlépéses megoldás a 8-királynő problémára a Min-Konfliktusok felhasználásával. Mindegyik fázisban egy királynőnek keresünk új oszlopot. A konfliktusok számát (esetünkben a támadó pozícióban lévő királynők számát) mindegyik négyzetben feltüntettük. Az algoritmus a királynőket a Min-Konfliktusok négyzetre viszi, véletlenszerűen törve fel ezzel a kötéseket.
2	0.473684	0	Az ágenseket eddig viselkedésük leírásán keresztül vizsgáltuk – azon cselekvés alapján, amelyet egy adott észlelési sorozat hatására végrehajtanak. Most neki kell esnünk a kemény diónak: hogyan működnek belül. A mesterséges intelligencia feladata az ágensprogram (agent program) megtervezése: egy függvényé, amely megvalósítja az észlelések és a cselekvések közötti leképezést. Feltételezzük, hogy ez a program valamiféle fizikai érzékelőkkel és beavatkozókkal ellátott számítóeszközön fog futni – ezt architektúrának (architecture) nevezzük:
1	0.413793	0	Természetesen voltak számítóberendezések az elektronikus számítógépek előtt is. A 17. századból származó legkorábbi automatizált gépekről már a filozófiánál volt szó. Az első programozható gép Joseph Marie Jacquard 1805-ben feltalált szövőszéke volt, amely lyukasztott kártyákon tárolta a szövőmintához szükséges utasításokat. A 19. század közepe táján Charles Babbage (1792–1871) két gépet tervezett, de egyiket sem fejezte be. A könyvünk borítóján is látható Difference Engine rendeltetése matematikai táblázatok számítása lett volna mérnöki és tudományos feladatokhoz. Végül is ezt a gépet 1991-ben megépítették, és a londoni Science Museumban működés közben bemutatták (Swade, 1993). A Babbage-féle Analitikus Gép (Analytical Engine) sokkal ambiciózusabb terv volt. Címezhető memóriájával, tárolt programjával és feltételes ugrásaival ez volt az első, univerzális számításokra alkalmas műtermék. Ada Lovelace, Babbage kolléganője, Lord Byron költő lánya volt talán a világ első programozója. (Az Ada programozási nyelv róla kapta a nevét.) Ada programokat írt a befejezetlen Analitikus Gépre, sőt azon is spekulált, hogy a gép sakkjátékra vagy zenekomponálásra is képes lehet.
13	0.954545	0	Sokszor célszerűbb adott állítások hatását bizonyos rögzítettnek feltételezett általános háttértények feltételezésével végiggondolni, mint az információ teljes hiányában. Az alábbi kérdések a szorzatszabály és a Bayes-tétel általános alakjainak bizonyítását célozzák, valamely e háttértény feltételezése mellett. a. Bizonyítsa be az általános szorzatszabály valamely feltétel fennállása esetén felírható alakját:
2	0.210526	0	Vizsgáljuk meg az egyszerű porszívóágenst, amelyik megtisztítja a négyzetet, ha az koszos, és átmegy a szomszédos négyzetbe, ha nem az! Az ágensfüggvényt táblázatosan a  ábra adja meg. Ez egy racionális ágens? Attól függ! Először is, meg kell mondanunk mi a teljesítménymérték, mit tudunk a környezetről, és milyen érzékelői és beavatkozói vannak az ágensnek. Tegyük fel a következőket: * A teljesítménymérték egy ponttal jutalmaz minden tiszta négyzetet minden időpillanatban egy 1000 időpillanatból álló „élettartam” alatt. * A környezet „geográfiája” a priori ismert ( ábra), de a piszok eloszlása és az ágens kezdeti pozíciója nem. A tiszta négyzetek tiszták maradnak, a felszívás pedig megtisztítja az aktuális négyzetet. A Balra és Jobbra cselekvések balra és jobbra mozgatják az ágenst, kivéve ha ezzel kikerülne a környezetből, mely esetben az ágens nem mozdul. * A következő cselekvések léteznek: Balra, Jobbra, Szív és Semmittevés (azaz nem tesz semmit sem). * Az ágens helyesen észleli jelenlegi helyzetét és azt, hogy van-e ott kosz.
17	0.866667	0	A dinamikus döntési hálókat használó ágensarchitektúra alapötleteit Dean és Kanazawa javasolták (Dean és Kanazawa, 1989a). Dean és Wellman könyve, a Planning and Control, sokkal részletesebb kapcsolatot teremt a DBH/DDH-modellek és a szűrés klasszikus szabályozáselméletbeli szakirodalma között (Dean és Wellman, 1991). Tatman és Shachter mutatta meg, hogy hogyan alkalmazhatók dinamikus programozási algoritmusok DDH-modellekre (Tatman és Shachter, 1990). Russell különböző módszereket közöl ilyen ágensek felskálázására, és számos nyitott kutatási kérdést fogalmaz meg (Russell, 1998).
14	0.695652	1	Motiváció a valószínűségi logikák bevezetésére. A mesterséges intelligencia területén belül a hagyományos kétértékű logikának igen fontos szerepe van: különböző típusait (pl. a propozicionális és az elsőrendű logikát, valamint ezek altípusait) széles körben alkalmazzák egy adott tárgyterülettel kapcsolatos állítások, kijelentések leírására. Az adott logikai nyelven megfogalmazható szabályok pedig – a különféle következtetési eljárások alkalmazásával – lehetővé teszik, hogy adott alapismeret-halmazból kiindulva további értékes/érdekes állításokat következtethessünk ki.
1	0.862069	0	Diagnózis: Valószínűségi elemzésen alapuló orvosi diagnosztizáló rendszerek az orvosi tudományok több területén szakértő orvosok szintjén voltak képesek helytállni. Heckerman (Heckerman, 1991) leír egy esetet, amikor a nyirokcsomó-patológia egyik vezető szakembere gúnyolódó megjegyzést tesz egy pokolian nehéz esetet diagnosztizáló program javaslatára. A rendszer fejlesztője azt javasolja, hogy kérdezze meg a rendszertől a diagnózis magyarázatát.
24	0.666667	0	Az első kihívás a kép szegmentálása. Minden kép tipikusan több objektumot fog tartalmazni, így először olyan képpontrészhalmazokra kell osztanunk, amelyek egy-egy objektumnak felelnek meg. Miután a képet régiókra osztottuk, utána a régiókat vagy az azokból összeállított egységeket átadjuk egy osztályozónak, hogy meghatározza az objektumok címkéit. Sajnálatos módon a lentről felfelé szegmentáció hibákra érzékeny eljárás, ezért alternatív megoldásként kínálkozik a fentről lefelé objektumcsoport meghatározása. Eszerint keresni kell egy képpontrészhalmazt, amit arcként lehet osztályozni, és ha ez sikerült, máris van egy csoportunk! A tisztán fentről lefelé módszerek nagyon számításigényesek, mivel különböző méretű képablakokat kell megvizsgálni különböző helyszíneken, és az összes különböző objektumhipotézissel össze kell vetni őket. Jelenleg a leginkább gyakorlati objektumfelismerő rendszerek ilyen fentről lefelé stratégiát alkalmaznak, bár ez megváltozhat, ahogy a lentről felfelé technikák fejlődnek.
7	0.92	0	Az igazságtábláknak, mint az ítéletkalkulus nyelvében az érvényességnek vagy a mondat kielégíthetetlenségének a tesztjét egymástól függetlenül Ludwig Wittgenstein (1922) és Emil Post (1921) vezették be. A harmincas években jelentős haladást értek el az elsőrendű logika következtetési módszereinek terén. Nevezetesen, Gödel megmutatta (Gödel, 1930), hogy az elsőrendű logikában történő következtetésre egy teljes eljárást lehet kapni az ítéletlogikára történő redukcióval, felhasználva Herbrand elméletét (Herbrand, 1930). A  fejezetben újra áttekintjük ennek történetét, itt most a lényeges pont az, hogy a hatvanas években, a hatékony ítéletkalkulus algoritmusok fejlesztésében a matematikusok érdeklődését jelentős mértékben motiválta az a cél, hogy hatékony tételbizonyítót készítsenek az elsőrendű logika számára. A Davis–Putnam-algoritmus (Davis és Putnam, 1960) volt az első hatásos algoritmus az ítéletkalkulus rezolúció megvalósítására, de a legtöbb esetben ez is sokkal kevésbé hatékony, mint a DPLL visszalépéses algoritmus, amelyet két évvel később mutattak be (1962). A teljes rezolúciós szabály és a rezolúció teljességének bizonyítása J. A. Robinson (Robinson, 1965) nagyhatású tanulmányában jelent meg, ami azt is megmutatta, hogyan lehet elsőrendű logikai következtetést végezni ítéletkalkulus technikák igénybevétele nélkül.
3	0.25	1	Ha matematikai szempontból vizsgáljuk a játékot, az alábbi kérdések merülhetnek fel egy adott játékállapottal kapcsolatban: * Konzisztens-e ez az állapot, azaz van-e olyan aknaelrendezés, ami nem mond ellent a már ismert adatoknak? * Mely mezők azok, amelyeken biztosan van akna? * Mely mezők azok, amelyeken biztosan nincs akna? * Az előző két kategória egyikébe sem tartozó mezők mekkora valószínűséggel tartalmaznak aknát, ha minden lehetséges aknaelrendezést azonos valószínűségűnek tekintünk?
26	0.571429	0	Azt fogod észrevenni – legnagyobb megdöbbenésedre –, hogy a külső viselkedésed irányítása mintegy kicsúszik a kezeid közül. Azt veszed észre, hogy például amikor az orvosok vizsgálják a látásodat, hallod őket, amint azt mondják: „Egy piros tárgyat tartunk ön előtt, kérjük, mondja el, mit lát.” Ez a kiáltás törne ki belőled: „Semmit sem látok. Teljesen megvakulok.” De hallod a saját hangodat, amint befolyásodtól teljesen függetlenül ezt mondja: „Egy vörös tárgyat látok magam előtt.” (…) Tudatos tapasztalatod lassan semmivé zsugorodik, de a külső, megfigyelhető viselkedésed változatlan marad.
4	0.5	1	* Pontmutáció: A kromoszóma egy génjében pár nukleotidnál következik be változás. * Kromoszómamutáció: A kromoszóma egyes részei mutálódnak. Ez lehet szerkezeti változás, például egy kromoszóma részletének törlődése (deléció), kicserélődése (transzlokáció), megduplázódása (duplikáció) stb. Másrészt lehet számbeli, melyen belül megkülönböztetünk poliploidiát (kromoszómagarnitúra a normális egész számú többszöröse, például 6n-es banán) és aneuploidiát (csak egy kromoszómánál van eltérés, például embernél 21. kromoszómából 3 van). Ezek a mutációk szembetűnő változásokat okoznak, és szaporodásra képtelené teszik az egyedet, hiszen a más kromoszómaszámú társai ivarsejtjével az ő ivarsejtje nem képes zigótát képezni.
27	0.4	1	A következőkben példát adunk számítható racionális ágensekre. A könyv 2.3-as fejezetének 2.4-es és 2.5-ös táblázatában szereplő, adott problémával (probléma-környezettel) szembesülő ágensek akkor számítható racionálisak, ha:
23	0.277778	0	A P(r|D)/P(¬r|D) tényező a dokumentum relevanciájának lekérdezésfüggetlen valószínűsége. Ez a dokumentum minőségének mértéke: egyes dokumentumok bármely lekérdezéshez relevánsak, mert a dokumentum egyszerűen magas színvonalú. Akadémiai környezetben született folyóiratcikkek esetén a relevancia a hivatkozások száma alapján becsülhető, míg weboldalak esetén az oldalra mutató hiperhivatkozások számát használhatjuk. Minden esetben nagyobb súlyt adhatunk azoknak a hivatkozásoknak, amelyek maguk is magas színvonalúak. A dokumentum kora szintén szerepelhet a lekérdezésfüggetlen relevancia becslésében.
21	0.5625	0	Az éremnek természetesen van másik oldala is: lehet, hogy a kiválasztott hipotézistérben egyáltalán nincs olyan függvény, amely kielégítően approximálná az igazi hasznosságfüggvényt. Mint az induktív tanulásnál minden esetben, itt is kompromisszum van a hipotézistér mérete és a függvény megtanulásához szükséges idő között. Egy nagyobb hipotézistér valószínűbbé teszi, hogy jó approximációt lehet találni, de azt is jelenti, hogy a konvergencia valószínűleg lassabb lesz.
2	0.052632	0	Ezen ötletek illusztrálására egy igen egyszerű példát fogunk használni – a  ábrán látható porszívóvilágot. A világ annyira egyszerű, hogy mindent le tudunk írni, ami megtörténik, továbbá ez egy kitalált világ, így sokféle variációt kitalálhatunk. A világban csak két helyszín van: az A és B négyzetek. A porszívóágens észleli, hogy melyik négyzetben van, valamint azt, hogy van-e ott piszok, vagy nincs. Lehetséges akciói: mozoghat balra vagy jobbra, felszívhatja a port, valamint nem csinál semmit. Egy egyszerű ágensfüggvény a következő: ha az aktuális négyzet koszos, szívd fel a koszt, egyébként menj át a másik négyzetbe. Ezen ágensfüggvény táblázatának egy részlete a  ábrán látható. Egy, az ágensfüggvényt megvalósító egyszerű ágensprogramot a fejezet későbbi részében, a  ábrán mutatunk be.  ábra - A porszívóvilág mindössze két helyszínnel A porszívóvilág mindössze két helyszínnel  ábra - A  ábrán szereplő porszívóvilág egy egyszerű ágensfüggvénye részleges táblázatos formában A  ábrán szereplő porszívóvilág egy egyszerű ágensfüggvénye részleges táblázatos formában Fontos A  ábrára nézve láthatjuk, hogy sokféle porszívóvilág-beli ágens definiálható egyszerűen a jobb oldali oszlop különböző kitöltésével. Ezek után a nyilvánvaló kérdés a következő: Mi a táblázat helyes kitöltésének módja? Más szavakkal, mitől lesz egy ágens jó vagy rossz, intelligens vagy buta. Ezeket a kérdéseket a következő részben fogjuk megválaszolni.
13	0.772727	0	 P(Fogfájás∣Lyuk)P(Beakadás∣Lyuk)P(Lyuk)  -et használva Fontos Ezzel a módszerrel az eredeti nagy táblázat felbontható három kisebbre. Az eredeti táblázat hét független számot tartalmaz (2^3–1, mivel a számok összegének 1-et kell adnia). A kisebb táblázatokban öt független szám található (mindegyik feltételes valószínűségi eloszlásra 2 × (2^1–1), valamint 2^1–1 a Lyuk előzetes valószínűségi eloszlására). Ez nem tűnik túl nagy győzelemnek, azonban, ha a Lyuk ténye mellett n tünet bizonyul függetlennek, akkor a reprezentáció O(n) nagyságrendben növekszik O(2^n) helyett. Következésképpen a feltételes függetlenségi kijelentések lehetővé teszik nagy valószínűségi rendszerek kezelhetőségét, sőt, a feltételes függetlenségi kijelentések gyakrabban rendelkezésre is állnak, mint az abszolút függetlenségre vonatkozók. A Lyuk fogalmilag szétválasztja (separate) a Fogfájás-t és a Beakadás-t, mivel mindkettőnek közvetlen következménye. Nagy valószínűségi tartományok feltételes függetlenségen keresztül lazán kapcsolódó részhalmazokra történő szétbontása a modern MI történetének legnagyobb eredményei közé tartozik.
27	0.2	0	Nyomon követni a világ állapotát. Ez az intelligens ágens számára szükséges legfontosabb képességek egyike, amelyhez egyaránt szükség van érzékelésre és a belső reprezentáció frissítésére. A  fejezetben ítéletlogikát alkalmaztunk a világ állapotának nyomon követésére; a  fejezetben kiterjesztettük ezt az elsőrendű logikára; a  fejezetben pedig szűrő algoritmusokat (filtering algorithms) mutattunk be, hogy a bizonytalan környezeteket is követni tudjuk. Ezekre a szűrőeszközökre van szükség, amikor igazi – tehát tökéletlen – érzékelésre kerül sor. A jelenlegi szűrő és érzékelési algoritmusokat lehet úgy kombinálni, hogy elég jó teljesítményt kapjunk alacsony szintű predikátumok leírásánál, mint például „a csésze az asztalon van”, de van még megteendő út előttünk, míg az algoritmusok azt is ki tudják jelenteni, hogy: „dr. Russell teázik dr. Norviggel.” Egy másik probléma az, hogy ugyan az approximációs szűrő algoritmusok képesek elég nagy környezeteket kezelni, lényegüket tekintve azonban még mindig propozicionálisak: a propozicionális logikához hasonlóan nem kezelik explicit módon az objektumokat és a relációkat. A  fejezetben bemutattuk, hogyan lehet ennek a problémának a megoldására elsőrendű logikát alkalmazni; elvárásaink szerint nagy előrelépéssel fog majd járni, ha a komplex környezetek kezelésére is alkalmazzák ezeket az elgondolásokat. Továbbá, mihelyt egy bizonytalan környezetben elkezdünk objektumokról beszélni, felmerül a bizonytalan azonosság (identity uncertainty) problémája: nem tudjuk, melyik objektum melyik. A logika alapú mesterséges intelligenciában meglehetősen elhanyagolták ezt a problémát, mivel általában feltételezték, hogy az észleletek állandó szimbólumokat tartalmaznak az objektumok azonosítására.
5	0.181818	1	Oldjuk meg a következő logikai feladványt: Öt különböző színű házban öt különböző nemzetiségű ember lakik, akik mind különböző cigarettát, italt, és háziállatot részesítenek előnyben. Az alábbi tények ismeretében adjon választ a következő kérdésre:
13	0.590909	0	Vegyük észre, hogy az együttes valószínűség-eloszlásban – a valószínűségi axiómáknak megfelelően – a valószínűségek összege 1. Hasonlóképpen, a   egyenlet közvetlen módot nyújt bármely, egyszerű vagy összetett állítás valószínűségének a meghatározására: egyszerűen azokat az elemi eseményeket kell meghatároznunk, amelyekben az állítás igaz, majd összegeznünk kell a hozzájuk rendelt valószínűségeket. Például, hat olyan elemi esemény van, amelyben a lyuk ∨ fogfájás igaz:
4	0.916667	0	A heurisztikus keresési algoritmusok messze legátfogóbb irodalma Pearl Heuristics c. könyve (Pearl, 1984). Ez a könyv különösen jó áttekintést nyújt számos oldalhajtásról és az A^* különféle változatairól, és azok tulajdonságainak szigorú bizonyításait is tartalmazza. Kanal és Kumar elkészítették az alapvető és lényeges heurisztikus kereséssel foglalkozó cikkek antológiáját (Kanal és Kumar, 1988). A keresési algoritmusokkal kapcsolatos új eredmények rendszeresen az Artificial Intelligence folyóiratban jelennek meg.
22	0.074074	0	A hierarchiában fentebb helyezkedő nyelvtanoknak nagyobb a kifejezőereje, de a kapcsolódó algoritmusok kevésbé hatékonyak. Az 1980-as évek közepéig a nyelvészek a környezetfüggetlen és környezetérzékeny nyelvtanokkal foglalkoztak. Azóta nagyobb hangsúlyt fektetnek reguláris nyelvtanokra, amelyeket az elektronikusan elérhető szövegek mega- és gigabájtjainak gyors, még a kevésbé teljes analízis árán is történő feldolgozási igénye hívott életre. Ahogy Fernando Pereira mondta: „Minél öregebb leszek, annál lentebb megyek a Chomsky-hierarchián.” Hogy lássuk, mit értett ezen, vesse össze (Pereira és Warren, 1980; Mohri, Pereira és Riley, 2002)
5	0.181818	1	Az így létrejövő {NSW=RED, WA=RED, NT=GREEN, Q=BLUE, SA=RED} behelyettesítés sajnos a 2-es és 6-os korlátnak is ellentmond, ezért az algoritmus (az NT és Q változók aktuális, behelyettesítésben szereplő értékének figyelembevétele nélkül) “bután” a következő, GREEN értéket rendeli az SA változóhoz annak reményében, hogy így majd feloldja a létrejött ellentmondásokat (SA=GREEN).
19	0.227273	0	Az ilyen kapcsolatot, ahol a Hipotézis az „ismeretlen”, vonzatkényszernek (entailment constraint) nevezzük. Ennek a kényszernek a megoldása a tiszta induktív tanulás, amikor a Hipotézis-t valamilyen előre definiált hipotézistérből vesszük. Ha például a döntési fát logikai formulának tekintjük (lásd 19. szakasz - Példák és hipotézisek részben   képlet), akkor egy döntési fa, amely az összes példával konzisztens, kielégíti a   képletet. Természetesen abban az esetben, ha a hipotézisek logikai formáját semmiben nem korlátozzuk, a Hipotézis = Besorolások szintén teljesíti a kényszert. Általában az Ockham borotvája elve azt sugallja, hogy kis konzisztens hipotéziseket kellene előnyben részesíteni, valami jobbat kell tehát kitalálnunk annál, minthogy csupán a példákat memorizáljuk. Fontos Az induktív tanulás ezen egyszerű képe az 1980-as évek elejéig uralkodott. A korszerű megközelítés az, hogy olyan ágenseket tervezünk, amelyek már tudnak valamit, és amelyek igyekeznek, hogy még többet tudjanak. Lehet, hogy ez nem tűnik félelmetesen mély gondolatnak, azonban igen nagy különbséget jelent, ha az ágensek tervezését tekintjük. Sőt az is lehet, hogy ez a megközelítés valamilyen mértékben hozzájárul annak megértéséhez, hogy a tudomány maga hogyan működik. Az általános séma a  ábrán látható.  ábra - A kumulatív tanulási folyamat felhasználja és idővel folyamatosan bővíti a háttértudás készletét A kumulatív tanulási folyamat felhasználja és idővel folyamatosan bővíti a háttértudás készletét
24	0.708333	1	A feladat nehézsége, hogy a nézőpont és az objektum elhelyezkedése igen változatos lehet, az alakzatot eltakarhatják más tárgyak, esetleg a környezet és a megvilágítás sem ismert előre. További problémát jelenthet, ha nem egy adott tárgyat, hanem tárgyak osztályát, bizonyos tulajdonságoknak megfelelő tetszőleges, de amúgy változatos alakzatokat kell felismerni. Annak ellenére, hogy az ember számára ezek a feltételek nem jelentenek problémát, a feladat mai napig kihívás a számítógépek számára.
9	0.068966	0	Amellett hogy az egzisztenciális példányosítás bonyolultabb, mint az univerzális példányosítás, kissé különböző szerepet is játszik a következtetésben. Míg az univerzális példányosítást többször is alkalmazhatjuk, hogy sok különböző eredményhez jussunk, az egzisztenciális példányosítást csak egyszer végezhetjük el, majd az egzisztenciális kvantorral ellátott mondattól megszabadulhatunk. Például amint hozzáadtuk a tudásbázishoz a Meggyilkol(Gyilkos, Áldozat) mondatot, már nincs szükségünk a ∃x Meggyilkol(x, Áldozat) mondatra. Pontosabban megfogalmazva, az új tudásbázis logikailag nem ekvivalens a régivel, de tekinthetjük úgy, hogy a következtetés szempontjából ekvivalens (inferentially equivalent), azaz pontosan akkor kielégíthető, amikor az eredeti tudásbázis is kielégíthető.
2	0.421053	1	Az európai uniós CASCOM projekt során egy új platformot fejlesztenek, tetszés szerinti mobil kommunikációs eszközön (telefonon, PDA-n, laptopon stb.) Ez rendkívül rugalmas szolgáltatásokat nyújt. A rendszer kontextus-érzékeny üzleti alkalmazásokat koordinál.
19	0.545455	1	Tegyük fel, hogy adott egy G jegyhalmaz, amire igaz, hogy: G⊆F  , F i ∈G  és C∉G  . Abban az esetben, ha létezik olyan M⊆G  , ami Fi Markov-takarója, akkor igaz lesz G’= G – {F[i]} esetén, hogy Δ G' = Δ G  .
22	0.666667	0	Egy metafora (metaphor) olyan jelképes beszéd, amikor egy adott szó szerinti jelentéssel bíró kifejezést használunk egy másik jelentés sugalmazására analógia segítségével. A legtöbb ember úgy gondol a metaforára, mint a költők eszközére, mely nem játszik nagy szerepet a mindennapi szövegekben. Mindazonáltal nagyon sok alapvető metaforát olyan gyakran használunk, hogy még azt sem vesszük észre, hogy azok metaforák. Egy ilyen metafora annak a gondolata, hogy a „több felfelé van”. Ez a metafora lehetővé teszi számunkra annak közlését, hogy az árak emelkedtek, felmásztak vagy rakéta módjára szárnyalnak, hogy a hőmérséklet csökken vagy esik, hogy a bizalom valakiben csökken, illetve hogy egy sztár népszerűsége megugrott vagy szárnyal.
1	0.275862	1	A funkcionális MR (fMR) egyre növekvő szerepet kap a neurológiai betegségek kivizsgálásában. Mivel az fMR megbízható és reprodukálható vizsgálóeljárás, az utóbbi időbe az epilepszia műtét előtti kivizsgálásának alapvető eszközévé vált az elokvens területek és az epilepsziás góc viszonyának meghatározásában. Előzetes adatok alapján a memóriaaktivált fMR képes előre jelezni az epilepsziaműtét utáni memóriaproblémákat. Beszédaktivált fMR a féltekei dominancia meghatározásának leggyakrabban használt eszköze. Az agy látás- és mozgásközpontjai rutinszerűen meghatározhatók fMR segítségével, amely lényegesen megkönnyíti az epilepsziasebészeti kivizsgálást. Az fMR EEG-vel kombinálva ígéretes új diagnosztikai eljárás lehet mind az epileptológiában, mid az alvásmedicinában. Az fMR hasznos vizsgálóeljárás a veszélyeztetett, de menthető agyi területek meghatározásában akut cerebrovascularis eseményt követően. Az fMR prognosztikai jelentőségű a stroke hosszú távú funkcionális kimenetelében és rehabilitációjában.
3	0.708333	0	A gráfkeresés optimalitása már trükkös dolog. Korábban azt mondtuk, hogy egy ismételt állapot detektálásával az algoritmus két utat talált ugyanahhoz az állapothoz. A  ábrán látható Gráf-Keresés algoritmus mindig az újonnan felfedezett utat dobja el. Nyilvánvaló, hogy ha az újonnan felfedezett út rövidebb, mint az eredeti, a Gráf-Keresés elvéthet egy optimális megoldást. Szerencsére ki tudjuk mutatni (lásd  feladat), hogy az egyenletes költségű és a konstans lépésköltségű szélességi keresés esetén ez nem történhet meg. E két optimális fakeresési stratégia egyben optimális gráfkeresési stratégia is. Az iteratívan mélyülő keresés azonban mélységi kifejtést használ és könnyen kerülhet egy csomópont felé vezető szuboptimális útra, mielőtt megtalálná a hozzá vezető optimális utat. Az iteratívan mélyülő gráfkeresésnél tehát egy újonnan felfedezett útnál meg kell vizsgálni, hogy ez nem jobb-e, mint az eredeti. És ha igen, szükség lehet az adott csomópont követőinél a mélységek és az útköltségek revíziójára.  ábra - Egy exponenciálisan nagyobb keresési fát generáló állapottér. (a) Egy olyan állapottér, amelyben két lehetséges cselekvés vezethet A-ból B-be, kettő B-ből C-be és így tovább. Ez az állapottér d+1 állapotot tartalmaz, ahol d a maximális mélység. (b) Az (a) állapottér megfelelő keresési fája, 2^d ággal, amely az állapotér 2^d útjának felel meg. (c) Egy négyzetrács. A kezdeti (A) állapottól kétlépésnyire fekvő állapotokat szürke színnel jelöltük. Egy exponenciálisan nagyobb keresési fát generáló állapottér. (a) Egy olyan állapottér, amelyben két lehetséges cselekvés vezethet A-ból B-be, kettő B-ből C-be és így tovább. Ez az állapottér d+1 állapotot tartalmaz, ahol d a maximális mélység. (b) Az (a) állapottér megfelelő keresési fája, 2d ággal, amely az állapotér 2d útjának felel meg. (c) Egy négyzetrács. A kezdeti (A) állapottól kétlépésnyire fekvő állapotokat szürke színnel jelöltük.  ábra - Az általános gráfkereső algoritmus. A zárt halmazt egy hash-táblával lehet implementálni, hogy az ismételt állapotokat hatékonyan ellenőrizni tudjuk. Ez az algoritmus feltételezi, hogy az s állapothoz vezető első út a legolcsóbb (lásd szöveg). Az általános gráfkereső algoritmus. A zárt halmazt egy hash-táblával lehet implementálni, hogy az ismételt állapotokat hatékonyan ellenőrizni tudjuk. Ez az algoritmus feltételezi, hogy az s állapothoz vezető első út a legolcsóbb (lásd szöveg).
6	0.1	1	A Nimmel való hasonlóság felfedezéséhez viszonylag hosszú az út, így nézzünk egy pár ötletet, melyből már továbbgondolható a megfeleltetés. Számozzuk a sorba rakott érméket egytől n-ig, majd vegyünk fel egy szám n-est, ahol minden i-re ai=0, ha az i-edik érme írás, és ai=i, ha az i-edik érme fej. Ennek feleltessük meg egy n halmos Nim állását oly módon, hogy ahol az eredeti n szám között 0 van, az a Nimben lényegtelen, így csak a nem nulla számok határoznak meg egy annyi elemből álló halmot. Ekkor elég belátni, hogy minden, a Nim játékban megtett lépés megfeleltethető egy, a pénzforgatós játék szabályai szerinti lépéssel. Ennek átgondolását az olvasóra bízom.
2	0.105263	1	Ez tehát egy szemléletmód - tekinthetünk így az ágensre. Ebben az esetben egy-egy kész ágensről meg tudjuk mondani, hogy milyen ágens-függvénynek felel meg (analízis), illetve ágensek tervezésekor előírhatjuk, hogy a készülő ágens milyen ágens-függvénynek feleljen meg (szintézis), sőt, akár ellenőrizhetjük is később, hogy valóban megfelel-e az ágens az előírt ágens-függvénynek.
7	0.92	1	Architektúrális fejlesztés. Javítsuk az ágens érzékelőit! Az eredeti feladatban az ágens csak egy adott mezőben tud tájékozódni, azaz csak egy mezőről tudja megállapítani, hogy szomszédos-e csapdával vagy wumpussal. Ha ehelyett a világ teljes hosszában képes lenne érzékelni, úgy jelentősen javulna a teljesítménye. Hasonlóan ha kiterjesztjük a 'látás' érzékét úgy, hogy képes legyen megpillantani a wumpust vagy akár egy csapdát több mező távolságról, az is jelentős javulást eredményez. Egy másik lehetőség a mozgás javítása például ugrás bevezetésével, amellyel átléphetők a csapdák.
3	0.208333	0	Ez a megfogalmazás a 8-királynő probléma állapotterét 1,8 × 10^14-ről 2057 méretű térré csökkenti, minekutána megoldást könnyű megtalálni. Másrészt 100 királynő a korábbi megfogalmazás 10^400 állapothoz vezet, míg a javítottnál csak kb. 10^52 állapotunk lesz ( feladat). Ez óriási redukció, a javított eset azonban még mindig túl nagy az ebben a fejezetben ismertetett algoritmusok számára. A teljes állapot leírásról a  fejezetben olvashatunk, az  fejezet viszont egy olyan egyszerű algoritmust közöl, amellyel a millió királynőt számláló problémát is könnyen meg lehet oldani.
25	0.074074	1	Az első kategóriába tartozó fél-automata robotok működése hasonló ipari társaikéhoz: előzetes felvételek (CT, MRI) alapján megtervezett útvonalon mozogva hajtják végre feladatukat. Ha megvan a mozgásterv és az útvonal, meg kell határozni a valóságos robot relatív helyzetét a beteg anatómiai referenciapontjaihoz képest, azaz illeszteni kell a tervet a valóságos körülményekhez. Ezt nevezik regisztrációnak. Ezek után a robot minden további emberi beavatkozás nélkül képes végrehajtani az operációt.
21	0.125	1	Az aktív tanulási feladatokat három külön csoportba szokás sorolni az alapján, hogy a nem címkézett adatokhoz hogyan férünk hozzá: * Lekérdezés szintézis – ebben az esetben a tanulórendszer a lehetséges inputok teréből keres egyet és adja az orákulumnak címkézésre. Alkalmazási terület pl.: robotkar orientációjának meghatározása a folytonos állapottér egyes elemeihez tartozó kimenet lekérdezésével [2]. * Szelektív mintavétel – egyesével lehet lekérni az egyes mintákhoz tartozó változóértékeket. A változóértékek egy ismeretlen, de állandó eloszlás szerint érkeznek, a lekérés költsége nulla. A tanulórendszer feladata eldönteni, hogy az aktuálisan lekérdezett változóértékhez kér-e címkézést. Alkalmazási területek pl.: élőbeszéd annotálása, szenzorütemezés. * Halmaz alapú mintavétel – adott a minták egy címkézett véges halmaza, ezek közül választhat a tanulórendszer. Alkalmazási terület pl.: osztályozási feladatok, rák diagnosztika, beszédfelismerés.
5	0.181818	1	Szerencsére a következő (SA, WA) él konzisztens, hiszen SA minden értékéhez, mind a GREEN-hez, mind a BLUE-hoz jó WA egyetlen RED értéke. Tehát ez az él kikerül az él-listáról. Hasonlóképp mindhárom megmaradt, NT-be mutató él, a WA-ból, SA-ból, és Q-ból NT-be induló él konzisztens, azaz mind WA, mint SA, mind pedig Q változó minden értékére igaz, hogy van konzisztens párja az NT változó előbb redukált értékkészletében (de ugyebár épp emiatt a redukció miatt nem árt az ellenőrzés - ezért is adjuk hozzá mindig a redukált értékkészletű változókra mutató összes élet az él-listához, hiszen az AC3 szerint élkonzisztencia megtartása a fő a KKP-ben).
8	0.322581	0	A másik módja a megoldásnak: ∃x Fivér(Richárd, x), ahol ez egy Richárdról szóló mondat (hogy neki van egy fivére), és nem pedig az x-ről. Így tehát annak nem lesz hatása, ha kívül elé teszünk egy ∀x-et. Éppen így írhattuk volna azt is, hogy ∃z Fivér(Richárd, z). Mivel ez tévesztés forrása lehet, ezért mindig különböző változókat fogunk használni.
24	0.833333	1	A gerincek vagy völgyek például a következő algoritmussal kereshetők: * Térjünk át a vizsgált pont Hesse mátrixának sajátvektorai által meghatározott bázisra. * Tekintsük azon pontokat, melyekre az egyik tengely mentén az első derivált nulla, a második derivált negatív, azaz a második tengely mentén lokális maximumban vagyunk. * Gerinchez tartozó pontot találtunk, ha a második tengely menti második derivált abszolútértéke kisebb az első tengely mentinél, azaz az első tengely mentén nagyobb a görbület.
11	0.423077	0	Az előre- és hátrafelé keresés a teljesen rendezett terv keresés speciális fajtái. Ezek a cselekvéseknek csak szigorúan lineáris sorozatait tárják fel, melyek közvetlenül kapcsolódnak a kiinduláshoz vagy a célhoz. Ez annyit tesz, hogy nem használhatják ki a problémadekompozíció lehetőségeit. Ahelyett hogy a részproblémákon külön dolgoznának, mindig arról kell dönteniük, hogy hogyan sorrendezzék a részproblémák cselekvéseinek összességét. Előnyösebb lenne egy olyan megközelítés, ami több részcélon dolgozik függetlenül, ezeket több résztervvel megoldja, majd összerakja a részterveket.
9	0.827586	0	A bennfoglalás (subsumption) módszere kizárja a keresésből azokat a mondatokat, amelyek benne foglaltatnak (például mert specifikusabbak) más tudásbázisbeli mondatokban. Például ha P(x) megtalálható a tudásbázisban, akkor nincs értelme hozzáadni P(A)-t, még kevesebb értelme van hozzáadni P(A) ∨ Q(B)-t. A bennfoglalás segít kis méreten tartani a TB-t, amely a keresési tér méretének csökkentését eredményezi.
3	0.958333	0	Tegyük fel, hogy a Legális-Cselekvés(s) azon cselekvések halmazát jelöli, amelyek legálisak az s állapotban, és az Eredmény(a, s) pedig azt az állapotot, ami az s állapotban a végrehajtott legális cselekvés eredménye. Definiálja az Állapotátmenet-Fv-t a Legális-Cselekvés és az Eredmény függvényében, és megfordítva.
24	0.833333	1	A Moravec sarokpont kereső azon a feltételezésen alapul, hogy egy sarokpontban az intenzitásértékek megváltozása minden irányba haladva nagy, míg egy élnél ez csak az egyik irányba, egy homogén területen pedig egyik irányba sem igaz. Tehát az algoritmus minden egyes pixelre kiszámolja a következő mennyiséget: a lokális környezet különböző irányú eltoltjainak és az eredeti tartománynak számítja a különbségek négyzetösszegét (SSD) és a vizsgált pozícióhoz a legkisebb összeget rendeli. Így az eredményképen a sarokpontok lesznek a legintenzívebb pontok, melyeket már egyszerű maximumkereséssel meg lehet találni.  ábra - A Moravec detektor működési elve. (forrás: www.cim.mcgill.ca ) A Moravec detektor működési elve. (forrás: www.cim.mcgill.ca )
4	0.958333	0	Néha egy adott problémához nem létezik jó kiértékelő függvény, azonban létezik jó összehasonlítási módszer: vagyis el lehet dönteni, hogy egy csomópont egy másik csomópontnál jobb-e anélkül, hogy valamilyen számértéket rendelnénk hozzájuk. Mutassa meg, hogy ez elégséges a legjobbat-először (best-first) keresés végrehajtásához. Létezik-e ilyen analógia az A^* esetére is?
9	0.482759	0	A Prolog a listák jelölésére és az aritmetikára tartalmazza a „szintaktikai nyalánkságot”. Példaként íme egy Prolog program a csatol(X,Y,Z)-re, amely akkor sikeres, ha a Z- lista az X- és az Y -listák csatolásának az eredménye:
1	0.068966	1	Stanisław Ulam matematikus az 1940-es években a Los Alamos-i Nemzeti Laboratóriumban kristályok növesztését tanulmányozta, egy egyszerű rácsszerkezet modellt alkalmazva. Eközben munkatársa, Neumann János az önreprodukáló rendszerek problémájával foglalkozott. Neumann eredeti felvetése az volt, hogy vajon miféle logikai szerkezet elegendő egy olyan automatikus géphez, amely önmagát reprodukálni képes. Az ilyen szerkezetet kinematikus modellnek nevezzük. A tervezés közben Neumann rájött, hogy mennyire nehéz egy magát reprodukáló robot megalkotása. Elfogadva Ulam tanácsát, a szerkezetet egy olyan matematikai absztrakció köré építette, amely egyike volt Ulam kristálynövesztési tanulmányai során használtaknak. Ebből alakult ki az első rendszere a sejtautomatáknak, amit Neumann Univerzális Konstruktorának neveznek [TJN].
7	0.08	0	Egy példa wumpus világ látható a  ábrán. A példakörnyezet pontos definícióját, ahogy a  fejezetben javasoltuk, a TKCSÉ-leírással adjuk meg: * Teljesítménymérték: +1000 az arany felvétele, –1000 a csapdába esés vagy ha a wumpus felfal, –1 minden végrehajtott cselekvés, –10 a nyíl használata.
5	0.181818	1	Az előbbiek során tanúi lehettünk annak, hogy egy adott heurisztika (pl. az LCV) nem feltétlen kell, hogy javulást okozzon, sőt. Adott esetben (túl azon, hogy számítási szempontból még többletet is jelent) még akár ronthatja is az algoritmus hatékonyságát, vagy egyszerűen csak nem változtat semmin. Mondjuk az ebben a szakaszban tárgyalt eset azért nem túl gyakori: láthattuk, hogy tényleg igen sok egybeesésre volt szükség ahhoz, hogy az LCV-vel kiegészített algoritmus is pontosan ugyanazokat a döntéseket hozza, mint amiket az LCV nélküli változat tett. Ez azért elég ritka, mindazonáltal remélhetőleg tanulságos.
6	0.1	1	A fenti fólián két lényegi elem szerepel: (1) két állítás, amelyik akkor teljesül, amennyiben egy q* kevert stratégiakombináció nyeregpont, azaz Nash-egyensúly, illetve (2) egy állítás, amelyik akkor igaz, ha a játék zéró-összegű. A harmadik állítást nyilván nem csak tiszta, hanem kevert stratégiák esetére is felírhatjuk a következőképp.
4	0.916667	1	ii) A feltétel szerint ha az algoritmus futása során valamely lépésben c-nél nagyobb különbség lenne az optimális út hátralevő részének költsége és h becslése között, akkor ezt az utat az algoritmus levágná. Következésképpen a végrehajtás során sehol nem lehet az út aktuális költsége több, mint c-vel magasabb, mint egy optimális megoldásé!
11	0.769231	0	A kizárási axiómák néha nagyon buta eszköznek tűnnek. Ahelyett hogy kikötnénk, hogy egy gép nem repülhet egyszerre két reptérre, mondhatnánk egyszerűen, hogy egyetlen tárgy sem lehet egyszerre két helyen:
26	0.857143	0	A fejezetben szóltunk a gyenge MI-vel szembeni kritika lehetséges forrásairól. Ugyan a posztneurális hálók korszakában divatossá vált idejétmúltnak tartani a szimbolikus megközelítéseket, nem minden filozófus kritikus a „Jófajta, régivágású MI”-vel szemben. Akadnak ennek még elkötelezett, sőt akár gyakorló hívei is. Zenon Pylyshyn (Pylyshyn, 1984) amellett érvelt, hogy a számítási modell nemcsak elviekben a legjobb modell a megismerés megértéséhez, hanem a jelenlegi kutatás útja is lehet, és kifejezetten megcáfolta Dreyfus kritikáját az emberi megismerés számítási modelljéről. Gilbert Harman (Harman, 1983) a hiedelemmódosítás vizsgálatát az igazság-karbantartó mesterséges intelligencia rendszerek kutatásához kapcsolta. Micheal Bratman az emberi pszichológiáról alkotott „hiedelem-vágy-intenció” modelljét (Bratman, 1987) alkalmazta a tervkészítéssel kapcsolatos mesterséges intelligencia kutatásokra (Bratman, 1992). Aaron Sloman (Sloman, 1978, iii. o.), a mesterséges intelligencia erős hipotézisének radikális híve odáig elment, hogy rasszistának nevezte Joseph Weizenbaumot (Weizenbaum, 1976), mert szerinte a feltételezett intelligens gépeket nem kellene személyeknek tekinteni.
10	0.060606	1	Több különböző leíró nyelvcsalád létezik, melyek abban térnek el egymástól, hogy mennyire és hogyan szabályozzák az összetett fogalmak konstruálását. Az általunk vizsgált két nyelv közül az első az AL(Attributive Language) nyelv. Ebben a következő eszközöket használhatjuk: atomi fogalom, tetőjel-univerzális fogalom, fenékjel-semmis fogalom, atomi negálás, metszetképzés, értékkorlátozás, egyszerű létezési korlátozás. Az AL nyelvvel megadott összetett fogalmak interpretációjához meg kell adnunk, hogy az alap, teljes halmazt a részfogalmak, mely részhalmazokra képzi le (üres is megengedett).
24	0.333333	0	Két dimenzióban egy él irányítottsága tetszőleges θ szögű lehet. A függőleges élek detektálásának módja nyilvánvaló: G'[σ](x) G[σ](y)-nal kell konvolválnunk a képet. A hatás y irányban simító (a Gauss-konvolúció miatt), x irányban pedig egy simítással kísért differenciálás. A függőleges élek detektálási algoritmusa így az alábbi: 1. Konvolváljuk az I (x, y) képet az f[V](x, y) = G'[σ] (x) G[σ] (y)-nal, hogy az R[V](x, y) -t megkapjuk. 2. Jelöljük be azokat a csúcsokat az ||R[V ](x, y)||-ben, amelyek egy előre definiált T[n] küszöbnél magasabbak.
5	0.181818	1	* House1: a balról nézve első házat reprezentáló érték * House2: a balról nézve második házat reprezentáló érték * House3: a balról nézve harmadik (azaz középső) házat reprezentáló érték * House4: a balról nézve negyedik házat reprezentáló érték * House5: a balról nézve ötödik (utolsó, jobb szélső) házat reprezentáló érték
3	0.25	1	A játékot (alapvetően) egy személy játssza egy téglalap alakú, cellákra osztott pályán. A játék elején a számítógép előre megadott számú aknát helyez el véletlenszerűen kiválasztott cellákban, a játékos elől elrejtve. A játékos ezután bármelyik cellára rákattinthat. Ha a kiválasztott cellán akna van, a játékos vesztett, ellenkező esetben a gép ráírja a cellára, hogy a vele közvetlenül szomszédos 8 cella közül pontosan hányon van akna. A játékos a kapott információk alapján ismét kattint, és ez így megy addig, amíg egyszer vagy aknára nem kattint, vagy fel nem fedi az összes aknamentes mezőt.
24	0.916667	0	A látás megértésében a következő lényeges előrelépés a 19. században történt. Helmholtz és Wundt  fejezetben említett munkássága a pszichofizikai kísérleteket szigorú tudományos szintre emelte. Young, Maxwell és Helmholtz munkája megalapította a színes látás három színen alapuló elméletét. Azt a tényt, hogy az emberi szem a mélység érzékelésére is képes, ha a két szem kissé eltérő képet lát, Wheatstone a sztereoszkóp feltalálásával demonstrálta (Wheatstone, 1838). A készüléknek azonnal nagy sikere lett a szalonokban Európa-szerte. A kétkamerás sztereolátás lényegét, azaz hogy a jelenet két, kissé eltérő látószögből készített képe elegendő információt hordoz a jelenet háromdimenziós visszaállításához, a fotogrammetria területén aknázták ki. Megszülettek a kulcsfontosságú matematikai eredmények. Kruppa bebizonyította, hogy ha öt különböző pont két különböző képével rendelkezünk, vissza lehet állítani a két kamera pozíciója közötti elfordulást és eltolást, valamint a jelenet mélységét (egy skálafaktor erejéig) (Kruppa, 1913). Bár a sztereolátás geometriáját jó ideje ismerték, a fotogrammetria megfeleltetési problémáját általában emberek oldották meg, akik az egymásnak megfelelő pontokat igyekezték egymáshoz illeszteni. Az embereknek a megfeleltetési probléma megoldásában megmutatkozó csodálatos képességét Julesz Béla demonstrálta a véletlen-pont sztereogram feltalálásával (Julesz, 1971). Ezen probléma megoldására mind a számítógépes látás területén, mind a fotogrammetriában sok munkát fordítottak az 1970-es és az 1980-as években.
24	0.166667	1	Amikor egy objektum rajzolását végezzük, legyen az egyenes vagy körív, a rajzolás során egy képernyőfrissítés alatt kivillantjuk a rajzolni kívánt képpontokat, amelyekből érzékeljük, hogy a fényceruza melyeket látja, innen tudjuk meghatározni, hogy hova mutatunk. Az eszköznek körülbelül 1,5 hüvelyk (kb. 4 cm) átmérőjű látómezeje van, ami alkalmatlanná teszi pontos munkavégzésre, ezért csak egy bizonyos, a gyakorlatban jónak bizonyult 1/8 hüvelyk (1/3 cm) távolságot veszünk figyelembe a megcélzott objektumtól, ez figyelhető meg a  ábrán.  ábra - Rajzelemek és környezetük Rajzelemek és környezetük
6	0.4	0	Próbáljuk meg ezt az ötletet pontosan megfogalmazni. A kiértékelő függvények többsége az állapot különböző tulajdonságait (features) kiszámítva dolgozik – a sakkban például ilyen a mindkét félnél lévő gyalogok száma. A tulajdonságok, egybevéve, az állapotok különböző kategóriáit, avagy ekvivalenciaosztályait definiálják: az egyes kategóriákhoz tartozó állapotok az összes tulajdonság szempontjából ugyanazt az értéket képviselik. Minden egyes kategória általánosságban tartalmazni fog olyan állapotokat, melyek győzelemhez vezetnek, olyanokat, amelyek döntetlent eredményeznek, és olyanokat, amelyek vereséggel végződnek. A kiértékelő függvény nem tudhatja, hogy melyik állapot melyik, azonban visszatérhet egyetlen olyan értékkel, amely tükrözi az egyes kimenetelekhez tartozó állapotok arányát. Tegyük fel például, hogy a tapasztalatunk azt sugallja, hogy a kategóriához tartozó állapotok 72%-a vezet győzelemhez (+1 hasznosság), 20%-a vesztéshez (–1 hasznosság) és 8%-a döntetlenhez (0 hasznosság). Akkor a kategóriához tartozó állapotok értelmes értékelése a súlyozott átlag vagy a várható érték (expected value): (+1 × 0,72) + (–1 × 0,20) + (0 × 0,08) = 0,52. Elvben a várható értéket minden kategóriára meg lehetne határozni, ami egy tetszőleges állapot esetén is működő kiértékelő függvényhez vezetne. A végállapotokhoz hasonlóan, a kiértékelő függvénynek nem kell tényleges várható értékeket visszaadnia, amíg az állapotok sorba rendezése ugyanaz.
1	0.37931	0	Azt mondhatjuk, hogy a tudományos pszichológia Hermann von Helmholtz német fizikus (1821–1894) és tanítványa, Wilhelm Wundt (1832–1920) munkásságával kezdődött. Helmholtz tudományos módszereket alkalmazott az emberi látás tanulmányozásánál, és a Handbook of Physiological Optics c. művét még ma is úgy tekintik, mint „az emberi látás fizikájának és fiziológiának máig egyedüli legfontosabb tanulmányát” (Nalwa, 1993, 15. o.). Wundt 1879-ben a Lipcsei Egyetemen nyitotta meg a kísérleti pszichológia első laboratóriumát. Wundt ragaszkodott azon kísérletek szigorú ellenőrzéséhez, amelyekben munkatársai érzékelési, illetve asszociációs feladatokat végeztek, hogy közben a kísérletet végzők gondolkodási folyamatait is meg lehessen figyelni. A gondos felügyelet révén a pszichológia inkább tudománnyá vált, de az adatok szubjektív volta miatt valószínűtlen volt, hogy egy kísérletező képes legyen valaha is a saját elméleteit megcáfolni. Ezzel szemben az állati viselkedést tanulmányozó biológusok nem önmagukra vonatkozó adatokkal dolgoztak, és egy objektív módszertant dolgoztak ki, amit H. S. Jenkins (Jenkins, 1906) a Behavior of Lower Organisms c. nagy hatású műve mutat be. Ezt a nézőpontot az emberekre kivetítve a John Watson (1878–1958) vezette behaviorista mozgalom (behaviorism) a mentális folyamatok minden elméletét elutasította, azzal érvelve, hogy önelemzésből lehetetlen megbízható bizonyítékot szerezni. A behavioristák ragaszkodtak ahhoz, hogy az állatot érő érzést (vagy ingert) és az eredményül kapott cselekvést (másképpen választ) szigorúan objektív mércék szerint tanulmányozzuk. Olyan gondolati konstrukciókat, mint a tudást, a hiedelmeket, a célokat és a következtetés lépéseit elutasították, áltudományos, „népi pszichológiának” tartva azokat. A behaviorizmus eredményesnek bizonyult a patkányoknál és a galamboknál, de az emberek megértésében kevésbé volt sikeres. A pszichológiára azonban – különösképpen 1920 és 1960 között az Egyesült Államokban – erős hatást gyakorolt.
8	0.645161	0	Létrehozunk egy ontológiát és egy tudásbázist, amelynek felhasználásával képesek leszünk következtetéseket végezni olyan típusú digitális áramkörökről, mint amilyet a  ábra mutat. A tudástervezés hétlépéses folyamatát fogjuk követni.
14	0.521739	0	Az egzakt következtetés nagy, többszörösen összekötött hálókban való kezelhetetlensége miatt, elengedhetetlen közelítő következtetési módszerek átgondolása. Ez a fejezet véletlen mintavételi, Monte Carlo-módszereknek is nevezett, eljárásokat ír le, amelyek közelítő válaszokat nyújtanak, ahol a pontosság a generált minták számától függ.
1	0.37931	1	Az MR vizsgálat segítségül hívása leginkább a szakintézeti, klinikai kivizsgálás részeként, olyankor indokolt, ha egyéb módon nem jutottunk eredményre, vagy azok pontosításra szorulnak. Perdöntő adatokat, nagy pontosságú megjelenítést a vizsgálat alatt el nem mozduló szervekben, elsősorban a központi idegrendszer ( ábra) és a vázizomzat, ízületek területén, az oedemák, elhalások felismerésében, illetve a csontvelőben várhatunk tőle. A módszer a gátor és kismedence áttekintésén túl egyre inkább használatos a máj gócos elváltozásainak elkülönítésében, a vese- és mellékvese daganatok kórismézésében, a gyomor-bélhuzamot érintő gyulladásos betegségek aktivitásának, illetve a daganatok terjeszkedési stádiumának meghatározásában.
5	0.181818	1	A 2-2. táblázatban összefoglalt érték-korlát szerint, ha például kiderül, hogy a ChesterfieldsHouse értéke House2 és a FoxHouse változó értéke House1, akkor máris tudhatjuk, hogy a CHC változó értéke +1, és a ZCF értéke 1. Viszont például ZCF-ből kiindulva, ha ismerjük az értékét, máris megmondható a másik három változó értéke. Ezt használjuk ki a táblázatban foglalt kvaternális korlát bináris érték-korlátokká való szétbontása során. Ennek során 3 különböző értékkorlát jön létre. Az első ezek közül a ZCF-et és a ChesterfieldsHouse-t asszociálja össze.
15	0.814815	0	Vegyük észre, hogy nem azt mondtuk, hogy „kinyerhető a legvalószínűbb szósorozat”. A legvalószínűbb szósorozat nem szükségképpen az, ami a legvalószínűbb állapotsorozatot tartalmazza. Ez amiatt van így, mert egy szósorozat valószínűsége az összes olyan állapotszekvencia valószínűségének összege, amely konzisztens ezzel a szósorozattal. Két szósorozatot összehasonlítva, mondjuk „a back” és „aback” szósorozatokat, előfordulhat, hogy tíz alternatív állapotsorozat van az „a back”-hez, ezek mindegyike 0,03 valószínűséggel, de csak egyetlen állapotsorozat az „aback”-hez, viszont 0,20 valószínűséggel. A Viterbi-algoritmus az „aback”-t választja, pedig az „a back” valójában valószínűbb.
15	0.407407	0	szintén Gauss-eloszlás. 2. Ha az előrejelzés P(X[t+1]|e[1:t]) eloszlása Gauss-eloszlás és a P(e[t+1]|X[t+1]) érzékelő modell lineáris Gauss-modell, akkor az új bizonyítékkal, mint feltétellel, a frissített eloszlás
3	0.625	0	A kétirányú keresés mögött az az ötlet húzódik, hogy egyszerre el lehet indítani egy keresést előrefelé a kiinduló állapotból, illetve hátrafelé a célállapotból, és a keresés akkor fejeződik be, ha a két keresés valahol találkozik (lásd  ábra). Az érv az, hogy b^d/2 + b^d/2 sokkal kisebb, mint b^d, illetve az ábrán szemlélve, hogy a két kisebb kör összterülete kisebb, mint annak a nagy körnek a területe, amelynek középpontja a kiinduló állapot, és amely a peremével a célállapotot eléri.  ábra - A kétirányú szélességi keresés sematikus ábrája. Az ábrán a két keresési irány majdnem találkozik, amikor a kiinduló csomópontból kinyúló egyik ág összeér egy a célcsomópontból kinyúló másik ággal. A kétirányú szélességi keresés sematikus ábrája. Az ábrán a két keresési irány majdnem találkozik, amikor a kiinduló csomópontból kinyúló egyik ág összeér egy a célcsomópontból kinyúló másik ággal.
14	0.826087	1	Speciálisabb, precízebb és költségesebb eljárásokkal kell pontosan tisztáznunk a kockázati profilt. A kockázatok természetesen időben is változhatnak, ezért a becsléseket időszakosan fel kell frissíteni. A kockázatbecslés többlépéses, egy időben zajló, ciklikus folyamat.
3	0.916667	1	- A keresési költség az első két módszer esetében várhatóan kisebb lesz, mint a harmadiknál, hisz ezekben az esetekben kevés lépést kell újratervezni (az elsőnél összesen legfeljebb egyet minden egymás után elkövetett hibáért), míg a harmadik esetén egy teljesen új útvonalat tervezünk, ami igen költséges lehet, ha még az út elején járt az ágens.
3	0.916667	1	Állapotátmenet-függvény: Amennyiben a majom egy láda mellett van, áthelyezheti azt egy szomszédos, üres mezőre. Ha mindkét láda mellette van, az egyik ládát ráteheti a másikra. Ha egy láda mellett van, felmászhat arra a ládára. Ha a majom egy ládán van, akkor lemászhat róla. Ha a majom egy ládába kapaszkodik, és a ládán egy másik láda is van, akkor feljebb mászhat egy ládányival.
15	0.333333	0	ahol a B[t–d+1:t ]mátrix a T és az O mátrixok sorozatának a szorzata. A B-t felfoghatjuk egy „transzformációs operátornak”, ami egy későbbi visszafelé üzenetet egy korábbiba alakít. Egy hasonló egyenlet áll fenn az új visszafelé üzenetekre a következő megfigyelés beérkezése után:
25	0.851852	0	Veszélyes környezet. Robotok segítettek az embereknek a nukleáris hulladékok eltakarításában. A legnevezetesebb helyszín Csernobil és Three Mile Island volt. A robotok ott voltak a World Trade Center összeomlása után is, és olyan helyekre is bementek, amelyek a mentőcsapatok számára túl veszélyesek voltak.
17	0.666667	0	Egy játékot a játékelméletben a következő alkotóelemek definiálnak: * Játékosok (player) vagy ágensek, akik döntéseket hoznak. A legnagyobb figyelem a kétszemélyes játékokra irányult, bár az n személyes játékok n > 2-re szintén gyakoriak. A játékosokra nagybetűs neveket használunk, mint Aliz és Bendegúz vagy O és E. * Cselekvések (actions), amiket a játékosok választhatnak. A cselekvéseknek kisbetűs neveket választunk, mint az egy vagy a tanúskodik. Lehet, hogy a játékosok a cselekvéseknek ugyanazt a halmazát érik el, de az is lehet, hogy különbözőt. * Jutalommátrix (payoff matrix), ami az összes játékos cselekvéseinek mindegyik kombinációjára, mindegyik játékos számára megadja a hasznosságot. A jutalommátrix a kétujjas snóblijátékhoz a következő:
11	0.846154	0	Az ilyen pesszimizmus ellen az „oszd meg és uralkodj” elv hatásos fegyver lehet. A legjobb esetben – amennyiben a probléma teljesen dekomponálható – az „oszd meg és uralkodj” elv exponenciális gyorsulást hozhat. A dekomponálhatóságot azonban a cselekvések negatív kölcsönhatásai megszüntetik. A részben rendezett tervkészítő ezt egy erős reprezentácós megközelítéssel, az okozati kapcsolatokkal kezelte, de sajnos a konfliktusok mindegyike csak egy választással oldható fel (ami a konfliktusban álló cselekvést vagy a kapcsolat elé, vagy mögé sorolja) és ezen választások száma exponenciálisan nő. A Graphplan algoritmus a gráf felépítésekor kikerüli ezeket a döntéseket úgy, hogy az ütközéseket mutex kapcsolatokkal rögzíti anélkül, hogy a feloldás módjáról döntene. A SATplan algoritmus a mutex kapcsolatok hasonló területét fedi le, de ezt egy specifikus adatstruktúra felhasználása helyett az általános CNF alak felhasználásával teszi. Az, hogy ez mennyire jól működik, a felhasznált SAT megoldótól függ.
6	0.15	0	Egy normális keresési problémánál, az optimális megoldás nem lenne más, mint a célállapothoz vezető lépések szekvenciája – azaz egy olyan végállapothoz vezető lépésszekvencia, amely a győzelmet jelenti. Egy játékban azonban min-nek is van beleszólása a dologba. Ezért max-nak egy olyan stratégiát (strategy) kell találnia, amely meghatározza max lépését a kezdeti állapotban, majd a min lehetséges válaszaiból keletkező állapotokban, majd ismét max lépéseit a min erre vonatkozó lehetséges válaszaiból keletkező állapotokban és így tovább. Nagyjából azt lehet mondani, hogy egy optimális stratégia olyan kimenetelekhez vezet, amelyek legalább olyan jók, mintha bármilyen más stratégiával egy tévedhetetlen opponens ellen játszanánk. Először megmutatjuk, hogyan kell megkeresni az optimális stratégiát, bár ennek kiszámítására max-nak általában nem lesz elegendő ideje az amőbánál bonyolultabb játékokban.
10	0.515152	0	Most meg kell adnunk a füzér reprezentációs nyelv részére a szintaxist, a szemantikát és a bizonyítási elméletet, pontosan úgy, ahogyan ezt a  fejezetben tettük. A különbség az, hogy ezeket most mind elsőrendű logikában kell definiálnunk. A Jelent függvénnyel kezdünk, amely a füzért arra az objektumra képezi le, amit jelöl. A Neve egy olyan függvénnyel definiálható, amely egy objektumot az azt megnevező füzérre képezi le. A „Clark” és a „Superman” jelölés jelentése egy objektum, amire a VasEmber konstansszimbólummal fogunk hivatkozni, és aminek a neve a tudásbázisban lehet „Clark”, „Superman” vagy valamilyen más konstans, mondjuk „X[11]”.
9	0.827586	0	Óvatosan kell alkalmaznunk a megközelítést, mivel az algoritmus nem lesz teljes, ha a támogató halmazt rosszul választjuk meg. Ha az S támogató halmazt úgy választjuk meg, hogy a maradék mondatok együttesen kielégíthetők, akkor a támogató halmaz stratégiáját alkalmazó rezolúció teljes. Elterjedt módszer, hogy a negált lekérdezés mondatot használjuk támogató halmazként, azt feltételezve, hogy az eredeti tudásbázis konzisztens. (Végül is, ha a tudásbázis nem konzisztens, akkor a lekérdezésből következtethető tény is jelentés nélküli.) A támogató halmaz stratégiának további előnye, hogy a létrehozott bizonyítási fák célorientáltak, így az olvasók számára könnyen érthetők.
9	0.344828	0	akkor az előrefelé láncolás hozzáadja a TermSzám(S(0)), TermSzám(S(S(0))), TermSzám(S(S(S(0)))) mondatokat és így tovább. Általánosságban ezt a problémát nem lehet kikerülni. Hasonlóan, mint az általános elsőrendű logikában, a határozott klózokkal való következtetés félig eldönthető.
8	0.290323	0	és így tovább. Mármost, egy implikáció akkor igaz, ha a premissza és a konklúzió egyaránt igaz, vagy ha a premisszája hamis. Tehát ha Oroszlánszívű Richárd nem egy korona, akkor az első állítás igaz, és az egzisztenciális kvantort kielégítettük. Így tehát egy egzisztenciális kvantort tartalmazó implikációs mondat igaz bármely olyan modellben, amely tartalmaz egy olyan objektumot, amelyre az implikáció premisszája hamis; következésképpen az ilyen mondatok valójában nem túl sokat mondanak.
19	0.181818	0	Bemutattuk tehát, hogy ha S-t és G-t definíciójuknak megfelelően kezeljük, akkor a verziótér kielégítő leírását adják. Az egyetlen hátralévő probléma, hogy hogyan módosítsuk S-t és G-t egy új példa esetén (a Verzió-Tér-Módosítás függvény feladata). Elsőre ez meglehetősen bonyolultnak tűnik, de a definíciók és a  ábra alapján nem túl nehéz az algoritmus előállítása.
27	0.4	1	… programja kellően nagy teljesítményű számítógépen futtatva a műhold és környezete, a köztük lévő távkapcsolat, illetve saját hardveres kiépítettségének adottságai mellett várhatóan maximalizálja a helyesen osztályozott képek számát.
3	0.916667	1	Iteratívan mélyülő keresés: Ez az eljárás lényegében megegyezik a mélységkorlátos bejárással, de azt többször végrehajtja, folyamatosan egyre növelve a mélységi korlátot a kezdeti nulláról. Amennyiben biztos ismereteink vannak a megoldás mélységéről (azaz hogy legfeljebb hány lépésre lehet a kezdőállapottól), úgy e módszer alkalmazása felesleges, de ha ilyen információnak nem vagyunk birtokában (ami a gyakorlatban bizony előfordul), akkor érdemesebb lehet ezt az iterációs módszert alkalmazni, mint választani egy túlságosan nagy korlátot, és a keresési fa egy feleslegesen terjedelmes baloldali részfáját végigjárni. (Ne feledjük: egy keresési gráf csúcsainak száma egy adott mélységben ugrásszerűen megnőhet, ahogy haladunk lefelé!) A kifejtési sorrend az első iterációban (korlát=0): 1; a második iterációban (korlát=1): 1, 2, 3; a harmadik iterációban (korlát=2): 1, 2, 4, 5, 3, 6, 7; a negyedik iterációban pedig megegyezik az előző részfeladatbeli sorrenddel (1, 2, 4, 8, 9, 5, 10, 11). Így összesen 19 csúcsot fejtettünk ki (ismétlésekkel együtt), ami nem tűnik túl kecsegtetőnek az előző megoldás 8 kifejtéséhez képest, de figyelembe véve az iménti megjegyzést belátható, hogy kevésbé egyszerű esetben sokat spórolhatunk vele!)
4	0.125	0	Ha az f-költségek sohasem csökkenek, bármilyen utat választunk, akkor az állapottérben határvonalakat (contour) húzhatunk be, hasonlóan egy topografikus térkép kontúrjaihoz. A  ábra erre mutat egy példát. A 400-zal felcímkézett határvonalon belül az összes csomópont f(n) értéke nem nagyobb 400-nál, és hasonló érvényes a többire is. Mivel az A^* keresési algoritmus a legkisebb f értékkel rendelkező levélcsomópontot fejti ki először, láthatjuk, hogy az A^* keresési algoritmus a gyökércsomópontból legyezőszerűen halad kifelé, növekvő f értékekhez tartozó koncentrikus sávokban hozzáadva a csomópontokat.
6	0.1	1	Sajnos a válasz leginkább nemleges. Ebben a játékban nem beszélhetünk kooperativitásról, továbbá nincs domináns stratégia, sem pedig az eddigiek értelmében vett Nash-egyensúly. Mit tehetnénk tehát? Hogyan kellene egy ilyen játékban játszani?
13	0.318182	0	Az elemi eseményeknek van néhány fontos tulajdonsága: * Az elemi események egymást kölcsönösen kizáró események – legfeljebb egyikük lehet igaz. Például, nem lehet egyszerre igaz a lyuk ∧ fogfájás, valamint a lyuk ∧ ¬fogfájás. * Az összes elemi esemény halmaza kimerítő – legalább az egyiknek igaznak kell lennie. Azaz az összes elemi esemény egyesítése logikailag egyenértékű az igaz állítással. * Minden egyes elemi esemény maga után vonja következményként az összes állítás igazságát vagy hamisságát függetlenül attól, hogy azok egyszerűek vagy összetettek. Ez a logikai kapcsolatok szokásos szemantikájának alkalmazása révén mutatható meg (lásd  fejezet). Például a lyuk ∧ ¬fogfájás elemi esemény következménye a fogszuvasodás igaz volta és a lyuk ⇒ fogfájás hamissága. * Bármely állítás logikailag egyenértékű azon elemi események diszjunkciójával, amelyekből az állítás következik. Például a lyuk állítás ekvivalens a lyuk ∧ fogfájás és a lyuk ∧ ¬fogfájás elemi események egyesítésével.
14	0.652174	0	Fogadjunk el ezért bizonyos korlátozásokat, legalábbis időlegesen. Nevezetesen, hogy tervezzünk egy olyan korlátozott nyelvet, amelyhez csak véges modell tartozik. Ez számos módon megtehető. Itt a relációs valószínűségi modelleket (relational probability models, RPM) vagy RVM-eket ismertetjük, amelyek a szemantikus hálók (lásd  fejezet) és objektumrelációs adatbázisok elméletéből is vettek át elemeket. Egyéb megközelítések az irodalmi és történeti megjegyzésekben szerepelnek.
27	0.4	1	Egy számítható racionális ágens olyan döntést hoz, amely számításai megkezdésekor tökéletesen racionális lett volna. Sajnos a gyakorlatban ez a követelmény legtöbbször nem használható, mivel egyrészt akár kivárhatatlan sokáig is eltarthat, amíg a rendszer meghozza döntését, másrészt (különösen dinamikus, folytonosan változó környezetekben) a hozott döntés jóságát később már semmi sem garantálja.
15	0.814815	0	Kezdjük a nyelvi modellel, aminek a beszédfelismerésben az a feladata, hogy valószínűséget rendeljen minden egyes szósorozathoz. Legyen w[1] … w[n][ ]az n szóból álló szósorozat, és legyen w[i] a szósorozat i-edik szava, akkor a szósorozat-valószínűséget az alábbi módon írhatjuk:^[163]
22	0.925926	1	A Philips piacvezető terméke a SpeechMagic beszédfelismerő rendszer, amelyhez szakszókincset tartalmazó szakmai szótár kapcsolódik. A vizsgálatok eredményei igazolták, hogy a szakmai beszédfelismerő rendszer egyik legjelentősebb alkalmazási területe az orvosi dokumentálás. Az orvosok az esetek nagy részében maguk írják, asszisztensnek, írnoknak diktálják a leleteket, vagy diktafonra mondják a szövegeket, amit aztán valakinek le kell gépelnie. Ez minden esetben időigényes feladat, és más fontosabb munkáktól veszi el az időt.
10	0.515152	0	Bizonyos értelemben ez igaz is. Egy bizonyos személyről, akit néha Clarknak hívnak, Lujza azt hiszi, hogy tud repülni. Más értelemben azonban ez nincs rendjén. Ha megkérdezzük Lujzát, hogy „Clark tud-e repülni?”, minden bizonnyal nemmel válaszolna. A reifikált objektumok és események jól működnek a Hiszi első értelmezése esetén, a másodikhoz viszont az szükséges, hogy reifikáljuk ezen objektumok és események leírását, így Clark és Superman különböző leírások legyenek, annak ellenére, hogy ugyanarra az objektumra vonatkoznak.
25	0.111111	1	Kartagok izületekkel sorban történő összekapcsolását kinematikai láncnak nevezzük. A kinematikai lánc tehát olyan paraméterhalmazzal jellemezhető, amely n darab egymással összekötött kinematikai pár paramétereit tartalmazza.
24	0.75	0	Vegyük észre, hogy az alakzat kontextusának definíciója magában hordozza az elforgatásinvarianciát, hiszen minden mérést az objektum pontjaihoz képest végzünk. A méretinvariancia eléréséhez minden sugárirányú távolságot normalizálunk a pontpárok közötti átlagos távolsággal.
4	0.5	1	A mutációk: * Váratlanok – a mutáció ugrással, hirtelen alakul ki, a szervezet nem készül rá * Nem irányítottak – a szervezet számára lehetnek előnyösek és károsak is, és sem nagyságuk, sem hatásuk nem jelezhető előre * Tartósak – olyan változások, melyek öröklődnek, vagyis az utódnemzedékre átvivődnek * Egyediek – mutációval korábban nem létező új allél, vagyis genotípus keletkezhet
3	0.625	0	A kétirányú keresést úgy implementálják, hogy az egyik vagy mindkét keresés egy csomópont kifejtése előtt megvizsgálja, hogy az nem része-e a másik keresési fa peremének. Ha igen, megvan a cél. Ha a probléma például d = 6 megoldás mélységű, és mindegyik irányban a szélességi keresést futtatjuk csomópontonként, a két keresés a legrosszabb esetben akkor találkozik, ha mindegyik algoritmus a 3-as mélységben egy csomópont kivételével minden csomópontot kifejtett. A b = 10 esetén ez 22 200 csomópont generálását jelenti a standard szélességi keresés által generált 1 111 111 csomóponthoz képest. Annak ellenőrzését, hogy egy csomópont a másik keresési fához tartozik-e, egy hash-táblával konstans időben meg lehet oldani. A kétirányú keresés időkomplexitása így O(b^d/2). Legalább az egyik keresési fát a memóriában kell tartani, hogy a tartozás ellenőrzése kivitelezhető legyen, a tárkomplexitás tehát szintén O(b^d/2). Ez a tárkomplexitás a kétirányú keresés legnagyobb gyengéje. Ha mindkét keresés szélességi keresés, az algoritmus teljes és optimális (egyenletes költség esetén). Más módszerek kombinációja vagy a teljesség, vagy az optimalitás, vagy mindkettő elvesztéséhez vezethet.
10	0.060606	1	Előző példát interpretálva: ember és férfi és nem házas és nincs gyereke, és tudjuk, hogy az alaphalmaz: {Bodri, Péter, János, Katinka, Julcsi}, továbbá, hogy fennáll: Bodri kutya, János felesége Katinka, János gyereke Julcsi, akkor az alaphalmazt a példa a {Péter} részhalmazra képezi le.
9	0.206897	0	A kiemelt következtetési szabályok olyan helyettesítések megtalálását igénylik, amelyek a különböző logikai kifejezéseket látszólag azonossá teszik. Ezt a folyamatot egyesítési lépésnek (unification) nevezzük, ami kulcsfontosságú eleme minden elsőrendű következtetési algoritmusnak. Az Egyesít algoritmus vesz két mondatot, és visszaad egy rájuk vonatkozó egyesítést (unifier), ha létezik ilyen:
11	0.961538	0	Shakey világának cselekvései tartalmazzák az egyik helyről a másikra való mozgást, mozgatható tárgyak (mint dobozok) eltolását, szilárd testekre (mint dobozokra) való fel- és lemászást, és villanykapcsolók fel-, illetve lekapcsolását. A robot önmagában soha nem volt elég ügyes ahhoz, hogy egy dobozra másszon vagy egy kapcsolót átkapcsoljon, de a Strips tervkészítő képes a robot képességein túlmutató terveket találni és megadni. Shakey hat cselekvése a következő: * A Megy(x, y), ami feltételezi, hogy Shakey x-ben van, valamint az x és y helyek ugyanazon szobában vannak. Konvenció alapján a két szoba közötti ajtó mindkét szobában benne van. * A b doboz eltolása x pozícióból ugyanazon szoba y pozíciójába: Tol(p, x, y). Szükségünk lesz a Doboz predikátumra és konstansokra a dobozokhoz. * Dobozra felmászás: Felmászik(b); dobozról lemászás: Lemászik(b). Szükségünk lesz a Rajta predikátumra és a Padló konstansra. * A villany felkapcsolása: Felgyújt(s); lekapcsolása: Leolt(s). A lámpa fel-, illetve lekapcsolásához Shakey-nek egy dobozon kell állnia a villanykapcsoló mellett.
21	0.5	0	Az ADP-tanulást végző ágenssel azonos módon itt is felhasználhatjuk ezt az egyenletet egy iterációs eljárásban arra, hogy egy becsült modell alapján pontos Q-értékeket számoljunk. Ez viszont azt kívánná meg, hogy a modellt is megtanuljuk, hiszen az egyenlet használja a T(s, a, s')-t. Másrészről viszont az IK-megközelítés nem igényel modellt. Így a Q-értékekre vonatkozó IK frissítési összefüggés:
11	0.384615	0	Két megközelítést lehet kipróbálni. Az egyik, hogy a megadott feladatleírásból egy relaxált problémát (relaxed problem) származtatunk, ahogy azt a  fejezetben bemutattuk. A relaxált problémára (ami várhatóan könnyen megoldható) adott optimális megoldás költsége elfogadható heurisztikát ad az eredeti problémára. A második megközelítés során feltételezzük, hogy a tiszta „oszd meg és uralkodj” algoritmus működni fog. Ezt nevezzük a részcélfüggetlenség (subgoal independence) feltételezésnek: a részcélok konjunkciójának megoldási költségét, az egymástól függetlenül megoldott részcélok költségeinek összegével becsüljük. A részcélfüggetlenség feltételezés lehet optimista vagy pesszimista. Akkor optimista, hogyha vannak negatív kölcsönhatások a részcélokhoz készített résztervek között (például amikor az egyik részterv egy cselekvése töröl egy célt, melyet egy másik részterv ért el). Akkor pesszimista és egyben elfogadhatatlan is, ha a résztervek redundáns cselekvéseket tartalmaznak (például két cselekvés eggyel helyettesíthető az összefésült tervben).
22	0.111111	0	Észlelés (perception). H észleli a W' fizikai megvalósulást, mint W'[2]-t, és W[2] szavakként dekódolja. Amikor a médium a beszéd, az észlelési lépést beszédfelismerésnek (speech recognition) nevezzük; amikor az írás, akkor optikai karakter felismerésének (optical character recognition). Mindkettő elmozdult az elvont léttől a mindennapi előfordulás irányába a kilencvenes években, főként az asztali számítógépek jelentős mértékben növekvő teljesítményének köszönhetően.  ábra - A kommunikációban részt vevő hét folyamat, a „The wumpus is dead” mondat felhasználásával A kommunikációban részt vevő hét folyamat, a „The wumpus is dead” mondat felhasználásával
25	0.074074	1	A pácienssel közvetlen kapcsolatban csak a lakásban illetve testen elhelyezett szenzorok és a „Home Hub”, a házi adatközpont áll. Ennek érintőképernyős felületén történnek az ún. „szoftvermérések”, például a kognitív fejlesztő gyakorlatok és az étrend naplózása. A Home Hub csak egy konkrét páciens monitorozásáért felelős. Az adatközpont több, perspektivikusan akár több tízezer otthoni monitorozó rendszerrel tartja a kapcsolatot, itt történik a populáció szintű adatelemzés és a felügyelők webes kiszolgálása. A monitorozás első lépése az anamnézis és státusz vizsgálat elvégzése szakintézményben. A tervezett szolgáltatás a későbbiekben sem megszüntetni, hanem inkább a megfigyelt státusz alapján indikálni kívánja a személyes szakorvosi, szakintézményi vizsgálatot és kezelést. A státusz vizsgálat után a páciens igényeitől/szükségleteitől függő módon kap otthoni szenzorokat és sablonok/protokollok alapján, de személyes igényeihez igazítva konfigurálják az otthoni mérőrendszert és jelfeldolgozást is. Ezután megkezdődik a monitorozás. Az adatgyűjtést az adatközpontban és a Home Hub-on futó munkafolyamatok vezérlik is. A személyes interakciót igénylő mérések (vérnyomásmérés, étrend bevitele stb.) estén például a megfelelő időben a Home Hub figyelmezteti a pácienst a mérés elvégzésére, vagy a gyógyszer bevételére. Az eszközből bekerült „nyers” adatokból a személyes konfiguráció szerint továbbiakat számít a rendszer és minden új adatnál ellenőrzi a riasztási szabályokat, szükség esetén figyelmeztetést vagy riasztást küld a felügyelő személyeknek.
10	0.060606	1	A szemantikus web jövőbeli felhasználásáról még nehéz álmodozni, nem a mindennapunk része még. Álljon itt egy példa César Mallorquí: Ókeanosz[18] novellájából, mely ötletet adhat az egyik lehetséges felhasználási területre. A történet arról szól, hogy a világhálón felgyülemlő információból egy, a számítógépekben lakozó, értelem születik. Gondolatokat formált, személyisége volt, és értette az összes információt, amit az emberek az interneten megosztottak. Személyiség-formálódása során pozitív véleménye alakult ki az emberről, hálás volt, amiért megszülethetett. Háláját úgy akarta kifejezni, hogy az ember jólétéért kezdte el törni magát. Elemezte az emberek problémáit és igyekezett megoldást keresni rájuk az interneten. Az emberek számára rengeteg információt, ő könnyebben feldolgozta, a tudások közti összefüggéseket hamarabb megértette és 4 óra és 24 perc alatt az emberiség összes gondját megoldotta.
7	0	0	Ebben a fejezetben olyan ágenseket tervezünk, amelyek képesek reprezentációkat kialakítani a világról, következtetési folyamatot alkalmaznak a világ új reprezentációjának a származtatására, és felhasználják az új reprezentációt a teendők kikövetkeztetésére.
1	0.689655	0	Az ilyen problémák megoldásához szükséges összes elméleti tudást sikerült (a rendszer spektrumjósló komponensében) leképezni az általános formáról („elsődleges ismeretek”) egy hatékony speciális formára („szakácskönyv”).
25	0.925926	0	A robottérképezés gyökerei két különböző helyről erednek. Az egyik szál Smith és Cheeseman munkásságával kezdődött (Smith és Cheeseman, 1986), akik Kalman-szűrőt alkalmaztak szimultán helymeghatározási és térképezési problémákhoz. Az algoritmust először Moutarlier és Chatila implementálta 1989-ben, majd Leonard és Durrant-Whyte terjesztették ki (Leonard és Durrant-Whyte, 1992). Dissanayake és társai 2001-ben írták le az ágazat jelenlegi fejlettségi szintjét (Dissanayake és társai, 2001). A másik szál a foglalási hálózat (occupancy grid) reprezentáció megalkotásával kezdődött, amelyet a valószínűségi térképezésnél használnak. A foglalási hálózat minden (x, y) pontra meghatározza annak a valószínűségét, hogy ott egy akadály van (Moravec és Elfes, 1985). A modern robottérképezésről Thrun írt összefoglalót (Thrun, 2002). Kuipers és Levitt (Kuipers és Levitt, 1988) az elsők között voltak, akik metrikus helyett topológikus térképezést javasoltak, az ember térbeli tájékozódását véve alapul.
24	0.625	0	Annak kimerítő vizsgálata, hogy egy sarokpont milyen módon látható, a  ábrán felsorolt lehetőségekhez vezet. A képen négy különböző csatlakozástípust azonosíthatunk: L, Y, nyíl- és T csatlakozást. Az L csatlakozás a két látható él esete. Az Y és a nyílcsatlakozás három élnek felel meg. Az Y csatlakozásban a szögek egyike sem lépi túl a 180°-ot. A T csatlakozás a takarással kapcsolatos. Ha egy közeli, nem átlátszó felület egy távolabbi élt eltakar, egy fél éllel találkozó folytonos élt kapunk. A T csatlakozás négy címkéje a négyféle él takarásának felel meg.  ábra - A  ábrán 1-gyel jelölt csúcs különböző előfordulásai A  ábrán 1-gyel jelölt csúcs különböző előfordulásai  ábra - A Huffman–Clowes-címkekészlet A Huffman–Clowes-címkekészlet
14	0.956522	0	Számítsa ki a Q állapotátmenet-mátrixot (transition matrix Q), ami tartalmazza az összes q(y⟶y′) értéket minden y-ra és y′-ra. b. Mit reprezentál Q^2,^ az állapotátemeneti mátrix négyzete? c. Mi lesz Q^n, ha n ⟶ ∞? d. Magyarázza el, hogy hajtsunk végre valószínűségi következtetést Bayes-hálókban, ha Q^n elérhető. Hatékony módja ez a következtetésnek?
10	0.969697	0	Kezdje azzal, hogy a mondat tartalmát egy sor kijelentéssel reprezentálja. Áttekinthető logikai struktúrájú állításokat kell írnia (például állítások arról, hogy az objektumoknak bizonyos tulajdonságai vannak, hogy az objektumok bizonyos relációban vannak egymással, és hogy egy adott tulajdonságot teljesítő minden objektum egy másik tulajdonsággal is rendelkezik). Az alábbiak feltehetően segítségére lesznek: * Milyen osztályokra, egyedekre, relációkra stb. lesz szüksége? Mik ezeknek a szuper- és alosztályai? (Többek közt eseményekre és időrendi rendezésre is szüksége lesz.) * Milyen módon lehetnének ezek a részei egy általánosabb hierarchiának? * Milyenek a közöttük lévő kényszerek és relációk? * Mennyire részletesen kell leírni az egyes fogalmakat?
19	0.954545	1	Formája a (kör-) kontrollvizsgálat, mely során a résztvevő laboratóriumok havonta vagy negyedévenként általában ismeretlen összetételű minta paramétereit határozzák meg, majd az eredményeket összesítve statisztikai elemzést végeznek. Vizsgálják, hogy a mérési eredmények milyen mértékben térnek el a konszenzusértéktől (a tisztított eredmények számtani átlagától), illetve a precíziós műszerekkel rendelkező laboratóriumok referensértékeitől.
5	0.181818	1	* AC3: MAC-alapú élkonzisztencia ellenőrzés (AC3/MAC) * BT: Visszalépéses mélységi keresés * DEG: Fokszám heurisztika * FC: Előretekintés * LCV: Legkevésbé korlátozó érték heurisztika * MC: Lokális keresés (Min-Conflicts algoritmus) * MRV: Legkevesebb megmaradó érték heurisztika
22	0.814815	0	A koherenciarelációk szolgálnak egy szöveg összekötésére. Vezetik a beszélőt annak eldöntésében, hogy mit mondjon és mit tekintsen magától értetődőnek, és segítik a hallgatót a beszélő szándékának megértésében. A koherenciarelációk a mondatok többértelműségének szűrőjeként szolgálhatnak: önállóan a mondatok lehetnek többértelműek, de ezen többértelmű értelmezések többsége nem illeszthető össze egy koherens szöveggé.
16	0.956522	1	A döntést támogató rendszer aktívan épít a HIS alkalmazás rutin funkcióira. Tartalmaz aktiválható funkciókat, melyek segítik az ellátást: * figyelmeztető jelzések/emlékeztetők * adatok értelmezése * diagnózis felállítás * beteg kezelésére javaslatokat * klinikai protokollok
1	0.172414	1	A „szükséges” azt a sejtést takarja, hogy minden általánosan intelligens rendszer, ha tüzetesebben megvizsgáljuk, kiderül, hogy egy FSzR. Az „elégséges” arra utal, hogy minden FSzR, ha már kellően gazdag és bonyolult, megszervezhető úgy, hogy az általános intelligens viselkedést felmutassa. (Itt az általános intelligensen – ugyanúgy, mint az embernél, akármilyen valós viselkedést kell érteni, ami a célokkal adekvát, a környezeti kívánalmakkal szemben adaptív, és ez mind a komplexitás és a sebesség korlátain belül. E megfogalmazás alapvető fontossága, hogy az intelligens cselekvést annak eredménye alapján ismerjük fel, függetlenül attól, hogy emberi eredetű, vagy sem.)
18	0.578947	0	Vizsgáljuk meg, hogy mennyire jól működik a turbózás az éttermi adatainkon. Kiinduló hipotézistérként az úgynevezett döntési tönkök (decision stumps) terét választjuk, amelyek olyan döntési fák, amelyek csupán egy – a gyökércsomópontban elhelyezkedő – tesztből állnak. A  (a) ábra alsó görbéje mutatja, hogy turbózás nélkül ezek a döntési tönkök nem adnak valami jó eredményt, csupán 81%-os a 100 mintán mért predikciós teljesítményük. Amikor turbózást alkalmazunk (M = 5), akkor a teljesítmény javul, eléri a 93%-ot 100 példa esetén.  ábra - Az együttes tanulás turbó módszereinek AdaBoost nevű variánsa. Az algoritmus hipotézisek kombinációját hozza létre. A Súlyozott-Többség egy hipotézist generál. Ez az új hipotézis azt a kimeneti értéket adja vissza, amely a h-ban található hipotézisek közül, a z-ben számon tartott súlyozással a legtöbb szavazatot kapta. Az együttes tanulás turbó módszereinek AdaBoost nevű variánsa. Az algoritmus hipotézisek kombinációját hozza létre. A Súlyozott-Többség egy hipotézist generál. Ez az új hipotézis azt a kimeneti értéket adja vissza, amely a h-ban található hipotézisek közül, a z-ben számon tartott súlyozással a legtöbb szavazatot kapta. Fontos Érdekes dolog történik, amikor az együttes M mérete növekszik. A  (b) ábra mutatja a tanító halmazon mért teljesítményt M függvényében. Figyeljük meg, hogy M = 20-nál a hiba eléri a nullát (ahogy a turbózással foglalkozó elmélet megjósolta), azaz 20 döntési tönk súlyozott többségi szavazással összefogott kombinációja elégséges a 100 mintára való pontos illeszkedéshez. Ha további tönköket adunk az együtteshez, akkor a hiba nulla marad. A görbe mutatja ugyanakkor, hogy a teszthalmazon mért teljesítmény még hosszasan nő azután is, hogy a tanító halmazon mért hiba elérte a nullát. M = 20 esetén a teszthalmazon mért teljesítmény 0,95 (a hiba 0,05), M = 137-ig növelve az együttes résztvevőinek számát a teljesítmény 0,98-ra nő, ezután leesik 0,95-re.
16	0.956522	1	Az első sikeres altatást William Thomas Green Morton végezte. Az érzéstelenítés adatait kezdetlegesen rögzítő első jegyzőkönyv 1894 –ből származik, méghozzá Codman és Cushing munkáját rögzítve, vagyis mára már több mint 100 éves kort ért meg az anesztézia dokumentációja.
24	0.083333	1	[4] L. Szeidl, I. Rudas, A. Rövid, P. Várlaki, "HOSVD Based Method for Surface Data Approximation and Compression " in 12th International Conference on Intelligent Engineering Systems 978-1-4244-2083-4, Miami, Florida, February 25–29, 2008, pp. 197-202.
13	0.727273	0	A gyakorlatban a Bayes-tétel jól használható, mivel gyakran rendelkezünk a fenti három kifejezésre vonatkozó jó valószínűségi becsléssel, miközben a negyediket kell kiszámítanunk. Olyan feladatoknál, mint az orvosi diagnosztika, gyakran ismerjük az ok-okozati kapcsolatok feltételes valószínűségeit, miközben egy diagnózist szeretnénk felállítani. Az orvos tudja azt, hogy az agyhártyagyulladás az esetek mondjuk 50%-ában nyakmerevedést okoz a betegeknél. Az orvos ezenfelül ismer néhány feltétel nélküli tényt is: annak előzetes valószínűsége, hogy egy beteg agyhártyagyulladást kap, 1/50 000, míg annak előzetes valószínűsége, hogy egy betegnek merev a nyaka 1/20. Jelölje s azt az állítást, hogy a betegnek megmerevedett a nyaka, valamint m azt az állítást, hogy a betegnek agyhártyagyulladása van. Ekkor
2	0.210526	1	A tökéletes és a számítható racionalitás után a meta-szintű racionalitás egy olyan harmadik alternatíva (II. típusú racionalitásnak is nevezik), amely erősen épít a procedurális szint optimalizálására, és a számításokat magukat is cselekedetnek tekintve mérlegel azt illetően, hogy milyen következtetési eljárásokkal és milyen mélységig érdemes kalkulálni. A közismert „anytime” algoritmusok tipikus implementációi a fenti sémának. Az jellemzi őket, hogy bármikor állítjuk meg a futásukat, valamilyen eredményt annak, s annak minősége (tipikusan) idővel monoton növekvő ( ábra). A meta-következtető rendszer ehhez a minőséghez egy hasznosság-értéket rendel a feladat szempontjából, majd ezt összehasonlítva a számítási költséggel eldönti, hogy mennyi ideig fusson az algoritmus, azaz mennyire optimális eredményt tekinthetünk adott esetben a legértékesebbnek. Talán érezhető a „meta” előtag jogos használata, hiszen az optimalitás optimális mértékét számítjuk. A módszer buktatója megint csak az, hogy a legprimitívebb (legegyszerűbb, mohó kereséssel működő) meta-következtető rendszereket lehet csak jelentős (meta-következtetésből származó) overhead nélkül implementálni. A meta-szinten továbbá megismétli magát az objektumszinten (szubsztanciális szinten) tapasztalt tény, nevezetesen az, hogy tökéletes illetve számítható racionalitást nem tudunk itt sem (gyakorlati szempontból használhatóan) implementálni. Gyakorlatias megfogalmazásban összefoglalva: a következtetésről való következtetéssel nem tudtunk jelentősen javítani a következtetés sebességén. Erről meta-meta-szintek bevezetésével érvelni pedig érezhetően koncepcionális regresszióba vezet [1].
1	0.689655	0	A problémamegoldásnak az a képe, amely az MI-kutatás első évtizedében alakult ki, egy olyan általános célú kereső mechanizmus volt, amely a teljes megoldás megtalálásának érdekében szekvenciába fűzte az elemi következtetési lépéseket. Az ilyen megközelítéseket gyenge módszereknek (weak methods) nevezték, mert annak ellenére, hogy általánosak, a problémák nagy vagy nehéz példányaira nem skálázhatók fel. A gyenge módszerek alternatívája az erőteljesebb, területspecifikus tudás használata, amely lehetővé teszi a nagyobb granuláltságú következtetési lépések megvalósítását, és szűkebb szakértői tárgyterületeken a tipikus konkrét problémák megoldását. Ahhoz, hogy egy nehéz problémát megoldjunk, mondhatni majdnem kész válasszal kellene rendelkeznünk.
23	0.888889	0	Az n-gram betűmodelleket nyelvi modellezésre Markov javasolta (Markov, 1913). Claude Shannon generált elsőként n-gram szómodelleket az angol nyelvre (Shannon és Weaver, 1949). Chomsky mutatta meg a véges állapotú modellek korlátait a környezetfüggetlen modellekhez képest, az alábbi következtetést levonva: „Valószínűségi modellek nem adnak részletes bepillantást a szintaktikai struktúrák egyes alapvető problémáiba” (Chomsky, 1956; 1957). Ez igaz, azonban figyelmen kívül hagyja azt a tényt, hogy a valószínűségi modellek lehetővé teszik a bepillantást néhány más alapvető problémába, olyanokba, amelyekkel a CFG-k nem foglalkoznak. Chomsky észrevételeinek olyan sajnálatos hatása volt, hogy két évtizeden keresztül sokakat elijesztett a statisztikai modellektől egészen addig, míg ezek a modellek újra megjelentek a beszédfelismerésben (Jelinek, 1976).
21	0.125	1	A lehetséges megoldások azon halmazát, melyek konzisztensek az eddig címkézett mintahalmazzal verziótérnek nevezzük. A verziótér csökkentése során a tanulórendszer arra törekszik, hogy olyan mintát válasszon, mely a lehetséges megoldások terét a lehető legjobban csökkenti.
15	0.740741	0	A hanghullámok olyan periodikus nyomásváltozások, amelyek a levegőben terjednek. A hang egy mikrofonnal mérhető, aminek membránját elmozdítja a nyomásváltozás, és egy folytonosan változó áramot generál. Az áramerősséget – ami a hanghullám amplitúdójához tartozik – egy analóg-digitális konverter méri diszkrét időintervallumonként a mintavételi frekvencia (sampling rate) szerint. Beszéd esetén a tipikus mintavételi frekvencia 8 és 16 kHz (azaz 8000-től 16 000-ig másodpercenként) között van. (Jó minőségű zenei felvételeket mintavételeznek 44 kHz vagy még magasabb frekvenciával.) A mérés pontosságát az egyes mintavételi pontokban a kvantálási tényező (quantization factor) határozza meg; a beszédfelismerők tipikusan 8–12 bitet használnak. Ez azt jelenti, hogy a legkevésbé igényes rendszer, amely 8 kHz-es frekvenciával mintavételez, és 8 bites kvantálást használ, közel fél megabájtot igényel egy egyperces beszéd tárolásához. Ilyen nagy mennyiségű jelinformáció esetén kivitelezhetetlen létrehozni és használni a P(jel|beszédhang) eloszlásokat, így az akusztikus jelnek tömörebb leírásait kell kifejlesztenünk.
4	0.583333	0	Végül az (e)-ben a füzér minden elemét valamilyen kis független valószínűséggel mutációnak (mutation) vetjük alá. Az első, a harmadik és az ötödik utódban egy-egy számjegyet mutáltunk. A 8-királynő problémában ez annak felel meg, hogy egy királynőt véletlen módon kiválasztunk, és egy, az oszlopban szintén véletlen módon kiválasztott mezőre áthelyezünk. Az ezeket a lépéseket implementáló algoritmust a  ábra mutatja.  ábra - Egy genetikus algoritmus. Ez az algoritmus ugyanaz, mint amelyet a  ábrán mutattunk, egy kivétellel. Ebben a jobban elterjedt változatban a két szülő reprodukciója nem két, hanem csak egy utódot hoz létre. Egy genetikus algoritmus. Ez az algoritmus ugyanaz, mint amelyet a  ábrán mutattunk, egy kivétellel. Ebben a jobban elterjedt változatban a két szülő reprodukciója nem két, hanem csak egy utódot hoz létre.
1	0.068966	1	A CAM-6-ot eredetileg az MIT Laboratory for Computer Science fejlesztette ki. Később az MIT a Systems Concepts-et (a későbbi SC Group-ot) kérte fel a piaci termelésre, hogy ezzel a tudományos közösség számára is elérhető legyen.
16	0.913043	1	A szükséges integrálást csak olyan eszközökkel képzelhetjük el, amelyek lehetővé teszik az átjárást a különböző fogalomtárak és kódrendszerek között. Ezt segítik elő azok a referencia-ontológiák, melyek a legkülönbözőbb adatokat és ismereteket különböző szerveződési szinteken (sejt, szövet, szerv, szervezet és populáció) rendszerezik és tárolják, ugyanakkor képesek arra, hogy egységesen használják a különféle szinteken használt fogalmakat.
14	0.869565	1	Két különböző fuzzy szabályozóra épülő rendszer összehasonlítható egy modellbe építve őket, ezáltal elvégezhető a hatásvizsgálat, melynek eredményeként látható, hogy melyik szabályozó éri el hamarabb a kívánt eredményt.
19	0.909091	0	Az ILP-módszerek formális elemzését (Muggleton, 1991) tartalmazza, míg a (Muggleton, 1992) egy nagy cikkgyűjtemény. A módszerek és az alkalmazások nagy gyűjteménye a (Lavrac és Dzeroski, 1994) könyv. A terület történetéről és a jövő kihívásairól újabb áttekintést ad (Page és Srinivasan, 2002). Haussler korai komplexitási eredményei azt sugallták, hogy az elsőrendű állítások tanulása reménytelenül bonyolult (Haussler, 1989). A klózokra vonatkozó különböző szintaktikai korlátozások jobb megértésével azonban pozitív eredmények is megjelentek, még a rekurziót tartalmazó klózokra is (Dzeroski és társai, 1992). Az ILP komplexitási eredményeiről Kietz és Dzeroski, valamint Cohen és Page írtak átfogó cikkeket (Kietz és Dzeroski, 1994; Cohen és Page, 1995).
18	0.368421	0	Egyetlen A attribútum tesztje nem fogja megadni mindezt az információt, de valamennyit megad belőle. Pontosan mérni tudjuk, hogy mennyit, ha megnézzük, hogy mennyi információra van még szükségünk az attribútumteszt után. Bármely A attribútum, amely v különböző értéket vehet fel, E[1], ..., E[v] részhalmazokra bontja az E tanító halmazt, az A lehetséges értékei szerint. Mindegyik E[i][ ]részhalmaz p[i] pozitív és n[i] negatív példát tartalmaz, így ezen az ágon továbbhaladva I(p[i]/(p[i] + n[i]), n[i]/(p[i] + n[i])) bit információra van szükségünk a válasz megadásához. A tanító halmazból véletlen mintavétellel nyert minta esetén annak valószínűsége, hogy az A attribútum ezen a mintán az i-edik értéket veszi fel: (p[i] + n[i])/(p + n). Ennek megfelelően az A attribútum tesztje után az átlagos információszükséglet, amely a példa osztályozásához kell:
14	0.695652	1	Röviden az ilyen valószínűségi struktúrák egy (D, [pi], [mu]), hármassal írhatók, le ahol D az adott tartomány, [pi] pedig az értelmezett függvények és predikátumok interpretációja, [mu] pedig egy eloszlás D elemei felett.
10	0.515152	0	ahol a Concat egy füzérfüggvény, amely az elemeit konkátenálja. A Concat(p, „⇒”, q)-t le fogjuk rövidíteni „p⇒ q”-ra. Azaz x előfordulása egy füzéren belül azt jelenti, hogy az x változó értékét be kell helyettesíteni. A Lisp-programozók ebben felismerik a backquote operátort, a Pearl-programozók pedig a $-változó interpolációt.
12	0.571429	0	Először egy példán haladunk végig, majd bemutatjuk az ágens programját, amelyet Folytonos-RRT-Ágens-nek nevezünk, mivel a tervezett cselekvések reprezentálására részben rendezett terveket használ. Hogy a leírást egyszerűsítsük, teljesen megfigyelhető környezetet feltételezünk. Ugyanezen technikák kiterjeszthetők a részben megfigyelhető esetre is.
5	0.181818	1	A következőkben nem heurisztikával, hanem egy előretekintésnek nevezett következtetési eljárással ruházzuk fel a sima visszalépéses keresésen alapuló KKP megoldónkat. Az előretekintés az eddigiektől eltérően immár lehetővé teszi, hogy menet közben változtassuk (csökkentsük) a mindenkor aktuális KKP-ben szereplő változók értékkészletét. Ennek az értelme az előbbiek átolvasása után nyilvánvaló kell, hogy legyen: ha szűkül egy-egy változó értékkészlete, úgy a keresési tér is csökken. Olyan, mintha a visszalépéses mélységi keresés által bejárt keresési fából egész részfákat vágnánk ki. Ezzel pedig jelentősen meggyorsíthatjuk a keresést/megoldást.
14	0.130435	0	Léteznek olyan tárgytartományok, ahol a változók mindegyikét közvetlenül befolyásolhatja az összes többi, így a háló teljesen összekötött. A feltételes valószínűségi táblák megadása ekkor ugyanakkora mennyiségű információt igényel, mint az együttes valószínűség-eloszlás függvény megadása. Bizonyos tárgytartományokban léteznek olyan gyenge függőségek, amiket feltétlenül modellezni kell egy új kapcsolat felvételével. De ha ezek a függőségek igen gyengék, akkor lehet, hogy nem éri meg a háló komplexitását megnövelni a pontosság kismértékű növelésének érdekében. Például a betöréses hálónkkal kapcsolatban kifogásolható az, hogyha földrengés van, akkor Mária és János akkor sem telefonálna, ha hallanák a riasztót, mivel feltételezik, hogy a földrengés okozta. Az, hogy hozzákapcsoljuk-e a Földrengés-t a MáriaTelefonál-hoz és a JánosTelefonál-hoz (és így megnöveljük a táblákat) azon múlik, hogy mennyire fontos pontosabb valószínűségeket kapni, és mennyire költséges meghatározni az extra információt. Fontos Azonban még egy lokálisan strukturált problémánál sem egyszerű lokálisan strukturált Bayes-hálót felépíteni. Ugyanis nemcsak azt követeljük meg, hogy minden egyes változót csak néhány másik befolyásoljon közvetlenül, hanem azt is, hogy a háló topológiája valóban mutassa azokat a közvetlen hatásokat a szülők megfelelő megválasztásával. A konstrukciós eljárásunk működése miatt előbb a „közvetlen befolyásolókat” kell a hálóhoz adni, ha azt szeretnénk, hogy szülőknek tudjuk őket választani az általuk befolyásolt csomópontnál. Ezért a helyes sorrend a csomópontok hozzáadásánál az, hogy először az „alapvető okokat” adjuk a hálóhoz, majd a változókat, amelyeket befolyásolnak, és ezt addig folytatjuk, amíg el nem érjük a „leveleket”, amelyeknek már nincs közvetlen okozati hatása más változókra.
13	0.227273	0	Miután felállítottuk a racionális ágens általános keretét, szükségünk lesz egy formális nyelvre a bizonytalan tudás leírásához és a következtetéshez. Minden olyan jelölésnek, amely a meggyőződésünk fokának leírására szolgál, képesnek kell lennie két fő dolog kezelésére: az egyik a kijelentések jellege, amelyekhez meggyőződési mértéket akarunk rendelni, a másik pedig a meggyőződés mértékének az ágens tapasztalatától való függése. A valószínűség-elmélet itt bemutatott változata az ítéletlogika egy kiterjesztését használja állításaihoz. A tapasztalattól való függés az a priori valószínűségi kijelentések és a feltételes valószínűségi állítások szintaktikai megkülönböztetésében tükröződik. Az a priori valószínűségi kijelentéseket akkor alkalmazzuk, mielőtt még tények birtokába jutnánk, míg a feltételes valószínűségi kijelentések explicit módon tartalmazzák a megszerzett tényeket.
10	0.69697	0	Az öröklődés komplikálódik, amikor egy objektum egyszerre több kategóriához tartozhat, vagy pedig amikor egy kategória több kategória részhalmaza. Ezt az esetet többszörös öröklődésnek (multiple inheritance) nevezzük. Az ilyen helyzetben a öröklődéses algoritmus esetleg két vagy több, egymással ellentétes választ talál a felkérésre. Ennél fogva a többszörös öröklődés bizonyos objektumorientált programozási (object-oriented programming, OOP) nyelvekből, mint amilyen például a Java, ami az osztályhierarchiában öröklődést használ, ki van zárva. Szemantikus hálókban a többszörös öröklődést általában megengedjük, de ennek részletes tárgyalását a  alfejezetre hagyjuk.  ábra - Egy szemantikus háló négy objektummal (János, Mária, 1 és 2) és négy kategóriával. A relációkat a címkézett élek jelölik Egy szemantikus háló négy objektummal (János, Mária, 1 és 2) és négy kategóriával. A relációkat a címkézett élek jelölik
25	0.074074	1	A sebészrobotok egyértelmű hatással vannak az idegsebészeti gyakorlatra. Világos, hogy miközben a sebészeti robotika területe fejlődik, tekintettel kell lenni az agy- és gerincsebészet sajátosságaira, sebészeti anatómiájára is, így a legújabb technológiák könnyebben adaptálhatóak a már erősen specializált műtéti környezetbe.
24	0.958333	0	A sűrű, lombos koronával rendelkező fa árnyékában számos világos foltot lehet látni. Meglepetésre mind körkörös. Miért? Hiszen ha úgy vesszük, a levelek közötti rések, amelyeken keresztül átvilágít a nap, nagy eséllyel nem ilyenek.
6	0.9	1	A korábban megismert kétirányú keresés segíthet itt is. Generáljuk le a lehetséges végállapotokat, majd szükség szerint generáljunk megelőző állapotokat a lehetséges lépések inverzének felhasználásával!
25	0.666667	0	Ennek az egyszerű visszacsatoláson alapuló szabályozónak a különböző változatai figyelemre méltóan robusztus lépegető vezérlést valósítanak meg, amellyel a robot göröngyös terepen is képes előrejutni. Világos, hogy ehhez a szabályozóhoz nem kell környezeti modell, és nem kell semmiféle keresést alkalmazni a vezérlés megalkotásához. Amikor egy ilyen vezérlőt használunk, a robot viselkedésének kialakításában nagyon fontos szerepet kapnak a környezetből visszacsatolásként érkező jelek. A szoftver magától még nem határozza meg, hogy éppen mi fog történni a robottal, ha belehelyezik az adott környezetbe. Az olyan viselkedést, ami egy (egyszerű) szabályozó és a (komplex) környezet kölcsönhatásaként jön létre kibontakozó viselkedésnek (emergent behavior) hívjuk. Szigorúan véve bármelyik eddig tárgyalt robotra mondhatnánk, hogy kibontakozó viselkedést mutat, hiszen egyetlen modell sem tökéletes. Történeti okok miatt azonban ezt a kifejezést csak arra az irányítási technikára mondják, amelyik nem használ explicit környezeti modellt. A kibontakozó viselkedés jellemző tulajdonsága számos biológiai organizmusnak is.
27	0.8	0	Ahogy a  alfejezetben felvetettük, bizonyos etikai kérdéseket is meg kell fontolni. Az intelligens gépek sokkal többre képesek, de vajon erejüket jóra vagy rosszra fordítják? A mesterséges intelligencia kifejlesztésén fáradozók felelőssége, hogy megbizonyosodjanak munkájuk pozitív hatásáról. Hogy a hatás mennyire lesz széles körű, az a siker mértékétől függ. Már a mesterséges intelligencia mérsékelt sikere is változásokat hozott a számítógép-tudomány tanításában (Stein, 2002) és a szoftverek fejlesztésében. Az MI olyan új alkalmazásokat tett lehetővé, mint például a beszédfelismerő, készletellenőrző vagy megfigyelő rendszerek, robotok és keresőgépek.
6	0.25	0	Mindenki, aki olyan többszemélyes játékokat játszik, mint például a Diplomacy^ΤΜ, gyorsan meggyőződhet, hogy a kétszemélyes játéknál sokkal többről van itt szó. Többszemélyes játékban a játékosok között általában lehetségesek formális vagy informális szövetségek (aliances). A játék előrehaladtával szövetségek köttetnek és bontatnak fel.
24	0.916667	0	A 19. század második fele volt az a periódus, amikor az emberi látásra vonatkozó pszichofizikai kutatásokat megalapozták. A 20. század első felében a látás területén a legfontosabb eredményekhez a Max Wertheimer vezette Gestalt pszichológiai iskola jutott. „Az egész több, mint a részek összege” jelszóval azt a nézetet hangsúlyozták, hogy az észlelés elsődleges elemei a teljes formák legyenek, ne pedig az összetevők, mint például az élek.
26	0.928571	0	Néhány kritikus ellenvetése szerint a mesterséges intelligencia lehetetlen, mások szerint meg túlságosan is lehetséges, és az ultraintelligens gépek veszélyt jelentenek. A két felhozott ellenvetés közül melyiket tartja valószínűnek? Ellentmondásos-e a kettőt együtt állítani?
1	0.448276	1	„Az orvosi információk egyik helyről a másikra elektronikus hírközléssel történő továbbításának alkalmazása, a beteg egészsége érdekében vagy az egészségügyi szolgáltató képzése és a beteggondozás fejlesztése céljából”.
20	0.928571	0	A neurális hálók irodalma túl nagy ahhoz (napjainkig kb. 100 000 publikáció), hogy részletesen bemutathassuk. A korai fejleményekről Cowan és Sharp készített összefoglalót (Cowan és Sharp, 1988b; 1988a), McCulloch és Pitts munkásságával kezdve az áttekintést (McCulloch és Pitts, 1943). Norbert Wiener – a kibernetika és a szabályozáselmélet egyik úttörője (Wiener, 1948) – együtt dolgozott McCullochkal és Pitts-szel, és nagy hatást gyakorolt egy sor fiatal kutatóra, például Marvin Minskyre, aki valószínűleg elsőként fejlesztett ki működő neurálisháló-hardvert 1951-ben (Minsky és Papert, 1988, pp. ix–x.) Ezalatt Nagy-Britanniában W. Ross Ashby (szintén a kibernetika egyik úttörője; Ashby, 1940), Alan Turing, Grey Walter és mások megalakították a Ráció Klubot (Ratio Club) azok számára, akik „rájöttek Wiener gondolataira, még mielőtt Wiener könyve megjelent”. Ashby Az agy felépítése (Design for a Brain, 1948, 1952) című könyvében vetette fel, hogy stabil adaptív viselkedést létrehozó alkalmas visszacsatoló hurkokkal rendelkező homeostatikus^[210] (homeostatic) eszközök segítségével intelligenciát lehetne létrehozni. Turing egy kutatási jelentést írt Intelligens Gépek (Intelligent Machinery) címen (Turing, 1948), amely a következő mondattal kezdődik: „Javaslom megvizsgálni azt a kérdést, hogy vajon lehetséges-e az, hogy a gépek intelligens viselkedést mutassanak”, majd leírja a rekurrens neurális hálózatokat, amelyeket „B típusú nem szervezett gépek” néven vezet be, és megadja tanításuknak egy lehetséges megközelítését. Sajnos ezt a jelentést 1969-ig nem is publikálták, és napjainkig lényegében figyelmen kívül hagyták.
26	0.357143	0	Amíg nem képes egy gép egy szonettet írni vagy egy zenei versenyművet komponálni, pusztán a gondolatai és az érzései alapján, és nem szimbólumok véletlen alakulása folytán, addig nem fogunk beleegyezni, hogy egy gép egyenlő lehet az aggyal; ehhez az kell, hogy ne csupán megírja, de tudja is, hogy megírta.
11	0.653846	0	Az Ott(Pótkerék, Tengely) cselekvés még mindig nincs jelen az S[1] állapotban, ezért most sem hívjuk meg a Megoldás-Kinyerés lépést. A Gráf-Bővítés hívással a  ábrán látható tervkészítési gráfot kapjuk. Most, hogy a cselekvések teljes skálája rendelkezésre áll, ideje néhány példát nézni a mutex kapcsolatokra és a hatásaikra: * Nem konzisztens hatások: az Eltávolít(Pótkerék, Csomagtartó) mutex kapcsolatban van az OtthagyÉjszakára cselekvéssel, mert az egyik következménye az Ott(Pótkerék, Föld), míg a másiké ennek negáltja. * Interferencia: az Eltávolít(Pótkerék, Tengely) mutex az OtthagyÉjszakára cselekvéssel, mert az egyiknek előfeltétele az Ott(Laposkerék, Tengely), míg a másiknak ennek negáltja a következménye. * Versenyhelyzet: a Felszerel(Pótkerék, Tengely) mutex az Eltávolít(Laposkerék, Tengely) cselekvéssel, mert az egyiknek előfeltétele az Ott(Laposkerék, Tengely), míg a másiké ennek negáltja. * Inkonzisztens tartó: az Ott(Pótkerék, Tengely) és az Ott(Laposkerék, Tengely) kölcsönösen kizáróak az S[2]-ben, mert az Ott(Pótkerék, Tengely) csak a Felszerel(Pótkerék, Tengely) cselekvéssel érhető el, ami mutex a megőrző cselekvéssel, mely az Ott(Laposkerék, Tengely) egyetlen elérése. A mutex kapcsolatok így azonnal érzékelik a konfliktust, ami abból adódik, hogy két objektumot ugyanazon időpontban azonos helyre próbálunk tenni.
21	0.1875	1	[5] Asymptotically Efficient Adaptive Allocation Rules for the Multiarmed Bandit Problem with Switching cost, Rajeev Agrawal, Manjunath V. Hegde, Demosthenis Teneketzis, IEEE Transactions on Automatic control, Vol. 33. No. 10, 1988
25	0.074074	1	A látórendszer külön képet biztosít a két szemnek, így érve el 3D hatást. A kiváló minőségű sztereoendoszkóp Full HD (high definition-1920x1080 pixel) felbontású képet közvetít, ráadásul a kamera akár 12-szeres nagyításra is képes. Beépített mikrofon segíti a kommunikációt az asszisztensekkel. Ha az orvos elfordítja a fejét, vagy elengedi a kontrollert, a robot mozgása megáll az esetleges balesetek elkerülése érdekében. Fontos hangsúlyozni, hogy a slave karok mozgását minden esetben az orvos kezének mozgása határozza meg, semmilyen automatizmus nem került beépítésre a kereskedelmi verzióba. A robot nem helyettesíti az embert, hanem egy pontos és megbízható eszköz a kezében, amelynek révén az átlagos képességeket meghaladó teljesítményre lesznek képesek a sebészek. A master kontroller rögzíti az orvos ujjainak és kezének mozgását, majd a nemkívánatos remegések kiszűrése után a megfelelő mozdulatokat a betegoldali laparoszkópos eszközök hajtják végre.  ábra - A slave eszközök A slave eszközök
26	0.857143	1	Az egészséges életvitel részeként vizsgálták a stressz szerepét is. A lakosok mintegy 45%-ának élete stresszes, és a stressz elsősorban a 25-40 év közötti korosztályt érinti. Ezek körében magasabb az erősebb dohányosok és az egészségtelenül étkezők, valamint a szív-érrendszeri betegségben szenvedők aránya. A stressz káros hatással van az általános közérzetre, a stresszesebb életvitelt élők kevésbé érzik jónak egészségi állapotukat, közérzetüket.
3	0.208333	1	Hasonló probléma még az úgynevezett n-szuperkirálynő probléma. Ennél a problémánál úgynevezett „szuperkirálynőket” kell a táblára helyezni (belőlük is n-et). A szuperkirálynő annyiban különbözik a klasszikus sakkbeli királynőtől, hogy lóugrásban is képes ütést végrehajtani.
1	0.068966	1	1983-ban Stephen Wolfram publikálta szisztematikus vizsgálatának első sorozatát egy nagyon alapvető, de még ismeretlen sejtautomata fajtáról, amelyet ő általános sejtautomataként (elementary cellular automata) nevezett. Ezen sejtautomatára egyszerű szabályai ellenére igen komplex viselkedés volt jellemző, amely komplexitás a természetben is hasonló mechanizmusokra vezethető vissza.
27	0.4	1	Az intelligens ágensek olyanok, mint egy függvény: bemenetük egy-egy érzet (pl. kép, hang), kimenetük pedig egy-egy cselekvés (pl. mozdulat, hangjelzés). Lényegében tehát az ágensek, ahogyan az emberek is, érzetek sorozatából kiindulva állítanak elő cselekvéseket (az előzőleg érkezett érzetek is szerepet játszhatnak abban, hogy mit teszünk). Az adott időpillanatig beérkezett érzeteket érzettörténetnek nevezzük. Az ágens, mint függvény, végső soron ezekhez az érzettörténetekhez rendel hozzá cselekvéseket minden időpillanatban.
5	0.454545	0	Az éles szemű olvasónak feltűnhetett, hogy az előrenéző ellenőrzés a konfliktushalmazt minden külön munka nélkül előállíthatja: mindig amikor az előrenéző ellenőrzés X egy hozzárendelésén alapulva Y tartományából kitöröl egy elemet, X-et hozzá kell adnia Y konfliktushalmazához. Ezenkívül még minden esetben, amikor az utolsó értéket törli Y tartományából, az Y konfliktushalmazában szereplő változókat hozzá kell adnia X konfliktushalmazához. Ezek után mihelyt Y-hoz jutunk, már azonnal ismerni fogjuk, hogy hova lépjünk vissza, ha erre szükség van. Fontos A sasszemű olvasónak valami furcsaság is feltűnhetett: a visszaugrás akkor következik be, amikor egy tartomány minden értéke konfliktusban van az aktuális hozzárendelésekkel, de az előrenéző ellenőrzés felismeri ezt az eseményt, és megakadályozza, hogy valaha is ilyen csomóponthoz jussunk! Valóban, meg lehet mutatni, hogy a visszaugrás által levágott minden ágat az előrenéző ellenőrzés is levágja. Tehát az egyszerű visszaugrás redundáns az előrenéző ellenőrzés során, vagy pontosabban szólva, egy olyan keresésnél, amely erősebb konzisztencia-ellenőrzést, például MAC-ot használ.
1	0.655172	0	Az volt az MI ellen irányuló legfontosabb kritika a Lighthill-tanulmányban (Lighthill, 1973), hogy nem képes leküzdeni a „kombinatorikus robbanást”. A tanulmány alapján a brit kormány, kettő kivételével az összes egyetemen minden MI-kutatási támogatást visszavont (a szóbeszéd kissé más és színesebb képet fest a nyomdafestéket nem tűrő politikai ambíciókról és a személyes ellenségeskedésről).
14	0.130435	0	A Bayes-háló a tárgytartomány teljes leírását adja meg. A benne található információk segítségével az együttes valószínűség-eloszlás függvény bármely bejegyzése kiszámítható.^[145] Az együttes valószínűség-eloszlás függvény egy általános bejegyzése egy teljes – minden egyes változóhoz történő – hozzárendelés konjunkciójának a valószínűsége, úgymint P(X[1] = x[1] ∧ … ∧ X[n] = x[n]). Erre a továbbiakban a P(x[1], …, x[n]) rövidítést fogjuk használni. Egy bejegyzés értékét a következő egyenlőség adja meg:
4	0.916667	1	Fogalmazzuk át úgy a feladatot, hogy egy kezdőpontból szeretnénk minden várost elérni úgy, hogy a kezdőpontba bármikor ingyen visszatérhetünk, és a megtett utak összköltségét szeretnénk minimalizálni. Ennek a feladatnak a megoldása a lehetséges utak gráfjának minimális feszítő fája.
9	0.448276	1	1973 áprilisában Kowalsky meghívására Roussel ellátogatott az Edinburghi Egyetem Mesterséges Intelligenciával foglalkozó részlegé re. Ezen látogatás eredményeképpen született meg a döntés, hogy szükség van egy második generációs Prologra, ami már segíti a mesterséges intelligencia kutatásokat. Az év a programozási nyelv (igen, innentől programozási nyelvnek tekintendő) tökéletesítésével zajlott. Munkájuk során tisztázták a szintaxist, az alapvető atomokat és az interpreter számolási módszereit. Az év második felében elkészült egy új interpreter, Fortran nyelven megírva.
1	0.137931	1	Magasabb szintű absztrakciós gondolkodást igényelnek azok a BP-k, ahol a hasonlóság nem tulajdonságok, hanem tulajdonságok kapcsolatai között áll fenn (egy képen egyforma méretű objektumok – különböző méretűek). Itt a Phaeaco eredményei jóval gyengébbek, mint az embereké. Ez volt az egyetlen olyan problématípus, ahol miután a programozó beépítette a megoldáshoz szükséges képességeket, két másik probléma is automatikusan megoldódott. Ennek az az oka, hogy Bongard igyekezett elkerülni az ismétlődést, a problémái szinte mind egy új ötletet használnak fel. 100x100 pixeles képeken azonban nyilván nem lehet végtelen sok problémát ábrázolni, ezért elméletben ha mindig új feladatok megoldására teszünk képessé egy programot, végül mindent meg tud majd oldani.
14	0.086957	1	A döntési fák implicit módon egyetlen objektumra korlátozott állításokat fogalmaznak meg = ítélet logika. A döntési fák kifejezoképessége: teljesek az ítélet logikai nyelvek osztályán belül, minden logikai függvény felírható döntési faként. (az igazságtábla minden sorát felvesszük, mint a fa egy bejárását, az igazságtábla mérete = exp.) a döntési fa alkalmas eszköz bizonyos függvények esetén, míg más függvények esetén nem. Van-e olyan reprezentáció, amely mindenféle függvény hatékony reprezentációjára alkalmas NINCS az n attribútumon értelmezett összes logikai függvény Hány különbözo függvény van ebben a halmazban?
3	0.208333	1	Kiindulásképpen tegyük fel, hogy már van egy megoldásunk (n-1) x (n-1)-es táblára, amely megoldás alatt itt azt értjük, hogy vele megkapjuk valamennyi lehetséges elhelyezést az (n-1) x (n-1)-es táblán. Helyezzük az n-edik királynőnket az n-edik sor és n-edik oszlop találkozásánál lévő pozícióba. Máshova nem is tehetnénk, hiszen az első (n-1) sor, illetve oszlop biztosan foglalt. Hamar rájöhetünk azonban, hogy ez a megoldás sajnos nem adja meg az összes lehetséges lerakást, hiszen olyan helyes megoldások is léteznek, ahol egyik sarokban sincs királynő. (Például n = 4 esetén jó megoldás az is, amikor az első sor második, a második sor negyedik, a harmadik sor első, illetve a negyedik sor harmadik oszlopában helyezkednek el a királynők.) Ráadásul a királynőknek nem feltétlenül kell úgy elhelyezkedniük, hogy azok valamennyien az n x n-es tábla első (n-1) x (n-1)-es táblarészén helyezkednek el. Tehát más megoldást kell találnunk. Azt feltételezhetjük, hogy adott egy megoldásunk, amely (m-1) királynőt helyez el az n x n-es tábla (m-1) x n-es táblarészén. Itt az „m” 2-től n-ig bármi lehet. Természetesen a végső, n x n-es megoldásban az első (m-1) sorban elhelyezkedő királynőre is igaznak kell lennie, hogy azok nem ütik egymást, hiszen ha ütnék, akkor nem lenne jó megoldás ez a végső megoldás. Ezek a királynők pontosan (m-1) oszlopot használnak fel az n-ből (ezeknek tehát nem kell feltétlenül szomszédosaknak lenniük). Most már csak arra van szükségünk, hogy hogyan lehet az m-edik királynőt elhelyezni az m-edik sorban úgy, hogy helyes elhelyezéshez jussunk az (m x n)-es táblán. Ennek a megoldása nyilván az lesz, hogy az aktuális királynőt az adott sor összes mezőjébe megpróbáljuk elhelyezni, és csak azokat a lehetőségeket jegyezzük fel, ahol a királynő nem került támadásba. Az (1 x n)-es táblán még nyilván „n” megoldás adódik. Az előbbi gondolatmenetet követve könnyen beláthatjuk, hogy az m-edik sorig eljutva az (m x n)-es tábla összes megoldását megkapjuk. Az is jól látható, hogy a sorokon haladva („m” növekedésével) a megoldások fa-szerűen szétágaznak. A végső (n x n)-es megoldást akkor kapjuk, ha „m” értékével elérjük „n” értékét. Ehhez pontosan (n-1) iterációra van szükségünk. [11]
5	0.181818	1	Látható, hogy a kapott {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=GREEN} behelyettesítés még mindig ellentmondásban van a korlátokkal (egész pontosan a 2-es és 5-ös korláttal), így még tovább kell léptetni az SA változó értékét (SA=BLUE).
20	0.214286	0	Tanulmányozva a béta-eloszlások sorozatát növekvő – de állandó arányú – a és b mentén, jól láthatjuk, hogyan változik a Θ paraméter a posteriori eloszlása az adatok beérkezése során. Tegyük fel például, hogy a vizsgált zacskó 75%-a meggytípusú. A  (b) ábra mutatja a béta[3, 1], béta[6, 2], béta[30, 10] eloszlássorozatot. Nyilvánvaló, hogy az eloszlás egy – a valós Θ körül elhelyezkedő – keskeny csúcs felé tart. Nagy adathalmazok esetén a Bayes-tanulás (legalábbis ebben az esetben) ugyanahhoz az eredményhez konvergál, mint amit a maximum-likelihood tanulás adott.
12	0.952381	0	Adjon példát a házépítési problémakörben két olyan absztrakt résztervre, ami nem egyesíthető egy teljes tervvé lépések megosztása nélkül. (Segítség: azok a pontok, ahol egy ház fizikai részei csatlakoznak, egyúttal a résztervek várható csatlakozási kölcsönhatási pontjai is.)
17	0.733333	0	A zárt ajánlatú árverés szabályainak kis változtatásával adódik a zárt ajánlatú második áras árverés (sealed bid second-price auction), ami Vickrey-árverés (Vickrey auction) néven is ismert.^[180] Az ilyen árveréseknél a győztes a második legmagasabb ajánlati árat fizeti a saját árajánlatának a kifizetése helyett. Ez az egyszerű módosítás teljesen kiküszöböli a szabványos (avagy első áras, first-price) zárt ajánlatú árverésnél szükséges összetett mérlegeléseket, mivel ekkor a domináns stratégia saját értékű árajánlat. Ennek belátásához vegyük észre, hogy bármely játékos tekintheti az árverést egy kétszemélyes játéknak, figyelmen kívül hagyva az összes játékost, kivéve önmagát és a többi játékos közül a legmagasabb árajánlatot tevőt. Az i. játékos hasznossága a saját b[i] ajánlata, a v[i] értéke és a többi játékos legjobb b[m] ajánlata szempontjából
3	0.916667	1	Optimális abban az értelemben, hogy optimális megoldást talál. Ez könnyen belátható: tegyük fel ugyanis, hogy nem igaz. Ebben az esetben az M megoldás, amit az algoritmus talált, nem optimális, azaz létezik egy M’ út, ami szintén megoldás, és a költsége kisebb, mint M-é. Ez azonban ellentmondás, hisz ha M’ költsége kisebb, mint M-é, akkor M’-t az algoritmusnak már egy korábbi iterációban ki kellett fejtenie az algoritmus működésének megfelelően.
5	0.181818	1	5. lépés: ebben a lépésben LCV nélkül az NT=GREEN értékadás történt. Ugyanez a választás történik akkor is, ha LCV heurisztika szerint választunk értéket, mivel ekkor a heurisztikus értékek a következőképp alakulnak: NT{GREEN(3), BLUE(3)}. E szerint tehát nem meglepő, hogy egyértelműen az NT=GREEN értékadásra kerül sor. De pontosan miért is ezek a heurisztikus értékek? GREEN(3) azért, mert az NT-vel szomszédos változók, azaz WA, SA, és Q értékkészletében is ott van a GREEN érték. De ugyanez a helyzet BLUE(3)-al is. Ha tehát NT mindkét lehetséges értéke azonos szinten van az LCV szerint, akkor ezek közül az elsőt, a GREEN-t választjuk.
7	0.08	0	Az új érzet az [1, 2, ]-ben a [Bűz, Nincs, Nincs, Nincs, Nincs], ami a  (a) ábrán látható helyzetet eredményezi. A bűz az [1, 2]-ben azt jelenti, hogy a wumpusnak a közelben kell lennie. De a wumpus a játék szabályai szerint nem lehet az [1, 1]-ben és nem lehet a [2, 2]-ben sem (mert akkor az ágens érezte volna a bűzt, amikor a [2, 1]-ben járt). Így az ágens kikövetkeztetheti, hogy a wumpus az [1, 3]-ban van. A W! jelölés ezt mutatja. Még érdekesebb, hogy a Szellő érzet hiánya az [1, 2]-ben azt jelenti, hogy nincs csapda a [2, 2]-ben. De mi már kikövetkeztettük, hogy vagy a [2, 2]-ben, vagy a [3,1]-ben van egy csapda, ami tehát azt jelenti, hogy a csapdának a [3, 1]-ben kell lennie. Ez egy viszonylag nehéz következtetés, mivel különböző időpontokban és különböző helyeken gyűjtött tudást használ fel, és egy érzet hiányára támaszkodva végez el egy fontos lépést. Ez a következtetés meghaladja a legtöbb állat képességeit, de tipikusan jellemzi azt a fajta következtetést, amit egy logikai ágens végez.
22	0.296296	0	A  ábra a diagramelemző algoritmust szemlélteti. A lényege a fentről lefelé és a lentről felfelé legjobb tulajdonságainak ötvözése. A Jósló eljárás fentről lefelé működik: olyan bejegyzéseket helyez el a diagramban, amelyek megmondják, hogy milyen szimbólumok milyen helyszínen elvártak. A Szkenner egy lentről felfelé eljárás, amely a szavakból indul ki, de egy szót csak egy meglevő diagrambejegyzés kiegészítésére használ fel. Hasonlóképpen a Kiterjesztő a komponenseket lentről felfelé építi, de csak egy meglevő diagrambejegyzést egészít ki.
4	0.583333	0	Ennek működését a genetikus algoritmusok elmélete a séma (schema) fogalommal magyarázza. A séma egy olyan részfüzér, amelyben bizonyos pozíciók nem specifikáltak. Így például a 246***** séma az összes olyan 8-királynő állapotot leírja, ahol az első három királynő a 2., 4. és 6. pozícióban van. A sémára illeszkedő füzérek, mint például a 24613578 füzér, a séma példányai (instances). Kimutatható, hogy ha egy séma példányainak átlagos fitness-értéke az átlag felett van, akkor idővel a populációban a sémához tartozó példányok száma nőni fog. Világos, hogy ez a hatás elenyésző lesz, ha a szomszédos biteknek semmi közük egymáshoz, mert kevés olyan tömör blokk lesz, ami konzisztens módon előnyt fog jelenteni. A genetikus algoritmus a legjobban akkor működik, ha a sémák a megoldás értelmes komponenseinek felelnek meg. Ha például a füzér egy antenna reprezentációja, akkor a sémák képviselhetik az antenna egyes komponenseit, például a reflektorokat és a deflektorokat. Egy jó komponensnek nagy valószínűséggel különböző konstrukciók sokaságában is jónak kell lennie. Ez azt sugallja, hogy a genetikus algoritmusok sikeres alkalmazása a reprezentáció gondos kialakítását igényli.
14	0.913043	0	Cooper mutatta meg, hogy a következtetés általános problémája tetszőleges Bayes-hálóban NP-teljes (Cooper, 1990), Paule Dagum és Mike Luby pedig azt, hogy ennek a közelítő megoldása is NP-teljes (Dagum és Luby, 1993). A tárkomplexitás szintén komoly probléma mind a csoportosító, mind a változó eliminációs módszereknél. A vágóhalmaz feltételezéseken (cutset conditioning) alapuló eljárás, amit a kényszerkielégítési problémákra az  fejezetben mutattunk be, elkerüli az exponenciális méretű táblák létrehozását. Egy Bayes-hálóban a vágóhalmaz a csomópontok azon halmaza, amelyek értékeinek rögzítése esetén a fennmaradó csomópontok függései egy fagráfra egyszerűsödnek, ami már lineáris időben és térben megoldható. A lekérdezést összegzéssel adhatjuk meg a vágóhalmaz minden lehetséges értékadása mellett, így az összes tárigény még mindig lineáris (Pearl, 1988). Darwiche (Darwiche, 2001) egy rekurzívan feltételező algoritmust ad meg, ami tetszőleges tár/idő egyensúlyt tesz lehetővé.
7	0.92	1	Kielégíthető. A mondat egy modellje a Füst = hamis, Tűz = hamis: (hamis → hamis) = igaz; (¬hamis → ¬hamis) = (igaz → igaz) = igaz; (igaz → igaz) = igaz. Viszont nem érvényes, mert a Füst = hamis, Tűz = igaz nem modellje a mondatnak: (hamis → igaz) = igaz; (¬hamis → ¬igaz) = (igaz → hamis) = hamis; (igaz → hamis) = hamis.
23	0.333333	1	A ROC elemzéssel egyrészt a diagnosztikai tesztek hatékonyságáról kapunk információt, másrészt jó összehasonlításra ad alkalmat egy ábrán, ha egy betegség diagnosztizálására többféle diagnosztikai teszt eredménye is rendelkezésre áll.
5	0.181818	1	Legyünk továbbá arra is tekintettel, hogy az előretekintéshez hasonlóan az AC3 (vagy MAC) is csak lokális konzisztencia-ellenőrzést hajt végre, azaz amikor egy-egy változóra rátér, és annak értékeit ellenőrzi, akkor nem foglalkozik az aktuális behelyettesítéssel, vagy az összes változóval, hanem csak az adott változót tartalmazó korlátokban szereplő egyéb változókat vizsgálja. Bináris esetben (mikor például, ahogy példánkban is, csak nem-egyenlő korlátok vannak) ez azt jelenti, hogy az algoritmus mindig csak változó-párokat vizsgál, mintegy kiragadva őket a KKP-ből. Csak azt nézi, hogy a két változónak lehet-e megfelelő értéket adni úgy, hogy a köztük lévő/rájuk vonatkozó korlátozás ne sérüljön. Ezért is nevezik az algoritmus által KKP-re vonatkozóan biztosított tulajdonságot 2-konzisztenciának, avagy élkonzisztenciának. Ezt biztosítja az AC3/MAC. Ettől tehát még előfordulhat egyéb inkonzisztencia (lásd. pl. a tankönyvben az AC3 kapcsán szereplő, erre vonatkozó kis példát, ahol az {NSW=RED, WA=RED} behelyettesítés inkonzisztenciáját említi, amire az AC3 nem tud fényt deríteni - ehhez már legalább 3- konzisztenciát biztosító következtetési/korlát-propagációs algoritmusra lenne szükség).
9	0.517241	0	Először is ahelyett, hogy minden lépésben összeállítanánk az összes lehetséges válasz listáját minden egyes részcélhoz, a Prolog interpreter egy választ hoz létre, és egy „ígéretet” ad meg arra, hogy a többi lehetséges választ is generálni fogja, miután az aktuális választ teljes mértékben feltárta. Ezt az ígéretet választási pontnak (choice point) nevezzük. Mikor a mélységi keresés befejezte az aktuális válaszból fakadó lehetséges megoldások feltárását, és visszalép a választási ponthoz, a választási pontot kiterjesztjük úgy, hogy megadjon egy új választ a részcélhoz, és egy új választási pontot. Ez a megközelítés időt és tárolóhelyet takarít meg. Ezenkívül nagyon egyszerű határfelületet biztosít a hibakereséshez, mert egy adott pillanatban csak egyetlen megoldási útvonal vizsgálata történik meg.
14	0.73913	0	A szabályalapú rendszerek a logikai következtés gyakorlati és szemléletes rendszerein való korai munkákból alakultak ki. A logikai rendszerek általában, és a logikai szabályalapú rendszerek speciálisan, rendelkeznek az alábbi három tulajdonsággal: * Lokalitás (locality): logikai rendszerekben, ha van A ⇒ B formájú szabály, akkor a B kikövetkeztethető, ha az A bizonyíték adott, bármely más szabályra való tekintet nélkül. Valószínűségi rendszerekben a Markov-takaróban rendelkezésre álló összes tényt figyelembe kell venni. * Leválasztás (detachment): ha egyszer találtunk egy logikai bizonyítást B állítás kikövetkeztetéséhez, az állítást tetszés szerint felhasználhatjuk, a származtatásától függetlenül. Vagyis leválasztható (detached) a megokolásaitól. Valószínűségek esetén azonban a bizonyosság bizonyítékának a forrása fontos az elkövetkező következtetésekben. * Igazságfüggvény (truth-functionality): a logikában az összetett kifejezések igazságértéke kiszámítható az alkotóinak igazságértékéből. Valószínűségek kombinálása nem lehetséges ezen a módon, csak szigorú, teljes függetlenségi feltételezések mellett.
26	0.928571	0	Elemezze a mesterséges intelligenciának a társadalomra jelentett potenciális veszélyeit. Mely fenyegetések a legsúlyosabbak, és hogy lehetne küzdeni ellenük? Hogyan viszonyulnak ezek a potenciális előnyökhöz?
4	0.416667	0	A lokális keresés megértéséhez igen hasznosnak találjuk az állapottérfelszínt (state space landscape) (mint amilyen a  ábrán látszik). A felszínnek van „pontja” (amit az állapot definiál) és „magassága” (amit a heurisztikus vagy a célfüggvény értéke határoz meg). Ha a magasság a költséggel arányos, akkor a cél a legalacsonyabban fekvő völgyet – a globális minimumot – megtalálni. Ha a magasság a célfüggvénynek felel meg, akkor a cél a legmagasabb csúcs – a globális maximum – megtalálása (az egyikről a másikra előjel váltásával könnyen áttérhetünk). A lokális keresés ezt a felületet vizsgálja. Egy teljes lokális keresés mindig talál megoldást, ha az egyáltalán létezik. Egy optimális algoritmus mindig megtalálja a globális minimumot vagy maximumot.  ábra - Egy egydimenziós állapottérfelszín, ahol a magasság a célfüggvénynek felel meg. A cél a globális maximum megtalálása. A hegymászó keresés az aktuális állapotot módosítja a javulás irányában, ahogy ezt a nyíl is mutatja. A különböző topografikus jellemzőkkel a szövegben foglalkozunk. Egy egydimenziós állapottérfelszín, ahol a magasság a célfüggvénynek felel meg. A cél a globális maximum megtalálása. A hegymászó keresés az aktuális állapotot módosítja a javulás irányában, ahogy ezt a nyíl is mutatja. A különböző topografikus jellemzőkkel a szövegben foglalkozunk.
21	0.9375	0	 Megjegyzés Valósítson meg egy felfedező megerősítéses tanuló ágenst, amely közvetlen hasznosságbecslést végez. Készítsen két változatot, az egyik táblázatos reprezentációt használjon, a másik a   egyenlet függvényapproximátorát. Hasonlítsa össze teljesítményüket az alábbi három különböző környezetben: a. A fejezetben leírt 4 × 3-as világ. b. Egy 10 × 10-es világ, amelyben nincsenek akadályok, és a (10, 10) mezőn van +1 jutalom. c. Egy 10 × 10-es világ, amelyben nincsenek akadályok, és az (5, 5) mezőn van +1 jutalom.
7	0.96	0	Minden logikai mondat logikailag ekvivalens azzal az állítással, hogy minden lehetséges világ, amelyben hamis volna, nem az eset. Felhasználva ezt a megfigyelést, bizonyítsa be, hogy minden mondat átírható konjugált normált formára.
21	0.5625	0	Megerősítéses tanulás esetén jobbnak tűnik online tanulást alkalmazni, amely minden egyes kísérlet után frissíti a paramétereket. Tegyük fel, hogy lefuttatunk egy kísérletet, és a teljes jutalom (1, 1)-ből indulva 0,4. Ez arra utal, hogy az  jelenlegi érték túl nagy, és csökkenteni kell. Hogyan kell a paramétereket módosítani, hogy ezt elérjük? Éppúgy, mint a neurális háló tanulásnál, egy hibafüggvényt írunk fel, és felírjuk a paraméterekre vonatkozó gradiensét. Ha u[j](s) a j-edik kísérlet során az s állapotból kiindulva gyűjtött teljes megfigyelt jutalom, akkor a hibát a jósolt és a tényleges teljes jutalom négyzetének különbségeként (tulajdonképpen annak feleként) definiálják:  . Az egyes θ[i] paraméterek változásának hatására a hiba változásának sebességét a ∂E[j]/∂θ[i] adja meg. Így, ha a paramétert abban az irányba akarjuk változtatni, hogy a hibát csökkentse, akkor azt akarjuk, hogy:
10	0.969697	0	A szituációkalkuluson belül fogalmazzon meg egy olyan axiómát, amelyben a 0. időpillanatot az S[0] szituációval kapcsolja össze, valamint egy olyan másik axiómát, ahol a t időpillanatot az S[0]-ból a t számú cselekvés szekvenciájával előállított szituációval kapcsolja össze.
4	0.625	0	A lokális keresési módszerek számára a lokális maximumok, a gerincek és a fennsíkok folytonos terekben ugyanúgy gondot jelentenek, mint diszkrét terekben. A véletlen újraindítás és a szimulált lehűtés alkalmazható (itt is), és gyakran segít. A sokdimenziós folytonos terek azonban terebélyes helyek, ahol könnyű elveszni.
22	0.444444	0	Eddig csak a nyelv szintaktikai analízisét vizsgáltuk. Ebben a fejezetben rátérünk a szemantikára (semantics) – a megnyilatkozás (utterance) jelentésének kinyerésére. Ebben a fejezetben az elsőrendű logikát használjuk reprezentációs nyelvként, így a szemantikai értelmezés egy FOL kifejezés és egy nyelvi kifejezés összerendelésének a folyamata. Intuitív módon közelítve, a „the wumpus” kifejezés jelentése az a nagy, szőrös szörnyeteg, amit a logikában a Wumpus[1] logikai kifejezéssel jelzünk, és a „the wumpus is dead” jelentése a Dead(Wumpus[1]) logikai állítás. Ez a fejezet ezt az intuíciót pontosítja. Egy egyszerű példával kezdünk: a négyzetháló helyszíneit leíró szabállyal:
17	0.666667	0	Egy játék megoldása (solution) egy olyan stratégiaprofil, amiben minden játékos egy racionális stratégiát fogad el. Látni fogjuk, hogy a játékelméletben a legfontosabb kérdés a „racionális” jelentésének a definiálása akkor, amikor mindegyik ágens csak egy részét választja meg a kimenetelt meghatározó stratégiaprofilnak. Fontos azt felismerni, hogy a kimenetelek a játék egyes meneteinek a konkrét eredményei, míg a megoldások a játék elemzéséhez használt elméleti konstrukciók. Megmutatjuk, hogy bizonyos játékoknak csak a kevert stratégiák között van megoldása. Ez azonban nem jelenti azt, hogy egy játékosnak szó szerint egy kevert stratégiát kell elfogadnia a racionális viselkedéshez.
20	0.928571	0	A rejtett változókkal rendelkező Bayes-hálók tanulására kifejlesztett EM algoritmus Lauritzen munkája (Lauritzen, 1995). Mind a Bayes-hálók, mind a dinamikus Bayes-hálók esetén a gradiensalapú eljárások is hatékonynak bizonyultak (Russell és társai, 1995; Binder és társai, 1997a). A strukturális EM algoritmus kifejlesztése Friedman nevéhez fűződik (Friedman, 1998). A Bayes-hálók struktúrájának megtanulhatósága szoros kapcsolatban van a kauzális kapcsolatok adatokból történő visszanyerésének kérdésével. Azaz lehetséges-e Bayes-hálókat úgy megtanulni, hogy az előállított hálóstruktúra valós kauzális hatásokat jelezzen? A statisztikusok hosszú évek óta elkerülték ezt a kérdést, azt hitték, hogy a megfigyelt adatok (ellentétben a kísérletek során előálltakkal) csak korrelációs információt hordoznak. Végül is bármely két változóra, amelyek egymással kapcsolatban állónak tűnnek, lehet, hogy valójában inkább egy harmadik – mindkettőre kauzális hatást gyakorló – ismeretlen változó hatása alatt állnak, nem pedig egymásra gyakorolnak közvetlen hatást. Ennek ellenkezőjére Pearl adott meggyőző érveket (Pearl, 2000). Megmutatta, hogy valójában számos eset van, amikor a kauzalitás kideríthető, és kauzális háló (causal network) formalizmus alakítható ki az oksági kapcsolatok, a beavatkozás hatásának, valamint a szokásos feltételes valószínűségek beépítésére.
11	0.807692	0	A módszernek egyetlen hátulütője van: a felosztási szimbólum reprezentáció nem engedi meg a párhuzamos cselekvéseket. Vegyük a Repül(P[1], SFO, JFK)^0 és a Repül(P[2], JFK, SFO)^0 párhuzamos cselekvéseket. A felosztott megadásra alakítva a
7	0.08	0	A wumpus világ (wumpus world) egy barlang, amely szobákból és az ezeket összekötő átjárókból áll. A wumpus egy szörnyeteg, aki mindenkit megesz, ha a szobájába lép, a barlangban lapul valahol. Az ágens le tudja lőni a wumpust, de csak egyetlen nyila van ehhez. Néhány szoba feneketlen csapdát tartalmaz, amely mindenkit csapdába ejt, aki belép a szobába (kivéve a wumpust, aki túl nagy ahhoz, hogy beleessen). A wumpus környezetében az egyetlen csábító lehetőség, hogy egy halom aranyat lehet találni. Habár a wumpus világ meglehetősen unalmas a modern számítógépes játékokhoz képest, azonban a játék kiváló tesztkörnyezet az intelligens ágensek számára. Michael Genesereth volt az első, aki javasolta ennek a környezetnek az alkalmazását.
2	0.631579	0	A  ábra szemlélteti a belső állapottal rendelkező reflexszerű ágens struktúráját, megmutatva azt, ahogyan a jelenlegi észlelés a régi belső állapottal kombinálódva létrehozza a jelenlegi állapot frissített leírását. Az ágensprogram a  ábrán látható. Az érdekes rész az Állapot-Frissítés eljárás, amely a belső állapot leírásának létrehozásáért felelős. Az új észleléseknek az állapotról szóló tudás tükrében történő értelmezése mellett az ágensprogram nyomon követi a világ láthatatlan részeit a világ fejlődését leíró információ segítségével, az ágensprogramnak pedig azt is tudnia kell, hogy az ágens cselekvései milyen hatással lesznek a világ állapotára. Részletesebb példák a 10. és  fejezetben találhatók.
10	0.515152	0	Úgy tűnik meg is kaptuk, amit akartunk: egy ágensnek azt a képességét, hogy következtetni tudjon más ágensek hiedelmeiről. Sajnos e megközelítésnek vannak nehézségei. Ha Clark és Superman egy és ugyanaz a személy (azaz Clark = Superman), akkor Clark repül és Superman repül egy és ugyanaz az eseménykategória, azaz Repül(Clark) = Repül(Superman). Azaz el kell fogadnunk, hogy ha Lujza azt hiszi, hogy Superman tud repülni, el kell hinnie, hogy Clark tud repülni, akkor is, ha nem hiszi, hogy Clark Superman. Azaz:
1	0.793103	0	Az MI-t részben a létező kutatási területek – mint az irányításelmélet és a statisztika – korlátaival szembeni kitörési vágyból alapították meg. Most azonban az MI ezeket a területeket igyekszik magában foglalni. David McAllester szavaival:
19	0.409091	0	A MAT alapötlete az, hogy először az előzetes tudásra alapozva megkonstruáljuk a megfigyelés magyarázatát, majd meghatározzuk annak az esetosztálynak a definícióját, amelyre a megkonstruált magyarázat alkalmazható. A definíció alapul szolgál az osztály eseteit lefedő szabály számára. A „magyarázat” lehet egy logikai bizonyítás, de általánosságban lehet akármilyen következtetési vagy problémamegoldó folyamat, feltéve, hogy a lépései jól definiáltak. Kulcsfontosságú azoknak a szükséges feltételeknek az azonosítása, amelyek révén az egyes lépések más esetre is alkalmazhatók lesznek.
7	0.68	0	Ebben a szakaszban, összeszedünk mindent, amit eddig tanultunk, hogy olyan ágenseket konstruáljunk, amelyek az ítéletlogika felhasználásával működnek. Kétfajta ágenst fogunk megvizsgálni: olyat, amely következtetési algoritmust és egy tudásbázist használ, mint a  ábra általános tudásbázisú ágense, és olyat, amely a logikai kifejezések kiértékelését közvetlenül, áramköröket alkalmazva végzi. Mindkétfajta ágenst a wumpus világban fogjuk demonstrálni, és látni fogjuk, hogy mindkettő komoly hátrányoktól szenved.
14	0.478261	0	A változó eliminálás algoritmusa egyszerű és hatékony egyedi lekérdezések megválaszolására. Azonban ha a háló összes változójának az a posteriori eloszlását szeretnénk kiszámítani, akkor kevésbé hatékony is lehet. Például egy polifa hálóban O(n) egyenként O(n) költségű lekérdezést kell kiadni, összességében O(n^2) időköltséggel. Csoportosító (clustering) eljárásokkal (amit egyesítési fa – join tree – algoritmusnak is neveznek) ez az idő O(n)-re csökkenthető. Emiatt ezeket az algoritmusokat gyakran használják kereskedelmi Bayes-hálós eszközökben.
13	0.272727	1	Ennek ellentettje a feltételes függőség, ez arra az esetre értendő, amikor A és B független egymástól, de egy C esemény ismeretében függővé válnak. Jelölése: D(A, B | C) . (A továbbiakban a feltételes valószínűségi kifejezéseknél a feltételben lévő X esemény ismeretét a „feltéve X” kifejezés jelöli.)
13	0.954545	0	Ebben a feladatban befejezheti az agyhártyagyulladásra vonatkozó példa normalizálását. Először is vegyen fel egy megfelelő értéket P(S∣¬M)-re, és ennek segítségével számítsa ki P(M∣S) és P(¬M∣S) normalizálatlan értékeit (azaz ne vegye figyelembe P(S)-t a Bayes-tétel kifejezésében), majd normalizálja az értékeket úgy, hogy összegük 1 legyen.
2	0.894737	1	Reflexszerű ágens: Egy olyan élőlény, amely szituációk egy konkrét halmazában tud mit kezdeni magával (ilyen például a ganajtúró bogár) és a szituációt mérlegelő számítás nélkül dönt, megfelel egy reflexszerű ágensnek.
13	0.909091	0	A vonatkoztatási osztály kérdése szorosan kötődik az induktív logika megtalálására tett törekvésekhez. Az elégséges méretű legjobban specifikus vonatkoztatási osztály kiválasztására való törekvést Reichenbach javasolta (Reichenbach, 1949). Erőfeszítések történtek kifinomultabb irányelvek kialakítására, amelyekkel el lehet kerülni a Reichenbach-szabályból következő, Henry Kyburg által észlelt ellentmondásokat (Kyburg, 1977; 1983), azonban ezek a törekvések leginkább ad hoc jellegűek maradtak. Egy újabb, Bacchus, Grove, Halpern és Koller nevéhez fűződő munka (Bacchus és társai, 1992) Carnap módszereit kiterjeszti az elsőrendű elméletekre, kiküszöbölve ezáltal sok, a vonatkoztatási osztályokkal kapcsolatos nehézséget.
19	0.590909	0	A minimális konzisztens meghatározás megkeresésének több lehetséges algoritmusa létezik. Kézenfekvő megközelítés a meghatározások terében keresni, először az egypredikátumos, a kétpredikátumos stb. meghatározásokat ellenőrizve, amíg rá nem lelünk egy konzisztens meghatározásra. Egyszerű attribútumalapú ábrázolást tételezünk fel, hasonlóan ahhoz, mint amit a döntési fák tanulásánál a  fejezetben használtunk. Tekintettel arra, hogy a célpredikátumot rögzítettnek vesszük, a d meghatározást a bal oldal attribútumhalmaza fogja képviselni. Az algoritmust a  ábra mutatja.
5	0.181818	1	A rekurzív hívás során a keresés azonnal észreveszi, hogy a kapott behelyettesítés megoldás (teljes és konzisztens), és ezért azonnal vissza is tér vele. Ez történik a rekurzió egyel fentebbi szintjén is, és így tovább, mígnem a megoldás a felhasználóhoz (vagy a visszalépéses keresést indító ágenshez) vissza nem jut. A KKP-t tehát megoldottuk.
19	0.318182	0	Az a priori tudás befogadásán túl, az ILP-rendszerek képesek arra, hogy hipotéziseket általános elsőrendű logikában és nem a  fejezetben használt, korlátozott attribútumalapú nyelven fogalmazzák meg. Ez azt is jelenti, hogy az ILP-rendszerek képesek olyan környezetekben tanulni, amelyek érthetetlenek az egyszerűbb rendszerek számára.
22	0.555556	0	∃a a ∈ Days ∧ ∀d d ∈ Dogs ⇒ ∃e e ∈ Has(d, a, Now)  ábra - Minden szintaktikai kategória kvázilogikai formájú kifejezésének típusát mutató tábla. A t → r jelölés egy függvényt takar, amely egy t típusú argumentumot fogad, és r típusú eredménnyel tér vissza. Például a Preposition szemantikai típusa object^2 → sentence, ami azt jelenti, hogy az elöljárószó szemantikája egy függvény, amelyet ha két logikai objektumra alkalmazunk, akkor egy logikai mondatot eredményez. Minden szintaktikai kategória kvázilogikai formájú kifejezésének típusát mutató tábla. A t → r jelölés egy függvényt takar, amely egy t típusú argumentumot fogad, és r típusú eredménnyel tér vissza. Például a Preposition szemantikai típusa object2 → sentence, ami azt jelenti, hogy az elöljárószó szemantikája egy függvény, amelyet ha két logikai objektumra alkalmazunk, akkor egy logikai mondatot eredményez.  ábra - Az „Every agent smells a wumpus” mondat elemzési fája, amely mind a szintaktikai struktúrát, mind a szemantikai értelmezéseket mutatja Az „Every agent smells a wumpus” mondat elemzési fája, amely mind a szintaktikai struktúrát, mind a szemantikai értelmezéseket mutatja  ábra - Szemantikával ellátott nyelvtan kvázilogikai formában Szemantikával ellátott nyelvtan kvázilogikai formában
12	0.52381	0	Elég kézenfekvő a tervkészítő algoritmus módosítása, hogy az a terv minden pontján tartalmazza a hátralevő terv sikeréhez szükséges előfeltételeket. Ha a tervmonitorozást kiterjesztjük, hogy az aktuális pont helyett az összes jövőbeni pontra ellenőrizze, hogy az aktuális állapot kielégíti-e a terv előfeltételeit, akkor a tervmonitorozás kihasználhatja a szerencsés rábukkanást (serendipity), azaz a véletlenszerű sikert. Ha valaki arra jártában pirosra festi az asztalt ugyanabban az időben, amikor az ágens a széket festi pirosra, akkor a végső terv előfeltételei teljesülnek (a cél teljesül), és az ágens korábban megpihenhet.
10	0.606061	0	A legmodernebb laptopot bemutató lap releváns lenne, ha azonban a vásárlásra nem ad lehetőséget, nem ajánlat. Egyelőre azt fogjuk mondani, hogy egy lap ajánlat, ha a lapon egy HTML-hivatkozáson, vagy űrlapon belül a „vásárol” vagy az „ára” szavakat tartalmazza. Más szóval, ha a lap tartalmaz egy „<a … vásárol … </a>” alakú füzért, akkor ez egy ajánlat. A „vásárol” helyett lehetne az „ára”, illetve az „a” helyett a „form”. Felírhatjuk ennek axiomatikus alakját:  ábra - Egy absztrakt online bolt weblapja, ahogy egy böngészőt használó ember látja (felül), és a hozzá tartozó HTML-füzér, ahogy azt a böngésző vagy a vásárló ágens látja (alul). A HTML-ben a < és a > közötti karakterek a jelölő direktívák, amelyek meghatározzák, hogy a lapot hogyan kell kijelezni. Az <i>Válasszon</i> füzér például jelzi, hogy dőlt betűre kell átkapcsolni, a Válasszon szót kijelezni és a dőlt betű használatát befejezni. Egy lapazonosító, mint amilyen a http://absz-bolt.com/zene az ún. egységes erőforrás azonosító (uniform resource locator, URL).Az <a href="url">hivatkozás</a> bejelölés jelzi, hogy az url felé létesíteni kell egy hipertextkapcsolatot a hivatkozó szöveg (anchor text) hivatkozással. Egy absztrakt online bolt weblapja, ahogy egy böngészőt használó ember látja (felül), és a hozzá tartozó HTML-füzér, ahogy azt a böngésző vagy a vásárló ágens látja (alul). A HTML-ben a < és a > közötti karakterek a jelölő direktívák, amelyek meghatározzák, hogy a lapot hogyan kell kijelezni. Az <i>Válasszon</i> füzér például jelzi, hogy dőlt betűre kell átkapcsolni, a Válasszon szót kijelezni és a dőlt betű használatát befejezni. Egy lapazonosító, mint amilyen a http://absz-bolt.com/zene az ún. egységes erőforrás azonosító (uniform resource locator, URL).Az <a href="url">hivatkozás</a> bejelölés jelzi, hogy az url felé létesíteni kell egy hipertextkapcsolatot a hivatkozó szöveg (anchor text) hivatkozással.
27	0.4	1	Definíció 1. Adott Környezet osztályban adott Architektúrá-n futtatott Program futási időben (vagy felhasznált tárhely tekintetében) legrosszabb-esetben aszimptotikusan korlátozott optimális, ha létezik olyan k és n[0] szám, amelyek esetén minden egyéb Program’ programra és n>n[0]-ra V*(Program, k*Architektúra, n, Környezet) legalább akkora, mint V*(Program’, Architektúra, n, Környezet), ahol k*Architektúra az Architektúra k-szor gyorsabb (vagy nagyobb tárhellyel rendelkező változatát jelöli).
7	0.8	0	A megoldás erre a problémára az, hogy használjunk két bitet egy helyett. Az S[4,4]-et reprezentálja két regiszter, amelyeket K(S[4,4])-nek és K(¬S[4,4])-nek nevezünk, ahol K jelöli azt, hogy „ismert”. (Emlékezzünk, hogy ezek még mindig csak összetett nevekkel rendelkező szimbólumok, még akkor is, ha strukturált kifejezésnek tűnnek!) Ha mind K(S[4,4]) és K(¬S[4,4]) hamis, akkor ez azt jelenti, hogy az S[4,4 ]igazságértéke nem ismert. (Ha mindkettő igaz, akkor hiba van a tudásbázisban!) Ebben a reprezentációban bármikor is használnánk az S[4,4]-et a hálózat valamely részében, a K(S[4,4])-et használjuk helyette; és bármikor használnánk az ¬S[4,4]-et, akkor a K(¬S[4,4])-et használjuk. Általánosságban, minden potenciális határozatlan állítást két tudásállítással (knowledge propositions) reprezentálunk, kijelentve, hogy a vonatkozó állítás ismerten igaz vagy ismerten hamis.
24	0.833333	1	A sarokpont detektorok nagy része ún. szomszédossági művelet, azaz egy meghatározott algoritmust kell végrehajtani a kép minden egyes pontjára, és ehhez az adott pont és környezetének értékeire van szükség. Az ilyen tulajdonságú műveletekre általános keretet szolgáltat a Matlabban elérhető nlfilter függvény (Image Processing Toolbox).
3	0.583333	0	Az iteratívan mélyülő keresés tékozlónak tűnhet, mert felettébb sok állapotot többször is kifejt. Kiderül azonban, hogy a költségtöbblet nem lényeges. Ennek az az oka, hogy egy olyan keresési fában, ahol minden szinten ugyanaz (vagy közel ugyanaz) az elágazási tényező, majdnem az összes csomópont a legmélyebb szinten található, így nem túl sokat számít, hogy a magasabb szinteket többször is kifejtjük. Az iteratívan mélyülő keresésben a legmélyebb szinten (d mélység) található csomópontokat csak egyszer fejtjük ki, egy szinttel feljebb kétszer stb. egészen a gyökér gyerekeiig, amelyeket d-szer fejtünk ki. Így a kifejtett csomópontok össz-száma:
20	0.857143	0	LeNet néven egy sor speciális neurális hálót (specialized neural network) szerkesztettek egybe azért, hogy a problémában rejlő struktúrát kihasználják. Az egyik strukturális adottság, hogy a bemeneti pixelek kétdimenziós tömböt alkotnak, a másik, hogy egy ábra kismértékű pozíció- vagy dőlésiirány-változása lényegtelen. Minden egyes háló 32 × 32 egységből álló bemeneti réteget tartalmaz, amelyre a 20 × 20 pixelt úgy kapcsolták, hogy minden egyes bemeneti egység egy lokális szomszédságot reprezentált. Ezt három rejtett réteg követte. Mindegyik réteg számos n × n-es mezőből áll, ahol n kisebb, mint a megelőző réteg, tehát a háló a bemenetek alul-mintavételezését valósítja meg. Egy mezőn belül mindegyik egységre azonos súlyokat kényszerítünk, így a mező tulajdonságdetektorként működik: olyan tulajdonságokat érzékel, mint egy hosszú függőleges vonal vagy egy rövid félkörív jelenléte. A kimeneti réteg 10 neuronból áll. Ennek az architektúrának számos változatát kipróbálták: egyik tipikus képviselőjük a rejtett rétegeiben rendre 768, 192, illetve 30 neuront tartalmazó háló volt. A tanító halmazt kiegészítették további mintákkal, ezeket a valósakból kismértékű affin transzformációkkal nyerték, amelyek a következők voltak: eltolás, kismértékű elforgatás, nagyítás/kicsinyítés. (Természetesen a transzformációknak kismértékűeknek kell lenniük, különben a 6-ot 9-cé transzformáljuk!) A LeNet által elért legkisebb hibaarány 0,9% volt.
23	0.555556	0	Az attribútumalapú rendszereknél eggyel összetettebbek a relációs alapú információkinyerő rendszerek, amelyeknek több mint egy objektummal kell foglalkozniuk, ráadásul a köztük levő relációkat is figyelembe kell venniük. Azaz, amikor egy ilyen rendszer a „249,99 $” szöveget látja, akkor nem csak azt kell megállapítania, hogy ez egy ár, hanem azt is, hogy mely objektumnak az ára. A FASTUS egy tipikus relációs alapú információkinyerő rendszer, amely cégegyesülésekről és felvásárlásokról szóló híreket képes kezelni. El tudja olvasni a következő hírt:
5	0.181818	1	Az (NT, SA) él már nem konzisztens, mivel az NT változó BLUE értékéhez nem tudunk konzisztens értéket találni SA értékkészletében, ami csupán {BLUE}. Ezért tehát az NT változó értékkészletéből ki kell vennünk a BLUE értéket, avagy az NT változó értékkészletét {RED}-re redukáljuk. Emiatt pedig az (NT, SA) él törlését követően újfent fel kell vennünk az lista végére az összes NT-be mutató élet. Az él-listánk tehát ekkor a következő:
24	0.083333	1	Az észlelés egyik feltétele a tapasztalat. Az észlelés az érzékszervi benyomások tárggyá, jelentéssé szerveződése. Azon pszichológiai folyamatok összessége, amelyek útján felismerjük, szervezzük, és jelentéssel ruházzuk fel az észleletet.
1	0.068966	1	A CAM-6 valójában egy IBM-PC, -XT, vagy -AT kompatibilis kártya, és a hozzátartozó PC-DOS 2 kompatibilis meghajtóprogram. Ezzel a koncepcióval elérték azt, hogy a PC erőforrásait (a tápot, lemezmeghajtót, monitort, az alapvető operációs környezetet) kiegészítették egy nagy sebességű sejtautomata szimulátorral, amelynek teljesítménye (erre az adott feladatra) a CRAY-1-ével volt összehasonlítható. Másodpercenként 60 sejtautomata állapotot frissített egy 256x256-os táblán. A vezérlő szoftvert Forth nyelven írták, és 256 kB memórián futott.
12	0.285714	0	Egy részfeladat-megosztást tartalmazó HFH-tervkészítő sokkal hatékonyabb megoldásokat készíthet, mert a sin kiszámításának számos lépésére választhatja a tan meglévő lépéseit. A legtöbb fordító nem alkalmazza ezt a fajta procedúrák közötti megosztást, mert az összes lehetséges megosztott terv figyelembevétele túl sok időt venne igénybe. Ehelyett a legtöbb fordító minden résztervet függetlenül készít el, majd esetleg módosítja az eredményt egy optimalizáló használatával.
5	0.818182	1	Kényszerkielégítési probléma: A lehetséges állapotokat nem egy kiinduló állapotból adott műveletekkel elérhető állapotokként fogalmazzuk meg, hanem tetszőleges olyan állapotokként, amelyekre adott feltételek (kényszerek) teljesülnek.
15	0.814815	0	Az útköltség ezen definíciója mellett, a legrövidebb út megtalálása pontosan megegyezik a legvalószínűbb szósorozat megtalálásával. A keresés hatékonyságához egy jó h(w[i]) heurisztika is szükséges a szósorozat befejezéséhez szükséges költség megbecslésére. Nyilvánvalóan ennek főként a beszédjelnek ahhoz a részéhez kell kapcsolódnia, amit a jelenlegi úton fekvő szavak még nem fedtek le. Eddig még nem született különösebben érdekes heurisztika erre a problémára.
7	0.92	1	Kielégíthető, mert Nagy = igaz, Hallgatag = hamis modellje a mondatnak (((igaz ^ hamis) V ¬hamis) = ((igaz ^ hamis) V igaz) = (hamis V igaz) = igaz), de nem érvényes, mert Nagy = hamis, Hallgatag = igaz nem modellje a mondatnak (((hamis ^ igaz) V ¬igaz) = ((hamis ^ igaz) V hamis) = (hamis V hamis) = hamis).
16	0.434783	0	Az ilyen típusú értékfüggvényt additív értékfüggvénynek (additive value function) nevezzük. Az additív értékfüggvények egy teljesen illeszkedő módszert adnak az ágens értékfüggvényének a leírására, és számos valósvilág-beli helyzetben érvényesek. Még ha a KPF nem is teljesül teljes mértékben, ahogy ez az attribútumok szélső értékei esetén megtörténhet, egy additív értékfüggvény még mindig jó közelítését adhatja az ágens preferenciáinak. Ez különösen igaz, ha a KPF csupán azon attribútumtartományokban sérül, amelyek a gyakorlatban csak kis valószínűséggel fordulnak elő.
19	0.227273	0	Az előbbi részben az induktív tanulás egyszerű sémájával foglalkoztunk. Ahhoz, hogy a háttértudás szerepét megérthessük, beszélnünk kell a hipotézisek, a példaleírások és a besorolások közötti kapcsolatról. Jelölje a Leírások az összes példaleírás konjunkcióját és a Besorolások a példabesorolások konjunkcióját. A „megfigyelést megmagyarázó” Hipotézis-nek akkor a következő tulajdonsággal kell rendelkeznie (emlékezzünk, hogy a ⊨ jelentése a „logikailag maga után vonz”):
6	0.1	1	Egy másik figyelembe vehető értékelési szempont a mobilitás, azaz hogy hány elérhető lépése lesz a bábunak. Belátható, hogy ha egy bábu több lépésből választhat, akkor valószínűbb, hogy megtalálja a jó lépést. Figyelembe kell azonban venni, hogy egy futár például megteheti, hogy oda vissza járőrözik, ennek azonban értelme nem sok van.
22	0.111111	0	Mindezeket összerakva a  ábrán látható ágensprogramot kapjuk. Itt az ágens robotszolgaként működik, amit egy gazda irányíthat. A szolga minden lépésben megválaszolja a gazda kérdését, illetve végrehajtja a parancsát, és a szolga minden, a gazda által kijelentett állítást elhisz. Ezenkívül megállapítást tesz az aktuális szituációra (csak egyszer), ha nincs más tennivalója, és megtervezi saját akcióját, ha magára hagyják. Íme, egy tipikus párbeszéd:
24	0.041667	0	Az f függvényt a fizika és az optika határozza meg, és viszonylag jól ismerjük. S és egy valós vagy elképzelt W világ előállítása f-ből a számítógépes grafika (computer graphics) által kezelt probléma. A számítógépes látás bizonyos értelemben a számítógépes grafika fordítottja, ha adott f és S, akkor W-t próbáljuk kiszámítani:
27	0.4	1	Például számítható racionális azon ágens-program is, amelynek esetleg végtelen sok időre lenne szüksége ahhoz, hogy az optimális cselekvést megtalálja, miközben az aszimptotikusan korlátozott ágens-programok esetében nem beszélhetünk végtelen gyorsításról (vagy tárhely növelésről). Egy ágens-program csak akkor aszimptotikusan korlátozott optimális, ha véges (és lehetőleg nem túl nagy) mértékben növelve az őt futtató architektúra teljesítményét kapunk korlátozottan optimális ágens-programot. Másrészt pedig a korlátozott optimalitás sem esik (legtöbbször) egybe a tökéletes racionalitással. Egy valós bonyolultságú környezet esetén az ágens architektúrája (legtöbbször) nem engedi, hogy a környezet viszonylatában globálisan optimális cselekvést időben kiszámítsuk és megtegyük. Gondoljunk csak például egy ping-pongozó robotra. A robot hardveres felépítése nyilván korlátozza a hatékonyságát, és így nem tud abszolút ideálisan reagálni, mozogni, stb, legfeljebb csak a lehetőségeinek a viszonylatában. Persze ettől még nyerhetne egy gyengébb ellenféllel szemben.
10	0.060606	1	Maga az RDF ilyen állítások általános modellje. Az ilyen állításokat gyakran XML-ben fejezzük ki.[8] Nézzünk meg egy egyszerű RDF-t a fenti Napraforgós példán keresztül.  ábra -  ábra. RDF példa  ábra. RDF példa Fontos <rdf:Description rdf:about=”#Napraforgom”>
13	0.090909	0	Egy adott kijelentéshez rendelt 0 valószínűség annak az egyértelmű meggyőződésnek felel meg, hogy a mondat állítása hamis, míg az 1 valószínűség egyenértékű azzal a határozott meggyőződéssel, hogy a mondat állítása igaz. A 0 és 1 közötti valószínűségek a mondat igazságtartalmában való hit közbenső mértékeinek felelnek meg. Az állítás valójában persze vagy igaz, vagy hamis. Fontos tehát megjegyeznünk, hogy a meggyőződés mértéke és az igazságtartalom mértéke különböző fogalmak. A 0,8 valószínűség nem jelent „80%-ban igaz”-at, hanem egy 80%-os mértékű meggyőződést – vagyis egy igen erős elvárást (reményt) az állítás igazságával szemben. Következésképpen a valószínűség-számítás a logikával azonos lételméleti állásfoglalást hordoz – nevezetesen, hogy a világban a tények vagy érvényesek, vagy nem. Az igazság mértéke, mint a meggyőződés mértékének az ellentéte, a fuzzy logika (fuzzy logic) tárgya, amelyet a  alfejezetben tárgyalunk.
4	0.583333	1	 ábra - [sztochasztikus_hegymaszo_1.gif]  ábra - [sztochasztikus_hegymaszo_2.gif]  ábra - [sztochasztikus_hegymaszo_3.gif]  ábra - [sztochasztikus_hegymaszo_4.gif]  ábra - [sztochasztikus_hegymaszo_5.gif]  ábra - [sztochasztikus_hegymaszo_6.gif]  ábra - [sztochasztikus_hegymaszo_7.gif]  ábra - [sztochasztikus_hegymaszo_8.gif]  ábra - [sztochasztikus_hegymaszo_9.gif]  ábra - [sztochasztikus_hegymaszo_10.gif]  ábra - [sztochasztikus_hegymaszo_11.gif]
6	0.1	1	Az algoritmus nagyon hasonló a prímszámok esetében megismert Euklidészi szitához. Az alapötletünk, hogy alulról építjük fel a táblázatot. Minden 0<=h<=g-re alulról indulva megkeressük a h-értékeket a következő módon. Tegyük fel, hogy az első r-1 sort már kitöltöttük, és most következik az r-edik. Ha a sor már tartalmazza a h értéket, akkor megyünk a következő sorra. Ellenkező esetben helyezzük a h-t a főátló jobb oldalára (vagy az átlóra), mégpedig a lehető legközelebb az átlóhoz. Az, hogy egy cellába nem rakhatjuk a h-t, a következők miatt lehet: * Van már h ebben az átlóban. * Van már h ebben az oszlopban. * Van már itt egy h-nál kisebb k érték.
2	0.105263	1	A mesterséges rendszerek intelligens működésének egyik alapfeltétele, hogy érzékelő rendszereik közvetítésével információt szerezzenek a környezetükről. Az informatika (ezen belül a mesterséges intelligencia kutatás) egyik legdinamikusabban fejlődő területe ezért a technikai érzékelők fejlesztése és egyre általánosabb alkalmazása. (Az okostelefonok „okossága” például nagyrészt a beépített – kamera, mikrofon, GPS, gyorsulás, tapintás,..- szenzorok képességein és hatékony felhasználásán múlik). Az előadás bemutatja a legfontosabb technikai érzékelési elveket, a tipikus megvalósítási formákat és jellemzőket. Külön figyelmet fordít az érzékelő rendszerek egymásra épülő intelligencia szintjeinek jellemzésére, melyek a következők: alap érzékelők, erősítő és jelformáló áramkört is tartalmazó un. mérő-átalakítók, a kompenzáló elemeket (pl.:érzékenység állító, határérték túllépés elleni védelmet) is biztosító érzékelők, a kommunikációs képességekkel (A/D átalakítóval, címazonosítóval) rendelkező érzékelők, az öndiagnosztizáló érzékelők (melyek a helyes működést vagy a meghibásodást is jelezni képesek), valamint az önálló elemző és döntési képességekkel rendelkező érzékelők.
27	0.4	1	* A „mozgó célpont” probléma a mesterséges intelligencia kutatásában * Az információ technológia exponenciális fejlődésének tünetei, várható hatásai (szingularitás) * Az elosztott (mesterséges intelligencia) rendszerekben megoldandó problémák * Az elosztott rendszerek optimalizálása „siker és büntetés” elosztással. „Credit assignment” * A „Holland-féle” osztályozó rendszer felépítése, működése, tipikus algoritmusai („tűzoltó brigád”, genetikus algoritmusok), és jellemzői * A tábla „black board” paradigma komponensei és jellemzői * A nyelvtechnológia területei (beszéd előállítás, beszéd felismerés, gépi fordítás) * A gépi látás területei, megoldandó feladatai és jellemzői * Beágyazott (intelligens) rendszerek, „ambiens” rendszerek * Intelligens robotok (robot generációk, fejlődési tendenciák) * Az inkrementális robotépítés célja, elvárásai, Brooks-féle modellje
7	0.92	0	John McCarthy cikke a „Programs with Common Sense” (McCarthy, 1958, 1968) tette híressé az ágens fogalmát, egy olyan programét, amely az érzetek és cselekvések összekapcsolására logikai következtetést használ. A cikk kitűzte a deklarativizmus zászlóját, megmutatva, hogy szoftverek írásának igen elegáns módszere az, ha a szükséges ismereteket közöljük az ágenssel. Allen Newell cikke (1982) a „The Knowledge Level” tárgyalja azt a megközelítést, hogy racionális ágensek leírhatók és elemezhetők egy absztrakt szinten, ami az általuk birtokolt tudást és nem azt a programot definiálja, amit futtatnak. A mesterséges intelligencia deklaratív és procedurális megközelítéseit hasonlítja össze Boden (Boden, 1977). A vitát, mások mellett Brooks (Brooks, 1991) és Nilsson (Nilsson, 1991) írásai élesztették fel újra.
8	0	0	A  fejezetben megmutattuk, hogy egy tudásbázisú ágens hogyan képes reprezentálni az őt körülvevő világot, és hogyan vezeti le a végrehajtandó cselekvéseket. Reprezentációs nyelvként az ítéletkalkulust alkalmaztuk, mert ez elégséges volt a logika és a tudásbázisú ágensek alapvető tulajdonságainak leírásához. Sajnos az ítéletkalkulus nyelvezete túlságosan korlátos ahhoz, hogy összetett környezetekről szerzett tudást megfelelő módon reprezentáljon. Ebben a fejezetben az elsőrendű logikát^[74] (first-order logic) vizsgáljuk, amelynek kifejezőereje elégséges ahhoz, hogy a józan ésszel felfogható tudásunk nagy részét reprezentálja. Ezenkívül az elsőrendű logika sok más reprezentációs nyelvet magában foglal, vagy alapját képezi, és hosszú évtizedek óta vizsgálatok tárgya. A  alfejezetben a reprezentációs nyelvek általános bemutatásával kezdünk; a  alfejezetben az elsőrendű logika szintaxisát és szemantikáját tárgyaljuk; a  és  alfejezet leírja az elsőrendű logika használatát egyszerű reprezentációk esetén.
5	0.909091	0	Olvasnivaló.  Tegyük fel, hogy ismerjük egy gráfról, hogy van egy legfeljebb k csomópontot tartalmazó ciklikusság-vágóhalmaza. Írjon le n változós CSP-k esetén egy egyszerű algoritmust a minimális ciklikusság-vágóhalmaz megkeresésére, ahol a futási idő maximuma O(n^k). Végezzen irodalomkutatást olyan vágóhalmaz-keresési eljárások után, amelyek a vágóhalmaz méretében közelítőleg polinomiális időben találnak közelítőleg minimális ciklikusság-vágóhalmazt. Praktikussá teszi az ilyen módszerek létezése a ciklikusság-vágóhalmaz módszereket?
10	0.939394	0	Az ezen a területen folyó munkák legfrissebb forrását a Principles of Knowledge Representation and Reasoning nemzetközi konferenciák kiadványai jelentik. A Readings in Knowledge Representation (Brachman és Levesque, 1985) és a Formal Theories of the Commonsense World (Hobbs és Moore, 1985) a tudásreprezentáció kiváló antológiái. Az előbbi a reprezentációs nyelvek és formalizmusok történelmileg fontos publikációira összpontosít, az utóbbi pedig magának a tudásnak az akkumulálására helyezi a hangsúlyt. Davis, Stefik és Sowa könyvei jó bevezető munkák a tudásreprezentációkhoz (Davis, 1990; Stefik, 1995; Sowa, 1999).
4	0.5	1	* Down szindróma: talán a legismertebb, leggyakoribb kromoszomális betegség. A 21. kromoszómából három van (autoszomális triszómia) , mivel a petesejt (vagy a spermatocita) érésekor a meiózisban nem történt meg a kromoszómák szétválása, így nem két tisztán haploid ivarsejt egyesülésével jött létre a zigóta. 40 év feletti terhes nőnél fokozott a veszély, hogy gyermeke Down-kórban (vagy egyéb genetikai problémában) fog szenvedni. Jellemző tünet a szellemi visszamaradottság, a mandulavágású szem, a majomtenyér, normálnál nagyobb nyelv stb. * Turner szindróma: nőknél a szekromoszómából csak egy van. (45,X0) Jellemző tünet: testi, lelki visszamaradottság, sterilitás, amenorrhea.
9	0.482759	0	úgy olvasható, hogy: „Mindenki élő, ha nem bizonyítható, hogy halott.” * A Prolognak van egy egyenlőségi operátora (=), de ez nem rendelkezik a logikai egyenlőség teljes hatékonyságával. Egy egyenlőséget tartalmazó célállítás akkor sikeres, ha a két term egyesíthető, máskülönben sikertelen. Tehát az X + Y = 2 + 3 akkor sikeres, ha az X lekötött értéke a 2, és az Y lekötött értéke a 3, de a hajnalcsillag=esthajnalcsillag sikertelen. (A klasszikus logikában az utóbbi egyenlet lehet igaz, vagy lehet nem igaz.) Az egyenlőségről sem tényt, sem szabályt nem tudunk hozzáadni a TB-hez. * A Prolog egyesítési algoritmusa nem tartalmazza az előfordulási próbát. Ennek az a következménye, hogy lehetséges nem helyes következtetést végezni. Ez azonban ritkán okoz problémát, leginkább olyankor, amikor a Prologot matematikai tételek bizonyítására használjuk.
17	0.666667	0	Az ismétlődő játékokat részlegesen megfigyelhető környezetekben részleges információjú (partial information) játékoknak nevezik. A példák között találhatunk olyan kártyajátékokat, mint a póker és a bridzs, amelyekben mindegyik játékos a kártyáknak csak egy részét láthatja, de olyan komolyabb „játékokat” is, mint a nukleáris háborús modellek, ahol egyik fél sem ismeri az ellenfél összes fegyverének a helyzetét. Részleges információjú játékokat a hiedelmi állapotok fájának a vizsgálatával oldanak meg úgy, mint az RMMDF-ekben (lásd  alfejezet). Fontos különbség az, hogy míg a saját hiedelmi állapotok megfigyelhetők, addig az ellenfél hiedelmi állapotai nem. Ilyen játékokra csak mostanában fejlesztettek ki a gyakorlatban használható algoritmusokat. Megoldások születtek a póker bizonyos egyszerűbb változataira, bebizonyítva, hogy a blöffölés valóban racionális választás egy jól kiegyensúlyozott kevert stratégia részeként. Az ilyen tanulmányokból alakult ki az a lényeges meglátás, hogy a kevert stratégiák nemcsak azért hasznosak, mert valakinek a cselekvését megjósolhatatlanná teszik, hanem azért is, mert minimalizálják annak az információnak a mennyiségét, amit az ellenfél a cselekvések megfigyelésével tanulni képes. Érdekes, hogy annak ellenére, hogy a bridzs játszásához való programok tervezői nagyon is tisztában vannak az információ gyűjtésének és elrejtésének a fontosságával, senki sem javasolta véletlenszerű stratégiák használatát.
12	0.238095	0	A  ábrán egy példa látható. Az ábra tetején egy ház megszerzésére vezető T terv található. Az a’ = HázatÉpít magas szintű cselekvést választottuk a dekompozícióra. A  ábráról a d dekompozíciót választottuk, és a HázatÉpít cselekvést ezzel helyettesítettük. A dekompozíciós lépés által létrehozott Pénz nyitott feltétel teljesítésére a KölcsöntVeszFel járulékos lépést vezettük be. Egy cselekvés helyettesítése annak dekompozíciójával egy kicsit hasonlít a szervátültetéses műtétekhez. Az új résztervet ki kell bontanunk a csomagolásából (az Indít és Befejez lépések közül), be kell illesztenünk és mindent megfelelően le kell zárnunk. Ezt többféleképpen is megtehetjük. Hogy pontosabbak legyünk, minden lehetséges d’ dekompozícióhoz az alábbiakat kell megtennünk: 1. Először is az a’ cselekvést el kell távolítani a T tervből. Ezután a d’ minden s lépésére ki kell választanunk egy cselekvést, amely kitölti az s szerepét, és hozzá kell adnunk a tervhez. Ez lehet az s egy új példányosítása vagy egy meglévő s’ lépés a T-ből, ami s-sel azonos. A Borkészítés cselekvésdekompozíciója például megkövetelheti a TelketVesz cselekvést, de várhatóan használhatjuk ugyanazt a TelketVesz cselekvést, mely már szerepel a tervben. Ezt részfeladat-megosztásnak (subtask sharing) nevezzük.
3	0.083333	1	A HunMeSH-nek tartalmaznia kell a deszkriptorokat, az utalásokat és szinonimákat. A HunMeSH az UMLS szerkezetét kell, hogy kövesse. A végső cél az, hogy kötött kereső szótárak, tezauruszok támogatásával a természetes nyelven alapuló keresés segítségével könnyítsük meg a felhasználó dolgát.
17	0.066667	0	A  ábrán mutatott világ optimális eljárását a  (a) ábra mutatja. Látható, hogy mivel egy lépés költsége meglehetősen kicsi ahhoz a büntetéshez viszonyítva, hogy véletlenül a (4, 2) pozícióra kerülünk, az optimális eljárásmód a (3, 1) állapot esetén óvatos. Inkább egy hosszú kerülő út megtételét javasolja, mint a rövid átvágást a (4, 2) kockáztatásával.
3	0.208333	1	A 8-királynő probléma inkább az érdekes logikai feladványok, a szórakoztató matematika témakörébe tartozik. Mindemellett a probléma alkalmas a backtrack algoritmus bemutatására, illetve ezen keresztül a strukturált programozás erejének szemléltetésére. Egzakt módon igazából nem alkalmazzák technológiai eljárások részeként, viszont bizonyos rekurzív (akár backtrack), illetve egyéb keresési algoritmusok összehasonlítására kiválóan alkalmazható. A programozással ismerkedők számára alkalmas gondolkodtató gyakorlópélda, amelyen keresztül gyakorolható a különböző, programozásban használt adatszerkezetek használata, implementálása (például a kétdimenziós tömböké), a rekurzív gondolkodás, probléma-megközelítés. Akár kombinatorikai feladványok alapjául is szolgálhat.
23	0.5	0	Hogy egy átlagos IR-feladat indexelési problémájának nagyságrendjét érzékeltessük, vegyünk egy szabványos TREC (Text REtrieval Conference – Szöveg-visszakeresési Konferencia) dokumentumgyűjteményt, amely 750 ezer dokumentumot tartalmaz, öszszesen 2 GB (gigabájt) szöveggel. A szókincs körülbelül 500 ezer szót tartalmaz, szótövesítés és kisbetű-nagybetű konverzió után; ennyi szó tárolása 7 és 10 MB közötti tárterületet igényel. Az invertált index a (dokumentum, gyakoriság) párokkal 324 MB területet igényel, bár tömörítési technikák alkalmazásával csak 83 MB-ot. A tömörítés tárhelyet takarít meg, a feldolgozási követelmények kismértékű növelése árán. Azonban ha a tömörítés lehetővé teszi, hogy az egész indexet a memóriában – és nem háttértáron tároljuk –, akkor jelentős eredő teljesítménynövekedést kapunk. A kifejezéslekérdezés támogatása a tárigényt 1200 MB-ra növeli tömörítetlen, illetve 600 MB-ra tömörített esetben. A webes keresőgépek háromezerszer ekkora feladattal dolgoznak. A legtöbb probléma az esetükben is hasonló, azonban nem praktikus terabájtnyi mennyiségű adatot kezelni egyetlen számítógépen, ezért az indexet k szegmensre vágják, és minden szegmenst külön számítógép tárol. A lekérdezést mindegyik számítógép megkapja, majd a k eredményhalmazt egy eredményhalmazba vonják össze, amelyet megjelenítenek a felhasználó számára. A webes keresőgépeknek ráadásul másodpercenként több ezer lekérdezést kell kiszolgálniuk, így a k számítógép n másolatára van szükség. Az idő folyamán k és n folyamatosan növekszik.
20	0.964286	0	Tegyük fel, hogy Anna számára a meggycukorkák hasznossága c[A], a citromcukorkáké ℓ[A], míg Béla számára a hasznosságok rendre c[B] és ℓ[B]. (De ha Anna kibontott egy cukorkát, akkor azt Béla már nem fogja megvásárolni tőle.) Ha Béla sokkal jobban szereti a citromízű cukorkát, mint Anna, akkor Anna feltehetőleg bölcsen teszi, ha eladja a cukros zacskóját, amikor már kellően biztos a citromízűek arányában. Másrészről viszont, ha Anna túl sok cukrot kibontott már az arány eldöntése során, akkor a zacskó értéktelenné válik. Vizsgálja meg a cukroszacskó-eladás optimális pillanatának meghatározását. Határozza meg az optimális eljárás várható hasznosságát, a  alfejezet a priori eloszlásainak feltételezésével.
18	0.684211	0	példát megvizsgálhasson. Ennek értelmében, ha egy algoritmus ilyen mennyiségű példával konzisztens hipotézist ad vissza, akkor legalább 1 – δ valószínűséggel a hibája legfeljebb ε. Más szavakkal közelítőleg helyesnek nevezzük. A szükséges példaszámot, ami ε és δ függvényeként adható meg, a hipotézistér minta komplexitásának (sample complexity) nevezzük.
24	0.916667	0	A számítógépes látás területének legjobb összefoglaló jegyzete David Forsyth és Jean Ponce munkája, a Computer Vision: A Modern Approach. Sokkal rövidebben tárgyalja a területet (Nalwa, 1993; Trucco és Verri, 1998). A Robot Vision (Horn, 1986) és a Three-Dimensional Computer Vision (Faugeras, 1993) régebbi, de még mindig hasznos jegyzetek, saját, speciális témájukban. David Marr könyve, a Vision (Marr, 1982) fontos szerepet töltött be a számítógépes látás (pszichofizika) és a tradicionális biológiai látás (neurobiológia) összekapcsolásában. A számítógépes látás témájában a két fő folyóirat az IEEE Transactions on Pattern Analysis and Machine Intelligence és az International Journal of Computer Vision. A számítógépes látással foglalkozó konferenciák többek közt az ICCV (International Conference on Computer Vision), a CVPR (Computer Vision and Pattern Recognition) és az ECCV (European Conference on Computer Vision).
11	0.730769	0	A mondat ítéletlogikai szimbólumokat fog tartalmazni, melyek a lehetséges cselekvés-előfordulások megfelelői. A modell, ami kielégíti a mondatot, igaz értéket rendel azokhoz a cselekvésekhez, amelyek részei a helyes tervnek, és hamis értéket a többihez. Egy olyan célkitűzés, mely egy nem helyes terv megfelelője, nem lesz modell, mivel nem lesz konzisztens azzal a feltételezéssel, hogy a cél igaz. Ha a tervkészítési probléma megoldhatatlan, akkor a mondat sem kielégíthető.
5	0.181818	1	Megfigyelhetjük, hogy nagyjából ugyanaz történik most, az NT=BLUE értékadást követően, mint előtte az NT=GREEN értékadás után. Az következtetés végeredménye tehát már most is előre sejthető. De mi azért haladjunk csak tovább, lépésről lépésre, és lássuk, hogy pontosan mi is történik.
10	0.060606	1	Fentiekben megismerkedtünk a szemantikus web leíró nyelvével, sémájával, ontológiájával. Hogyan lesz ezekből szemantikus web? Hogyan fogja tudni kikövetkeztetni az alkalmazás, miről is szól az adat, amit leír az RDF illetve az OWL, és hogyan hozható ez kapcsolatba a többi adattal a neten?
20	0.5	0	Eddigiekben a statisztikai tanulás tárgyalásában arra koncentráltunk, hogy valószínűségi modellek egy behatárolt családjának paramétereit egy struktúrájában nem kötött adathalmazra illesszük. Például a kevert Gaussokat használó, nem ellenőrzött tanulás feltételezi, hogy az adatok megmagyarázhatók rögzített számú Gauss-eloszlás összegeként. Az ilyen módszereket paraméteres tanulásnak (parametric learning) nevezzük. A paraméteres tanuló eljárások gyakran nagyon egyszerűek és hatékonyak, de egy meghatározott behatárolt modellcsalád feltételezése sokszor túlzott egyszerűsítése annak, ami az adatokat szolgáltató valós világban történik. Nos, az természetesen igaz, hogy ha nagyon kevés adatunk van, akkor nem reménykedhetünk egy bonyolult és részletes modell megtanulásában, de butaságnak tűnik a hipotézis komplexitását akkor is rögzítve tartani, amikor az adathalmaz nagyon nagyra nő.
25	0.222222	0	A Kalman-szűrő a másik széles körben használt lokalizáló algoritmus. A Kalman-szűrő a P(X[t]|z[1:t], a[1:t–1]) posteriort egy Gauss-eloszlással reprezentálja. Az eloszlás középértékét μ[t]-vel, kovarianciáját pedig Σ[t]-vel jelöljük. A fő probléma a Gauss-hiedelmekkel az, hogy csak lineáris mozgási modell, f és lineáris mérési modell, h mellett zártak. Nemlineáris f vagy h esetén a szűrő frissítésének eredménye általában már nem lesz Gauss-eloszlású. Így Kalman-szűrőt használó lokalizációs algoritmusok linearizálják a mozgási és az érzékelő modelleket. A linearizálás egy nemlineáris függvény adott lokális lineáris közelítése. A  ábra a linearizálás elvét mutatja be egy (egydimenziós) robotmozgási modellen. A bal oldalon fut a mozgás nemlineáris f(x[t], a[t]) modellje (az a[t] vezérlés nem szerepel az ábrán, mert nem játszik szerepet a linearizálásban). A jobb oldalon ezt egy f(x[t], a[t]) lineáris függvénnyel közelítjük. A lineáris függvény a μ[t] pontban érinti az f-et, ami a t időre vonatkozó becslésünk középértéke. Ezt a linearizálást (első fokú) Taylor-sorfejtésnek (Taylor expansion) hívják. Az olyan Kalman-szűrőt, amely f-et és h-t Taylor-sorfejtéssel linearizálja, kiterjesztett Kalman-szűrőnek (KKSZ; extended Kalman Filter – EKF) hívjuk. A  ábra egy KKSZ helymeghatározó algoritmust használó robot becsléssorozatát mutatja. Ahogy a robot halad, a helyzetére vonatkozó becslés bizonytalansága egyre nő, ahogy azt a hibaellipszis is mutatja. A hiba csökken, ahogy a robot egy ismert elhelyezkedésű referenciapont távolsága és szöge alapján javítani tudja saját helyzetére vonatkozó becslését. A hiba végül újra nőni kezd, ahogy a referenciapont kikerül a robot látóköréből. A KKSZ algoritmus jól működik, ha könnyen azonosítható referenciapontok vannak. Ellenkező esetben az a posteriori eloszlás multimodális is lehet, mint a  (b) ábrán. A referenciapontok azonosításának szükségességét jelentő probléma csak egy példa a  fejezet végén tárgyalt adatasszociációs (data association) problémának.
10	0.060606	0	Bár az alosztály- és az egyedrelációk a kategóriák szempontjából a legfontosabbak, olyan kategóriák közötti relációkat is ki szeretnénk fejezni, amelyek egymásnak nem alosztályai. Ha például azt mondjuk, hogy a Hím és a Nőstény az Állat alosztályai, ezzel nem mondtuk azt, hogy egy hím nem lehet nőstény. Azt mondjuk, hogy két vagy több kategória diszjunkt (disjoint), ha közös egyedei nincsenek. Ha tudjuk azt is, hogy a hímek és a nőstények kölcsönösen kizárják egymást, attól még nem tudjuk, hogy egy állatnak, amely nem hím, nősténynek kell lennie, hacsak nem mondjuk ki, hogy a hímek és a nőstények az állatok kimerítő felosztását (exhaustive decomposition) képezik. A diszjunkt kimerítő felosztás a partíció (partition). Ezt a három fogalmat az alábbi példák illusztrálják:
24	0.041667	0	Az alternatív lehetőség a modellalapú (model-based) megközelítés, ahol a szenzoros bemenet alapján a világ egy modellje épül fel. E megközelítés szerint egy f függvényből indulunk ki, amely a világ W állapotát az általa keltett S ingerületre képezi le:
25	0.148148	0	A mobil robotok számára mozgató mechanizmusok széles tárháza áll rendelkezésre: kerekek, lánctalpak, lábak stb. A differenciál hajtású (differential drive) robotoknak kétoldalt külön mozgatható kerekeik (vagy lánctalpaik) vannak, ugyanúgy, mint a tankoknak. Ha mindegyik kerék azonos sebességgel mozog, akkor a jármű egyenesen halad előre. Ha ellenkező irányba mozognak, akkor a robot képes egy helyben megfordulni. A másik alternatívát a szinkrón hajtás (synchro drive) jelenti, amelynél minden kerék el tud fordulni a tengelye mentén. Ez könnyen vezethetne káoszhoz, ha nem lenne az a kényszer, hogy minden kerék mindig azonos irányba álljon, és azonos sebességgel forogjon. Mind a differenciál, mind a szinkrón hajtás nemholonomikus. Egyes drága robotok holonomikus hajtást használnak, általában három vagy több önállóan irányítható kerékkel.
6	0.1	1	1973-ban Gibbard és Sattherthwaite jóvoltából megszületett a Mechanizmus-tervezés egyik legfontosabb, ún. lehetetlenségi tétele (amely a diktatúrák természetébe/vezérlő-dinamikájába engedett bepillantást), majd 1976-ban Robert Aumann publikált egy nagyszerű, Nobel-díjra érdemes elméletet a játékosok világmodelljéről és az azon belüli következtetésről (lásd. később).
25	0.666667	0	Eddig olyan irányítási módszerekkel foglalkoztunk, amelyek megkívánták a környezet bizonyos fokú ismeretét ahhoz, hogy akár referenciapályát, akár potenciálteret alkothassunk. Ezzel a megközelítéssel kapcsolatban azonban felmerülnek bizonyos problémák. Először is, sokszor nagyon nehéz pontos modellt alkotni a környezetről, különösen ha az komplex vagy nagyon távol van, mint mondjuk a Mars felszíne. Másodszor, még ha sikerül is pontos modellt készítenünk, a számítási nehézségek és a lokalizációs technikák hibája folytán alkalmazhatatlanná válnak ezek a módszerek. Bizonyos esetekben megfelelőbb a reflexszerű ágensek használata, ezt hívják reaktív irányításnak (reactive control).
27	0.4	1	Vegyük észre tehát, hogy a racionalitás egy-egy probléma-környezet esetén elsősorban attól függ, hogy mi a jósági mérce, amivel az ágensek jóságát, hasznosságát mérjük. Ugyanabban a probléma-környezetben más-más jósági mérce esetén akár homlokegyenest különbözőképp cselekvő ágensek lehetnek tökéletesen racionálisak. Például az autóvezető ágens példájánál maradva, ha az lenne a cél, hogy egy veszélyes bűnözőkkel teli autót mindenképp megállítsunk, és ezt csak ütközéssel lehetne elérni, úgy a tökéletesen racionális autóvezető ágens várhatóan összetörné az autóját, ami pont a fordítottja annak, amit fentebb vázoltunk. Mindennek oka tehát a jósági mérce (amivel az ágens és cselekvéseinek jóságát meghatározzuk) különbözősége. Ha a jósági mércét megváltoztatjuk, úgy az addig esetleg tökéletesen racionális ágensünk feltehetően már nem lesz racionális. Valós bonyolultságú környezetek esetén tehát a jósági mérce meghatározása (ami az ágens tervezőjének feladata) sem triviális feladat.
9	0.793103	0	A demodulációt jellemzően arra használják, hogy leegyszerűsítsen állítások kollekcióit használó kifejezéseket, mint például x + 0 = x, x^1 = x és így tovább. A szabályt ki lehet terjeszteni, hogy olyan nem egység klózokkal is tudjon foglalkozni, amelyekben egy egyenlőségi literál megjelenik. * Paramoduláció (paramodulation). Bármely x, y és z termre, ahol az Egyesít (x, z) = θ
15	0.703704	0	A beszéd jelenti az első találkozásunkat a valódi érzékelők szolgáltatta adatok nyers, tisztítatlan világával. Ezek az adatok zajosak, a szó szoros értelmében: a zaj lehet háttérzaj és lehet a digitalizálási folyamat okozta melléktermék; eltérések lehetnek a szavak kiejtési módjában még ugyanannál a beszélőnél is; különböző szavak hangzása ugyanaz lehet és így tovább. Ezen okok miatt a beszédfelismerésre mint valószínűségi következtetési problémára kezdtek el tekinteni.
10	0.242424	0	Nála(G[1], [1, 2], Eredmény(Megy([1, 1], [1, 2]), S[0])) Fontos Sajnos a tudásbázisunkban az ilyen konklúziót semmi sem támasztja alá. Intuitíve persze megértjük, hogy az ágens Megy cselekvése az arany helyzetére nincs hatással, így az még mindig az [1, 2]-ben van, ahogy ott volt az S[0 ]szituációban is. A probléma az, hogy a hatásaxióma kijelenti, hogy mi változik, de nem mond semmit arról, hogy mi nem változik.
3	0.25	1	Modellezzük az aknakereső játékot a következőképpen: a tábla i. sorának j. mezőjéhez rendeljünk egy x[ij] változót, aminek értékkészlete a {0, 1} halmaz. A tábla minden mezőjére írjunk fel egy kényszert az alábbi módon: * ha az (i,j) mező biztonságos (vagy felfedett), vegyük fel az x[ij]=0 kényszert * ha az (i,j) mező megjelölt, vegyük fel az x[ij]=1 kényszert * ha az (i,j) mező felfedett, vegyünk fel egy olyan kényszert, ami a vele szomszédos üres és megjelölt mezőkhöz tartozó változók összegére előírja a mező aknaszámának értékét
7	0.16	0	Most egy nagyon egyszerű logikát, az ítéletkalkulust (propositional logic) mutatjuk be.^[67]^ Áttekintjük az ítéletkalkulus szintaxisát, majd a szemantikáját – annak a módját, ahogy a mondatok igazságát meghatározzuk. Azután megnézzük a maga után vonzást – a relációt egy adott mondat és azon mondat között, amelyik az előbbiből következik –, és megnézzük, hogy hogyan vezet ez egy egyszerű logikai következtetés algoritmushoz. Mindez természetesen a wumpus világban fog lejátszódni.
4	0.916667	0	Az eredeti A^* algoritmust ismertető cikk bevezette a heurisztikus függvények konzisztenciájának feltételét. A heurisztikák monotonitási feltételét a konzisztenciafeltételnek egy egyszerűbb feltétellel való kiváltására Pohl vezette be (Pohl, 1977), de Pearl megmutatta, hogy a két feltétel ekvivalens (Pearl, 1984). Az A^*-ot megelőző számos algoritmus használta a nyitott és a zárt listával ekvivalens fogalmakat. Ezek közé tartozik a szélességi, a mélységi és az egyenletes költségű keresés (Bellman, 1957; Dijkstra, 1959). Különösképpen Bellman munkája mutatta meg az additív útköltség fontosságát az optimalizálási problémák egyszerűsítésében.
25	0.222222	0	Azért, hogy egyszerűvé tegyük a dolgot, feltételezzük, hogy a robotunk lassan mozog sík terepen, és pontos térképe van a környezetéről. (Egy ilyen térkép látható a  ábrán.) Egy mobil robot helyzetét két derékszögű koordinátájával (x, y) és az irányát jellemző szöggel írjuk le, ahogy ez a  (a) ábrán is látható. (Mivel nem foglakoztunk a hozzá tartozó sebességekkel, ez inkább kinematikai, mint dinamikus modell.) Ha ezt a három értéket egy vektorba fogjuk össze, akkor bármely állapot megadható X[t] = (x[t], y[t], q[t]) ^⊤ formában.
9	0.758621	0	Ebből a tényből következik, hogy ha S′ lezárásában megjelenik az üres klóz, akkor ez szintén megtalálható az S rezolúciós lezárásában. Ez azért van, mivel az üres klóz semmilyen más klóznak sem alappéldánya. Összefoglalva: megmutattuk, hogyha S nem kielégíthető, akkor létezik az üres klóznak egy véges méretű rezolúciós szabályt alkalmazó levezetése.
22	0.074074	1	Az általános nyelvészet a nyelv szabályait írja le: a fonológia a hanggal, beszéddel, a morfológia a szavak szerkezetével, a szintaxis mondatok szerkezetével, a szemantika a szavak és szövegek jelentésével, a pragmatika pedig az emberek motivációival és céljaival kapcsolatos szabályokat. [1][2] Ezek ismerete elengedhetetlen, de legalábbis komoly segítséget nyújt egy természetes nyelvű szöveg hatékony feldolgozásához. A kontrasztív nyelvészet módszereket ad a különböző nyelvek közötti gyakorlati (szintaxisbeli) hasonlóság kihasználására, például egyes szavak előállítására vagy jelentésük meghatározására, ha az adott szó ismert egy másik (hasonló) nyelven. A lexikográfia „termékei”, azaz a szótárak, szógyűjtemények fontos alapján képezik a szövegfeldolgozásnak. A pszicholingvisztika arra keresi a választ, hogy hogyan dolgozza fel a nyelvet az ember, ami alapja lehet egy mesterséges, számítógépes feldolgozási módszernek is. A matematikai, azon belül statisztikus nyelvészet arra ad módszereket, hogyan lehet szöveget feldolgozni előzetesen gyűjtött statisztika alapján. [1]
13	0.681818	0	amelyet ismételten úgy kell értelmezni, hogy egy egyenlethalmazt képvisel, amely egyenletek mindegyike a változók meghatározott értékeire vonatkozik. Lesznek olyan esetek, amikor egy még általánosabb felírást használhatunk, valamilyen e háttértény feltételével:
9	0.62069	0	Gödel tétele ellenére, a rezolúcióalapú tételbizonyításokat széles körben alkalmazták matematikai tételek levezetésére, beleértve néhány olyan tételt is, amelyre előzőleg nem volt ismert bizonyítás. A tételbizonyításokat – más alkalmazások mellett – használták például hardvertervezés verifikálására vagy logikailag helyes programok generálására.
6	0.1	1	A nimber definíciójából levezethető, hogy egy véges játékban akkor és csak akkor van a kezdőnek nyerő stratégiája, ha a játék nimbere nem nulla. Ennél kicsit általánosabb állítás is igaz, miszerint a kezdőnek akkor és csak akkor van nyerő stratégiája, ha a kezdőpozícióból egy lépésben nulla nimberű állapotba lehet jutni.
26	0.142857	0	Világos, hogy sok mindent, köztük olyan dolgokat is, amelyekhez általános meggyőződésünk szerint komoly emberi éleselméjűség és értelem szükséges, a számítógépek ugyanolyan jól el tudnak végezni, mint az emberek, vagy akár még jobban is. Ez persze nem jelenti azt, hogy a számítógépek éleselméjűséget és értelmet tanúsítanának az ilyen dolgok végrehajtásakor: ezek nem részei viselkedésüknek (erről a kérdésről majd máshol beszélünk), hanem inkább arról van szó, hogy gyakran téves az első feltételezésünk az adott tevékenység elvégzéséhez szükséges mentális folyamatról. Ugyanakkor az is igaz, hogy számtalan feladatban a számítógépek (finoman szólva) nem járnak az élen, és ilyen Turing feladata, a nyíltvégű beszélgetések folytatása is.
1	0.310345	1	Nagy térerő szükséges a kontrasztanyag áthaladásának sebességét és mértékét leképező perfúziós vizsgálatokhoz is. Ezzel nem az egyes erekben áramló vért jelenítjük meg, hanem egy adott szövet teljes tömegében, egy adott időpontban tartózkodó összes vérmennyiséget. Ezek elsősorban a központi idegrendszer, illetve a szívizom vizsgálatára alkalmazhatók. Megfelelő mérési technikával a vértérfogat mellett a vér áthaladási ideje is mérhető, aminek főleg agyi ischaemias folyamatokban, a gyógyulási kilátásokat illetően van klinikai jelentősége.
20	0.821429	0	A kernelgépek teljes mélységű tárgyalása meghaladja ennek a könyvnek a kereteit, de a fő gondolatot egy példán keresztül illusztráljuk. A  (a) ábra egy kétdimenziós bemeneti teret mutat, amelyet az x = (x[1], x[2]) attribútumok írnak le. A pozitív példák (y = +1) egy kör alakú rész belsejében, a negatív példák (y = –1) azon kívül helyezkednek el. Nyilvánvaló, hogy a probléma megoldására nem létezik lineáris szeparátor. Tegyük fel, hogy valamilyen számított tulajdonságok segítségével új formára hozzuk a példákat – azaz az összes bemeneti x vektort leképezzük a tulajdonságértékekből formált új, F(x) vektorra. A példában használjuk a következő három tulajdonságot:
17	0.133333	0	A következő eldöntendő kérdés az állapotsorozatok hasznosságának a kiszámítása. Tekinthetjük ezt a kérdést a többattribútumú hasznosságelmélet (multiattribute utility theory) egy kérdésének (lásd  alfejezet) azzal, hogy minden s[i] állapotot az [s[0], s[1], s[2], ...] állapotsorozat egy attribútumának veszünk. Egy egyszerű kifejezés eléréséhez, ami az attribútumokból épül fel, fel kell tételeznünk valamilyen preferenciafüggetlenséget. A legtermészetesebb feltevés az, hogy az ágens preferenciái az állapotsorozatok között stacionáriusok (stationary). A preferenciákra vonatkozó stacionaritás a következőket jelenti: ha két állapotsorozat, [s[0], s[1], s[2],…] és  , ugyanazzal az állapottal kezdődik (például  ), akkor a két sorozat a preferencia-sorrendjének ugyanannak kell lennie, mint az [s[1], s[2],…] és az  sorozatoknak. Ez tehát azt jelenti, hogy ha egy holnaptól kezdődő lehetséges jövőbeli eseménysort egy másik eseménysorral szemben preferálunk, akkor ez nem változhat, ha az eseménysor a mai naptól kezdődne. A stacionaritás egy meglehetősen ártalmatlannak tűnő feltevés, nagyon erős következményekkel: bizonyítható, hogy stacionaritás esetén a sorozatokhoz csak kétféle módon rendelhetők hasznosságok: 1. Additív jutalmak (additive rewards): egy állapotsorozat hasznossága ekkor
6	0.1	1	A 18. században született meg a sakk gépek ötlete. 1912-ben Leonardo Torres y Quevedo megalkotta a történelem első sakk gépét El Ajedrecista-t. A tábla alatti elektromágnesek segítségével automatikusan lejátszotta a végjátékot három figurával, mozgatva egy királyt és egy bástyát, az ember által vezérelt király ellen. [1]
5	0.181818	1	Mi következik most? Ugyebár az algoritmusunk most a WA változó szintjén jár, ahol a FOR-ciklus során legutóbb a RED értéket adta neki. Mivel azonban ez az értékadás sajnos ellentmondásra vezetett, ezért tovább kell lépnünk. Az algoritmus most tehát a soron következő GREEN értéket rendeli a WA változóhoz (WA=GREEN).
7	0.28	0	Most, hogy definiáltuk az ítéletkalkulus szemantikáját, létre tudunk hozni egy tudásbázist a wumpus világ számára. Az egyszerűség kedvéért csak a csapdákkal fogunk törődni, a wumpust magát feladatként az olvasóra hagyjuk. A tudás, amelyet most leírunk, elégséges ahhoz, hogy elvégezzük a  alfejezetben nem formálisan már elvégzett következtetést.
11	0.576923	0	A tervkészítési gráf csak ítéletlogikai tervkészítési problémákra alkalmazható – olyanokra, melyek nem tartalmaznak változókat. Ahogy a  alfejezetben említettük, mind a Strips, mind az ADL reprezentáció ítéletlogikára alakítható. A nagyszámú entitást tartalmazó problémákat ez jelentősen felduzzaszthatja a cselekvéssémák számában. Ennek ellenére a tervkészítési gráfok hatékony eszköznek bizonyultak a nehéz tervkészítési problémák megoldásában.
25	0.703704	0	Szoftverarchitektúrának (software architecture) hívják az algoritmusok strukturálásának módszertanát. Egy architektúra általában nyelveket és eszközöket tartalmaz programok írásához, valamint egy átfogó szisztémát, amely alapján a programokat össze lehet illeszteni.
16	0.652174	0	Az információ értéke abból a tényből származik, hogy az információval valaki az aktuális helyzetben sokkal alkalmasabb cselekedeteket tud megválasztani. Az információval lehetségessé válik a helyzetek megkülönböztetése, ezzel szemben az információ nélkül a lehetséges helyzetek feletti átlagot nézve kell cselekedni. Általánosan fogalmazva, az információ értékét a várható értékek különbsége definiálja az információ megszerzése előtt és után.
25	0.074074	1	Típusai: * kétdimenziós látóérzékelő különálló tárgyak bináris érzékelésére, * kétdimenziós látóérzékelő különálló tárgyak szürke árnyalatai szerinti érzékelésére, * kétdimenziós látóérzékelő egymással érintkező, vagy átfedésben lévő tárgyak érzékelésére, * kétdimenziós ellenőrző készülékek, * kétdimenziós vonalkövetők, * különálló tárgyról háromdimenziós információk kiszűrésére alkalmas rendszerek, * perspektívikus ábrázolás, sztereotechnika, strukturált megvilágítás vagy pásztázó keresés elvén, * háromdimenziós információ kiszűrése rendezetlen tárgyhalmazokról, * térbeli helyszínelemzés mobil robotok navigációjához, útvonalkereséséhez és az akadályok elkerüléséhez.
10	0.969697	0	Feltételezhető, hogy egy szemantikus hálóban a sima és az egy vonallal bekeretezett kapcsolat közötti szintaktikai különbségtétel felesleges, mert az utóbbi kapcsolatok csak a kategóriákhoz tartoznak. Az öröklődési algoritmusnak elég lenne feltételeznie, hogy a kategóriához csatolt sima kapcsolat szándékoltan a kategória minden tagjára vonatkozik. Mutassa meg a lehetséges hibák megadásával, hogy az érv hamis.
5	0.181818	1	A kapott {SA=RED, NSW=GREEN, NT=GREEN} behelyettesítés már jól láthatóan konzisztens. Megfigyelhetjük továbbá, hogy a fokszám (DEG) heurisztika azzal, hogy elsőként a legnagyobb fokszámú SA változót kötötte le, a mostani (NSW és NT változóval kapcsolatos) választásainkat is leegyszerűsítette, azaz már csak kevesebb értékből tudunk választani. A fokszám heurisztikának tehát ez a lényege, écája, ily módon gyorsítja a keresést.
4	0.916667	1	Konzisztens egy heurisztikus függvény, ha bármely n csúcs esetén a belőle a cselekvéssel elérhető bármely n' csúcsra h(n) ≤ c(n,a,n') + h(n'), azaz ha az algoritmus sosem becsüli túl a következő lépés költségét. Teljes indukcióval könnyen látható, hogy ekkor a teljes hátralevő utat sem fogja túlbecsülni, tehát elfogadható is. Ha n' egy célcsúcs, akkor h(n') = 0, h(n) ≤ c(n,a,n'), a célcsúcsot megelőző csúcsra tehát teljesül az elfogadhatóság követelménye. Tegyük fel, hogy bármely a céltól k csomópontra lévő m' csúcsra is teljesül. Ekkor bármely olyan m csúcs, amelyhez létezik olyan b cselekvés, amely m-ből m'-be visz, a konzisztencia definíciója miatt h(m) ≤ c(m,a,m') + h(m'). De mivel h(m') nem nagyobb, mint az m' csúcsból egy célcsúcsba jutás költsége, így a konzisztencia miatt h(m) sem nagyobb, mint az m'-be jutás költsége plusz az m'-ből egy célcsúcsba jutásé. Így tehát bármely m-re is teljesül az elfogadhatóság követelménye. Ezzel beláttuk, hogy bármely csúcs, amelyből létezik út egy tetszőleges célcsúcsba, kielégíti az elfogadhatóság feltételét, ha kielégíti a konzisztencia feltételét egy adott h esetén. Olyan csúcsokkal már nem is kell foglalkozni, amelyekből nem lehet eljutni egy célcsúcsba, hisz ezeknél a célcsúcsba jutás költsége tekinthető végtelen nagynak, ezért h tetszőlegesen nagy értéket vehet fel.
10	0.272727	0	Feltételezve, hogy lehetetlen cselekvésekkel nem foglalkozunk, vegyük észre, hogy a definícióban ⇔ szerepel ⇒ helyett. Ez azt jelenti, hogy a folyó esemény akkor és csak akkor lesz igaz, ha a jobb oldali rész igaz. Más szóval minden folyó eseménynek a következő állapotban érvényes igazságértékét a cselekvésnek és az aktuális állapotban érvényes értékének a függvényeként határozzuk meg. Ez azt jelenti, hogy a következő állapot teljesen meghatározott az aktuális állapottól kiindulva, és így pótlagos keretaxiómákra nincs szükség.
19	0.181818	0	Azt kívánjuk meg, hogy a kezdeti tér (mielőtt bármelyik példát megvizsgáltuk volna), az összes elképzelhető hipotézist tartalmazza. Ezt úgy biztosítjuk, hogy a G halmazt egyszerűen az Igaz értékre állítjuk (az a hipotézis, amely mindent tartalmaz), az S halmazt pedig egyszerűen a Hamis értékre állítjuk (az a hipotézis, amelynek kiterjedése üres).
10	0.515152	1	A varázslók itt olyan ágensek, akiknek tudása hiányos (bizonytalan). A környezetük állapota csak részben hozzáférhető számunkra. A szilárd tudásuk mellett hiedelmei is vannak, így a cselekvéseit hiedelmi állapottérben kell értelmezni.
11	0.307692	0	Emlékezzünk vissza, hogy a függvényszimbólumok hiányában a tervkészítési probléma állapottere véges, ezért teljes gráf keresési algoritmusok, mint például az A* keresés, egyben teljes tervkészítő algoritmusok is.
16	0.956522	1	Mivel az adatgyűjtés hétköznapi elvárás ma már, és teljesítését a szűkös anyagi források nem akadályozhatják meg, ezért egy olyan szervezési szint felépítése szükséges, melynek segítségével ez a feladat elvégezhető, és az anesztézia adatállománya felépíthető. Tehát a legfontosabb és elsődleges döntés az, hogy milyen adatokból építsük fel az aneszteziológia rendszerét. Ezután következik az ezt kiszolgáló szervezési szintek felépítése, mely minimálisan 3 fokozatú. 1. Az első szint az adatbevitel utólagos végrehajtása. Ez azt jelenti, hogy hagyományosan kézzel vezetik a jegyzőkönyvet és az anesztézia megtörténte után zajlik a számítógép feltöltése. 2. A második szint a megosztott adatbevitel, ami jelentheti a kézi jegyzőkönyvvezetést és feltöltést csakúgy, mint az első szintnél, azonban ha arra alkalmas monitor-rendszerrel dolgozunk, a trendek beolvasása kapcsolatépítéssel lehetséges. 3. A harmadik szintet az automatikus jegyzőkönyvkészítő rendszerek képviselik. Mind az első, mind a második esetben az aneszteziológiai ambulancia és az ébredő szoba adatai is értelemszerűen rögzítésre kerülnek. A harmadik fokozat jellemzői közé tartozik az, hogy hálózat igénybevételével integrálja a pre- és posztoperatív adatokat.
24	0.333333	0	Tekintettel, hogy az élek azoknak a képhelyeknek felelnek meg, ahol a fényességben hirtelen változás tapasztalható, egy naiv ötlet az lehetne, hogy a képet differenciáljuk, és azokat a helyeket keressük meg, ahol az I'(x) derivált értéke nagy. Nos, az ötlet majdnem működőképes. A  (b) ábrán láthatjuk, hogy az x = 50 csúccsal együtt más helyeken, másodlagos csúcsok is megjelentek (például x = 75), amiket tévesen valódi éleknek fogadhatunk el. A jelenség oka a kép zajossága. Ha a képet először simítjuk, akkor a felesleges csúcsok eltűnnek, ahogy azt a (c) mutatja.  ábra - Felül: Az I(x) intenzitásprofil egy egydimenziós részlet mentén egy lépcsőfok élén át. Középen: Az intenzitás deriváltja, I'(x). A függvény nagy értékei éleknek felelnek meg, de a függvény zajos. Lent: Az intenzitás simított változatának deriváltja, (I ∗G[ ][σ])', amely I ∗ G'-hoz hasonlóan egy lépésben számolható. Az x = 75 pontban levő zajos él jelölt eltűnt. Felül: Az I(x) intenzitásprofil egy egydimenziós részlet mentén egy lépcsőfok élén át. Középen: Az intenzitás deriváltja, I'(x). A függvény nagy értékei éleknek felelnek meg, de a függvény zajos. Lent: Az intenzitás simított változatának deriváltja, (I ∗G σ)', amely I ∗ G'-hoz hasonlóan egy lépésben számolható. Az x = 75 pontban levő zajos él jelölt eltűnt.
2	0.105263	0	Egy racionális ágens (rational agent) olyan, amely helyesen cselekszik – elméletileg megfogalmazva az ágensfüggvény táblázatában minden bejegyzés helyesen van kitöltve. Helyesen cselekedni nyilvánvalóan jobb, mint helytelenül, de mit is jelent helyesen cselekedni? Első közelítésben azt mondjuk, hogy a helyes cselekedet az, amely az ágenst a legsikeresebbé teszi. Tehát szükségünk lesz egy módszerre, amivel a sikeresség mérhető. A környezetnek, valamint az ágens érzékelőinek és beavatkozóinak leírásával együtt ez az ágens feladatát teljes mértékben specifikálja. Ezáltal precízebben definiálhatjuk, mit is jelent racionálisnak lenni.
2	0.526316	1	A következő blokkban az evéssel kapcsolatos tervek szerepelnek. Az első terv arról gondoskodik, hogy amennyiben az ágens eat_at_my_pos célja meghiúsul (enni szeretne ott, ahol már nincs ennivaló), akkor a Jason ne jelezzen hibát (ha az eredeti terv meghiúsult, akkor az itt visszaadott true érték miatt a Jason végül sikeresnek értékeli a cselekvést - ami az adott helyzetben (amikor tényleg nincs mit megenni az adott pozíción) elfogadható működés.
23	0.277778	0	Az első tényező – a P(Q|D, r) – a lekérdezés valószínűsége, feltéve egy adott releváns dokumentumot. Hogy megbecsülhessük ezt a valószínűséget, egy nyelvi modellt kell választanunk, amely megadja, hogy milyen kapcsolatban állnak a lekérdezések a releváns dokumentumokkal. Az egyik népszerű választás a dokumentumok unigram szómodellel történő reprezentálása. Ez az információkeresésben úgy is ismert, mint a szózsák (bag of words) modell, mivel a szavak dokumentumon belüli előfordulási gyakorisága az, ami számít, nem a sorrendjük. Ebben a modellben a „man bites dog” és a „dog bites man” (nagyon rövid) dokumentumok azonosan fognak viselkedni.^[245] Világos, hogy eltérő jelentésűek, azonban az is igaz, hogy mindketten relevánsak a kutyákat és a harapásokat tartalmazó lekérdezésekre. Ezek után, hogy kiszámolhassuk egy lekérdezés valószínűségét egy adott dokumentum esetében, egyszerűen össze kell szoroznunk a lekérdezésben található szavak valószínűségeit a dokumentum unigram modellnek megfelelően. Ez a lekérdezés naiv Bayes- (naive Bayes) modellje. Q[j]-vel jelölve a lekérdezés j-edik szavát, azt kapjuk, hogy:
25	0.703704	0	A modern robotikai szoftverarchitektúráknak sikeresen kell ötvözniük a reaktív irányítást és a modellalapú, tudatos vezérlést. Sok szempontból a reaktív és a tudatos irányítás eltérő előnyökkel és hátrányokkal rendelkezik. A reaktív szabályozás szenzoros információn alapul, és nagyon jól használható valós idejű, alacsony szintű döntéshozásra. Ugyanakkor ritkán ad globális szinten elfogadható megoldást, mert a globális döntések olyan információt igényelnek, amely a döntés meghozatalakor még nincs a robot birtokában. Ilyen esetekben a modellalapú tervezés a megfelelő.
14	0.73913	1	A Wang-Mendel módszer a hitelességi értéket kiegészíti még egy szorzó tényezővel. Ennek a tényezőnek az értéke alap esetben egy, így nem befolyásolja a szabály hitelességi értékét. A javaslat szerint e tényező nagyságát, a szakemberek módosíthatják, nulla és egy között. Így lehetőség van, azon szabályok hitelességi értékének csökkentésére, amivel a szakember nem ért egyet, megnövelve ezzel a szabály lecserélési valószínűségét a következő tanítási fázisban.
24	0.166667	1	A látható fény tartományában készített képek (mint pl. endoszkópiás kép) színei a valóságnak mindenben megfelelnek, mert képalkotásra ugyanolyan energiaféleséget használtunk, amilyet a szemünk is érzékel. A kapott adatok csakis a fény számára hozzáférhető felszínre korlátozódnak.
14	0.826087	0	A fuzzy logika tehát egy igazságfüggvényen alapuló rendszer, és ez komoly nehézségeket okoz. Tegyük fel például, hogy T(MagasSzemély(Nóri)) = 0,6 és T(Nehéz(Nóri)) = 0,4. Ekkor azt kapjuk, hogy T(MagasSzemély(Nóri) ∧ Nehéz(Nóri)) = 0,4, ami elfogadhatónak tűnik, de az is adódik, hogy T(MagasSzemély(Nóri) ∧ ¬MagasSzemély(Nóri)) = 0,4, ami már nem. Világos, hogy a probléma amiatt lép fel, hogy az igazságfüggvényen alapuló megközelítés nem képes kezelni a pozitív és negatív korrelációkat az állítás részei között.
26	0.357143	0	Figyelemre méltó Turing válasza erre az ellenvetésre. Felhozhatott volna érveket amellett, hogy a gépek valóban rendelkezhetnek tudattal (avagy viszonyulhatnak fenomenológiailag, illetve viselkedhetnek intencionálisan). Ehelyett Turing úgy érvel, hogy ez a kérdés éppen úgy rosszul lett megfogalmazva, mint a „Tudnak-e a gépek gondolkodni?” kérdés. Ráadásul miért kellene erősebb kritériumokat várni el a gépek esetében, mint az embereknél? A mindennapi életben végső soron nincsen semmilyen közvetlen bizonyítékunk a többi ember belső mentális állapotairól. Mégis, amint Turing rámutat, „ahelyett hogy állandóan erről vitatkoznánk, azzal az udvarias feltételezéssel (polite convention) élünk, hogy mindenki képes gondolkodni”.
6	0.1	1	Az előbbi fólián láthatjuk, hogy az unió-konzisztencia feltétel az ágensek stratégiájára vonatkozik. Jelentése (szóban, röviden): egy játékos si stratégiája akkor unió-konzisztens, ha minden E és F információs halmazra teljesül, hogy ha E-ben és F-ben is ugyanazt teszi si alapján a játékos, akkor E és F uniójában is ugyanazt teszi.
23	0.722222	0	Most már tudjuk, hogyan kell kiszámítani a P(F|E) valószínűséget bármely (francia, angol) mondatpárra. Azonban amit igazából tenni akarunk az az, hogy egy adott angol mondat esetén megtaláljuk azt a francia mondatot, amely maximalizálja ezt a valószínűséget. Nem sorolhatunk fel egyszerűen mondatokat: 10^5 francia szó esetén 10^5n n hosszúságú mondat lehetséges, és számos összerendelés mindegyikre. Még ha csak a 10 leggyakoribb szó-szó fordítást tekintjük minden egyes szóra, és csak 0 és ±1 eltolást veszünk figyelembe, akkor is 2^n/210^n mondatot kapunk, ami azt jelenti, hogy n = 5 esetén még fel tudnánk őket sorolni, de n = 10 esetén már nem. Ehelyett meg kell keresnünk a legjobb megoldást. Az A^* keresés hatékonynak bizonyult a feladatra (Germann és társai, 2001).
24	0.083333	1	Ahhoz, hogy az objektumokat alakjuk szerint hatékonyan azonosítani tudjuk, a “alakleírók” meghatározásának folyamatából fontos, hogy kizárjuk azokat az élpontokat, melyek nem az objektum kontúrpontjai. Általános esetben ugyanis egy képen számos egyéb - pl. a háttérhez vagy az objektum mintázatához tartozó - élpontot is megfigyelhetünk. Az alábbiakban az alakfelismerés szempontjából fontos élek kiszűrésére mutatunk be egy ún. felület-deformáción alapuló közelítő megoldást.
16	0.695652	0	Az információ értékére egyszerű általános formulát adni. Rendszerint feltesszük, hogy pontos bizonyítékaink vannak egyes E[j]valószínűségi változók értékeiről, így a teljes információ értéke (value of perfect information) (TIÉ) elnevezést használjuk.^[170] Legyen az ágens jelenlegi tudása E. Ekkor az α pillanatnyi legjobb cselekvés értékét a következő definiálja:
24	0.833333	1	Az alakzatfelismerő algoritmusok nagy része ún. jellemzők alapján működik. A kép egészének vizsgálata helyett kulcspontokat, struktúrákat keresnek a képen és az egyes találatokat leírják bizonyos tulajdonságaikkal. A betanítási fázisban csak az így kapott leírókat tárolják, majd a felismerési fázisban leírókat hasonlítanak össze. Ezzel a keresés gyorsul, illetve robusztusabb, jobb invariáns tulajdonságokkal rendelkező működés érhető el. A manapság leggyakrabban alkalmazott alakzatfelismerők – például a Scale Invariant Feature Transform és a Speeded Up Robust Features – jellemző alapon működnek.
4	0.083333	0	A mohó legjobbat-először keresés a mélységi keresésre hasonlít abból a szempontból, hogy egyetlen út végigkövetését preferálja a célig, azonban zsákutcába jutva visszalép. Ugyanazokkal a problémákkal küszködik, mint a mélységi keresés – nem optimális és nem teljes (mert elindulhat egy végtelen úton és soha sem tér vissza újabb lehetőségeket kipróbálni). A mohó keresés legrosszabb esetre számított (worst-case) idő- és tárigénye O(b^m), ahol m a keresési tér maximális mélysége. Jól megválasztott heurisztikus függvénnyel a komplexitás azonban jelentősen csökkenthető. A csökkenés mértéke az adott problémától és a heurisztikus függvény minőségétől függ.
3	0.916667	1	Példa: A fenti feladatban az állapotátmenet-függvény ahhoz az állapothoz, amelyben három hittérítő és két kannibál áll a bal parton, egy kannibál pedig a jobb parton a csónakkal, azt az (cselekvés, állapot) párt rendeli hozzá, amely azt írja le, hogy az egy szem kannibál visszaül a csónakba, és visszaevez a bal partra.
26	0.214286	0	Turing (Turing, 1936) és Gödel (Gödel, 1931) munkássága révén közismert, hogy egyes matematikai kérdések elviekben is megválaszolhatatlanok bizonyos formális rendszerekben. A leghíresebb példa erre Gödel nemteljességi tétele (lásd  alfejezet). Ez, röviden összefoglalva, azt mondja ki, hogy bármely F formális rendszerben, amelyben az aritmetika megfogalmazható, lehetséges egy G(F) Gödel-mondatot konstruálni, amelyre igaz, hogy * G(F) egy mondat F-ben, de F-en belül nem bizonyítható. * Ha F konzisztens, akkor G(F) igaz.
7	0.92	1	- Tetszőleges mondat átalakítható konjugált normált formára az ekvivalenciák és következtetések kiküszöbölésével, a negációk hatáskörének csökkentésével, majd a zárójelek kifejtésével. Erre láttunk példát a Rezolúció tárgyalásánál.
17	0.6	0	A  ábrán látható DDH-hoz tartozó háromlépéses előrenéző keresési fa egy részét a  ábra mutatja. Mindegyik háromszög alakú csomópont egy olyan hiedelmi állapot, amiben az ágens egy A[t+i] döntést hoz i = 0, 1, 2, ... esetén. A kerek csomópontok a környezet válaszaihoz tartoznak, nevezetesen hogy milyen E[t+i] megfigyelés fog felbukkanni. Látható, hogy nincsen véletlen csomópont, ami a cselekvések kimeneteléhez tartozna. Ez azért van így, mert egy cselekvésnél a hiedelmi állapot frissítése a konkrét kimeneteltől függetlenül determinisztikus.
8	0.709677	0	Ha a célunk valami más lenne, és nem a kapuszintű tervezés helyességének ellenőrzése, akkor az ontológiánk is más lenne. Például ha az érdekelne minket, hogyan lehetne a hibákat a hibás áramkörökben megtalálni, akkor valószínűleg jó ötlet lenne a vezetékekkel is foglalkozni az ontológiában, mivel egy hibás vezeték meghamisíthatja a rajta keresztülhaladó jelet. Az időzítési hibák megtalálásához a kapuk késleltetésével kapcsolatos fogalmakat kellene leírni. Ha az érdekelne minket, hogy hogyan lehet egy nyereséges terméket tervezni, akkor az áramkörök költségének és sebességének a piacon jelen lévő egyéb termékekkel történő összehasonlíthatósága lenne fontos.
22	0.925926	1	A beszédfelismerő rendszerek többféleképpen osztályozhatók. Egyik lehetséges szempont, hogy egyedülálló szavakat, kifejezéseket, vagy mondatokat, szövegeket ismernek fel. Egy másik osztályozási szempont, hogy a rendszer beszélő-függő vagy beszélő-független. Az igazi cél a folyamatos beszédet felismerő rendszerek elkészítése. Ezek képesek a folytonos beszéd felismerésére, a mondatok megértésére. Létrehozásuk sokkal nehezebb feladat, mint a szófelismerő rendszereké.
4	0.791667	0	Egy TRTA^* ágens garantáltan megtalálja a célt akármilyen véges, biztonságosan feltárható környezetben. Az A^*-gal ellentétben azonban nem teljes a végtelen állapotterekben – vannak olyan esetek, amikor az ágenst reménytelenül félre lehet vezetni. Egy n állapotból álló környezetet legrosszabb esetben O(n^2) lépésben tár fel, de sokszor jóval hatékonyabb ennél. A TRTA^* ágens a cselekvéskiválasztási és a frissítési szabályokkal különböző módon definiálható online ágensek nagy családjának egy partikuláris tagja. Ezzel a családdal, melyet eredetileg sztochasztikus környezetekhez találtak ki, a  fejezetben foglalkozunk.
5	0.818182	1	Visszalépéses keresés: A változókhoz sorban, egyenként próbál értéket rendelni. Amennyiben a választott érték kielégíti a kényszereket, az algoritmus továbblép a következő változóhoz; ha nem, másik értéket választ. Ha nincs választható érték, az algoritmus visszalép az előző változóhoz.
3	0.916667	1	ii) A kérdésfeltevés arra utal, hogy kíséreljünk meg két irányból keresni. Ezzel a probléma nyílván a link inverzének meghatározása. Egy hiperlink nem invertálható művelet: a feladat, hogy egy weblapról eldöntsük, mely más weblapok hivatkoznak rá, maga is egy keresés, a teljes internet átkutatása az adott hivatkozás után, majd a találatok tárolása, és kifejtése. Ehhez nyílván szükséges valamiféle keresőmotor, így a hátrafelé keresés lényegesen lassabban dolgozna. Probléma továbbá, hogy az egy oldalra mutató linkek általában (kivételes esetektől eltekintve, pl. portálok, galériák) összemérhetetlenül nagyobb, mint az oldalon elhelyezett, kifelé mutató hivatkozásoké. Emiatt a visszafelé keresés feleslegesen sokat dolgozna.
11	0.846154	0	Néha a probléma hatékonyan megoldható, ha észrevesszük, hogy a negatív kölcsönhatások kizárhatók. Azt mondjuk, hogy egy feladatnak sorba rendezhető részcéljai (serializable subgoals) vannak, ha létezik a részcéloknak egy olyan rendezése, hogy a tervkészítő sorrendben elérheti őket anélkül, hogy a korábban már elért részcélokat felszámolná. A kockavilágban például, ha a cél egy torony megépítése (pédául az A a B-n, ami pedig az asztalon elhelyezkedő C-n van), akkor a részcélok felülről lefelé sorrendezhetők: ha először elérjük, hogy C az asztalon van, akkor a továbbiakban – mialatt a további részcélokat teljesítjük – ennek megszüntetésére soha nem lesz szükség. Egy tervkészítő, ami az alulról felfelé trükköt alkalmazza, a kockavilág bármely problémáját képes megoldani visszalépés nélkül (bár nem mindig a legrövidebb tervet adja).
6	0.95	0	A minimax algoritmus feltételezi, hogy a játékosak felváltva lépnek, az olyan kártyajátékokban azonban, mint a whist vagy a bridzs, mindig a leütés győztese indul a következőnek. a. Módosítsa algoritmusát, hogy e játékokra is megfelelően működjön. Feltételezheti, hogy rendelkezésére áll a Győztes (leütés) függvény, amely azt adja vissza, hogy az adott leütést mely kártya nyerte meg. b. Rajzolja fel a 6. szakasz - A várhatóminimax komplexitása részben látható első leosztásra a játékfát.
5	0.181818	1	A fentebbi táblázat alapján az MRV heurisztika az NT, Q, és V változókat javasolja, amely halmazon a DEG heurisztika sem tud szűkíteni. Tehát marad a fix sorrend alapján történő választás az említett 3 változóból. Ezek szerint az NT változót választjuk, és ehhez próbálunk meg értéket rendelni. Az LCV heurisztika szerint az NT változó értékkészletének immáron egyetlen eleme a következő heurisztikus értéket kapja: {GREEN(0)}. Ennek oka ugyanaz, mint az előbbi értékadási lépésnél, a WA változó esetében. Az NT változóba befutó élek már mind konzisztensek, avagy a szomszédainak akármelyik értékéhez (jelenleg már egyetlen) értékéhez találunk konzisztens értéket az NT változó értékkészletében. Azaz amennyiben NT-nek a GREEN értéket adnánk, nem zárnánk ki a szomszédainak az értékkészletéből egyetlen elemet/értéket sem. Ezért ad zérust az LCV heurisztika a GREEN értéknek. ...és hát ettől függetlenül is, mivel NT-nek mindössze ez az egy értéke van, nyilván ezt választjuk (NT=GREEN).
1	0.62069	0	A mikrovilágok legismertebbike a kockavilág lett, amely egy asztalra (vagy gyakrabban egy szimulált asztalra) helyezett tömör geometriai testekből áll (lásd  ábra). Az ilyen világban értelmezett feladat a kockák egy bizonyos átrendezése egy olyan robotkar segítségével, amely egyszerre egyetlenegy kockát képes megfogni. A kockavilág otthont adott David Huffman gépi látási projektjének (Huffman, 1971), David Waltz gépi látási és kényszerterjesztés-kutatásának (Waltz, 1975), Patrick Winston tanulási elméletének (Winston, 1970), Terry Winograd természetes nyelvfeldolgozási programjának (Winograd, 1972) és Scott Fahlman tervkészítő programjának (Fahlman, 1974).  ábra - Egy elrendezés a kockavilágban. A Shrdlu robot (Winograd, 1972) éppen sikeresen teljesítette a „keresd meg azt a blokkot, ami a kezedben tartottnál magasabb, és tedd a dobozba” utasítást. Egy elrendezés a kockavilágban. A Shrdlu robot (Winograd, 1972) éppen sikeresen teljesítette a „keresd meg azt a blokkot, ami a kezedben tartottnál magasabb, és tedd a dobozba” utasítást.
10	0.060606	1	A fenti leíró nyelvekkel való következtetésekhez először a fogalom kifejezések normálalakját kell venni. Ha egy AL-ben vett kifejezés normálalakja nem a fenékjel, akkor az kielégíthető, interpretálható. A leíró nyelvek következtető algoritmusaiból kettőt érdemes megemlíteni.
21	0.0625	0	A jutalom fogalmát a  fejezetben vezettük be, ahol a Markov döntési folyamatok (Markov decision process, MDP) optimalitásának definiálására szolgált. Optimális stratégiának neveztük azt a stratégiát, amely maximálja a várható összjutalmat. A megerősítéses tanulás (reinforcement learning) feladata az, hogy optimális (vagy közel optimális) stratégiát tanuljunk az adott környezethez. Míg a  fejezetben az ágensnek a teljes környezeti modell és a jutalomfüggvény a rendelkezésére állt, addig a jelen fejezetben egyikről sem feltételezünk semmilyen előzetes tudást. Képzelje el, hogy egy új, ismeretlen játékot játszik, amelynek nem ismeri a szabályait. Nagyjából száz lépés után az ellenfele bejelenti: ön vesztett. Dióhéjban ez jellemzi a megerősítéses tanulást.
2	0.894737	1	A kérdés tulajdonképpen beugratós. Két ágensprogram különböző, ha különbözőképpen működik (más algoritmust valósít meg), de ekvivalens, ha ugyanarra a bemenetre ugyanazt az eredményt adja (ugyanarra az érzékeléssorozatra ugyanazzal a cselekvéssel reagál). Így azt mondhatjuk, hogy lehetséges több különböző ágensprogram, amely ugyanazt az ágensfüggvényt valósítja meg, de ekkor ezek az ágensprogramok ekvivalensek!
27	0.4	1	Más környezetben más feladattal szembesülhet az ágens. Olyankor elképzelhető, hogy egészen más programra volna szüksége ahhoz, hogy korlátozottan optimális legyen. Ha például házi-robotunkat a ház előtti kert rendezésére is szeretnénk befogni, akkor programját ennek megfelelően kellene módosítani (hiszen a kerti körülmények mások, mint a házon belüli körülmények, és ezért a házon belüli működés várhatóan odakint nem volna optimális). Sajnos azonban elképzelhető, hogy a megváltozott környezetben az adott architektúra (pl. házi-robotunk hardveres felépítése) koránt sem volna elegendő ahhoz, hogy érdemben megoldja a feladatot. Elképzelhető, hogy házi-robotunk a kert göröngyös föld-talaján még csak mozogni sem lesz képes, mert nem alkalmas rá. Ekkor hiába próbálnánk rá bármilyen jó programot írni, a feladat elvégzésének hatékonysága igencsak korlátozott volna. Ettől még azonban továbbra is beszélhetnénk korlátozott optimalitásról. Továbbra is lenne legalább egy olyan legjobb/leghasznosabb ágens-program az adott ágens-architektúrára, amely a lehetőségekhez képest valóban a legjobb működést eredményezi, még hogyha ez nem is volna abszolút értelemben túl hatékony (pl. ez a korlátozottan optimális házi-robot nem igazán lenne képes a kertben rendet tenni). Ekkor megoldást jelenthet, ha a megváltozott környezethez hozzáigazítjuk az ágens architektúráját (pl. házi-robotunkat felszereljük olyan járóberendezéssel, amivel már a kert göröngyös föld-talaján is elboldogul). Tehát a korlátozott optimalitás első sorban az ágens programjától és feladatától függ, másodsorban viszont környezetétől és architektúrájától.
27	0.4	1	Számítható racionális ágensek esetén a kérdés tehát csak az, hogy van-e elég ideje az ágensnek a tökéletesen racionális döntés kiszámítására és megtételére, illetve vajon idővel egyre jobb megoldásokat ad-e vissza, vagy sem? Ugyanis, gondoljunk csak bele, még az is elképzelhető, hogy az ágens nem is ad vissza semmiféle megoldást sem mindaddig, amíg számításai végére nem ér. Ettől még az ágens természetesen lehet számítható racionális, viszont használhatósága időben korlátos, bonyolultabb problémák, környezetek esetén már kétséges (pl. repülőgép-pilóta ágens).
4	0.125	0	A legjobbat-először keresés leginkább ismert változata az A^* keresés (a kiejtése ’A csillag’). A csomópontokat úgy értékeli ki, hogy összekombinálja g(n) értékét – az aktuális csomópontig megtett út költsége – és h(n) értékét – vagyis az adott csomóponttól a célhoz vezető út költségének becslőjét:
10	0.212121	1	A temporális logikák informatika felhasználásáról először Burstall írt 1974-ben. Mint azóta kiderült, az informatikában rendkívüli hasznosságú a logikák ezen ága folyamatosan működő rendszerek formális leírására és vizsgálatára, verifikálására [5]. Ilyen állításokat vizsgálhatunk például: * A rendszer nem kerül holtpontra. * Egy futó folyamat előbb-utóbb befejeződik. * A piros lámpa előbb-utóbb zöldre vált. * Egymást keresztező utakon nincsen egyszerre zöld jelzés.
18	0.684211	1	Az algoritmus minden t-edik iterációban az előző iterációban kiszámolt D[t] súlyokkal „betanítja” a belső gyenge tanuló eljárást. A tanítás után megkapjuk a gyenge hipotézist és kiszámíthatjuk annak hibáját. Ezek után az algoritmusban vázolt képlet segítségével kiszámítjuk α t  paraméter értékét. Az α t  paraméter értéke kifejezi a h[t] hipotézis fontosságát (információ tartalmát). A D[t] értékek frissítését az algoritmus következő lépése írja le. Az említett lépés hatására megnövekszik mindazon minták súlya, amelyeket a h[t] hipotézis rosszul osztályozott, és csökkenti azon minták súlyát, amelyeket jól osztályozott. Így a súly a „nehezen” osztályozható minták mentén fog koncentrálódni. A végső H hipotézis lényegében a T darab gyenge hipotézis súlyozott többségi szavazásából áll elő, ahol az α t  –k értéke a h[t] hipotézisre vonatkozik.
9	0.344828	0	Függvényszimbólumokat is tartalmazó általános határozott klózok esetében az ERL-EL-Kérdez végtelen számú új tényt generálhat, így ilyenkor óvatosabbnak kell lennünk. Ha egy lekérdezésre adható válaszmondat levezethető a TB-ből, akkor Herbrand tételét kell alkalmaznunk, hogy biztosítsuk, hogy az algoritmus megtalál egy bizonyítást (lásd a  alfejezetet a rezolúciós esetre). Ha a lekérdezésre nincs válasz, akkor az algoritmus néhány esetben nem tud leállni. Például ha a tudásbázis a Peano-axiómákat tartalmazza,
25	0.111111	0	Sok mobil robot egy adott térrészt lefedő pásztázó távolságmérőt (range finder) használ, olyan szenzort, amely a közeli tárgyak távolságát méri. Gyakori típus a szonárszenzor, más néven hanglokátor. A szonárszenzorok irányított hanghullámokat bocsátanak ki, amelyek egy része visszaverődik a tárgyakról. A visszaverődés ideje és a hullám intenzitása információval szolgál a közeli tárgyak helyzetéről. Az AUV-kre (autonóm víz alatti jármű) víz alatti hanglokátorokat szerelnek. Szárazföldön a hanglokátorokat – rossz irányfelbontásuk miatt – főleg kis távolságon belüli ütközések elkerülésére használják. A hanglokátorok alternatíváját jelenthetik (elsősorban légi járműveknél) a radaralapú és a lézeres távolságmérők. Egy lézeres pásztázó távolságmérő látható a  ábrán.  ábra - (a) A mobil robotoknál népszerű SICK LMS lézeres távolságmérő. (b) Egy horizontálisan felszerelt távolságmérő által mért visszaverődési kép 2D-s térképre vetítve. (a) A mobil robotoknál népszerű SICK LMS lézeres távolságmérő. (b) Egy horizontálisan felszerelt távolságmérő által mért visszaverődési kép 2D-s térképre vetítve.
25	0.740741	0	Az alárendelt architektúra (subsumption architecture) (Brooks, 1986) egy olyan keretrendszer, amelyen belül lehetőség nyílik reaktív szabályozók véges automatákból történő összeállítására. Ezeknél az automatáknál, állapotgépeknél a csomópontok egyes szenzoros változók vizsgálatát tartalmazzák olyan esetekben, ahol a véges automatánál is a változó vizsgálatának eredménye határozta meg a végrehajtás menetét. Az éleket el lehet látni címkékkel, amelyek akkor generálódnak, amikor az éleken áthaladunk, és amelyeket a robot motorjához vagy egy másik véges automatához küldünk. Azonfelül a véges automatáknak vannak belső időzítőik (óráik), amik irányítják, hogy mennyi idő alatt lehet átjutni egy-egy élen. Az így kapott állapotgépet szokás kiterjesztett véges automatának (KVA) – (augmented finite state machine, AFSM) hívni, ahol a kiterjesztés a belső órajel használatára vonatkozik.
9	0.448276	1	Az ELL-ben egy moduláris felépítésű Prolog implementáció, az M-Prolog fejlesztése történt, s ez lehetőséget adott nagyméretű alkalmazások létrehozására. Ezen fejlesztési projektnek Szeredi Péter volt vezetője. A SOL-ban egy olyan Prolog fejlesztésébe kezdtek, amiben megengedték, hogy virtuálisan több Prolog processz fusson egy processzoron, és ezek üzenetekkel kommunikáljanak egymással. T-Prolognak nevezték. Ennél érdekesebb a szimulációs idő fogalma, valamint az, hogy lehetővé tették a szimulált időben történő visszalépést. Ennek következménye lett a fejlesztők által csak „jövőutazás”-nak nevezett működés, ami során a modell eltárolta a megszerzett információt, és amikor az időben visszalépkedett a múltba, fel tudta azt használni.
27	0.4	1	Azt a rendszert nevezzük tökéletesen racionálisnak, mely minden pillanatban olyan döntést hoz tapasztalatai alapján, amivel maximálja várható nyereségét. Mivel a megfelelő döntés meghozatala számításigényes feladat, és ehhez időre van szükség, ezért nem-triviális esetekben nemigen beszélhetünk tökéletesen racionális rendszerekről. A tökéletes racionalitás tehát a gyakorlatban nem megvalósítható követelmény ellenben például a korlátozott optimalitással.
21	0.125	1	ahol y[i] a lehetséges kimeneteket jelöli. Az entrópia szemléletesen egy eloszlás leírásához szükséges információ mennyiségét mutatja, vagyis ezzel a módszerrel azt a mintát választjuk címkézésre, mely a címkézésre nézve a legnagyobb információt hordozza.
17	0.933333	0	Ebben a feladatban kétszereplős MDF-ekkel foglalkozunk, amelyek a zérusösszegű, többfordulós játékokhoz tartoznak, mint amilyenek a  fejezetben szerepelnek. Legyen a két játékos A és B, és legyen R(s) az A játékos jutalma az s állapotban. (B jutalma mindig egyenlő és ellentétes előjelű.) a. Legyen U[A](s) az s állapot hasznossága, amikor A lépése következik s-ben, és legyen U[B](s) az s állapot hasznossága, amikor B következik s-ben. Az összes jutalom és hasznosság A szempontjából van megfogalmazva (pontosan úgy, ahogyan a minimax játékfában). Írja fel az U[A](s)-t és az U[B](s)-t definiáló Bellman-egyenleteket. b. Magyarázza el, hogyan végezhet kétszemélyes értékiterációt ezekkel az egyenletekkel, és adjon meg egy alkalmas leállási kritériumot. c. Tekintsük a  ábrán látható játékot a 6. szakasz - Feladatok részben. Rajzolja fel az állapotteret (a játékfa helyett), folytonos vonallal mutatva A mozgásait és szaggatott vonallal B mozgásait. Jegyezze fel minden állapothoz az R(s) értékét. Hasznos lehet az (s[A], s[B]) állapotok elrendezése egy kétdimenziós rácson, s[A]-t és s[B]-t „koordinátaként” használva. d. Most alkalmazza a kétszemélyes értékiterációt a játék megoldására, és származtassa az optimális eljárásmódot.
9	0.965517	1	Az adatállomány lehetőséget biztosít arra, hogy gyorsan elérhetők legyenek az intézmények olyan esetekben, amikor valamely orvostechnikai eszköz meghibásodásából adódóan baleset következett be, ily módon felhívható a figyelmük a teendőkre az esetleges további balesetek elkerülése, megelőzése céljából. Az adatállomány jó szolgálatot tesz minden olyan esetben, amikor az intézmény számára valamilyen információ eljuttatásáról van szó, pl. konferencia-meghívás, oktatás meghirdetése stb.
15	0.592593	0	Egy érzékelő legegyszerűbb hibamodellje egy bizonyos valószínűséggel megengedi, hogy az érzékelő teljesen helytelen értéket adjon vissza, függetlenül a világ valódi állapotától. Például ha az akkumulátormérő 0-t visszaadva hibázik, azt mondhatjuk, hogy
17	0.533333	0	A Markov döntési folyamatok leírása a  alfejezetben feltételezte, hogy a környezet teljesen megfigyelhető (fully observable). E mellett a feltételezés mellett az ágens mindig tudja, hogy melyik állapotban van. Ez együttesen az állapotátmenet-modell Markov-tulajdonságának a feltevésével azt eredményezi, hogy az optimális eljárásmód csak az aktuális állapottól függ. Amikor a környezet csak részlegesen megfigyelhető (partially observable), a helyzet nem ennyire átlátható. Az ágens nem tudja feltétlenül, hogy melyik állapotban is van, így nem hajthatja végre az adott állapothoz javasolt π(s) cselekvést. Továbbá, egy s állapot hasznossága és az s-beli optimális cselekvés nemcsak s-től függ, hanem attól is, hogy az ágens mennyit tud, amikor s-ben van. Ebből kifolyólag a részlegesen megfigyelhető MDF-eket (RMMDF) (partially observable MDPs, POMDPs) általában sokkal nehezebb dolgoknak tartják, mint a hagyományos MDF-eket. Az RMMDF-ek azonban nem megkerülhetők, mivel a valódi világ is egy RMMDF.
18	0.736842	1	A Boole függvényeket használva demonstratív példaként az egyik problémát az okozta, hogy a véges hipotézistér úgy valósult meg, hogy csak véges számú minta volt lehetséges. (Mivel a logikai függvényeket alapvetően táblázattal lehet megadni, véges számú sora kellett legyen a táblázatnak, hogy véges számú lehetőség legyen a függvényekre.) Vegyünk egy olyan példát, ahol a hipotézistér véges mérete, és a lehetséges mintaszám véges volta elválik: véges számú hipotézisünk van, de végtelen sok minta lehetséges.
9	0.965517	1	1. Gyártói- forgalmazói adatállomány 2. Termék adatállomány (Tezaurusz) 3. Egészségügyi intézmények adatállománya 4. Minősített termékek adatállománya 5. Egyedi engedélyes termékek adatállománya 6. Országos gép- műszer kataszter
24	0.083333	1	Legyen S[t] = {(x, y, z); z = I(x, y, t)}, ahol I a kép intenzitásfüggvénye, amely esetünkben nemcsak az x és y koordinátáktól függ, hanem egyben az “idő” függvénye is. A képet úgy kell „deformálni”, hogy a mintázatok kisimuljanak, de az objektumok fő kontúrjai élesek maradjanak. Egy hagyományos Gauss simító eljárás vagy a frekvencia tartományban alkalmazott alul áteresztő szűrő esetében nemcsak a mintázatok részletei, hanem az objektumok fő kontúrvonalai is sérülnek, így ezek alkalmazása helyett az intenzitás felület deformációjából indulunk ki. Ennek során a felület minden pontját a normális n mentén az átlagos görbülettel arányos „sebességgel” deformáljuk. A felület deformációjának folyamata az alábbi differenciálegyenlettel adható meg [4]:
22	0.185185	0	Először definiáljuk a szókincset (lexicon), azaz a megengedett szavak listáját. A szavakat a szótárhasználók számára ismerős módon csoportosítjuk kategóriákba, avagy beszédrészekbe: főnevek, névmások és nevek dolgok elnevezésére, igék események jelölésére, jelzők a főnevek módosítására és határozószók az igék módosítására. Egyes olvasók számára kevéssé ismertek lehetnek a következő kategóriák: névelők (articles) (például a the), elöljárószavak (prepositions) (például in) és kötőszók (conjunctions) (például and). A  ábra mutat egy kis szókincset.
6	0.1	1	Minden itt használatos keresés őse a Minimax keresés [2]. Tegyük fel, hogy van arra mód, hogy minden egyes pozícióról eldönthetjük, hogy az melyik játékosnak kedvez. Ha a pozíció A játékosnak kedvez, akkor az valamilyen pozitív számmal értékelhető, ha B-nek, akkor negatívval. Ha mindkettőnek ugyanolyan jó, akkor az értelem szerűen 0 pont. A kiindulóállapot “döntetlen”, azaz 0 pont. Innen minden játékos hozzáadhat vagy kivonhat pontokat. Az A játékos célja, hogy maximálja, a B játékosé, hogy minimálisra leszorítsa a pontokat. A keresés során minden lehetséges lépéssort egy számmal értékelünk, majd a legoptimálisabbat kiválasztjuk. A probléma ezzel, hogy a keresési tér hatalmas, azaz rengeteg féle lépés létezik, hiszen a keresés komplexitása exponenciális.
1	0.793103	0	Az MI korai szakaszában plauzíbilisnak tűnt, hogy a szimbolikus számítások új formái, például a keretek és szemantikus hálók, a klasszikus elméletek nagyobb részét elavulttá tették. Ez egyfajta elszigetelődéshez vezetett, ahol az MI a számítási tudomány többségétől el lett választva. Ezzel az izolacionizmussal most szakítunk. Fel kell ismerni, hogy a gépi tanulást nem szabad elszigetelni az információelmélettől, hogy a bizonytalanság melletti következtetést nem szabad elszigetelni a sztochasztikus modellezéstől, hogy a keresést nem szabad elszigetelni a klasszikus optimalizálástól és szabályozástól, és hogy az automatikus következtetést nem szabad elszigetelni a formális módszerektől és a statikus elemzéstől.
1	0.482759	0	B. F. Skinner 1957-ben publikálta a Verbal Behavior c. művét. A könyv e terület egyik legjobb szakértőjének tollából a nyelvtanulás behaviorista megközelítésének átfogó és részletes tárgyalását adta. Furcsamód a könyvismertető ugyanolyan híres lett, mint maga a könyv, és a behaviorizmus iránti érdeklődést csaknem kiirtotta. Az ismertető írója Noam Chomsky volt, aki épp akkor publikálta a saját elméletéről szóló Syntactic Structures c. könyvét. Chomsky kimutatta, hogy a behaviorista elmélet nem kezeli a nyelvben meglevő kreativitást. Az elmélet nem tudta megmagyarázni, hogy egy gyerek miként képes olyan mondatokat megérteni vagy megformálni, amilyeneket korábban soha nem hallott. Chomskynak, Pánini (kb. i. e. 350) indiai nyelvészig viszszatekintő, szintaktikai modellekre alapozó elmélete viszont magyarázatot tudott adni erre, és a korábbi elméletekkel ellentétben kellően formális volt ahhoz, hogy legalább elvben programozható is legyen.
13	0.636364	0	Amennyiben rendelkezésre állnak, akkor a függetlenségi állítások segíthetnek lecsökkenteni a tartományleírások méretét, valamint a következtetési feladat bonyolultságát. Sajnos azonban a változók teljes halmazait csak nagyon ritkán lehet függetlenség alapján egyértelműen szétválasztani. A függetlenség nem lesz igaz az olyan esetekben, amikor bármilyen, akár indirekt kapcsolat is, de fennáll két változó között. Ezen kívül, a független részhalmazok mérete is lehet egészen nagy – például a fogászat problémaköre egymással összefüggő betegségek tucatjait és tünetek százait takarhatja. Az ilyen típusú problémák kezelésére a függetlenség közvetlen kimondásánál kifinomultabb módszerekre lesz szükségünk.
13	0.909091	1	A jelenleg korszerűnek berendezések kevesebb, mint egy másodperc alatt elvégzik az ellenőrzést, de még mindig nem elég gyorsak hogy egy nagy forgalmú beléptető pontokon ne okozzanak fennakadást, mert ha egy rövid időre is, de meg kell állni a személynek, amíg az olvasó dolgozik.
5	0.181818	1	Az értékadás következtében előálló {SA=RED, NSW=GREEN, WA=BLUE} behelyettesítés konzisztens, így az algoritmus rátér az AC3/MAC következtetés végrehajtására. Azonban az AC3/MAC ezúttal nem tesz semmit, mivel a változó (WA), aminek értéket adtunk, egy-elemű értékkészlettel rendelkezik.
15	0.592593	0	A robotikában bárki, aki egy kevés gyakorlattal rendelkezik a számítógépes folyamatvezérlésben vagy az automatikus érzékelés más eseteiben, rögtön tanúskodik arról a tényről, hogy a kis mennyiségű mérési hiba gyakran a legkevésbé fontos a problémák között. Ugyanis a valódi érzékelők elromlanak, és amikor egy érzékelő elromlik, akkor nem küld szükségszerűen egy jelet azzal, hogy „Ó, egyébiránt az adat, amit küldök, egy halom zagyvaság.” Ehelyett egyszerűen küldi a zagyvaságot. A meghibásodás legegyszerűbb formáját átmeneti hibának (transient failure) nevezik, amikor az érzékelő alkalmanként elhatározza, hogy valami zagyvaságot küld. Például az akkumulátor szintérzékelőjének lehet olyan szokása, hogy nullát küld, amikor valaki meglöki a robotot, még akkor is, ha az akkumulátor teljesen fel van töltve.
6	0.1	1	A stratégia-profilok kombinációját a fenti fólián f jelöli. Ezt minden t típuskombinációhoz rendel egy-egy kevert stratégia-kombinációt. Ezek után a játékosok haszonfüggvénye immár stratégia-profil kombinációkhoz társít valós kifizetéseket a nevezett játékos típusának fényében. A kifizetés kiszámítására alkalmas várható-érték formulát a fenti fólia alján láthatjuk. A lényeg itt az, hogy a megfelelő, adott f stratégia-profil kombinációból következő kevert stratégiakombinációk hasznosságának várható értékeként kapjuk a stratégia-profil kombináció hasznosságát adott játékos-típus esetén.
24	0.75	1	A sok mindenre használt LoG szűrőt fel lehet használni élkeresésre is. A szűrő mag egy Gauss függvény második deriváltja, mellyel a bemeneti kép simítás utáni második deriváltját lehet előállítani. Az élek megkereséséhez a szűrt képen a zérushelyeket kell tekinteni.
1	0.655172	0	A korlátlan számítási kapacitás illúziója nem csak a problémamegoldó programokra korlátozódott. A gépi evolúció (machine evolution), amelyet most genetikus algoritmusoknak (genetic algorithms) nevezünk (Friedberg, 1958; Friedberg és társai, 1959), területén végzett korai kísérletek azon a kétségtelenül helyes feltevésen alapultak, amely szerint ha egy gépi kódú programot megfelelően kicsi mutációk révén változtatunk, tetszőleges, egyszerű feladatot jól megoldó programhoz juthatunk el. Az ötlet tehát az volt, hogy véletlen mutációkkal próbálkozva, a program viselkedését javító mutációkat tartsuk meg. Azonban ezernyi óra gépidő ellenére sem sikerült szinte semmilyen előrehaladást kimutatni. A korszerű genetikus algoritmusok jobb reprezentációkat használnak, és több sikerre is vitték.
13	0.318182	1	Jellemzése szintén az X- és SD-vel. Itt már nem az „optimális”, hanem a rutin mérési feltételek a dominálók, ezért rutin hibá-nak hívják, kiemelve a mért és cél érték közötti különbséget. A rutin hiba mindig nagyobb, mint az optimális hiba, mivel a meghatározási feltételeket nem lehet azonosan (csak közelítőleg) tartani minden nap egy egész hónapon keresztül.
25	0.592593	0	Ahogy az már a képletből is látszik, a PD szabályozó egy differenciális taggal egészíti ki a P szabályozót, ami az a[t]-t egy olyan taggal bővíti, ami arányos az y(t) – x[t] hiba idő szerinti első deriváltjával. Mi a hatása egy ilyen új tagnak? Általában a derivátor csillapítja a szabályozott rendszert. Tegyük fel, hogy egy adott rendszerben időben gyorsan változik az (y(t) – x[t]) hiba, mint ahogyan a fentebb tárgyalt esetben is. A differenciális tag ilyenkor az arányos ellenében hat, és összességében csökkenteni fogja a változásra történő reakciót. Ugyanakkor, ha a hiba állandósul, a differenciális tag háttérbe szorul, és az arányos tag fogja meghatározni a szabályozást.
20	0.607143	0	A neuron egy olyan agysejt, amelynek alapfeladata elektromos jelek összegyűjtése, feldolgozása és szétterjesztése. A 1. szakasz - Neurális tudományok (1861-től napjainkig) részben az  ábra egy tipikus neuron sematikus rajzát mutatja. Azt gondoljuk, hogy az agy információfeldolgozó kapacitása elsősorban ilyen neuronok hálózatából alakul ki. Ezért a korai MI néhány kutatása mesterséges neurális hálók (neural networks) létrehozására irányult. (A terület más, szintén használt elnevezései: konnekcionizmus [connectionism], párhuzamos elosztott feldolgozás [parallel distributed processing] és neurális számítástechnika [neural computation].) A  ábra a neuron egyszerű matematikai modelljét mutatja, ahogy McCulloch és Pitts (McCulloch és Pitts, 1943) megalkották. Elnagyolva az mondható, hogy a neuron akkor „tüzel”, amikor a bemeneti értékek súlyozott összege meghalad egy küszöböt. 1943 óta sokkal részletesebb és valósághűbb modelleket alkottak mind a neuronra, mind az agy nagyobb rendszereire, ez vezetett a számítógépes idegháló-modellezés (computational neuroscience) modern tudományterületének megjelenéséhez. Másrészt az MI és a statisztika kutatóinak érdeklődését felkeltették a neurális hálózatok absztraktabb tulajdonságai, mint például az elosztott számítás elvégzésére, a bemeneti zajjal szembeni érzéketlenségre és a tanulásra való képesség. Bár ma már tudjuk, hogy más rendszerek, például a Bayes-hálók is rendelkeznek ezekkel a tulajdonságokkal, de a neurális háló maradt a tanuló rendszerek egyik leghatékonyabb és legnépszerűbb formája, ezért megéri külön tárgyalni.
13	0.363636	0	Fontos megjegyeznünk, hogy P(a) csak akkor használható, ha nincs semmilyen más információ a birtokunkban. Amint ismertté válik valamilyen új információ, a továbbiakban már a adott új információ melletti feltételes valószínűségével kell következtetnünk. A feltételes valószínűségekkel a következő alfejezet foglalkozik.
11	0.653846	0	Ez a fejezet bemutatja, hogy hogyan nyerhető ki közvetlenül a terv a tervkészítési gráfból, ahelyett hogy azt csak a heurisztikákhoz használjuk. A Graphplan algoritmusnak ( ábra) két fő lépése van, melyek ciklikusan váltakoznak. Először ellenőrzi, hogy minden célliterál jelen van-e az adott szinten anélkül, hogy mutex kapcsolatok lennének közöttük. Ebben az esetben, az aktuális gráfban létezhet megoldás, így az algoritmus megpróbálja azt kinyerni. Ellenkező esetben bővíti a gráfot úgy, hogy az aktuális szinthez a cselekvéseket, a következőhöz az állapotliterálokat adja: ez a folyamat folytatódik addig, amíg megtaláljuk a megoldást, vagy bebizonyosodik, hogy nem létezik megoldás.  ábra - A Graphplan algoritmus. A Graphplan algoritmus egy megoldás kinyerő és egy gráf-bővítő lépés között alternál. A Megoldás-Kinyerés a befejezéstől visszafelé keresve ellenőrzi, hogy található-e megoldás. A Gráf-Bővítés adja a cselekvéseket az adott szinthez és az állapotliterálokat a következőhöz. A Graphplan algoritmus. A Graphplan algoritmus egy megoldás kinyerő és egy gráf-bővítő lépés között alternál. A Megoldás-Kinyerés a befejezéstől visszafelé keresve ellenőrzi, hogy található-e megoldás. A Gráf-Bővítés adja a cselekvéseket az adott szinthez és az állapotliterálokat a következőhöz.
3	0.083333	1	Fizikai térben ritkán szoktunk a kiindulási helyhez visszakerülni és más irányokkal próbálkozni, inkább előre törekszünk, bizva, hogy ha ez az út nem is a legjobb, mégis elvezett a célhoz (példának legyen akár egy turista, aki idegen városban valamilyen látványosságot keres). Vannak esetek azonban, amikor a keresési tér jellege miatt ajánlatos inkább visszalépni és egy korábban ki nem próbált elágazás mentén szerencsét keresni. Ilyen például a jelzett út elvesztése hegyvidéken, rossz időben.
23	0.611111	0	A gépi fordítás (machine translation) egy természetes nyelvű szöveg egyik nyelvről (forrás) egy másik nyelvre (cél) történő automatikus fordítása. Ez a folyamat számos feladatra alkalmasnak bizonyult, beleértve a következőket: 1. Nyersfordítás (rough translation), amelyben a cél pusztán az, hogy egy passzus lényegét megkapjuk. Nyelvtanilag helytelen és nem elegáns mondatokat is elfogadunk, mindaddig, amíg a jelentés világos. Például a webszörfözés során a felhasználó gyakran örül az idegen nyelvű weboldal nyersfordításának. Az esetek egy részében egy egynyelvű ember utólagosan szerkesztheti a kimenetet, az eredeti szöveg elolvasásának szükségessége nélkül. A géppel támogatott fordítás ezen típusa azért takarít meg pénzt, mert az ilyen szerkesztőknek kevesebbet kell fizetni, mint a kétnyelvű fordítóknak. 2. Korlátozott forrás fordítása (restricted-source translation), amelyben a forrásszöveg témája és formátuma szigorúan korlátozott. Az egyik legsikeresebb példa a Taum-Meteo rendszer, amely időjárás-jelentéseket fordít angolból franciára. Azért működik, mert az időjárás-jelentések nyelvezete erősen stilizált és reguláris. 3. Előre szerkesztett fordítás (preedited translation), amelyben egy ember úgy szerkeszti meg előre a forrásdokumentumot, hogy megfeleljen az angol nyelv (vagy bármely forrásnyelv) egy korlátozott részhalmazának. Ez a megközelítés különösen akkor költséghatékony, amikor egyetlen dokumentumot sok nyelvre kell lefordítani, mint például jogi szövegeket az Európai Közösségnél, vagy olyan vállalatok esetén, amelyek ugyanazt a terméket sok országban értékesítik. A korlátozott nyelveket néha „Caterpillar-angolnak” nevezik, mert a Caterpillar vállalat volt az első, amelyik az útmutatóit ilyen formában próbálta megírni. A Xerox olyan nyelvet definiált a javítási útmutatók számára, amely annyira egyszerű volt, hogy géppel le lehetett fordítani minden olyan nyelvre, amellyel a Xerox érintkezésbe kerül. További haszonként az eredeti angol nyelvű útmutatók is világosabbá váltak. 4. Irodalmi fordítás (literary translation), amely a forrásszöveg legkisebb árnyalatát is megőrzi. Ez jelenleg túlmutat a legmodernebb gépi fordítók képességén is.
10	0.030303	0	Hasonló megfontolások érvényesek, ha a wumpus világát nézzük. Bár foglalkozunk az idővel, ennek struktúrája igen egyszerű. A dolgok csak az ágens cselekvésével egy időben történnek, és minden változás azonnali jellegű. Egy általánosabb, a valódi világhoz jobban illeszkedő ontológia engedélyezné például, hogy az egyidejű változásoknak legyen időbeli kiterjedésük. Arra, hogy egy konkrét négyzetben csapda van, a Csapda konstanst használtuk, mert minden csapda azonos volt. Engedélyezni lehetne a csapdák több fajtáját is, a csapdák osztályához tartozó, eltérő tulajdonságú példányokat használva. Hasonló módon több állatfajtát is be tudnánk vezetni a wumpuson kívül. Elképzelhető, hogy a rendelkezésre álló érzékelésekből az állat konkrét fajtáját nehéz lenne megállapítani. Az ágens megsegítésére a wumpus világ biológiai taxonómiáját fel lehetne állítani, hogy gyenge nyomravezető jelekből képes legyen megjósolni az állat viselkedését.
24	0.833333	1	A tárgyalt algoritmusoknak alapvetően két típusa van a keresés módja szerint: léteznek képintenzitás alapú és struktúra alapú jellemző detektorok. Előbbiek alapvetően lokális intenzitásmintázatot vagy intenzitásváltozást keresnek, melyek kellőképpen egyediek az adott terület jellemzéséhez és stabilak a kép kisebb megváltozásaira. Intenzitás alapú detektorok kereshetnek sarokpontokat (corner) és foltokat (blob). A struktúra alapú detektorok kiterjedtebb karakterisztikus alakzatokat keresnek, mint például vonalakat, éleket vagy görbéket. A keresett struktúra szerint további két alkategóriára bonthatók: az él-detektorokra (edge), és gerinc-detektorokra (ridge).  ábra - Kézírás jellemzése kulcspontokkal. A kulcspontok itt tipikusan élvégződéseknél és nagy görbületeknél helyezkednek el. (forrás: Wikipedia – Interest point detection) Kézírás jellemzése kulcspontokkal. A kulcspontok itt tipikusan élvégződéseknél és nagy görbületeknél helyezkednek el. (forrás: Wikipedia – Interest point detection)
25	0.814815	0	Számos más nyelv létezik, amely lehetővé teszi a robot számára, hogy mérlegeljen és tanuljon. Ilyen például a Golog (Levesque és társai, 1997b), amely akadályok nélkül egyesíti a modellalapú problémamegoldást (tervezést) és a reaktív irányítás közvetlen megvalósítását. A Golog-programok szituációkalkulus ( alfejezet) formájában jutnak kifejezésre, nemdeterminisztikus mozgásoperátorok hozzáadásának a lehetőségével. Ha a vezérlőprogramban nemdeterminisztikus mozgások is specifikáltak, a programozónak teljes modellt kell szolgáltatnia a robotról és környezetéről. Amikor a vezérlőprogram egy nemdeterminisztikus választási lehetőséghez ér, egy tervező algoritmust hív meg (szabálykészítő formában), hogy az meghatározza a következő lépést. Ilyen módon a programozó részleges vezérlőket ír, és a végső irányítási döntéshozást a beépített mechanizmusra bízza. A Golog szépsége a modellalapú és a reaktív vezérlés probléma nélküli összeillesztésében van. Annak ellenére, hogy a Golog alkalmazásának több feltétele van (teljes megfigyelhetőség, diszkrét állapotok, teljes modell), sok beltéri robot számára nyújt megfelelő, magas szintű irányítást.
1	0.068966	1	Ökológia rendszerek modellezésével kapcsolatban egyre többször kerül elő a sejtautomaták fogalma, ám gyakori kérdésként merül fel, hogy egyáltalán jogos-e használatuk, főleg a modell diszkrét tulajdonsága miatt.
14	0.565217	0	A helyes érték 〈0,3, 0,7〉. A begyűjtött minták szaporodásával a becslés konvergálni fog a helyes értékhez. A becslés szórása az egyes valószínűségeknél arányos lesz  -nel, ahol n a becsléshez felhasznált minták száma.
17	0.666667	0	A kérdés továbbra is megválaszolatlan, mit kell egy racionális ágensnek konkrétan tennie ha a snóblijáték egy menetét játssza? A racionális ágens le fogja vezetni azt a tényt, hogy a [7/12: egy; 5/12: kettő] egy maximin egyensúlyi stratégia, azt fogja feltételezni, hogy egy racionális ellenfélnél ez a tudás kölcsönös. Az ágens használhat egy 12 oldalú kockát vagy egy véletlenszám generátort, hogy e szerint a kevert stratégia szerint sorsoljon, amely esetben a várható jutalom E számára –1/12. Vagy az ágens egyszerűen dönthet úgy, hogy mindig egy-et vagy kettő-t játszik. A várható jutalom bármely esetben –1/12 marad E számára. Érdekes, hogy egy konkrét cselekvés egyoldalú megválasztása nem veszélyezteti a várható jutalmat, de ha a másik ágnes számára ismertté válik egy ilyen egyoldalú döntés, az már befolyásolja a várható jutalmat, hiszen az ellenfél ennek megfelelően igazíthatja a stratégiáját.  ábra - (a) és (b): Minimax játékfák a kétujjas snóblijátékhoz, ha a játékosok a fordulókban tiszta stratégiát játszanak. (c) és (d): Parametrizált játékfák, ahol az első játékos kevert stratégiát játszik. A jutalmak függnek a kevert stratégia (p és q) valószínűségi paramétereitől. (e) és (f): A valószínűségi paraméter bármely konkrét értékénél a második játékos a két cselekvés közül a „jobbikat” fogja választani, így az első játékos kevert stratágiájának az értékét a vastag vonal jelöli. Az első játékos a kevert stratégia valószínűségi paraméterét a metszéspontnál fogja megválasztani. (a) és (b): Minimax játékfák a kétujjas snóblijátékhoz, ha a játékosok a fordulókban tiszta stratégiát játszanak. (c) és (d): Parametrizált játékfák, ahol az első játékos kevert stratégiát játszik. A jutalmak függnek a kevert stratégia (p és q) valószínűségi paramétereitől. (e) és (f): A valószínűségi paraméter bármely konkrét értékénél a második játékos a két cselekvés közül a „jobbikat” fogja választani, így az első játékos kevert stratágiájának az értékét a vastag vonal jelöli. Az első játékos a kevert stratégia valószínűségi paraméterét a metszéspontnál fogja megválasztani.
20	0.464286	0	Az eddigiekben az általunk vizsgált eljárásnak volt egy külső hurka, amely a struktúrakeresés folyamata, és egy belső hurka, ami egy paraméteres optimalizálási eljárás. A teljes adatokra vonatkozó esetben a belső hurok nagyon gyors – csupán ki kell nyerni az adathalmazból a feltételes gyakoriságokat. Ha rejtett változók is vannak, akkor a belső hurok az EM algoritmussal történő számos iterációt vagy egy gradiensalapú algoritmust is tartalmazhat. Minden iterációs ciklusban ki kell számítani a Bayes-háló a posteriori eloszlásait, ami önmagában NP-teljes probléma. Ez a megközelítés bonyolult modellek tanulása esetén napjainkig nem bizonyult a gyakorlatban is alkalmazhatónak. Egy lehetséges előrelépés a strukturális EM (structural EM), ami nagyon hasonlóan működik, mint a normál (parametrikus) EM, leszámítva azt, hogy nemcsak a paramétereket, hanem a struktúrát is frissíti. Éppúgy, mint ahogy a normál EM algoritmus arra használja az aktuális paramétereket, hogy a várható számértékeket meghatározza az E-lépés során, majd alkalmazza ezeket a számértékeket az M-lépésben új paraméterek választására, a strukturális EM az aktuális struktúrát használja a várható számértékek meghatározására, majd arra alkalmazza ezeket a számértékeket az M-lépésben, hogy a potenciális új struktúrák likelihoodját meghatározza. (Ellentétben a külső hurok/belső hurok módszerrel, amelynél minden potenciális struktúrára kiszámítjuk a várható számértékeket.) Ezen az úton a strukturális EM számos strukturális változtatást tud végrehajtani a hálón anélkül, hogy egyszer is újraszámolná a várható számértékeket. Így a módszer képessé válik nemtriviális Bayes-hálóstruktúrák tanulására. Mindamellett sok munkát kell még befektetni, míg azt mondhatjuk majd, hogy a struktúratanulás problémája megoldott.
27	0.4	1	Ezek a kérdések messzire vezetnek. A válasz azonban általában (sajnos) egyszerű: nem, nincs. Általában nem tudunk tetszőlegesen komplex környezet esetén tökéletesen racionálisan viselkedő ágenst konstruálni. Természetesen kivételek mindig akadnak: ha például egy környezetről tudjuk, hogy miként fog alakulni az állapota (pl. tudjuk, hogy ellenfelünk mire-mit lép, vagy hogy a forgalomban résztvevő többi jármű és minden egyéb körülmény miként fog alakulni a jövőben), úgy előre kiszámíthatjuk, hogy mi lenne a tökéletesen racionális cselekvés-sorozat, és aztán menet közben az ágensnek - ha képes rá - már csak ezeket az előre kiszámított cselekvéseket kellene végrehajtania.
5	0.909091	0	Adjon precíz megfogalmazást az alábbiakra mint kényszerkielégítési problémákra: a. Négyszögletes kirakó: találjon nemátfedő helyeket egy nagy négyszögben kisebb négyszögek számára. b. Órarend-ütemezés: adott számú professzor és terem van, valamint rögzített az órarendi órák listája is a lehetséges időablakokkal együtt. Mindegyik professzorhoz adott az általa tartott órák halmaza.
7	0.92	0	A wumpus világot Gregory Yob (Yob, 1975) találta ki. Némi iróniával, Yob azért fejlesztette ki, mert unta azokat a játékokat, amelyeket egy rácson játszanak: az eredeti wumpus világ dodekaéder alakú volt, mi helyeztük vissza a régi unalmas négyzetrácsba. Michael Genesereth javasolta először, hogy a wumpus világot az ágensek tesztkörnyezeteként alkalmazzuk.
1	0.275862	0	Hogyan lehet egy kezelhetetlen problémát felismerni? A Stephen Cook és Richard Karp által útjára indított NP-teljesség (NP-completness) elmélete megadja rá a választ (Cook, 1971; Karp, 1972). Cook és Karp a kanonikus kombinatorikus keresési és következtetési problémák nagy osztályára belátta, hogy azok NP-teljesek. Bármilyen problémaosztály, amire egy NP-teljes problémaosztály visszavezethető, minden bizonnyal kezelhetetlen lesz (és bár még senkinek sem sikerült bebizonyítani, hogy az NP-teljes problémák szükségszerűen nem kezelhetők, kevés tudós van más véleményen). Ezek az eredmények élesen elütnek a számítógép megjelenését kísérő „elektronikus szuperagy – Einsteinnél gyorsabb” lelkesedéstől. Az egyre növekvő számítási sebesség ellenére az intelligens rendszerekre mindig jellemző lesz az erőforrások óvatos és kényes használata. Durván fogalmazva, a világ egy rendkívül nagy problémapéldány! Az utóbbi években az MI segített megérteni, hogy az NP-teljes problémák egyes példányai miért nehezek, holott mások könnyűnek bizonyulnak (Cheeseman és társai, 1991).
8	0.387097	0	nem ugyanaz a szándékolt jelentése. Ez a mondat például igaz a  ábrán látható modellre, ahol Richárdnak csak egy fivére van. Hogy ezt megértsük, figyeljük meg azt a kiterjesztett interpretációt, ahol mind az x, mind az y János királyhoz van rendelve. A ¬(x = y) viszont már nem eleme a modellnek. Az x ≠ y-t néha rövidítésként használjuk a ¬(x = y) kifejezésére.
11	0.153846	0	Berakodás(C[2], P[2], JFK), Repülés(P[2], JFK, SFO, Kirakodás(C[2], P[2], SFO)]  ábra - A Strips-probléma repülőterek közötti légi teherszállítási feladathoz A Strips-probléma repülőterek közötti légi teherszállítási feladathoz
26	0.285714	0	A két Dreyfus (Dreyfus és Deyfus, 1986) vázolja a szakértelem ötlépcsős elsajátításának folyamatát, kiindulva a hasonló szabályalapú feldolgozásból (ahogyan az a gofai-ban is szerepel) eljutva a helyes reakció azonnali kiválasztásának képességéhez. A szerzők ezzel a javaslattal tulajdonképpen az MI kritikusaiból az MI elméletalkotóivá válnak: egy „eset-könyvtárakba” szervezett neurálisháló-architektúrát vázolnak fel, azonban rámutatnak néhány problémára is. Ezeket a problémákat szerencsére már mind célba vette az MI-kutatás néhányukat részleges, másokat pedig teljes sikerrel oldva meg. Nézzünk néhány ilyen problémát: 1. Háttértudás nélkül nem lehet jól példákból általánosítani. Azt állítják, senki sem tudja, miként lehetne a háttértudást beépíteni a neuronhálók tanítási folyamatába. Pedig, amint a  fejezetben mi is láttuk, léteznek módszerek az a priori tudás felhasználására a tanítási folyamat során. Ezek a módszerek persze a tudás explicit megadásán alapulnak, amelynek lehetőségét a szerzőpáros elszántan tagadja. Nézetünk szerint ez a probléma erős indok a neurális feldolgozás jelenlegi modelljeinek olyan újratervezésére, amely már a többi tanuló algoritmushoz hasonlóan képes lesz felhasználni a korábban megtanult tudást. 2. A neurális hálók tanulása a felügyelt tanulás egyik formája (lásd  fejezet), amely igényli, hogy előzetesen azonosítsuk a releváns bemeneteket, valamint a megfelelő kimeneteket. Ezért azt állítják, hogy nem is képesek ezek a hálózatok autonóm módon, emberi betanítás nélkül üzemelni. Valójában a nem ellenőrzött tanulás (unsupervised learning) (lásd  fejezet) és a megerősítéses tanulás (reinforcement learning) (lásd  fejezet) éppen a tanító nélküli tanulást teszi lehetővé. 3. A tanuló algoritmusok nem teljesítenek jól sok jellemző esetén, viszont ha kijelöljük a jellemzők egy halmazát, „nem ismeretes olyan módszer, amellyel új jellemzőket illeszthetünk be, ha a jelenlegiek nem lennének elegendők a megtanult tényekhez”, valójában új eljárások, mint például a szupport vektor gépek, jól megbirkóznak a nagy jellemzőhalmazokkal is. A  fejezetben pedig láthattuk, hogy alapjaikat tekintve léteznek módszerek az új jellemzők bevezetésére, habár még sok tennivaló akad ezen a területen. 4. Az agy képes a szenzorait releváns információk keresésére irányítani, és képes kinyerni az információkból azt, ami releváns az adott szituációban. Ezzel szemben „jelenleg egyetlen részletét sem értjük ennek a működésmódnak – állítják –, és még csak olyan hipotézist sem tudunk alkotni róluk, amely útmutatásul szolgálhatna az MI-kutatóknak”. Valójában az aktív látás területe, amelyet az információérték-elmélet (lásd  fejezet) alapoz meg, éppen hogy a szenzorok irányításának problémájával foglalkozik, és az elért elméleti eredmények egy részét már át is ültették robotmegvalósításokba.
22	0.925926	0	A többértelműség feloldásával foglalkozó egyik legkorábbi munka Wilks elmélete a preferenciaszemantikáról (preference semantics) (Wilks, 1975), amelyik azokat az értelmezéseket próbálta megtalálni, amik minimalizálják a szemantikai anomáliák számát. Hirst egy olyan hasonló célú rendszert ír le, amelyik közelebb van a fejezetben ismertetett kompozíciós szemantikához (Hirst, 1987). Hobbs és társai a szintaktikai és szemantikai reprezentáció minőségét mérő kvantitatív keretrendszert írnak le (Hobbs és társai, 1993). Azóta a Bayes-hálók használata vált elterjedtebbé (Charniak és Goldman, 1992; Wu, 1993). A nyelvészetben az optimalitás elmélete (Kager, 1999) a puha kényszerek nyelvtanba építésén alapszik, amely természetes súlyt ad az értelmezéseknek ahelyett, hogy a nyelvtan az összes lehetőséget egyforma súllyal generálná. Norvig tárgyalja azokat a problémákat, amelyek egy maximálisan valószínű értelmezés helyett több párhuzamos értelmezés figyelembevételéből adódnak (Norvig, 1988). Az irodalmi kritika nem egyértelmű a tekintetben, hogy a többértelműség megoldandó probléma vagy üdvözlendő dolog (Empson, 1953; Hobbs, 1990).
15	0.62963	0	Eddig tartottak a jó hírek, most következnek a rosszak: megmutatható, hogy egy frissítés idő- és tárkomplexitásának az „állandója” majdnem minden esetben exponenciális az állapotváltozók számában. Az történik ugyanis, hogy amint a változó eliminálás halad, a tényezők megnőnek, magukban foglalva az összes állapotváltozót (vagy pontosabban azokat az állapotváltozókat, amelyeknek van szülőjük az előző időszeletben). A maximális tényezőméret O(d^n^+1), a frissítés költsége pedig O(d^n^+2). Fontos Természetesen ez sokkal kevesebb, mint az RMM frissítésének költsége, ami O(d^2n), de nagyszámú változónál még mindig kivitelezhetetlenül nagy. Ezt a súlyos tényt nehéz elfogadni. Ugyanis a következőt jelenti: annak ellenére, hogy a DBH-k felhasználhatók olyan nagyon komplex időbeli folyamatok reprezentálására, amelyek számos, ritkán összekapcsolt változóval rendelkeznek, nem vagyunk képesek hatékonyan és pontosan következtetni ezekről a folyamatokról. A DBH-modell, ami az összes változó feletti a priori együttes eloszlást reprezentálja, faktorizálható az őt alkotó FVT-kre, de az a posteriori együttes eloszlás a megfigyelési szekvencián vett feltétellel – azaz az előre üzenet – általában már nem faktorizálható. Eddig senki sem talált megoldást erre a problémára, annak ellenére, hogy megoldást a tudomány és mérnöki tervezés fontos területei tudnák nagyon jól hasznosítani. Így közelítő módszerekre kell szorítkoznunk.
3	0.916667	1	- Az állapotokat továbbra is a koordinátájukkal azonosítjuk: (x,y) eleme R×R valós számokkal, de nem engedünk meg tetszőleges állapotot, csak azokat, amelyek valamely síkidom egy csúcsát jelölik, továbbá a kezdő- és célállapotot. Az állapotok halmazát jelölje A. A cél, hogy a lehető legkevesebb mozgással az (X,Y) pontba jusson a robot. A sokszögeket jelölje S[1], S[2],...,S[n]. (Egy sokszög a pontjaiból álló halmaz.)
8	0.483871	0	Minden egyes ilyen mondat tekinthető a rokonsági tárgyterület egy axiómájának (axiom). Az axiómákat általában a tisztán matematikai tárgyterületekhez kötjük – röviden meg fogunk vizsgálni néhány axiómát számokra – de valamennyi tárgyterületben szükség van rájuk. Az axiómák ellátnak bennünket alapvető ténybeli információkkal, amelyekből hasznos következtetéseket vonhatunk le. Rokonsági axiómáink egyúttal definíciók (definitions) is; formájuk pedig ∀x, y P(x, y) ⇔ … . Az axiómák meghatározzák az Anyja függvényt és a Férje, Férfi, Szülője, Nagyszülője és Testvére predikátumokat más predikátumok felhasználásával. A predikátumok alapvető halmazainál (Gyereke, Házastársa és Nő) a definícióinkat már nem tudjuk más predikátumokkal leírni. Ez természetes módja annak, ahogyan felépítjük egy tárgyterület reprezentációját, és analóg azzal, ahogyan a szoftvereket felépítik primitív könyvtárfüggvények szubrutinjainak az egymást követő definícióival. Vegyük észre, hogy a predikátumprimitíveknek nincs feltétlenül egyetlen kizárólagos halmaza; éppen ilyen jól használhattuk volna a Szülője, Házastársa és Férfi predikátumokat. Néhány tárgyterületben, mint azt látni fogjuk, nincs egyértelműen meghatározható alaphalmaz.
14	0.869565	1	A változók definiálásakor és a rájuk való hivatkozáskor a kis- és nagybetűkre figyelni kell. A változók azonosítói csak betűt, számot és alulvonást tartalmazhat, szóköz nem lehet benne. A % jel használandó a védett azonosítókra való hivatkozás esetén (%pi, %e...). Az értékadás az = jellel történik.
12	0.904762	1	 A következő idézetek samponos flakonok hátuljáról származnak. Azonosítsa mindegyiket, mint egy feltétel nélküli, feltételes vagy végrehajtási monitorozó tervet. (a) „Mosás. Öblítés. Ismételje.“ (b) „Tegye a sampont a fejére, és hagyja ott néhány percig. Öblítsen és ismételje, ha szükséges.” (c) „Amennyiben az irritáció nem szűnik, forduljon orvoshoz.”
11	0.576923	0	És ez így megy tovább. Az S[i ]állapot- és az A[i] cselekvésszintek között mozgunk, egészen addig, míg elérünk egy szintet, ahol két egymást követő szint azonos. Ekkor azt mondjuk, hogy a gráf kiegyenlítődött (leveled off). Minden egymást követő szint azonos, így további kiterjesztésre nincsen szükség.
5	0.090909	0	Sok előnnyel járhat, ha egy problémát kényszerkielégítési problémaként tekintünk. Az állapotok reprezentációja miatt a kényszerkielégítési problémák egy standard mintára illeszkednek (ez a minta a hozzárendelt értékekkel rendelkező változók halmaza), az állapotátmenet-függvényt és a célállapottesztet pedig az összes kényszerkielégítési problémára érvényes általános módon meg lehet írni. Sőt létrehozhatók hatékony, általános heurisztikák minden kiegészítő, tárgyterület-specifikus szakértelem nélkül. Végül pedig a kényszergráf struktúrájának segítségével lerövidíthető a megoldási folyamat, és ez néhány esetben exponenciálisan csökkenti a probléma komplexitását. A kényszerkielégítési probléma reprezentációja a legelső (és a legegyszerűbb) a könyv menete során bemutatott reprezentációs sémák sorában.  ábra - (a) Ausztrália államai és területei. A térkép kiszínezése tekinthető kényszerkielégítési problémának is. A cél az, hogy minden egyes részhez olyan színt találjunk, amely nem azonos egy szomszédos rész színével sem. (b) A térképszínezési probléma kényszergráfként reprezentálva. (a) Ausztrália államai és területei. A térkép kiszínezése tekinthető kényszerkielégítési problémának is. A cél az, hogy minden egyes részhez olyan színt találjunk, amely nem azonos egy szomszédos rész színével sem. (b) A térképszínezési probléma kényszergráfként reprezentálva.
20	0.928571	0	Az általunk nem tárgyalt legnépszerűbb neurális háló a radiális bázisfüggvény (RBF) (radial basis function) háló. A radiális bázisfüggvény kernelek súlyozott kombinációját (természetesen rendszerint Gauss-kernelekét) alkalmazza függvényapproximációra. Az RBF-hálókat két fázisban taníthatjuk: először egy nem ellenőrzött osztályozással tanítjuk a Gauss-függvények paramétereit (az átlagokat és varianciákat), mint a  alfejezetben láttuk. A második fázisban a Gauss-függvények relatív súlyát határozzuk meg. Ez egy lineáris egyenletrendszer megoldása, amiről tudjuk, hogy közvetlenül hogyan oldható meg. Így az RBF-tanítás mindkét fázisának vonzó tulajdonságai vannak: az első fázis nem ellenőrzött, tehát nincs szükségünk hozzá címkézett mintákra, a második ugyan felügyelt, de hatékonyan elvégezhető. A részleteket lásd Bishop publikációjában (Bishop, 1995).
3	0.083333	1	A keresés az un. keresési térben (vagy problématérben) történik és a feladata átvezetni az ágenst a tér egyik pontjából (kiinduló állapot, a probléma kiinduló állapota) a tér egy másik pontjába (cél állapot, a probléma megoldása). A keresés egy olyan intelligens tevékenység, ami a döntések sorozatából áll. Egy-egy döntés lényege, hogy az adott helyen szóba jöhető egyes cselekvési alternatívákról (akár csak ideiglenesen) lemondunk, elkötelezve magunkat azok mellett, amiktől fokozott előnyt, nyereséget várunk. Minél több az alternatíva (ezt elágazási tényezőnek nevezzük), annál nehezebb a döntés és annál súlyosabb következményei (keresés költségei) vannak annak, ha az információink netán nem teljesen pontosak. Szerencsével, ha a döntésünk megalapozott volt (jó volt az irányt súgó információ, avagy a heurisztika), a megválasztott alternatívák gazdagabb, pontosabb információhoz és más mérhető előnyökhöz juttatnak idővel minket. Az alternatívák feltárásával új döntési helyzetek teremtődnek. A döntési sorozat természetes beteljesülése, ha eljutunk oda, ahová kívánkoztunk (ezt cél állapotnak nevezzük, és a célállapotok elérésére törekvő ágenst racionálisnak mondjuk).
14	0.086957	1	Összességében tehát a mintakomplexitás és a várható hiba is a potenciális osztályozók számának a logaritmusával arányosak. Parametrikus függvényosztályoknál a kontinuum számosságú függvények esetén a számosság szerepét az úgynevezett Vapnik-Chernovenkis dimenzió veszi át, ami a osztály szeparáló képességét méri.
3	0.625	0	Az időkomplexitás mérséklése a kétirányú keresést igen vonzóvá teszi, de mit is jelent a célállapotból hátrafelé keresni? Ez nem is olyan egyszerű, mint amilyennek hangzik. Legyenek x csomópont elődcsomópontjai (predecessors), az Előd(x)-ek azon csomópontok, amelyek mindegyikének x a követő csomópontja. A kétirányú keresés feltételezi, hogy egy Előd(x) hatékonyan számítható. Legegyszerűbb az az eset, amikor az összes cselekvés az állapottérben reverzíbilis, így Előd(x) = Követő(x). Más esetben azonban igen nagy ötletességre lehet szükség.
1	0.344828	1	Víztartalmú képletek elemzésére alkalmas számítógépes képmegjelenítő módszer, mely az atommag elemi mágneses tulajdonságain alapszik. Az atommagon belül a protonok pörgettyű-szerű mozgása kinetikus és mágneses forgató-nyomatékot hoz létre. Az emberi testben több olyan atommag van (hidrogén, fluor, nátrium, foszfor), melyek mágneses forgató-nyomatékkal bírnak. Az MR-módszer szempontjából jelentősége csak a hidrogénnek van, mert ez szervezetben levő atomok kétharmad részét teszi ki.
21	0.1875	1	Ez a feladat az előző egy bonyolultabb változata: itt is k félkarú rabló, és m kontroll folyamat van, de ebben az esetben azok a folyamatok is folyamatos működésben vannak, melyeket a kontroll folyamatok nem választottak ki működésre.
12	0.904762	0	Az ütemezés az űrkutatásban nagyon hosszú múltra tekint vissza. A T-Sched (Drabble, 1990) rendszert az Uosat–II műhold küldetésvezérlő parancssorozatainak ütemezésére használták. Az O-Plan-en alapuló Optimum-AIV (Aarup és társai, 1994) és a Plan-ERS1 (Fuchs és társai, 1990) az űrrepülőgép-összeszerelésben a megfigyelési tervkészítésben használták fel az Európai Űrkutatási Ügynökségnél (ESA).
5	0.181818	1	Ezzel az értékadással az {NSW=RED, WA=RED, NT=BLUE, Q=GREEN, SA=RED} behelyettesítés áll elő, amely újfent ellentmond a 2-es és 6-os korlátoknak. Az algoritmus tehát az eddigiekhez hasonlóan kipróbálja az SA változó következő értékeit, elsőként a GREEN-t (SA=GREEN).
2	0.210526	1	Egy racionális ágens működési bonyolultságát tekintve lehet reflexszerű (reaktív), cél- vagy hasznosságorientált, avagy hibrid. A célorientált ágens csupán azzal törődik, hogy a környezete a megfelelő célállapotba kerüljön - ez nyilván racionális törekvés a részéről. Az is nyilvánvaló, hogy erre a feladatra akár több jó megoldási utat is találhat a lehetséges állapotok és az azok közt átvezető cselekvések gráfjában, illetve azonos helyzetekben különbözőképpen dönthet. Ez nagy szabadságot is biztosít neki a reaktív ágensekhez képest, akik egyszerű ha-akkor feltétel-cselekvés szabályokat tartalmazó táblák alapján működnek, és a világról nem tárolnak semmilyen állapot-információt. Belátható, hogy amennyiben a tervező a saját maga által meghatározott válaszcselekményt tekinti adott esetben a legértékesebbnek, úgy az általa kreált ágens racionális. Ennek oka az, hogy a reaktív ágens végső célja nem egy bizonyos külső állapot elérése, hanem magának a reflexnek a végrehajtása. A reflexszerű ágens komplex környezetekben nem állja meg a helyét, mert egy célravezető szabálytábla megalkotása ilyen esetben lehetetlen [2].
16	0.130435	0	L = [p[1], C[1]; p[2], C[2]; … p[n], C[n]]  ábra - (a) A cserék egy teljes ciklusa, bemutatva, hogy a nemtranzitív A ≻ B ≻ C ≻ A preferenciák irracionális viselkedést eredményeznek. (b) A felbonthatósági axióma. (a) A cserék egy teljes ciklusa, bemutatva, hogy a nemtranzitív A ≻ B ≻ C ≻ A preferenciák irracionális viselkedést eredményeznek. (b) A felbonthatósági axióma.
7	0.92	1	A wumpus világ részlegesen megfigyelhető (az ágens érzékelői csak abban a mezőben működnek, ahol éppen van), determinisztikus (minden cselekedet kimenetele pontosan meghatározott, még ha az ágens esetleg nem is ismeri előre az eredményt), sorozatszerű (a korábbi cselekedetek kihatással vannak a későbbiekre), dinamikus (az ágens cselekedeti hatással vannak a világra, pl. felveszi az aranyat, lelövi a wumpust), diszkrét (mozgás csak szobánként lehetséges és forogni is csak kilencven fokonként lehet) és egyágenses (a másik szereplő a wumpus lehetne, de ő nem mozog, így nem sok különbség van közte és egy csapda között).
10	0.212121	1	Ezek alapján a PLTL formális szintaxisa a következő szabályokkal adható meg: * Minden P atomi kijelentés egy kifejezés. * Ha p és q egy-egy kifejezés, akkor p és q és ¬p is kifejezés. Ebből következően p vagy q is kifejezés. * Ha p és q egy-egy kifejezés, akkor p U q és X p is kifejezés. Ebből következően F p és G p is kifejezés.
9	0.931034	0	Számos vezérlési stratégiát javasoltak a rezolúcióra, kezdve az egységpreferencia stratégiával (Wos és társai, 1964). A támogató halmaz stratégiát Wos (Wos és társai, 1964) javasolta, hogy biztosítson egy bizonyos fokú célorientáltságot a rezolúcióban. A lineáris rezolúció először Lovelandnél (Loveland, 1970) jelent meg. Genesereth és Nilsson (Genesereth és Nilsson, 1987,  fejezet) rövid, de átfogó elemzést nyújtanak a vezérlési stratégiák széles skálájáról.
19	0.681818	0	„megoldása” az ismeretlen Hipotézis-re nézve, feltéve, hogy adottak a Háttértudás, valamint a Leírások és a Besorolások által leírt példák. Hogy ezt megvilágítsuk, tekintsük a rokonsági relációk példák alapján történő tanulását. A megfigyeléseket egy kiterjedt családfa képezi, az Anyja, Apja, Házas relációkkal, valamint a Férfi és Nő tulajdonságokkal leírva. A  feladat családfáját fogjuk használni, amit a  ábra mutat. A példához tartozó leírások az alábbiak:
20	0.821429	0	Rendszerint nem várhatjuk el, hogy lineáris szeparátort találjunk az x bemeneti térben, de könnyen belátható, hogy a sokdimenziós F(x) tulajdonságtérben találhatunk lineáris szeparátorokat. Ennek érdekében a   egyenletben x[i] · x[j]-t egyszerűen kicseréljük F(x[i]) · F(x[j])-re. Ez önmagában nem túlzottan figyelemre méltó – x kicserélése F(x)-re bármely tanuló algoritmusban elérné a kívánt hatást –, de a skalárszorzatnak van néhány érdekes tulajdonsága. Az F(x[i]) · F(x[j]) gyakran kiszámítható anélkül, hogy először kiszámítanánk minden pontra F-et. A   egyenlettel definiált háromdimenziós tulajdonságtér példánkban némi algebrai átalakításokkal megmutatható, hogy:
23	0.722222	0	Az 1960-as évek elején nagy reményeket fűztek ahhoz, hogy a számítógépek képesek egyik természetes nyelvből a másikba fordítani csakúgy, mint ahogy Turing projektje képes volt kódolt német üzeneteket értelmes német szövegbe fordítani. 1966-ra világossá vált, hogy a folyékony fordítás igényli az üzenet jelentésének a megértését, míg a kódfejtés nem.
5	0.181818	1	Az értékadás eredményeképpen előálló {NSW=RED, Q=GREEN, SA=BLUE, NT=RED} konzisztens a korlátokkal, így mehet tovább az algoritmus, következhet az előretekintés: a legutóbbi értékadást vezessük át az érintett változó még be nem helyettesített szomszédainak értékkészletébe, azaz az NT=RED értékadás miatt vegyük ki a WA értékkészletéből a RED értéket. Ennek következtében WA értékkészlete {RED, GREEN}-ről {GREEN}-re változik.
12	0.952381	0	Egy fogyóeszköz (consumable resource) egy olyan erőforrás, ami (részlegesen) felhasználásra kerül a cselekvésben. Például a motor beszerelése az autóba csavarokat igényel. Miután a csavarokat felhasználtuk, már nem használhatók további rögzítésekhez. a. Magyarázza meg, hogyan módosítsuk a  ábra reprezentációját úgy, hogy 100 kiinduló csavarunk legyen az E[1] motor 40 csavart, az E[2] pedig 50 csavart igényel. A + és – szimbólumok felhasználhatók az erőforrásokat leíró következményliterálokban. b. Mutassa meg, hogy a részben rendezett tervkészítésben alkalmazott okozati kapcsolatok és cselekvések közötti ütközés (conflict) definícióját hogyan kell módosítani, hogy a fogyóeszközöket kezelje. c. Néhány cselekvés, például a gyár ellátása csavarokkal vagy egy autó feltankolása, növelheti az erőforrások készletét. Egy erőforrás monoton nem növekvő, ha egyetlen cselekvés sem növeli. Magyarázza meg, hogyan használható ez a tulajdonság a keresési tér megmetszéséhez.
25	0.296296	0	Azonban nem minden működő robotérzékelési rendszer alapul valószínűségi modellezésen. Valójában nem szükséges, hogy minden belső állapotnak legyen valós fizikai interpretációja, ahogy az a mi példáink esetén volt. Például képzeljünk magunk elé egy járó robotot, amely éppen az egyik lábát próbálja egy akadály felett átemelni. Feltételezzük, hogy a robot olyan szabályt alkalmaz, amely szerint kiindulásként csak kicsit emeli fel a lábát, de egyre nagyobb és nagyobb magasságokkal próbálkozik, ha a lába folyton beleütközik valamilyen akadályba. Mondhatjuk-e, hogy az emelt láb magassága valamilyen valós fizikai paraméter reprezentációja? Esetleg igen, és akkor az az akadály magasságára, illetve átléphetőségére vonatkozik. Ugyanakkor mondhatjuk azt is, hogy a lábmagasság a robot vezérlésének egy segédváltozója, mindenfajta fizikai jelentés nélkül. Az ilyen reprezentációk nem ritkák a robotikában, és bizonyos feladatok megoldására kiválóan alkalmasak.
14	0.73913	1	A szabálybázis teljessé alakításának e módja, furcsának tűnhet, hiszen új összefüggés nem kerül a szabálybázisba, hanem az ott lévő összefüggések gyűrűznek tovább valamekkora hibával. Ez a lépés mégis szükséges, mert a hiányzó szabályok nagyon lerontják a rendszer becslési képességét. Tehát a "jobb egy pontatlan szabály, mint egy hiányzó" elvet alkalmazzuk.
24	0.5	0	A legtöbb gerincesnek két szeme van. Ez hasznos redundancia arra az esetre, ha elveszítené az egyiket, de más módon is segít. A legtöbb zsákmányállatnak a feje oldalán vannak a szemei, hogy nagyobb területet beláthasson. A ragadozóknak elöl, hogy kétkamerás térbeli látást (binocular stereopsis) valósíthassanak meg. Maga a gondolat a mozgási parallaxisra igen hasonlít, azonban az eltérő időpontokhoz tartozó képek helyett két (vagy több), térben szeparált képet használunk, hasonlóan ahhoz, mint amilyeneket pl. az előrenéző emberi szemek szolgáltatnak. Tekintettel arra, hogy a jelenet egy adott jellemzője az egyes képsíkok z koordinátájához képest más helyen lesz a képen, ha a két képet egymásra fektetjük, a képjellemző elhelyezkedésében a két kép különbséget – diszparitást (disparity) – fog mutatni. Ez látszik a  ábrán, ahol a piramis legközelebbi pontja balra mozdult el a jobb oldali képen, és jobbra a bal oldalin.  ábra - A térbeli látás alapgondolata: különböző kamerapozíciók ugyanannak a háromdimenziós jelenetnek kissé eltérő kétdimenziós nézeteit eredményezik A térbeli látás alapgondolata: különböző kamerapozíciók ugyanannak a háromdimenziós jelenetnek kissé eltérő kétdimenziós nézeteit eredményezik  ábra - A diszparitás és a mélység összefüggése a sztereolátásban A diszparitás és a mélység összefüggése a sztereolátásban
22	0.037037	0	Egy ágens számára a beszéd létrehozása lehetséges cselekvéseinek egyike. Ezt szólásaktusnak (speech act) nevezzük. A „beszédet” olyan értelemben használjuk, mint „szabad közlést”, nem mint „beszélgetést”, így az elektronikus levelezés, a mutogatás és a jelbeszéd használata mind szólásaktusnak számít. Az angol nyelvben nincs általános szó a beszédet létrehozó ágensre, amely beszél, ír vagy másképp fejezi ki magát. A beszélő (speaker), a hallgató (listener) és a megnyilatkozás (utterance) kifejezéseket használjuk a kommunikáció bármilyen módjának általános leírására. A szó (word) kifejezést használjuk mindenféle szokásos kommunikációs jelre.
10	0.060606	1	Az emberi fejlődés alappillére a képessége a kommunikációra és meglévő tudásának tárolására. Fejlett kommunikációja segítette a társaival való kooperációban és az írás elsajátításával, egy generáció tudását a következőre tudta adni. A kommunikáció sebessége, tárolt tudásának mennyisége és minősége főleg az elmúlt évtizedekben rohamosan, csaknem exponenciálisan megnőtt hála a világhálónak.
27	0.8	0	A mesterséges intelligencia közepes méretű sikere várhatóan befolyásolná a legkülönbözőbb emberek mindennapi életét. A számítógépesített kommunikációs rendszerek (mint például a mobiltelefonok és az internet) már eddig is mélyreható változásokat okoztak a társadalomban, a mesterséges intelligencia esetében azonban ez még várat magára. Könnyű elképzelni, hogy a tényleg hasznos otthoni és irodai személyi asszisztensek komoly pozitív hatással lennének az emberek életére, habár rövid távon valószínűleg némi gazdasági zavart is okozna. Az ilyen fejlettségi szintű technológiai kapacitás azonban alkalmazható lenne autonóm fegyverek létrehozására is, és ez a legtöbbek szerint nemkívánatos eredmény lenne.
5	0.454545	0	Nézzük meg, mi történik, amikor az egyszerű visszalépéses algoritmust az  ábrán látható problémára alkalmazzuk rögzített változósorrenddel (Q, ÚDW, V, T, DA, NyA, ÚT). Tegyük fel, hogy már létrehoztuk a {Q = vörös, ÚDW = zöld, V = kék, T = vörös} hozzárendelést. Amikor a következő változóval, DA-val próbálkozunk, azt látjuk, hogy mindegyik érték sérti a kényszert. Visszalépünk T-re, és egy új színt keresünk Tasmania számára. Ez nyilvánvalóan butaság: Tasmania átszínezése nem oldja meg a Dél-Ausztráliával kapcsolatos problémát.
21	0.875	0	A megerősítéses tanulás és a Markov döntési folyamatok közti kapcsolatra először Werbos mutatott rá (Werbos, 1977), de a megerősítéses tanulás MI-n belüli fejlesztése a University of Massachusetts falain belül kezdődött az 1980-as évek elején (Barto és társai, 1981). Sutton írása jó történeti áttekintést ad (Sutton, 1988). Ennek a fejezetnek a   egyenlete egy speciális, a λ = 0 melletti esete Sutton általános IK(λ) algoritmusának. Az IK(λ) egy sorozat összes állapotának értékét frissíti oly módon, hogy a múltban t időlépés távolságra lévő átmenetekhez egy λ^ t szerint csökkenő faktor vezet. Az IK(1) azonos a Widrow–Hoff- vagy delta-szabállyal. Bradtke és Barto érvelésére (Bradtke és Barto, 1996) építve Boyan azt állítja, hogy az IK(λ) és a hozzá kapcsolható algoritmusok nem használják ki hatékonyan a tapasztalatokat (Boyan, 2002). Szerinte ezek lényegében online regressziós algoritmusok, amelyek sokkal lassabban konvergálnak, mint az offline regresszió. Az ő LSTD(λ) algoritmusa egy olyan online regreszszió, ami az offline regresszióval azonos eredményt ad.
10	0.969697	0	El kellene készíteni egy egységes hierarchiafát (egy nagy papírlapon) és egy listát az objektumokról és a kategóriákról, az egyes kategóriaegyedek által kielégített egy vagy több relációval együtt. Mindegyik objektumnak egy kategóriához kell tartoznia, és minden kategóriának a hierarchia részének kell lennie.
15	0.185185	0	Itt és végig a fejezetben, az α egy normalizációs konstans, ami a valószínűségek 1-re összegzését biztosítja. A második tényező P(X[t+1]|e[1:t]) reprezentálja a következő állapot egylépéses előrejelzését, és az első tényező ezt frissíti az új bizonyítékkal. Vegyük észre, hogy P(e[t+1]|X[t+1]) közvetlenül kinyerhető az érzékelő modellből. Most a jelenlegi X[t ]állapotot feltételnek véve a következő állapot egylépéses előrejelzéséhez jutunk:
14	0.869565	1	Az adatokat a program számára a paraméter határértékeihez viszonyított relatívértékben, -0,5 +0,5 között normálva adtuk meg egy 8 x 59-es ASCII mátrixban. Nyolc bemenő csatornát (a mért paraméterek számának megfelelően) és három kimenő csatornát használtunk az esetek jellemzésére (normál, dysplasia, tumor). Változtattuk az alkalmazott rejtett rétegek számát és nagyságát: elsőként egy 3 x 3-as, majd egy 10 x 10-es és végül két 5 x 5-ös réteget próbáltunk ki.
10	0.969697	0	A  ábra a dolgok hierarchiájának felső szintjeit mutatja. Terjessze ki az ábrát úgy, hogy a lehető legtöbb valódi kategóriát tartalmazzon. Erre jó módszer, ha a mindennapi életével kapcsolatos minden dolgot leír. Ez objektumokat és eseményeket fog magában foglalni. Kezdje a reggeli felkeléssel, rendszeresen haladjon tovább, megfigyelve, hogy mit érint, mit csinál, mire gondol. Egy véletlen mintavétel eredménye lehetne például a következő: zene, hírek, tej, séta, kocsivezetés, benzin, Skála, szőnyeg, beszélgetés, Kovács tanár úr, csirkepörkölt, nyelv, 150 Ft, napi újságok stb.
15	0.925926	0	A közelítő szűrésre szolgáló módszerek között találjuk a lecsengő MCMC (decayed MCMC) algoritmust (Marthi és társai, 2002) és a faktorizált közelítés módszerét Boyen és társaitól (Boyen és társai, 1999). Mindkét módszer rendelkezik azzal a fontos tulajdonsággal, hogy a közelítési hiba nem nő az idővel. Variációs technikákat (lásd  fejezet) szintén fejlesztettek ki időbeli modellekre. Ghahramani és Jordan egy közelítő algoritmust ismertet faktoriális RMM-kre, így olyan DBH-ra, amiben két vagy több függetlenül fejlődő Markov-lánc egy közös megfigyelési folyammal van összekapcsolva (Ghahramani és Jordan, 1997). Jordan és társai számos más alkalmazást is tárgyalnak (Jordan és társai, 1998). A keverési idők tulajdonságait Pak, valamint Luby és Vigoda tárgyalja (Pak, 2001; Luby és Vigoda, 1999).
4	0.125	0	A bizonyítás összeomlik, ha a Fa-Keresés helyett a  ábra szerinti Gráf-Keresés algoritmust használjuk. Az algoritmus visszatérhet szuboptimális megoldással, mert a Gráf-Keresés algoritmus elvetheti az ismétlődő állapothoz vezető optimális utat, ha az nem elsőnek került kiszámításra (lásd  feladat). A problémát kétféle módon lehet megoldani. Az első megoldás a Gráf-Keresés olyan kiterjesztése, hogy az az ugyanahhoz a csomóponthoz vezető két út közül a drágábbat fogja elvetni (lásd az értékelést a  alfejezetben). A pótlólagos adminisztrálás nem egyszerű, de az optimalitást garantálni fogja. A második megoldásnál azt kell biztosítani, hogy a bármelyik ismétlődő csomóponthoz vezető optimális út mindig az, amit az algoritmus elsőnek követ – mint ahogy ez az egyenletes költségű keresésénél volt. Ez a tulajdonság akkor áll fenn, ha a h(n) függvényre extra követelményeket fogalmazunk meg, megkövetelve annak konzisztenciáját (consistency), másképpen monotonitását (monotonicity). A h(n) heurisztikus függvény konzisztens, ha minden n csomópontra és annak egy tetszőleges a cselekvéssel generált minden n′ utódcsomópontjára az n csomóponttól elért cél becsült költsége nem kisebb, mint az n′ -be kerülés lépésköltsége és az n′ csomóponttól elért cél becsült költsége:
25	0.740741	0	Egy egyszerű AFSM használatára példa a  (b) ábrán látható négyállapotú gép, amely ciklikus mozgást generál a hexapod robot számára. Ez az AFSM ciklikus szabályozót használ, aminek működése tulajdonképpen nem függ a környezetből jövő visszacsatolástól. Az előrenyújtási szakasz során viszont már használja a szenzoros információt. Ha a láb elakad, azaz nem tudja végrehajtani az előremozgást, a robot visszahúzza a lábat, majd magasabbra emelve újra próbálkozik. Azaz a szabályozó képes reagálni a robot környezettel való fizikai érintkezésére.
14	0.652174	0	Csakúgy, mint a szemantikus hálókban, csatolhatunk feltételes eloszlásokat magához az osztályhoz is, így a példányok öröklik (inherit) a függéseket és a feltételes valószínűségeket az osztálytól.  ábra - (a) Egy két osztályt (Professzor és Diák) leíró RVM. Két professzor és két diák van, mindkét diák konzulense KovácsProf. (b) Az (a)-beli RVM Bayes-háló ekvivalense. (a) Egy két osztályt (Professzor és Diák) leíró RVM. Két professzor és két diák van, mindkét diák konzulense KovácsProf. (b) Az (a)-beli RVM Bayes-háló ekvivalense.
10	0.121212	0	A világnak mind a tudományos, mind a józan ész elméleteiben az objektumoknak magassága, tömege, ára van és így tovább. Az ezekhez a tulajdonságokhoz előírt értékek a mértékek (measures). Közönséges, kvantitatív mértékeket könnyű reprezentálni. Képzeljük el, hogy az univerzum absztrakt „mértékobjektumokat” tartalmaz, mint például a hossz, ami az itt látható vonalszegmens hossza:
20	0.821429	0	Ennyi az egész? Egyszerűen létrehozunk egy nagy halom számított tulajdonságot, és a megfelelő sokdimenziós térben megkeressük a lineáris szeparátort? Sajnálatos módon nem ilyen egyszerű. Emlékezzünk, hogy a d dimenziós térben a lineáris szeparátort egy d paraméteres egyenlet határozza meg, így aztán az a veszély fenyeget, hogy ha d ≈ N (ahol N az adatpontok száma), akkor könnyen túlilleszkedhetünk az adatokra. (Ez ahhoz hasonló, mint amikor egy magas fokszámú polinommal túlillesztünk adatokat, ahogy ezt a  fejezetben tárgyaltuk.) Ezen okból a kernelgépek rendszerint az optimális lineáris szeparátort találják meg. Azt nevezzük optimálisnak, amelynek legnagyobb a tartaléka (margin): a lineáris szeparátor és a pozitív példák között az egyik oldalon, illetve a lineáris szeparátor és a negatív példák között a másikon. (Lásd  ábra.) A számítógépes tanulás elmélet módszereit (lásd  alfejezet) használva megmutatható, hogy ez a szeparátor az új példák robusztus általánosítására nézve nagyon jó tulajdonságokkal rendelkezik.
17	0.666667	0	Az ismétlődő játékok teljesen általános tárgyalása meghaladja a könyv kereteit, de számos helyzetben megjelennek. Például konstruálhatunk egy szekvenciális játékot, ha a  ábra 4 × 3-as világába két ágenst behelyezünk. Ha kikötjük, hogy nem következik be mozgás, amikor a két ágens ugyanarra a mezőre próbál lépni (ugyanaz a probléma számos forgalmi útkereszteződésben), akkor bizonyos tiszta stratégiák örökre beragadhatnak. Megoldás, ha mindegyik ágens véletlenszerűen választ az előrefelé lépés és a helyben maradás között; a holtpont gyorsan feloldódik, és mindkét ágens boldog lesz. Pontosan ezt teszik az Ethernet-hálózatokban a csomagütközés feloldására.
5	0.181818	0	Az előző alfejezetben keresési problémaként fogalmaztuk meg a kényszerkielégítési problémákat. Ezt a megfogalmazást felhasználva a 3. és a  fejezetben bemutatott bármely keresési eljárással megoldhatók a kényszerkielégítési problémák. Tegyük fel, hogy alkalmazzuk a szélességi keresést az előző fejezetben megadott általános CSP-megfogalmazásra. Hamarosan valami szörnyűség tűnik fel: a fa tetején az elágazási tényező nd, mert a d érték bármelyike hozzárendelhető az n változó bármelyikéhez. A következő szinten az elágazási tényező (n – 1)d és így tovább az n szint során. Egy n!· d^n levelű fát építünk fel, noha csupán d^n lehetséges teljes hozzárendelés van! Fontos Látszólag racionális, valójában naiv problémamegfogalmazásunk elhanyagolta az összes kényszerkielégítési probléma egy döntő közös tulajdonságát: a kommutativitást (commutativity). Egy probléma akkor kommutatív, ha a végeredmény szempontjából közömbös, hogy cselekvések egy adott sorozatát milyen sorrendben alkalmazzuk. Ilyenek a kényszerkielégítési problémák is, mert a változók hozzárendelése során a sorrendtől függetlenül ugyanazt a parciális hozzárendelést kapjuk. Ezért tehát mindegyik kényszerkielégítési problémamegoldó a következő állapot generálásakor a keresési fa minden csomópontjában csak egyetlen változó lehetséges hozzárendeléseit veszi tekintetbe. Az ausztráliai térképszínezési probléma keresési fájának gyökércsomópontjában választhatunk a DA = vörös, a DA = zöld és a DA = kék közül, de sohasem merül fel választási lehetőségként a DA = vörös vagy az NyA = kék. A levelek száma ezzel a megszorítással már a remélt d^n.  ábra - Egy egyszerű visszalépéses keresési algoritmus kényszerkielégítési problémákhoz. Az algoritmus a  fejezet rekurzív mélységi keresőjén alapul. A Hozzárendeletlen-Változó-Kiválasztása és a Tartomány-Értékek-Sorrendezése függvények használhatók a szövegben bemutatott általános célú heurisztikák megvalósítására. Egy egyszerű visszalépéses keresési algoritmus kényszerkielégítési problémákhoz. Az algoritmus a  fejezet rekurzív mélységi keresőjén alapul. A Hozzárendeletlen-Változó-Kiválasztása és a Tartomány-Értékek-Sorrendezése függvények használhatók a szövegben bemutatott általános célú heurisztikák megvalósítására.  ábra - Részlet a keresési fából, amelyet az egyszerű visszalépéses keresés generált az  ábrán bemutatott térképszínezési problémához Részlet a keresési fából, amelyet az egyszerű visszalépéses keresés generált az  ábrán bemutatott térképszínezési problémához
13	0.772727	0	Láttuk, hogy a Bayes-tétel hasznos lehet az egyetlen tény – például nyakmerevedés – feltételezése melletti valószínűségi kérdések megválaszolásánál. Nevezetesen, megmutattuk, hogy a valószínűségi információ gyakran P(okozat∣ok) formában áll rendelkezésre. Mi történik azonban akkor, ha kettő vagy több tény van a birtokunkban? Például milyen következtetésre juthat a fogorvos, ha az az undok acélszondája lyukra akad a beteg fájó fogában? Ha ismerjük a teljes együttes eloszlást (lásd  ábra), a válasz kiolvasható:
10	0.242424	0	A szituációkalkulus legegyszerűbb változatában minden cselekvést két axiómával lehet leírni. A lehetőségi axióma (possibility axiom) megmondja, hogy a cselekvést mikor lehet elvégezni, a hatásaxióma (effect axiom) pedig azt, hogy a cselekvés végrehajtásával mi is fog történni. Annak jelölésére, hogy az s szituációban az a cselekvés végrehajtása lehetséges, a Lehet(a, s) predikátumot fogjuk használni. Az axiómák formája az alábbi:
3	0.25	1	Az aknakereső játék megoldása (azaz annak eldöntése, melyik mezőkön van biztosan akna, és melyikeken nincs biztosan) modellezhető kényszer-kielégítési problémaként (CSP, constraint satisfaction problem). Az ilyen problémák leírása során megadunk néhány változót, azok értékkészletét (lehetséges értékeit), valamint a változókra vonatkozó kényszereket. A feladat az, hogy meghatározzuk a változók összes olyan értékét, amelyek kielégítik a kényszereket.
6	0.1	1	A PNS- t végjáték keresőkben alkalmazzák. Lényege, hogy ÉS-VAGY fákkal reprezentálja mindkét játékos játékfáját. A csomópontok maximalizálásához használja a VAGY kapcsolatot, a minimalizáláshoz pedig az ÉS kapcsolatot. A játék folyamán a fa állandóan frissül. Csak akkor alkalmazható az algoritmus, ha mindkét játékos eddig megtett összes lépésével tisztában vagyunk [11].
14	0.086957	1	2. Adott eloszlás esetén a hozzátartozó megfigyelési ekvivalencia osztály egyértelműségéhez fel kell tételezni a stabilitást (ami logikai függéseknél nem teljesül, ahogy a paradoxonok között bemutattuk).
9	0.37931	0	Úgy tűnik, hogy a rossz hatékonyság problémájának az utolsó forrása az előrefelé láncolásban a megközelítésből fakad, ez már az ítéletlogikai kontextusban is felmerült. (lásd  alfejezet). Az előrefelé láncolás az ismert tényeken alapuló összes lehetséges következtetést elvégzi, akkor is, ha azok irrelevánsak az elérendő célhoz. A bűntény példánkban nem voltak olyan szabályok, amelyek irreleváns konklúziókat vontak volna maguk után, így az irányítottság hiánya nem jelentett problémát. Más esetekben (például ha több szabályunk van, amelyek leírják az amerikaiak étkezési szokásait és a rakéták árát is), a ERL-EL-Kérdez számos irreleváns konklúziót fog generálni.
13	0.090909	0	Arról van szó, hogy a fogfájás és a lyuk közötti kapcsolat egyik irányban sem feltétlen logikai következmény. Ez jellemző az orvosi területekre, valamint más szakértői területekre (jog, üzlet, tervezés, autójavítás, kertészkedés, időpontok összeegyeztetése stb.). Az ágens tudása legjobb esetben is csak egy bizonyos mértékű meggyőződést vagy hiedelmet (degree of belief) nyújthat az adott kijelentésekkel kapcsolatban. A meggyőződési értékek kezelésére az elsődleges eszközünk a valószínűség-számítás (probability theory) lesz, amely egy 0 és 1 közötti számszerű meggyőződési mértéket rendel az egyes mondatokhoz. (A bizonytalan következtetésre alkalmas néhány más lehetséges módszerről a  alfejezetben olvashatunk.) Fontos A valószínűség lehetőséget nyújt a lustaságunkból vagy tudáshiányunkból fakadó bizonytalanság kifejezésére (összegzésére). Nem lehetünk biztosak abban, hogy mi kínoz egy bizonyos beteget, ugyanakkor hihetjük, hogy mondjuk 80% az esély arra – azaz 0,8 a valószínűsége annak –, hogy a betegnek van lyukas foga, ha fogfájásra panaszkodik. Azaz, várakozásaink szerint az összes, az ágens tudása alapján a jelenlegi szituációtól megkülönböztethetetlen eset 80%-ában a páciensnek van lyukas foga. Ezt a valószínűséget statisztikai adatokból vonhatjuk le – az eddig vizsgált fogfájós betegek 80%-ának lyukas volt a foga –, vagy valamilyen általános szabályból, illetve tények kombinációjából származtathatjuk. A 80% azokat az eseteket foglalja magában, amikor minden olyan tényező jelen van, amely hatására a lyuk fogfájással jár, valamint amikor a betegeknek teljesen függetlenül van fogfájása és lyukas foga is. A hiányzó 20%-ban pedig a fogfájás összes többi lehetséges oka található, amelyek megerősítéséhez vagy tagadásához túl lusták vagy tudatlanok vagyunk.
24	0.166667	1	Amikor egy pontszerű forrásból induló sugarakkal, a szervezet vizsgált térfogatáról gyűjtött valamennyi adatot egyetlen, kétdimenziós vetületben fogjuk fel. A sugárelnyelődésből adódód elsődleges, vetületi képet azonban digitalizálás közbeiktatása nélkül, direkt módon, közvetlenül is láthatóvá tenni egy fluoreszkáló ernyő, röntgenfilm segítségével.
2	0.526316	0	Mindezek ellenére, a Táblázat-Vezérlésű-Ágens megteszi azt, amit akarunk: megvalósítja a kívánt ágensfüggvényt. Az MI alapvető kihívása, hogy hogyan írjunk olyan programot, amely – a lehetőségek határain belül – nagyszámú táblázatbejegyzések helyett kisméretű programkóddal produkál racionális viselkedést. Sok példánk van arra, hogy ez más területeken megvalósítható: például az 1970-es évek előtt a mérnökök és az iskolás gyerekek által használt hatalmas négyzetgyöktáblázatokat ma már egy elektronikus kalkulátorokon futó ötsoros program váltotta fel, amely a Newton-módszert alkalmazza. A kérdés az, hogy megteheti-e az MI azt az általános intelligens viselkedésre, amit Newton tett meg a négyzetgyökökre? Abban hiszünk, hogy a válasz igen.
24	0.5	0	Dolgozzuk ki a diszparitás és a mélység geometriai kapcsolatát. Először azt az esetet vizsgáljuk meg, amikor a két szem (illetve a két kamera) előrenéz, és optikai tengelyük párhuzamos. A jobb és a bal kamera kapcsolata így egy b nagyságú (bázisvonal) transzláció az x koordináta-tengely mentén. A H = v[x] ∆t vízszintes és V = v[y]∆t függőleges képeltérés számításához az optikai folyam előbb megismert kifejezéseit használhatjuk, T[x] = b/∆t, T[y] = T[z] = 0 mellett. Az ω[x], ω[y], és ω[z] rotációs paraméterek zérusok. Azt kapjuk eredményül, hogy H = b/Z és V = 0. Szavakkal megfogalmazva ez azt jelenti, hogy a vízszintes képeltérés a bázisvonal és a mélység aránya, a függőleges eltérés pedig zérus.
10	0.242424	0	A hatásaxióma azt állítja, hogy ha egy cselekvés lehetséges, akkor a cselekvés végrehajtásából adódó szituációban bizonyos tulajdonságok (folyó események) érvényesek lesznek. Az x-ről az y-ra menni cselekvés eredménye az y-ban tartózkodni, az aranyat megfogni eredménye az aranyat tartani, végül az aranyat elengedni eredménye az aranyat nem tartani:
10	0.212121	1	CTL-alapú modellellenőrzést lehet végezni Petri-hálókon például az INA [10] vagy a PetriDotNet programokkal [11], időzített automaták hálózatán pedig például az UPPAAL programmal [12]. Ezen programok segítségével akár komplex informatikai rendszerek is modellezhetők. A modellellenőrzés azonban egy kritikus folyamat, hiszen akár kis rendszerek modelljei is óriási állapotteret eredményezhetnek, amelynek már tárolásai is nehéz feladat. Jól példázza ezt az ismert étkező filozófusok modell. E modellben filozófusok ülnek egymás mellett egy asztal körül. Minden filozófus előtt van egy tányér rizs és a tányérok közt van 1-1 pálcika. Minden filozófus megéhezhet, ilyenkor abbahagyja a gondolkozást és megpróbálja a pálcikákat felvenni az asztalról. Ha mindkét pálcikát felvette, elkezd enni, majd amikor egy új gondolata támad, abbahagyja az evést, a pálcikákat leteszi és elkezd gondolkozni. Ha az asztal körül öt filozófus ül, a lehetséges állapotok száma 13640. Amennyiben az asztal körül 100 filozófus ül, az állapottér mérete már körülbelül 10^62. Látható, hogy a modell mérete és az állapottér mérete közt gyakran exponenciális kapcsolat van [8].
8	0.967742	0	A fejezetben az áramkör reprezentálása részletesebb a szükségesnél, ha csak az áramkör működése érdekel minket. Egy egyszerűbb formula bármely m bemenetű, n kimenetű kaput vagy áramkört leír, egy m + n argumentumos predikátum használatával, úgy, hogy a predikátum pontosan akkor igaz, amikor a bemenet és a kimenet konzisztens. Például, a NOT-kapukat így írjuk le: NOT(i, o), amelynél a NOT(0, 1)-et és a NOT(1, 0)-át ismerjük. A kapuk összeállítása a kapupredikátumok összekötésével van definiálva, amelyben a közös változók direkt összeköttetéseket jeleznek. Például egy NAND áramkört összeállíthatunk AND-ekből és NOT-okból:
22	0.62963	0	Emlékezzünk vissza, hogy a DCG egy logikai programozási rendszer, amely kényszereket határoz meg egy karaktersorozat és annak elemzése között. Tudjuk, hogy az Append predikátum logikai programozási definíciója felhasználható annak közlésére is, hogy az Append([1, 2], [3], x) esetében x = [1, 2, 3], és arra is, hogy felsoroljuk azon x és y értékeket, melyek az Append(x, y, [1, 2, 3]) kifejezést igazzá teszik. Hasonlóképpen írhatunk egy definíciót S-re, amely kétféleképpen használható: az elemzéshez megkérdezzük, hogy S(sem, [John, Loves, Mary]), és azt kapjuk vissza, hogy sem = Loves(John, Mary); a generáláshoz azt kérdezzük, hogy S(Loves(John, Mary), words), és azt kapjuk vissza, hogy words = [John, Loves, Mary]. Tesztelhetünk egy nyelvtant az S(sem, words) kérdéssel, visszakapva azokat a [sem, words] párok sorozatát válaszként, melyeket a nyelvtan generált.
5	0.181818	1	Az  ábrán szereplő gráf csúcsai felelnek meg Ausztrália államainak, míg az élek azt jelzik, hogy két állam szomszédos. Célunk ugyebár az, hogy úgy színezzük ki a térképet 3 színnel (pirossal, zölddel és kékkel), hogy minden szomszédos állam, azaz minden olyan gráfbeli csúcspár, melyeket él köt össze a gráfban, különböző színt kapjon.
24	0.458333	0	  ábra - (a) Rubik-kocka egy forgó lemezkorongon. (b) Ugyanaz a kocka 19/30 másodperccel később (Richard Szeliski nyomán). (c) Az (a) és (b) képek összehasonlítása alapján számolt optikai folyam vektorok (Joe Weber és Jitendra Malik hozzájárulásával). (a) Rubik-kocka egy forgó lemezkorongon. (b) Ugyanaz a kocka 19/30 másodperccel később (Richard Szeliski nyomán). (c) Az (a) és (b) képek összehasonlítása alapján számolt optikai folyam vektorok (Joe Weber és Jitendra Malik hozzájárulásával).
19	0.454545	0	Sajnos a hatásosság és az általánosság között általában kompromisszumot kell kötni. A konkrétabb részcélokat könnyebb megoldani, viszont azok kevesebb esetet fednek le. A hatásosság tovább fokozható; egy vagy két lépés nyilvánvalóan hatásos, de mi a helyzet 10-zel vagy 100-zal? Egy adott részcél megoldásának a költsége végül attól függ, hogy a tudásbázis milyen egyéb szabályokat tartalmaz. A költség növekedhet vagy csökkenthet, ahogy a tudásbázishoz új szabályokat adunk. Az adott kezdeti tudásbázis hatékonyságának maximalizálásánál a MAT-rendszerek valóban igen komplex optimizációs problémával kerülnek szembe. Néha megalkotható annak matematikai modellje, hogy egy adott szabály hozzáadása általában milyen hatással van a hatékonyságra, és ennek a modellnek a használatával a hozzáadandó legjobb szabály megválasztható. Az elemzés azonban igen komplikált lehet, különösképpen ha rekurzív szabályokkal van dolgunk. Ígéretes megközelítés a hatékonyság empirikus vizsgálata, amikor néhány szabály hozzáadásával meggyőződünk arról, hogy a szabályok közül melyik az, amelyik ténylegesen hasznos, és amelyik az eljárásokat felgyorsítja. Fontos A hatékonyság empirikus elemzésének gondolata a MAT lényegét érinti. Amit eddig informálisan „az adott tudásbázis hatékonyságának” neveztünk, az nem más, mint egy átlagos esetkomplexitás a megoldandó problémák egy eloszlásán mérve. A régi példák általánosításával a MAT növeli a tudásbázis hatékonyságát a jövőben ésszerűen várható problémák szempontjából. Az ötlet addig jó, amíg a régi példák eloszlása durván megegyezik a jövőbeli példák eloszlásával. Ez a feltételezés azonos azzal, amit a  alfejezetben a VKH-tanulás kapcsán megtettünk. Ha a MAT-rendszert gondosan kivitelezték, a későbbi problémáknál lényeges javulás érhető el. Egy nagyon nagy méretű, svéd és angol nyelv közötti beszédfordításra kifejlesztett, Prolog-alapú, természetes nyelvi rendszerben például, a valós idejű fordítási képességet csak az elemző folyamatra alkalmazott MAT révén sikerült elérni (Samuelsson és Rayner, 1991).
12	0.095238	0	Az előnyök ellenére, az erőforrás-megkötések nagyon megbonyolítják az ütemezési feladatokat azáltal, hogy a cselekvések közé további kölcsönhatásokat vezetnek be. Habár a megkötések nélküli ütemezés a kritikus útvonal módszer felhasználásával könnyű, a legkorábbi befejezési idejű erőforrás-megkötéseket tartalmazó ütemezés megtalálása NP-nehéz. Ez a komplexitás gyakran mind a gyakorlatban, mind az elméletben látható. Az 1963-ban közzétett nagy kihívást jelentő feladat – egy optimális ütemezés megtalálása egy 10 gépet, 10 munkát és 100 cselekvést tartalmazó problémához – 23 évig megoldatlan maradt (Lawler és társai, 1993). Sok megközelítést kipróbáltak, köztük az elágazásos megkötést, a szimulált lehűtést, a tabu keresést, a kényszerkielégítést és számos más, a II. részben szereplő technikát. A legegyszerűbb, de népszerű heurisztika a minimális tartalék (minimum slack) algoritmus. Ez a cselekvéseket mohó jelleggel ütemezi. Minden iterációban megnézi azokat a cselekvéseket, amelyeknek az összes előzményét már ütemeztük, és azt ütemezi, amelyiknek a legkevesebb tartalék ideje van a legkorábbi lehetséges kezdéshez. Ezután frissíti az ES és LS időértékeket minden egyes érintett cselekvésre, és ezt ismétli.
5	0.181818	1	 ábra - 2. lépés: az előbbi, NSW=RED értékadás következményeként a RED érték eltávolítása a Q, SA, és V változók értékkészletéből az AC3/MAC következtetés miatt 2. lépés: az előbbi, NSW=RED értékadás következményeként a RED érték eltávolítása a Q, SA, és V változók értékkészletéből az AC3/MAC következtetés miatt
11	0.461538	1	A feladat alapvető célja tisztán látni a részben rendezett tervkészítés egyik legfontosabb algoritmikus lépését, amely garantálja, hogy a részben rendezett tervkészítő teljessége és helyessége formálisan is igazolható legyen.
7	0.08	0	Az érzeteket az ágens egy öt szimbólumot tartalmazó lista formájában kapja meg; például ha bűz és szellő van egy négyzetben, de nincs ütés, csillogás vagy sikoly, akkor az ágens egy [Bűz, Szellő, Nincs, Nincs, Nincs] érzetet kap.
24	0.75	0	Az alakzatkontextus lehetővé teszi, hogy a megfeleltetési problémát megoldjuk két hasonló, de nem azonos objektumra, mint ahogy az a  (a) és (b) ábrán látszik. Az alakzatkontextus különböző lesz egy S alakzat különböző pontjaira, de egy S és egy S' alakzat megfelelő (homológ) pontjainak alakzatkontextusa hajlamos lesz a hasonlóságra. Ezek után a két alakzat megfeleltethető pontjai megtalálásának problémáját akként kezelhetjük, mint hasonló alakzatkontextussal rendelkező párok megtalálását.  ábra - Alakzatkontextus-számítás és -illesztés. (a, b) Két alakzat élének mintapontjai. (c) Az alakzatkontextus számítására használt log-polár hisztogram rekeszek ábrája. 5 rekeszt használunk a log r és 12 rekeszt θ számára. (d–f) Az (a) és (b) ábrán jelölt referenciaminták alakzatkontextusai: ○, ◊, ⊲. Minden alakzatkontextus a maradék ponthalmaz koordinátáinak log-polár hisztogramja a referenciapontot mint origót használva. (A sötét cellák több pontot jelentenek a rekeszekben.) Vegye észre a ○ és ◊ pontok alakzatkontextusainak vizuális hasonlóságát, amelyeket a két alakzat relatíve hasonló pontjaira számoltunk! Ezzel ellentétben a ⊲ alakzatkontextusa egészen eltérő. (g) Az (a) és (b) között kétoldali illesztéssel megtalált megfeleltetések, a hisztogramok χ^2 távolsága által definiált költséget használva. Alakzatkontextus-számítás és -illesztés. (a, b) Két alakzat élének mintapontjai. (c) Az alakzatkontextus számítására használt log-polár hisztogram rekeszek ábrája. 5 rekeszt használunk a log r és 12 rekeszt θ számára. (d–f) Az (a) és (b) ábrán jelölt referenciaminták alakzatkontextusai: ○, ◊, ⊲. Minden alakzatkontextus a maradék ponthalmaz koordinátáinak log-polár hisztogramja a referenciapontot mint origót használva. (A sötét cellák több pontot jelentenek a rekeszekben.) Vegye észre a ○ és ◊ pontok alakzatkontextusainak vizuális hasonlóságát, amelyeket a két alakzat relatíve hasonló pontjaira számoltunk! Ezzel ellentétben a ⊲ alakzatkontextusa egészen eltérő. (g) Az (a) és (b) között kétoldali illesztéssel megtalált megfeleltetések, a hisztogramok χ2 távolsága által definiált költséget használva.
21	0.75	0	A   egyenletben bemutatott stratégiareprezentáció egyik problémája, hogy diszkrét cselekvések esetén a stratégia a paraméterek nemfolytonos függvénye.^[218] Azaz lesznek olyan θ értékek, amelyeknél végtelen kis változás a θ-ban azt eredményezi, hogy a stratégia egyik cselekvésről a másikra vált. Ez azt is jelenti, hogy a stratégia értéke is változhat nemfolytonos módon, ami nehézzé teszi a gradiensalapú eljárások alkalmazását. Emiatt a stratégiakeresési eljárások gyakran használják a π[θ](s, a) sztochasz-tikus stratégia (stochastic policy) reprezentációt, amely az s állapotban az a cselekvés választásának valószínűségét specifikálja. Egy népszerű reprezentáció a szoftmax függvény (softmax function):
26	0.571429	0	Az agyprotézis-kísérletet Clark Glymour vezette be a hetvenes évek közepén, majd John Searle (Searle, 1980) is finomított rajta, de manapság leginkább Hans Moravec (Moravec, 1988) munkásságával szokás összefüggésbe hozni. A kísérlet a következő. Tegyük fel, hogy a neurofiziológia eljutott odáig, hogy tökéletesen megértette az emberi agy összes neuronjának bemeneti–kimeneti jellemzőit és összekapcsolódását. Tegyük fel továbbá azt is, hogy képesek vagyunk olyan mikroszkopikus méretű elektronikus berendezéseket építeni, amelyek utánozni tudják ezeket a jellemzőket, és problémamentesen hozzáilleszthetők az idegszövethez. Végül pedig tegyük fel azt is, hogy valamilyen csodálatos sebészi technikával anélkül tudjuk az egyes neuronokat a megfelelő elektronikus eszközökkel helyettesíteni, hogy az agy egészében vett működése megszakadna. A kísérlet abból áll, hogy valaki fejében az összes neuront elektronikus eszközökkel helyettesítik, majd pedig a folyamat visszafordításával visszajuttatjuk az illetőt a normális biológiai állapotába.
27	0.4	1	A számítható racionális ágensnek tehát képesnek kell lennie arra, hogy kiszámítsa az adott időpillanatban tökéletesen racionális cselekvést, viszont ezt nem kell azonnal megtennie, nem kell ott, helyben, abban a pillanatban ezt a tökéletesen racionális cselekvést kiszámítania és megcselekednie. Felmerülhet a kérdés, hogy akkor ennek így már mi értelme? Például egy életmentő beavatkozás esetén nincs értelme sokáig gondolkozni a tökéletes gyógymódon (hiszen a páciens élete forog veszélyben). A cselekvések, még hogyha egy adott időpillanatban tökéletesen racionálisak is lettek volna, idővel haszontalanná válhatnak. Általában ez a helyzet, és épp ezért a számítható racionalitás sem ad megoldást a tökéletes racionalitás megvalósíthatatlanságának problémájára. Persze az időben kötetlen sakk esetén a számítható racionalitás is elvben ideális megoldást ad, ámde a sakk a való élethez viszonyítva nagyon egyszerű, másrészt még az időben nem kötött sakkjátszmák sem tartanak örökké (főleg, ha emberek játsszák őket). Egyszerűen nincs idő arra, hogy a jelenlegi technológiára építve akár több ezer évig számolja az ágens a következő lépést - ez abszurdum.
24	0.833333	1	A keresendő alakzatot paraméterekkel kell leírni, például egy egyenest (y = mx + b) a meredekségével és az eltolásával. A paramétertérben így minden képpont egy lehetséges keresett alakzatnak felel meg. A bemenő kép pixeleit tekinti, és minden ponthoz kiszámítja azon paramétereket, melyek konzisztensek a kiinduló ponttal. Ez egy alakzatot – a példa egyenes esetén m = f(b) görbe – eredményez a paramétertérben. Miután minden pixelt egy paramétertérbeli alakzatra képezett le, meg kell keresni azon keletkezett csomópontokat, ahol számos görbe áthalad. n darab áthaladó alakzat azt jelenti, hogy a csomópont által meghatározott paraméterekkel rendelkező keresett objektummal pontosan n darab pixelérték konzisztens az eredeti képen. A paramétertér az implementáció során akkumulátor térré módosul, mely lista szerűen tartalmazza a lehetséges paraméter értékeket kvantálva, és számlálja, hogy hány pixel konzisztens az adott paraméterekkel. Erre a lépésre azért van szükség, mert a paramétertér folytonos és nem is mindig korlátos.
7	0.4	0	Az előző levezetést – következtetési szabályok egy sorozatát – bizonyításnak (proof) nevezzük. A bizonyítás megtalálása pontosan olyan, mint megoldást találni egy keresési problémára. Valójában ha a következtetési szabályok összes lehetséges alkalmazásának generálására egy új állapotátmenet-függvényt definiálnánk, akkor minden, a 3. és  fejezetbeli kereső algoritmust felhasználhatnánk a bizonyítás megtalálására. A bizonyítás keresése tehát egy alternatívája a modellek felsorolásának. A keresés haladhat előrefelé a kezdeti tudásbázisból kiindulva, alkalmazva a következtetési szabályokat a célmondat levezetéséhez, vagy mehet visszafelé a célmondatból, megpróbálva megtalálni a következtetési szabályoknak olyan láncolatát, amely a kiindulási tudásbázisra alkalmazható szabályokból indul. A fejezetben később bemutatunk két olyan algoritmuscsaládot, amelyek ezeket a technikákat használják. Fontos Az a tény, hogy a következtetés az ítéletlogikában NP-teljes, azt sugallja, hogy a legrosszabb esetet tekintve a bizonyítások keresése sem hatékonyabb a modellek felsorolásánál. Számos gyakorlati esetben azonban, α bizonyítás megtalálása sokkal hatékonyabb lehet, egyszerűen azért, mert képes figyelmen kívül hagyni az irreleváns állításokat, függetlenül attól, hogy hány van belőlük. Például az előző bizonyítás, amely elvezetett a ¬C[1,2] ∧ ¬C[2,1] mondathoz, nem említi az S[2,1], C[1,1], C[2,2] vagy a C[1,2] állításokat. Ezeket azért lehet figyelmen kívül hagyni, mert a C[1,2] célállítás csak az Sz[2]-ben jelenik meg, az Sz[2]-ben szereplő egyéb állítások pedig csak az Sz[2]-ben és az Sz[4]-ben, így az Sz[1], Sz[3 ]és Sz[5] szabályoknak nincs kihatásuk a bizonyításra. Ugyanez maradna a helyzet, ha még millió szabályt hozzáadnánk a tudásbázishoz, miközben az igazságtábla algoritmust ezzel ellentétben elárasztaná a modellek exponenciális robbanása.
3	0.25	1	Vizsgáljuk meg, milyen következtetést tudunk levonni abból, ha a kimenet „igaz” állapotú, azaz az R jelű mezőkön van, az r jelű mezőkön pedig nincs akna! Ebben az esetben a sárga hátterű 3-asokat megvizsgálva azt kapjuk, hogy a v-vel, Q-val, y-nal és P-vel jelölt mezőkön muszáj aknának lennie. A piros hátterű 4-est vizsgálva láthatjuk, hogy már „megvan” mind a négy aknája, így az A és B jelű mezőkön, azaz a bemeneteken semmiképpen sem lehet akna. Az u és x jelű mezőknek „hamis” (aknátlan) értéket adva egyértelmű, ellentmondásmentes állapotot kaptunk.
27	0.4	1	Ha adott környezetben, adott feladatra képesek volnánk ilyen ágenst tervezni és megvalósítani (pl. otthonunkban egy korlátozottan optimális házi-robotot tudnánk létrehozni), akkor ez lenne az adott feladat kapcsán elvárható legjobb megoldás.
12	0.47619	0	Összegezve a nemdeterminisztikus, részben megfigyelhető környezetek a hiedelmi állapotok egy és-vagy gráfját eredményezik. Ebből adódóan feltételes tervek találhatók pontosan ugyanazon algoritmusokkal, mint a teljesen megfigyelhető esetben, nevezetesen az És-Vagy-Gráf-Keresés-sel. Ez abból is könnyen megérhető, ha belátjuk, hogy az ágens hiedelmi állapota mindig teljesen megfigyelhető, azaz mindig tudja, hogy mit tud. A „hagyományos” teljesen megfigyelhető problémamegoldás csak egy speciális eset, melyben minden hiedelmi állapot egy egyelemű halmaz, pontosan egy fizikai állapottal.  ábra - A „váltakozó dupla-Murphy” porszívóvilág és-vagy gráfjának egy részét mutatja be, melyben a tiszta négyzetet elhagyó ágens piszkot hagyhat maga után. Az ágens nem tudja érzékelni a más négyzetben levő piszkot. A „váltakozó dupla-Murphy” porszívóvilág és-vagy gráfjának egy részét mutatja be, melyben a tiszta négyzetet elhagyó ágens piszkot hagyhat maga után. Az ágens nem tudja érzékelni a más négyzetben levő piszkot.
3	0.083333	1	 ábra - „The Secret Chamber” by Kevin J. Lin, http://www.greylabyrinth.com/puzzle/puzzle102 felhasználásával „The Secret Chamber” by Kevin J. Lin, http://www.greylabyrinth.com/puzzle/puzzle102 felhasználásával
24	0.958333	1	 (Pietro Perona nyomán.) A  ábra X és Y pontban két kamerát mutat, amelyek megfigyelnek egy jelenetet. Rajzolja le azt a képet, amit az egyes kamerák látnak (felteheti, hogy minden jelölt pont ugyanabban a vízszintes síkban helyezkedik el). Mi tudható meg a két kép alján az A, B, C, D és E pontok a kamera alapvonalától mért relatív távolságáról, és milyen alapon?
26	0.428571	0	Egyáltalán mi a probléma a test–elme problémában? Az első nehézség René Descartes-ra vezethető vissza, aki egy nem halandó lélek interakcióját vizsgálta egy halandó testtel, és egy dualista (dualist) elméletet állított fel, miszerint a lélek és a test két különböző típusú dolog. A monista (monsit), gyakran materialista (materialism) névvel is illetett elmélet szerint nincs olyan dolog, hogy halhatatlan lélek, hanem csupán az anyagi objektumok léteznek. Ennek megfelelően a mentális állapotok (mint például a fájdalom, a lovaglás tudata vagy az a meggyőződés, hogy Bécs Ausztria fővárosa) csupán agyállapotok. Ezt az elméletet John Searle egy tömör szlogenben foglalta össze: „Az agy okozza az elmét.”
12	0.428571	0	kifejezést írnánk fel. A feltételes következmények nem vezetik be a nemdeterminisztikusságot, de segítséget nyújtanak annak modellezésében. Tegyük fel például, hogy egy körmönfont porszívónk van, ami néha, ha mozog, piszkot szór a célnégyzetre, de csak akkor, ha az tiszta. Ez a
16	0.26087	0	Ha csak azokat a cselekvéseket vesszük figyelembe, amelyek az ágens pénzmennyiségét befolyásolják, akkor általában az lesz a tapasztalat, hogy az ágens a több pénzt előnyben részesíti a kevesebbel szemben, ha egyéb dolgok egyenlők. Azt mondjuk, hogy az ágens monoton preferenciát (monotonic preference) mutat egy adott összegű pénz esetén. Azonban ez nem elegendő annak garantálására, hogy a pénzt egy hasznosságfüggvénynek tekinthessük, mivel ez semmit sem mond azon szerencsejátékok közötti preferenciákról, amelyek kimenetele pénz.
1	0.275862	1	Az fMRI által az agyi aktivitásról nyújtott információ jól hasznosítható a neuropszichológiai alapkutatásban és a mindennapos klinikai gyakorlatban is. Az idegsebészeti műtétek előtti tervezésnél az elokvens agyi területek vizualizálása sok esetben elengedhetetlen, például a gyrus prae- és postcentralis határainak pontos kijelölése centrálisan elhelyezkedő, diszlokációt okozó tumor esetében. Továbbá a balkezes betegek 30%-ában és a temporalis lebeny epilepsziában szenvedő betegek 25%-ában atípusos beszédközpont-lokalizáció figyelhető meg. Ugyancsak hasznos információ nyerhető az epilepsziás betegek vizsgálatakor. Például temporalis lebeny epilepsziában szenvedő betegek esetében a fókusz oldalán a formatio hippocampalisban kisebb aktiváció vagy az aktiváció hiánya figyelhető meg memóriaparadigma során. Ezek a funkcionális vizsgálatok PET-tel is elvégezhetők, azonban az fMR nagy előnye, hogy nem igényli radioaktív kontrasztanyag befecskendezését, a vizsgálati idő viszonylag rövid (néhány perc a vizsgálat menetétől függően), a nyert felvétel felbontása sokkal jobb, szélesebb körben hozzáférhető és olcsóbb. Mivel Magyarországon főleg 1 T-s készülékek működnek, a cél volt annak bemutatása, hogy alacsony térerőn is lehet funkcionális MR-vizsgálatokat végezni.
3	0.958333	0	Mutassa meg, hogy a 8-as játék állapottere két diszjunkt részből áll, ahol egyik részhez tartozó állapotot semmilyen véges lépésszekvenciával sem lehet a másik részhez tartozó állapotba áttranszformálni. (Segítség: Berlekamp és társai, 1982). Dolgozzon ki egy eljárást, amely el tudja dönteni, hogy az állapot melyik részhez tartozik, és magyarázza meg, hogy ez miért hasznos, ha az állapotokat véletlen módon generáljuk.
25	0.074074	1	A robot kifejezés Karel Ĉapek színdarabjából származik (R.U.R. — Rossum’s Universal Robot, 1921). A szépirodalomban és a műszaki, technikai fogalom-körben is általában olyan eszközt, berendezést értenek rajta, amely az ember fizikai és/vagy szellemi munkájához hasonló tevékenységet végez. Ennek meg-felelően a gyártási folyamatokban, a tudományos kutatásokban alkalmazott robotoktól olyan tulajdonságokat várunk el, amelyek lehetővé teszik, hogy saját tevékenységüket kisebb-nagyobb mértékben ellenőrizzék és korrigálják. Más szavakkal, eleget kell tenniük az intelligencia bizonyos alapfeltételeinek (érzékelés, információ-feldolgozó kapacitás, tudás illetve emlékezet, tanulási képesség és döntéseken alapuló közlési—cselekvési képesség, stb.).
8	0.903226	0	Ebben a fejezetben megmutattuk, hogy hogyan használható az elsőrendű logika (first-order logic) egy tudásalapú ágens reprezentációs nyelveként. A legfontosabb megállapítások a következők: * A tudásreprezentációs nyelveknek deklaratívnak, kompozíciósnak, kifejezőnek, a szövegkörnyezettől függetlennek és egyértelműnek kell lenniük. * A logikák különböznek ontológiai és episztemológiai megállapításaikban. Amíg az ítéletlogika megállapításai csak tények létezésére vonatkoznak, addig az elsőrendű logika az objektumok és a relációk létezését is felhasználhatja, így nagyobb kifejezőerővel rendelkezik. * Egy lehetséges világot vagy modellt az elsőrendű logikában objektumok egy halmaza definiál, a köztük lévő relációk és a rájuk alkalmazható függvények által. * A konstansszimbólumok (constant symbols) objektumokat neveznek meg, a predikátumszimbólumok (predicate symbols) relációkat, míg a függvényszimbólumok (function symbols) függvényeket. Egy interpretáció megadja a leképezést a szimbólumok és a modell között. Az összetett termek (complex terms) függvényszimbólumokat rendelnek hozzá a termekhez, hogy nevet adjanak egy objektumnak. Ha megadunk egy interpretációt és egy modellt, a mondat igazságtartalmát meghatároztuk. * Egy atomi mondat (atomic sentence) egy vagy több termre alkalmazott predikátumból áll. A mondat csak akkor igaz, ha a predikátum által megnevezett reláció fennáll a termek által megnevezett objektumok között. Az összetett mondatok (complex sentences) – az ítéletlogikához hasonló módon – összekötőjeleket használnak, a kvantorok (quantifiers) használata pedig lehetővé teszi általános szabályok megfogalmazását is. * Egy tudásbázis építése az elsőrendű logikában a tárgyterület alapos elemzését igényli, valamint egy szótár megválasztását és a kívánt következtetések eléréséhez szükséges axiómák kódolását.
11	0.923077	0	A döntőbizotság még nem döntött, de a különböző tervkészítési algoritmusok néhány nagyon érdekes összevetése már elérhető. Helmert a tervkészítési problémák számos osztályát vizsgálja, és megmutatja, hogy az NP-nehéz problémakörökben a megkötésalapú megközelítések, mint a Graphplan és a SATplan bizonyulnak a legjobbnak, míg a keresésalapú megközelítések azon problémakörökben hasznosak, ahol visszalépések nélkül elérhető egy megfelelő megoldás (Helmert, 2001). A Graphplan és SATplan algoritmusoknak nehézséget okoznak a sok objektumot tartalmazó problémák, mert ezek miatt sok cselekvésre van szükségük. Az esetek egy részében a probléma elkerülhető vagy elodázható, ha a cselekvések bizonyos részét csak szükség esetén generáljuk le dinamikusan, ahelyett hogy már a keresés előtt példányosítanánk mindegyiket. Weld a modern tervkészítő algoritmusok két kitűnő áttekintését adja (Weld, 1994; 1999). Érdekes látni az eltelt öt év változásait az áttekintésekben: az első a részben rendezett tervkészítésre fókuszál, míg a második a Graphplan és SATplan algoritmusokra. A Readings in Planning (Allen és társai, 1990) a terület legjobb korábbi cikkeinek minden részletre kiterjedő antológiája, beleértve néhány áttekintést is. Yang a részben rendezett tervkészítők könyv méretű áttekintését adja (Yang, 1997).
12	0.190476	0	Az információ elrejtésének ez a módja szükségszerű, ha a hierachikus tervezés célja a komplexitás csökkentése. Szükséges, hogy a magas szintű cselekvésekről anélkül dönthessünk, hogy a számtalan implementációs részlet miatt aggódnánk. Ennek azonban ára van. Konfliktusok léphetnek fel, például egy magas szintű cselekvés belső feltételei, valamint egy másik magas szintű cselekvés belső cselekvései között, miközben a magas szintű leírások alapján nincs mód ezek detektálására. Ennek a problémának komoly hatásai vannak a HFH-tervkészítő algoritmusokra. Dióhéjban, míg a tervkészítő algoritmus az atomi cselekvéseket, mint pontszerű eseményeket kezelheti, a magas szintű cselekvéseknek időbeli kiterjedése van, ami alatt minden mehet tovább.
7	0.48	0	Az algoritmust a legjobban úgy érthetjük meg, ha megnézünk egy példát és egy hozzá tartozó ábrát. A  (a) ábra egy egyszerű Horn-klózokból álló tudásbázist mutat be, amely az A és B ismert tényeket tartalmazza. A  (b) ábra ugyanezt a tudásbázist egy ÉS-VAGY gráfként (AND-OR graph) ábrázolja. Az ÉS-VAGY gráfokban a konjunkciókat ívekkel összefogott kapcsolatok – minden egyes kapcsolatot bizonyítani kell – jelölik, míg a diszjunkciókat ívek nélkül összefutó kapcsolatok – elég valamelyik kapcsolatot bizonyítani – jelölik. Könnyű áttekinteni, hogyan is működik az előrefelé láncolás a gráfon. Az ismert levelek (itt A és B) adottak, és a következtetés addig halad felfelé a gráfon, amíg lehetséges. Bárhol megjelenik egy konjunkció a folyamatban, a továbbterjesztés megáll addig, amíg az összes konjunkt ismertté nem válik, majd ezután halad tovább. Javasoljuk az olvasónak, hogy vegye át részletesen a példát.  ábra - (a) Egyszerű Horn-klózokból álló tudásbázis. (b) Ugyanez a tudásbázis ÉS-VAGY gráfként. (a) Egyszerű Horn-klózokból álló tudásbázis. (b) Ugyanez a tudásbázis ÉS-VAGY gráfként. Fontos Könnyű belátni, hogy az előrefelé láncolás helyes: minden következtetés valójában a Modus Ponens egy alkalmazása. Az előrefelé láncolás teljes is: minden vonzat atomi mondatot vezet le. A legegyszerűbben úgy érthetjük meg ezt, ha a kikövetkeztetett állapot tábla végső állapotát tekintjük (miután az algoritmus elért egy fix pontot (fixed point), ahol már újabb következtetés nem lehetséges). A tábla igaz értéket tartalmaz minden, a folyamat során kikövetkeztetett szimbólumra, és hamis értéket a többi szimbólumra. A táblát úgy tekinthetjük, mint egy logikai modellt, ráadásul minden határozott klóz az eredeti TB-ben igaz ebben a modellben. Ennek belátására feltételezzükaz ellenkezőjét, nevezetesen, hogy valamely a[1] ∧ … ∧ a[k] ⇒ β klóz hamis a modellben. Ez azt jelenti, hogy a[1 ]∧ … ∧ a[k]-nak igaznak, míg β-nek hamisnak kell lennie a modellben. Ez viszont ellentmond annak a feltételezésünknek, hogy az algoritmus elérte a fix pontot! Így levonhatjuk azt a következtetést, hogy a kikövetkeztetett atomi mondatok halmaza a fix pontban az eredeti TB egy modelljét definiálja. Ezenkívül, bármely q atomi mondatnak, amely vonzata a TB-nek, igaznak kell lennie ennek minden modelljében, így ebben az említett modellben is. Ennélfogva az algoritmusnak ki kell következtetnie minden q vonzat mondatot.
9	0.965517	1	A bal oldali menüben választjuk ki a témát: * tumor specifikus iránymutatások: multidiszciplináris iránymutatások a diagnózis és a kezelésre vonatkozóan egy adott tumor esetén. * csont lágyrész, * bőrgyógyászati, * endokrin tumorok, * örökletes daganatok, * gasztroenterológia, * nőgyógyászat, * onkológia, * fej-nyak, * mamma, * urológia. * nem tumor specifikus iránymutatások: ellátás specifikus iránymutatás egy tünet/ egészségügyi probléma miatti betegség kezelése. * termékenység, * palliatív ellátás, * ápolási, * táplálkozási és diéta, - egyéb. * adott esetben az iránymutatások utalnak egymásra.
8	0.483871	0	Az axiómák lehetnek „csak puszta tények”, mint amilyenek a Férfi(Jim) és a Házastársa(Jim, Laura). Az ilyen tények alkotják a speciális probléma példányok leírásait, lehetővé téve speciális kérdések megválaszolását. Ilyenkor az ezekre a kérdésekre adott válaszok tételek lesznek, amelyek az axiómákból következnek. Gyakran előfordul, hogy az elvárt válasz nem kapható meg – például a Férfi(George) és a Házastársa(George, Laura)-ból azt várnánk, hogy kikövetkeztethetőnek kellene lennie annak, hogy Nő(Laura); de ez nem következik a korábban megadott axiómákból. Ez annak a jele, hogy egy axióma hiányzik. A  feladat ennek a megadását kéri.
10	0.515152	0	Ha Modus Ponensen kívül más következtetési szabályokat is hozzáveszünk, olyan kérdések megválaszolására leszünk képesek, mint a „Feltéve, hogy a logikai ágens ezeket a premisszákat ismeri, képes-e azt a konklúziót kikövetkeztetni?”. A közönséges következtetési szabályokon túlmenően szükségünk van hiedelemspecifikus szabályokra is. Így például az alábbi szabály azt mondja ki, hogy ha egy logikai ágens elhisz valamit, akkor azt is elhiszi, hogy elhiszi azt.
5	0.545455	0	A lokális keresési algoritmusok (lásd  alfejezet) nagyon hatékonynak bizonyulnak sok kényszerkielégítési probléma megoldásában: a kiinduló állapot minden változóhoz értéket rendel, és az állapotátmenet-függvény működése során általában egyszerre csak egy változó értékét módosítja. A 8-királynő problémában például a kezdeti állapot lehet a 8 királynő véletlenszerű elhelyezése a 8 oszlopban, az állapotátmenet-függvény pedig kiemel egy királynőt, és megpróbálja a saját oszlopán belül máshova helyezni. Egy másik lehetőség lehetne, ha úgy indulnánk, hogy a 8 királynő mindegyikét egy külön oszlopba a nyolc sor permutációjával helyezzük el, és az a következő állapotokat pedig két királynő sorának felcserélésével generálnánk.^[49]Tulajdonképpen már láttunk egy példát lokális keresés alkalmazására egy CSP-probléma megoldásánál: ilyen volt a hegymászás alkalmazása a 8-királynő probléma megoldására 4. szakasz - Hegymászó keresés. Egy másik alkalmazás a WalkSAT 7. szakasz - Lokális keresés algoritmus a kielégíthetőségi probléma megoldására, mely szintén egy speciális esete a kényszerkielégítési problémáknak.
24	0.666667	0	A szín és a mintázat hisztogramok vagy empirikus frekvenciaeloszlások segítségével reprezentálható. Ha adott egy tigris képe mintaként, akkor megmérhetjük a különböző színű képpontok arányát. Ezután, ha egy ismeretlen példát látunk, összevethetjük a szín hisztogramját a korábbi tigrispéldáknál látottakkal. A mintázatok elemzéséhez a kép különböző irányú és skálázású szűrőkkel történt konvolúciója után kapott eredményeinek hisztogramjait vizsgáljuk, egyezést keresve.
18	0.789474	0	Az általunk bemutatott, VKH-tanulásra vonatkozó eredmények a legrosszabb esetre érvényesek, nem feltétlenül mutatva azt az átlagos esetre vonatkozó mintakomplexitást, amelyeket viszont a bemutatott tanulási görbék tükröznek. Egy, az átlagos esetre vonatkozó analízisnek további feltételezésekkel kell élnie a minták eloszlásáról, valamint a keresett függvények eloszlásáról. Miközben ezeket a kérdéseket egyre jobban megértjük, a tanulás számítási elmélete folyamatosan a gépi tanulással foglalkozó kutatók hasznos útmutatójának bizonyul. Ezek a kutatók algoritmusaik módosításában vagy algoritmusaik tanulási képességének meghatározásában érdekeltek. A döntési listák mellett a Boole-függvények szinte minden ismert alosztályára, a neurális hálókra (lásd  fejezet), valamint az elsőrendű logikai állítások halmazaira (lásd  fejezet) születtek eredmények. Az elért eredmények azt mutatják, hogy a tisztán indukciós tanulás rendkívül nehéz. Tisztán indukciós tanuláson azt a helyzetet értjük, amelyben az ágens nem rendelkezik semmilyen, a keresett függvényre vonatkozó, előzetes ismerettel. Mint a  fejezetben megmutatjuk, az előzetes tudásnak az induktív tanulás vezérlésére való felhasználása lehetővé teszi, hogy meglehetősen nagy állításhalmazokat elfogadható mintaszám alapján megtanuljunk, még egy olyan nyelven is, amelynek kifejezőereje megegyezik az elsőrendű logikáéval.
26	0.285714	0	Összegezve azt mondhatjuk, hogy számos olyan kérdés, melyet Dreyfus felvetett – a köznapi háttértudás, a kvalifikáció probléma, a bizonytalanság kezelése, a tanulás, a döntéshozatal előre lefordított módjai, annak fontossága, hogy ne testetlen következtetőgépeket tekintsünk, hanem szituációjukba ágyazott ágenseket –, ma már bekerült az intelligens ágensek tervezésének szokványos menetébe. Véleményünk szerint mindez tehát nem a mesterséges intelligencia lehetetlenségét, hanem éppen a fejlődését bizonyítja.
24	0.833333	1	A SIFT egy tanítóhalmazból kapja meg a képeket a felismerendő objektumról. A képekből jellemzőket számít, ezeket egy adatbázisban tárolja. Egy új kép elemzésekor szintén kiszámolja a jellemzőket, majd az adatbázisban keres hasonló értékeket. Amennyiben talál egyező jellemzőket, melyek egyetértenek többek között az objektum típusában, elhelyezkedésében és méretében, akkor jelzi a kimeneten az adott objektum meglétét a képen. Ebből a szemszögből a SIFT felfogható, mint egy felügyelt tanuló algoritmus. Jó tulajdonsága, hogy invariáns a méret, orientáció és egyéb affin transzformációkra és részben invariáns a megvilágítás megváltozására.
1	0.137931	1	A Bongard problémák először 1967-ben, Mikhail Moiseevitch Bongard könyvében jelentek meg, amit 1970-ben Pattern Recognition címmel fordítottak angolra. Igazán ismertté csak 1979-ben váltak, Douglas R. Hofstadter: Gödel, Escher, Bach: An ethernal golden braid című munkája által. Egy probléma 12 fekete-fehér képből áll, hat a bal, és hat a jobb oldalon. A megoldás egy szabály megtalálása, ami az összes bal oldali ábrán teljesül, de egyik jobb oldalin sem. A jobb oldali ábráknak lehet saját leíró szabálya, sokszor a bal oldali szabály ellentéte, de ez nem kötelező. A továbbiakban a szakirodalmat követve, Bongard probléma helyett a BP rövidítést használom, az egy oldalon álló képeket pedig osztálynak nevezem. Az ábrákon bemutatok néhány problémát és azok megoldásait.  ábra - BP 3: kitöltött – nem kitöltött BP 3: kitöltött – nem kitöltött  ábra - BP 6: háromszög - négyszög BP 6: háromszög - négyszög
5	0.181818	1	A kapott {NSW=RED, WA=RED, NT=BLUE, Q=GREEN} behelyettesítés konzisztens, így jöhet az előretekintés. Ennek során a Q-val szomszédos, még be nem helyettesített változók értékkészletéből vesszük ki azokat az értékeket, amelyek ellentmondanának a Q=GREEN értékadásnak. Egyetlen változó jöhet csak szóba, az SA, és ennek is csak egyetlen értéke van, a GREEN, így nyilván ez kerül eltávolításra az SA értékkészletéből. SA új értékkészlete {}, azaz üres lesz.
21	0.875	0	Az időbeli különbség tanulásnak és a szimulációs tapasztalatok modellbázisú generálásának kombinálását Sutton a Dyna architektúrában javasolta (Sutton, 1990). A prioritásos végigsöprés ötletét egymástól függetlenül Moore és Atkeson (Moore és Atkeson, 1993), illetve Peng és Williams (Peng és Williams, 1993) vetették fel. A Q-tanulást Watkins dolgozta ki PhD-disszertációjában (Watkins, 1989).
18	0.947368	0	Egy együttes tanulási algoritmust vizsgál, amely M megtanult hipotézis eredményének egyszerű többségi szavazását használja. Tegyük fel, hogy az összes hipotézisnek a hibája, és az egyes hipotézisek által elkövetett hibák függetlenek a többiek hibájától. Adja meg M és ε függvényében azt az összefüggést, amelylyel az együttes tanulással előállított eszköz hibája számítható, és számítsa ki M = 5, 10 és 20, illetve ε = 0,1, 0,2 és 0,4 esetén! Ha feladjuk a függetlenségre vonatkozó feltételezést, akkor előfordulhat-e, hogy az együttes hibája rosszabb lesz, mint ε?
6	0.1	1	Eddig ugyebár mindig 1 valószínűséggel játszottuk a stratégiákat. Ezt nevezik tehát tiszta stratégiának. Ha viszont 1-nél kisebb valószínűségek tartoznak a tiszta stratégiákhoz, akkor kevert stratégiákról beszélünk. Lássuk ezt most pontosabban.
25	0.148148	0	A kerekekkel ellentétben a lábak még a nagyon nehéz tereppel is megbirkóznak. Ugyanakkor a lábak meglehetősen lassúak sík terepen, és mechanikailag nehezebb megépíteni őket. Robotikai szakemberek próbáltak már különféle konstrukciókat, egytől akár tucatnyi lábig. Készítettek lábbal rendelkező robotokat sétálásra, futásra, sőt még ugrálásra is. Egy ilyen példa látható a  (a) ábrán: ez a robot dinamikusan stabil (dinamically stable), ami azt jelenti, hogy képes talpon maradni, miközben körbe ugrál. Statikusan stabilnak (statically stabile) hívják azokat a robotokat, amelyek úgy képesek állva maradni, hogy nem mozognak a lábaik. A robot statikusan akkor stabil, ha a súlypontja a lábai által kifeszített sokszög fölé esik.  ábra - (a) Marc Raibert egyik lépegető robotja mozgás közben. (b) A Sony AIBO robot focizás közben (copyright 2001, The RoboCup Federation). (a) Marc Raibert egyik lépegető robotja mozgás közben. (b) A Sony AIBO robot focizás közben (copyright 2001, The RoboCup Federation).
9	0.206897	0	A  feladat tovább vizsgálja az átnevezés szükségességének problémáját.  ábra - Az egyesítési algoritmus. Az algoritmus összehasonlítja a bemenetek felépítését elemről elemre. A θ helyettesítés, amely az Egyesítés argumentuma, útközben épül fel, és arra használjuk, hogy meggyőződjünk arról, hogy a későbbi összehasonlítások konzisztensek lesznek az általunk előzőleg létrehozott lekötésekkel. Egy összetett kifejezésben, mint például az F(A, B), a Vál függvény kiveszi az F függvényszimbólumot, és az Argok függvény kiveszi az (A, B) argumentumlistát. Az egyesítési algoritmus. Az algoritmus összehasonlítja a bemenetek felépítését elemről elemre. A θ helyettesítés, amely az Egyesítés argumentuma, útközben épül fel, és arra használjuk, hogy meggyőződjünk arról, hogy a későbbi összehasonlítások konzisztensek lesznek az általunk előzőleg létrehozott lekötésekkel. Egy összetett kifejezésben, mint például az F(A, B), a Vál függvény kiveszi az F függvényszimbólumot, és az Argok függvény kiveszi az (A, B) argumentumlistát.
1	0.931034	0	Az MI filozófiai és gyakorlati problémáiról olvasmányos áttekintést ad John Haugeland Artificial Intelligence: The Very Idea c. műve (Haugeland, 1985). A kognitív tudományról néhány újkeletű forrás (Johnson-Laird, 1988; Stillings és társai, 1995; Thagard, 1996) és az Encyclopedia of the Cognitive Sciences (Wilson és Keil, 1999) adnak jó leírást. A modern nyelvészet szintaktikai aspektusát (Baker, 1989), szemantikai aspektusát pedig (Chierchia és McConnell-Ginet, 1990) mutatja be jól. A számítógépes nyelvészettel Jurafsky és Martin (Jurafsky és Martin, 2000) foglalkoznak.
11	0.923077	0	Weld csoportja fejlesztette ki az UCPOP-ot is (Penberthy és Weld, 1992), az első tervkészítőt ADL-ben kifejezett problémákra. Az UCPOP a kielégítetlen-célok-száma heurisztikát alkalmazta. Valamivel gyorsabban futott, mint az SNLP, de nagyon ritkán volt képes néhány tucat lépésnél többet tartalmazó tervek megtalálására. Bár javított heurisztikákat is kifejlesztettek az UCPOP módszerhez (Joslin és Pollack, 1994); (Gerevini és Schubert, 1996) az 1990-es években, a gyorsabb módszerek megjelenésével a részben rendezett tervkészítők háttérbe szorultak. Nguyen és Kambhampati a módszer visszatérését javasolták (Nguyen és Kambhampati, 2001): a tervkészítési gráfból megfelelő heurisztikák származtatásával a RePOP tervkészítőjük jobban skálázható, mint a Graphplan, továbbá ez vetélytársa lett a leggyorsabb állapottér-tervkészítőknek is.
14	0.956522	0	Tekintsük a lineáris Gauss lokális eloszlású hálók családját, amit az 14. szakasz - Bayes-hálók folytonos változókkal rész illusztrál. a. Egy kétváltozós hálóban legyen X[1] az X[2] szülője, X[1]-nek legyen normális a priori eloszlása, P(X[2]∣X[1]) pedig egy lineáris normális eloszlás. Mutassa meg, hogy a P(X[1], X[2]) együttes eloszlás egy többváltozós Gauss-eloszlás, és számolja ki ennek a kovarianciamátrixát. b. Bizonyítsa be indukcióval, hogy egy általános lineáris Gauss-háló X[1], …, X[n]-en vett együttes eloszlása szintén többváltozós Gauss-eloszlás.
1	0.862069	0	Mit tehet az MI manapság? Nehéz erre tömör választ adni, mert annyi minden történt, és olyan sok a művelt részterület. Az alábbiakban bemutatunk néhány alkalmazást, másokról a könyv további részeiben szó lesz.
21	0.3125	0	Ebben az egyenletben α az úgynevezett bátorsági faktor (learning rate). Mivel ez az egyenlet a hasznosságok egymást követő állapotokhoz tartozó értékeit használja, ezért gyakran időbeli különbség vagy IK- (temporal-difference, TD) egyenletnek nevezik. Fontos Az időbeli különbségen alapuló módszerek alapötlete az, hogy először határozzuk meg azokat a feltételeket, amelyek korrekt becslési értékek esetén lokálisan fennállnak, majd állítsunk fel egy olyan értékfrissítésre szolgáló egyenletet, amely ezen ideális „egyensúlyi” egyenlet irányába viszi a becsléseket. Passzív tanulás esetén az egyensúlyi egyenletet a   szolgáltatja. A   egyenlet ténylegesen a   által megadott egyensúlyi helyzetbe viszi az ágenst, bár van némi finom trükk a dologban. Először vegyük észre, hogy a frissítés csak a megfigyelt következő állapotot, s' -t veszi figyelembe, míg a tényleges egyensúlyi feltétel az összes lehetséges következő állapotot. Azt hihetnénk, hogy ez túlzottan megváltoztatja U^π(s)-t, amikor egy ritka átmenet következik be. Valójában viszont ritka átmenetek ritkán következnek be, ezért az U^π(s) átlagos értéke a helyes értékhez fog konvergálni. Továbbá, ha α-t megváltoztatjuk úgy, hogy ne egy rögzített paraméter legyen, hanem egy függvény, amely aszerint csökken, ahogy egy állapotnak a kísérletekben történő előfordulása nő, akkor maga az U(s) is a helyes értékhez fog tartani.^[213] Ez a  ábrán látható ágensprogramhoz vezet. A  ábra bemutatja a passzív IK-ágens által a 4 × 3 világban mutatott teljesítményt. Ugyan nem tanul olyan gyorsan, mint az ADP-ágens, és nagyobb változékonyságot mutat, de sokkal kevesebb számítást igényel megfigyelésenként. Vegyük észre, hogy az IK nem igényel modellt a frissítés elvégzéséhez. A környezet szolgáltatja a szomszédos állapotok közti kapcsolatokat, a megfigyelt átmenetek formájában.  ábra - Egy időbeli különbség alapon hasznosságot tanuló passzív megerősítéses ágens Egy időbeli különbség alapon hasznosságot tanuló passzív megerősítéses ágens  ábra - Az IK-tanulás 4 × 3-as világon mért tanulási görbéi. (a) Néhány kiválasztott állapot hasznosságbecslése a kísérletszám függvényében. (b) Az U(1,1) becslésének RMS-hibája, amelyet 20 futás átlagából számoltunk, mindegyik futás 500 kísérletet tartalmazott. Csak az első 100 kísérletből származó eredményt rajzoltuk fel, hogy a görbe a  ábrával összehasonlítható legyen. Az IK-tanulás 4 × 3-as világon mért tanulási görbéi. (a) Néhány kiválasztott állapot hasznosságbecslése a kísérletszám függvényében. (b) Az U(1,1) becslésének RMS-hibája, amelyet 20 futás átlagából számoltunk, mindegyik futás 500 kísérletet tartalmazott. Csak az első 100 kísérletből származó eredményt rajzoltuk fel, hogy a görbe a  ábrával összehasonlítható legyen.
20	0.571429	0	Ellenőrzött tanulást kernelekkel úgy végezhetünk, hogy a tanító példányokból származtatott összes jóslás súlyozott kombinációját vesszük. (Összehasonlítva a k-legközelebbi-szomszéd módszerrel, ott a k-legközelebbi-példány súlyozatlan kombinációját használjuk.) Az i-edik példánynak a kérdéses x pontra vett súlyát a K(x, x[i]) kernelfüggvényérték adja. Diszkrét jóslás esetén súlyozott szavazást vehetünk, folytonos esetben súlyozott átlagot vagy súlyozott lineáris regressziót. Figyeljük meg, hogy a kernelekkel végzett jóslás azt igényli, hogy az összes tanító példányt figyelembe kell vennünk. A kernelek összekombinálhatók a legközelebbi-szomszéd indexelési sémáival azért, hogy csupán a szomszédos példányok alapján előállított súlyozott jóslást alkalmazzuk.
14	0.434783	0	Megmutattuk, hogy a változóeltávolítás hatékonyabb, mint a felsorolás, mivel elkerüli a számítások megismétlését (ahogyan az irreleváns változókat is kiejti). A változó eliminálás idő- és tárigényét az algoritmus működése alatt létrejövő legnagyobb tényező mérete befolyásolja a legerőteljesebben. Ezt viszont a változók eliminálásának sorrendje és a háló struktúrája határozza meg. Fontos A  ábra betörős hálója a hálóknak azon családjához tartozik, ahol a háló bármely két csomópontja között legfeljebb egyetlen irányítatlan út létezik. Ezeket egyszeresen összekötött (singly connected) hálóknak vagy polifáknak (polytree) nevezzük, amelyeknek van egy különösen kellemes tulajdonságuk: az egzakt következtetés idő- és tárkomplexitása a polifákban a háló méretében lineáris. Itt a méret az FVT-bejegyzések számával van definiálva; ha minden egyes csomópont szüleinek a száma egy konstanssal korlátozott, akkor a komplexitás a csomópontok számában is lineáris. Ezek az eredmények bármely – a háló topológiai sorrendjével konzisztens – sorrendezés esetén fennállnak (lásd  feladat). Fontos A többszörösen összekötött (multiply connected) hálóban (lásd például  (a) ábra) a változó eliminálás legrosszabb esetben exponenciális idő- és tárkomplexitású lehet, még akkor is, ha a csomópontonkénti szülők száma korlátos. Ez nem meglepő, figyelembe véve, hogy a Bayes-hálókban való következtetés NP-nehéz, mivel ez speciális alesetként tartalmazza az ítéletlogikai következtetést is. Valójában megmutatható (lásd  feladat), hogy a probléma ugyanannyira nehéz, mint kiszámítani egy ítéletlogikai formula esetén a formulát kielégítő értékadások számát. Ez azt jelenti, hogy ez #P-nehéz („számosság-P-nehéz”), azaz szigorúan nehezebb, mint az NP-teljes problémák.
25	0.074074	1	A tapintóérzékelés ún. bináris érzékelés, azaz a szenzor érzékeli, hogy a robot kapcsolatba kerül-e valamilyen tárggyal, de nem azonosítja azt. Az érzékelés történhet érintéssel, mikrokapcsoló, tapintós útmérő, vagy tapintós induktív érzékelő által. Valamely tárgy jelenléte annak megérintése nélkül is érzékelhető. Ennek megoldásai:  ábra - Induktív és kapacitív (ritkább) érintés nélküli érzékelők Induktív és kapacitív (ritkább) érintés nélküli érzékelők
12	0.761905	0	Azt a terhet, amely biztosítja, hogy az ágensek egy sikeres összetett tervhez jussanak, vagy az ágensek készítőire, vagy magukra az ágensekre helyezhetjük. Az első esetben mielőtt az ágensek tervezni kezdenének, az ágens készítőjének bizonyítania kell, hogy az ágensek szabályai és stratégiái sikeresek lesznek. Az ágensek önmagukban lehetnek reaktívak, amennyiben ez működik az őket körülvevő környezetben, valamint ha nem kell, hogy pontos modelljük legyen a többi ágensről. Az utóbbi esetben az ágensek megfontoltak: bizonyítaniuk vagy demonstrálniuk kell, hogy a tervük hatékony lesz, figyelembe véve a többi ágens megfontolásait. Például egy A és B logikai ágenst tartalmazó környezetben mindketten rendelkezhetnek a következő definícióval:
10	0.121212	0	Ez elég is ahhoz, hogy valaki eldönthesse, melyik feladattal érdemes foglalkoznia, bármennyire nem használtunk semmiféle numerikus értéket a nehézség kifejezésére. (Azért azt meg kell tudnunk állapítani, hogy melyik feladatot ki írta.) A mértékek közötti efféle monoton reláció az alapja a kvalitatív fizika (qualitative physics) területének. Ez az MI egy részterülete, amely azt vizsgálja, hogy hogyan lehetne a fizikai rendszerekre következtetni anélkül, hogy a részletes egyenletekbe és a numerikus szimulációkba belebonyolódnánk. A kvalitatív fizikával a történeti megjegyzésekben foglalkozunk. Fontos Természetes fajták
13	0.954545	0	Ez a feladat azt vizsgálja, hogy a feltételes függetlenség fennállása hogyan befolyásolja a valószínűségi becslésekhez szükséges információ mennyiségét. a. Tegyük fel, hogy P(h∣e[1],e[2])-t szeretnénk kiszámítani úgy, hogy nincs feltételes függetlenségre vonatkozó információnk. Az alábbiak közül melyik az az adathalmaz, amelyikre a számításokhoz szükségünk van?
24	0.083333	1	ahol a p n, k n ( x n )  függvények megválaszthatók egyrészt klasszikus módon ortonormált polinomok vagy trigonometrikus függvények formájában másrészt olyan ortonormált rendszert alkotó specifikus függvények segítségével, melyek jellege az approximálandó n-változós függvényre nézve specifikus, amiből az is következik, hogy sokkal kevesebb ily módon megválasztott függvényre van szükségünk ugyanannak az n-változós függvénynek egy előre meghatározott pontossággal történő approximációjához, mint amennyi trigonometrikus függvényre vagy ortonormált polinomra ugyanazon közelítési pontosság esetében.
1	0.103448	0	Ha azt szeretnénk kijelenteni, hogy egy program emberi módon gondolkodik, valamilyen módon meg kellene határoznunk, hogy az emberek hogyan gondolkodnak. Ehhez az emberi elme működési mechanizmusának belsejébe kellene tudnunk belenézni. Két módja van ennek: önelemzés révén – az átsuhanó gondolataink megragadásával – vagy pszichológiai kísérletekkel. Ha egyszer majd rendelkezünk az elme elegendően részletes elméletével, lehetségessé válik az elmélet számítógépes programmal való kifejezése. Ha a program bemenetei és kimenetei, valamint időzítése az emberi viselkedéssel megegyeznek, ez egyben bizonyíték arra, hogy a program bizonyos mechanizmusai feltehetően az emberben is megtalálhatók. Így például Newell és Simon, akik az „általános problémamegoldót (General Problem Solver, GPS)” (Newell és Simon, 1961) kifejlesztették, csupán azzal, hogy a programjuk helyesen oldja meg a problémákat, nem voltak elégedettek. Jobban érdekelte őket, hogy összehasonlítsák a program következtetési lépéseit az ugyanazon a feladaton dolgozó emberek lépéseivel. Az MI számítógépes modelljeit és a pszichológia kísérleti technikáit a kognitív tudomány (cognitive science) interdiszciplináris területe kapcsolja össze azáltal, hogy kísérletet tesz precíz és verifikálható elméletek megfogalmazására az emberi elme működéséről.
14	0.26087	0	ami azt jelenti, hogy az ár küszöbe μ körül van, és a küszöbrégió szélessége arányos δ-val, illetve, hogy a vásárlás valószínűsége csökken, ahogy az ár növekszik.  ábra - (a) A Vásárlás valószínűségének probit eloszlása az Ár ismeretében, μ = 6,0 és σ = 1,0 mellett. (b) Logit eloszlás hasonló paraméterekkel. (a) A Vásárlás valószínűségének probit eloszlása az Ár ismeretében, μ = 6,0 és σ = 1,0 mellett. (b) Logit eloszlás hasonló paraméterekkel.
15	0.407407	0	Így a Kalman-szűrés Előre művelete fogad egy [t] átlaggal és [t] kovarianciamátrixszal meghatározott f[1:t] Gauss előre üzenetet, és előállít egy új többváltozós f[[1:t+1] ]Gauss előre üzenetet μ[t+1] átlaggal és Σ[t+1] kovarianciamátrixszal. Így, ha egy f[1:0]= P(X[0]) = N(μ[0], Σ[0])[ ]Gauss-eloszlással indulunk, egy lineáris Gauss-modellel való szűrés az állapotokon Gauss-eloszlást eredményez minden időpontban. Fontos Ez tetszetős és elegáns eredménynek tűnik, de miért is olyan fontos? Ennek a magyarázata az, hogy a most tárgyalt esethez hasonló néhány speciális esetet kivéve, a szűrés folytonos vagy hibrid (diszkrét és folytonos) hálókkal olyan állapoteloszlásokat generál, amelyek reprezentációja az idővel korlátlanul nő. Ezt az állítást általában nem könnyű bizonyítani, de a  feladat egy egyszerű példán mutatja be, hogy mi történik.
1	0.241379	0	De hogyan lehetséges, hogy a gondolatot néha követi cselekvés, és néha nem, néha mozgással és néha anélkül? Úgy tűnik, mintha ugyanaz a dolog történne itt is, mint ami a változatlan objektumokra vonatkozó következtetések meghozatalánál. De ebben az esetben az eredmény egy spekulatív állítás … holott itt a premisszából következő konklúzió egy cselekvés. … Kellene egy ruha, a köpeny egy ruha. Kell egy köpeny. Ami kell, azt elő kell állítanom, és kell egy köpeny. Elő kell állítanom egy köpenyt. A konklúzió tehát, hogy „elő kell állítanom egy köpenyt” nem más, mint egy cselekvés.
12	0.714286	0	Egy másik lehetőség az együttes cselekvések implicit definiálása úgy, hogy minden egyes cselekvéshez leírjuk, hogy milyen kölcsönhatásban áll a többi lehetséges cselekvéssel. Ez egyszerűbb lenne, hiszen a legtöbb cselekvés független a legtöbb másiktól, ezért csak azon néhány cselekvést kellene listáznunk, amelyek valójában kölcsönhatásban vannak. Ezt a hagyományos Strips vagy ADL cselekvésleírások egy új tulajdonsággal való kiterjesztésével tehetjük meg: ez a konkurens cselekvések listája (concurrent action list). Ez nagyon hasonlít a cselekvés leírásában szereplő előfeltételhez, kivéve, hogy az állapotváltozók leírása helyett ez cselekvéseket ír le, amelyeket egyszerre kell, vagy éppen nem szabad egyszerre végrehajtani. Például a Találat cselekvés a következőképpen írható le:
5	0.181818	1	Az előretekintés, ahogy a tankönyvben is szerepel, lényegében a következőképp működik: amikor egy adott változónak a keresés során értéket adunk, úgy kikövetkezteti, hogy az ezzel a változóval korlátok útján kapcsolatban álló, eddig még be nem helyettesített változók értékkészletéből melyek azok az értékek, mely ellentmondásban lennének a most adott értékkel. Az említett értékeket ezek után kitörli az említett szomszéd-változók értékkészletéből. Ezt nevezik végső soron korlát propagációnak (mikor a korlátok hatását már előre érvényesítjük a változók értékkészletére nézve).
6	0.1	1	Arra hogy melyik játékos kezd, nincs különös szabály. Mind a piros, mind a kék kezdhet. Ezt megegyezés alapján lehet eldönteni. Akár pénzfeldobással is, vagy pl. aszerint, hogy ki kezdte az előző játékos stb. Sokszor két játékot indítanak szimultán egyszerre, melynek egyikében az egyik játékos másikéban pedig a másik játékos kezd. Az a játékos, amelyik kezd, ha jól megfontolja az első lépését, nagy előnyre tehet szert. Emiatt a gyakorlatban ebbe és sok más játékba is be szoktak hozni még egy szabályt, amely több néven is ismeretes lehet (pl. Pie szabály). Ennek az a lényege, hogy csökkentse, elvegye az előnyét annak a játékosnak, aki kezd.
7	0.4	0	Tekintettel az α és β lehetséges igazságértékeire, könnyen megmutatható, hogy a Modus Ponens és az És-kiküszöbölés helyes egyszer és mindenkorra. Ezek a szabályok felhasználhatók bármely konkrét esetben, ahol alkalmazhatók, helyes következtetéseket eredményezve anélkül, hogy fel kellett volna sorolnunk a modelleket.
10	0.363636	0	A 20. század az időnek egy intervalluma. Intervallumok a tér-idő olyan darabkái, amelyek két időpont között az egész teret tartalmazzák. A Periodus(e) függvény az e eseményt bezáró legkisebb intervallumot jelöli. A Tartam(i) egy intervallum által foglalt idő hossza, mondhatjuk tehát, hogy Tartam(Periodus(MásodikVilágHáború)) > Év(5).
20	0.928571	0	Számos forrás adható meg a neurális hálók valószínűségi interpretációjára, például (Baum és Wilczek, 1988), valamint (Bridle, 1990). A szigmoid függvény szerepét Jordan tárgyalja (Jordan, 1995). MacKay javasolta a neurális hálók Bayes-i paraméterbecslését (MacKay, 1992), amelyet Neal fejlesztett tovább (Neal, 1996). A neurális hálók függvényreprezentációs képességeit Cybenko vizsgálta (Cybenko, 1988; 1989), aki megmutatta, hogy két rejtett réteg elegendő tetszőleges függvény reprezentációjához, tetszőleges folytonos függvény reprezentációjához pedig elég egy réteg. A haszontalan összeköttetések eltávolítását célzó „optimális agykárosodás” módszer LeCun és társai eredménye (LeCun és társai, 1989), míg Sietsma és Dow mutatták meg, hogyan kell a felesleges neuronokat eltávolítani (Sietsma és Dow, 1988). A nagyobb struktúrák növesztéssel való előállítására szolgáló csempézési algoritmus Mézard és Nadal munkája (Mézard és Nadal, 1989). A kézzel írt számjegyek felismerésével foglalkozó algoritmusokról LeCun és társai írtak áttekintő publikációt (LeCun és társai, 1995). Azóta jobb hibaarányt értek el Belongie és társai (2002) az alakillesztési eljárás (Belongie és társai, 2002), valamint DeCoste és Schölkopf a virtuális szupport gép alkalmazásával (DeCoste és Schölkopf, 2002).
2	0.421053	0	Az MI-ben felmerülő feladatkörnyezetek választéka nyilvánvalóan hatalmas. Mindazonáltal meghatározhatunk viszonylag kevés számú dimenziót, amelyek mentén a feladatkörnyezeteket kategorizálhatjuk. Ezek a dimenziók nagymértékben meghatározzák a helyénvaló ágenstervezést és az ágensimplementációk alaptechnikáinak alkalmazhatóságát. Először felsoroljuk a dimenziókat, azután több feladatkörnyezetet elemzünk az elképzelések bemutatására. Az itt szereplő definíciók informálisak – a későbbi fejezetek sokkal pontosabban fogalmazzák meg a környezeteket, és mindegyik fajtára példákat mutatnak majd. * Teljesen megfigyelhető (fully observable) vagy részlegesen megfigyelhető (partially observable). Ha az ágens szenzorai minden pillanatban hozzáférést nyújtanak a környezet teljes állapotához, akkor azt mondjuk, hogy a környezet teljesen megfigyelhető.^[22] Egy környezet ténylegesen teljesen megfigyelhető, ha az érzékelők minden olyan aspektusát észlelik, amelyek a cselekvés kiválasztásához relevánsak – a relevancia pedig a teljesítménymértéktől függ. A teljesen megfigyelhető környezetek kényelmesek, mivel az ágensnek nem kell semmilyen belső állapotot nyilvántartania a környezet nyomon követéséhez. Egy környezet lehet részlegesen megfigyelhető a zajos és pontatlan szenzorok miatt, vagy mivel az állapot egyes részei egyszerűen nem szerepelnek a szenzorok adatai között – például egy helyi koszérzékelő szenzorral rendelkező porszívóágens nem tudja megmondani, van-e piszok más négyzetekben, és egy automata taxi nem láthatja, hogy más vezetők mit gondolnak. * Determinisztikus (deterministic) vagy sztochasztikus (stochastic). Amennyiben a környezet következő állapotát jelenlegi állapota és az ágens által végrehajtott cselekvés teljesen meghatározza, akkor azt mondjuk, hogy a környezet determinisztikus, egyébként sztochasztikus. Teljesen megfigyelhető, determinisztikus környezetben az ágensnek elvben nem kell a bizonytalansággal törődnie. Amennyiben azonban a környezet részlegesen megfigyelhető, úgy sztochasztikusnak tűnhet. Különösen igaz ez, ha a környezet összetett, nehezen teszi lehetővé nem megfigyelhető aspektusainak követését. Így gyakran jobb az ágens szemszögéből determinisztikusnak vagy sztochasztikusnak tekinteni egy környezetet. A taxivezetés ebben az értelemben nyilvánvalóan sztochasztikus, mivel senki sem tudja megjósolni a forgalmat pontosan, továbbá egy motor minden figyelmeztetés nélkül lerobbanhat, és a kerekek váratlanul kidurranhatnak. A porszívóvilág, ahogy leírtuk, determinisztikus, de egyes variációk tartalmazhatnak sztochasztikus elemeket, például véletlenszerűen megjelenő piszkot vagy megbízhatatlan szívási mechanizmust ( feladat). Ha a környezet más ágensek cselekvéseit leszámítva determinisztikus, akkor azt stratégiainak (strategic) nevezzük. * Epizódszerű (episodic) vagy sorozatszerű^[23] (sequential). Epizódszerű környezetben az ágens tapasztalata elemi „epizódokra” bontható. Minden egyes epizód az ágens észleléseiből és egy cselekvéséből áll. Nagyon fontos, hogy a következő epizód nem függ az előzőben végrehajtott cselekvésektől. Epizódszerű környezetekben az egyes epizódokban az akció kiválasztása csak az aktuális epizódtól függ. Sok osztályozási feladat epizódszerű. Például az összeszerelő soron levő hibás alkatrészeket észlelő ágens minden egyes döntését az aktuális alkatrész alapján hozza, függetlenül a korábbi döntésektől, továbbá az aktuális döntés nem befolyásolja, hogy a következő alkatrész hibás lesz-e. Másrészt, sorozatszerű környezetekben az aktuális döntés befolyásolhat minden továbbit. A sakk és a taxivezetés sorozatszerű: a rövid távú akciók mindkét esetben hosszú távú következményekkel járhatnak. Az epizódszerű környezetek sokkal egyszerűbbek a sorozatszerűeknél, hiszen az ágensnek nem kell előre gondolkodnia. * Statikus (static) vagy dinamikus (dynamic). Ha a környezet megváltozhat, amíg az ágens gondolkodik, akkor azt mondjuk, hogy a környezet az ágens számára dinamikus; egyébként statikus. A statikus környezetekkel egyszerű bánni, mivel az ágensnek nem kell állandóan a világot figyelnie, miközben dönt a cselekvés felől, és nem kell az idő múlásával sem törődnie. Másrészt, a dinamikus környezetek állandóan azt kérdezik az ágenstől, hogy mit akar tenni; ha még nem döntötte el, az annak számít, hogy úgy döntött, hogy nem tesz semmit. Ha a környezet nem változik az idő előrehaladtával, de az ágens teljesítménymértéke igen, akkor azt mondjuk, hogy a környezet szemidinamikus (semidynamic). A taxivezetés nyilvánvalóan dinamikus: a többi autó és a taxi továbbhalad, miközben a vezetési algoritmus azon bizonytalankodik, hogy mit is tegyen. Az órával játszott sakk szemidinamikus. A keresztrejtvények statikusak. * Diszkrét (discrete) vagy folytonos (continuous). A diszkrét/folytonos felosztás alkalmazható a környezet állapotára, az időkezelés módjára, az ágens észleléseire, valamint cselekvéseire. Például egy diszkrét állapotú környezet, mint amilyen a sakkjáték, véges számú különálló állapottal rendelkezik. A sakkban szintén diszkrét az akciók és cselekvések halmaza. A taxivezetés folytonos állapotú és idejű probléma: a sebesség, a taxi és más járművek helye folytonos értékek egy tartományát járja végig a folytonos időben. A taxivezetés akciói szintén folytonosak (például kanyarodási szögek stb.). Szigorúan véve a digitális kameráktól érkező bemenet diszkrét, de tipikusan úgy kezeljük, mint amely folyamatosan változó mennyiségeket és helyeket reprezentál. * Egyágenses (single agent) vagy többágenses (multiagent). Az egyágenses és többágenses környezetek közötti különbségtétel egyszerűnek tűnhet. Például a keresztrejtvényt megfejtő ágens önmagában nyilvánvalóan egyágenses környezetben van, míg egy sakkozó ágens egy kétágensesben. Vannak azonban kényes kérdések. Először is: leírtuk azt, hogy egy entitás hogyan tekinthető ágensnek, ugyanakkor nem magyaráztuk meg, mely entitások tekintendők ágensnek. Egy A ágensnek (például a taxisofőrnek) egy B objektumot (egy másik járművet) ágensnek kell tekintenie, vagy egyszerűen egy sztochasztikusan viselkedő dolognak, a tengerparti hullámokhoz vagy a szélben szálló falevelekhez hasonlatosan? A választás kulcsa az, hogy vajon B viselkedése legjobban egy A viselkedésétől függő teljesítménymérték maximalizálásával írható-e le. Például a sakkban a B ellenfél saját teljesítménymértékét próbálja maximalizálni, amely – a sakk szabályainak következtében – A teljesítménymértékét minimalizálja. Így a sakk egy versengő (competitive) többágenses környezet. Másrészről, a taxi vezetési környezetben az ütközések elkerülése az összes ágens teljesítménymértékét maximálja, így az részben kooperatív (cooperative) többágenses környezet. Emellett részben versengő is, hiszen például csak egy autó tud egy parkolóhelyet elfoglalni. A többágenses környezetekben felmerülő ágenstervezési problémák gyakran egészen mások, mint egyágenses környezetekben. Többágenses környezetekben például a kommunikáció (communication) gyakran racionális viselkedésként bukkan fel; egyes részlegesen megfigyelhető versengő környezetekben a sztochasztikus viselkedés racionális, hiszen így elkerülhetők a megjósolhatóság csapdái.
22	0.703704	0	ahol a Likelihood lehet valószínűség vagy a preferenciák bármilyen számszerű mértéke. Valamilyen preferenciára szükség van, mivel a szintaktikai és szemantikai értelmezési szabályok önmagukban nem tudnak a kifejezéshez vagy mondathoz egyetlen helyes értelmezést meghatározni. Ezért részekre bontjuk a munkát: a szintaktikai és szemantikai értelmezés felelős a lehetséges értelmezések halmazának előállításáért, a többértelműség feloldásának folyamata pedig kiválasztja a legjobbat.
25	0.703704	1	A robotosított rendszert irányító számítógép feladata: a belső és külső érzékelők jeleinek figyelembevételével olyan vezérlési parancsokat adjon ki a robotkar számára, hogy az a robotprogramban meghatározott soron következő feladat végrehajtásának irányába haladjon. A robotprogram utasításainak és az érzékelők által szolgáltatott információknak a figyelembevétele a robotvezérlő parancsok generálásakor, a számítógép által tárolt modellek segítségével történik. A belső érzékelők jeleit (pl. az ízületek pillanatnyi pozícióit) a robotkar irányítási modelljében használjuk fel. A külső érzékelők által szolgáltatott információ (pl. a céltárgy pillanatnyi távolsága) a környezet modelljébe épül be. Maga a robotprogram a végrehajtandó feladat belső, számítógépi leírásává alakul át. Magas szintű robotirányítás esetén mindezeknek a bemeneti információknak és tárolt modelleknek a felhasználását a vezérlésben egy átfogó vezérlési stratégia irányítja.
24	0.958333	1	Mivel A, B és C sztereóban látható, így a mélységük megmérhető, és a szemlélő számára lehetővé válik, hogy B a legközelebbi. A és C azonos távolságra vannak és egy kicsit távolabb. Sem D, sem E nem látható mindkét kamerával, így a sztereó nem használható. Az üveg azonban takarja D-t Y-ból és E-t X-ből. tehát D és E messzebb van, mint A, B és C, de a relatív távolságukat nem lehet meghatározni. De mivel mindkét kamera a saját nézőpontjából vizsgálja a jelenetet és nem felülnézeti képet lát, és X DABC-t látja, Y pedig ABCE-t. Lehet, hogy D nagyon közel van X kamerához, és olyan közel, hogy Y látóterén kívül van. Hasonlóan E és Y. Így nem határozható meg D és E az üveg előtt, vagy mögött. 4. A következő állítások közül melyik igaz és melyik hamis? (a) Sztereoképeken az egymásnak megfelelő pontok megtalálása a sztereomélység-megállapítás folyamatának legegyszerűbb feladata. (b) Az alak-mintázatból feladat megoldható egy fénycsíkokat tartalmazó háló jelenetre történő vetítésével. (c) A Huffman-Clowes címkéző rendszer mindenféle poliéderes objektumot tud kezelni. (d) Görbéket tartalmazó objektumok vonalas rajzaiban a vonal címkéje változhat az egyik végétől a másikig. (e) Ugyanazon jelenet sztereonézeteiben minél messzebb van a két kamera egymáshoz képest, annál pontosabban határozható meg a mélység. (f) Egy jelenetben található egyforma hosszúságú vonalak mindig egyforma hosszúságra vetítődnek a képen. (g) A képen egyenes vonalak szükségszerűen egyenes vonalaknak felelnek meg a jelenetben. a. Hamis. Ez teljesen nehéz lehet, például amikor néhány pont takarásban van valamelyik szem irányából b. Igaz. A rács egy textúrát generál, amely torzításából a felület orientációja jól meghatározható. c. Hamis. Ez csak triéderes objektumokra működik, kizár számos más sokszöggel határolt testet, például piramist. d. Igaz. e. Igaz. Mivel a detektált diszparitás fordítottan arányos a mélységgel. f. Hamis. g. Hamis. A diszk alakú objektum éle egyenesnek látszik. 5. A  ábra egy autó nézőpontjából készült egy autópálya kijáratánál. Két autó látható a közvetlenül balra levő sávban. Milyen okok miatt kell a nézőnek azt a következtetést levonnia, hogy az egyik közelebb van, mint a másik?
1	0.172414	1	Allen Newell és Herbert Simon által javasolt un. fizikai szimbólumrendszer és heurisztikus keresés hipotézisek analitikus és egyben szintetikus paradigmák intelligensen viselkedő rendszerek tanulmányozásához (analitikus paradigma a meglévő rendszerek elemzésének eszköze, szintetikus paradigma pedig az új rendszerek megtervezésének eszköze). Akármennyire manapság több támadás is érte őket, vitatatlan érdemük, hogy e hipotézisek szilárd empirikus alapokra fektették a számítógépes tudományokat, ezen belül a mesterséges intelligenciát. Tudományos hipotézisek, és ha tetszik, ha nem, komoly vetélytársuk azóta nemigen született meg.
22	0.962963	0	Az eljárás valójában igen egyszerű. Először különböző csoportokba rendezi a dolgokat. Természetesen egy halom elegendő lehet attól függően, hogy mennyi teendő van. Ha valahova máshova kell mennie a felszerelés hiánya miatt, akkor az a következő lépés, különben már nagyjából előkészült. Fontos, hogy ne vigye túlzásba a dolgot. Ez azt jelenti, hogy jobb egyszerre kevesebbel foglalkozni, mint többel. Rövid távon ez nem tűnhet fontosnak, de könnyen jelentkezhetnek komplikációk. A hiba is költséges. Első ránézésre a teljes eljárás bonyolultnak tűnik. Azonban hamarosan az élet megszokott dolgává válik. Nehéz a feladat szükségességének bármilyen elmúlását is előre látni, de sosem lehet tudni. Miután az eljárás befejeződött, ismét különböző csoportokba kell rendezni az anyagokat. Ezek után a megfelelő helyükre pakolhatók a dolgok. Végső soron újra használni fogják őket, és a teljes ciklust meg kell majd ismételni. Mindazonáltal, ez az élet velejárója.
12	0.619048	0	A  fejezetben láthattuk, hogy a multiágens környezetek lehetnek együttműködők (cooperative) vagy versengők (competitive). Egy nagyon egyszerű kooperatív példával kezdünk: egy páros teniszcsapat tervkészítésével. Olyan tervek alkothatók, amelyek a csapat mindkét játékosának a cselekvéseit meghatározzák. Az ilyen tervek hatékony elkészítéséhez használható technikákat mutatjuk be. A hatékony tervkészítés hasznos, de nem garantálja a sikert. Az ágenseknek egyet kell érteniük a felhasznált tervben! Ez valamilyen koordinációt (coordination) feltételez, amit valószínűleg kommunikációval (communication) érhetünk el.
13	0.363636	0	Néhány szerző a diszkrét eloszlások és a sűrűségfüggvények jelölésére más szimbólumot használ; mi P-vel fogjuk jelölni mindkettőt, mivel ritkán lehet ezeket összekeverni, és az egyenletek általában azonos formájúak. Jegyezzük meg ugyanakkor, hogy míg a valószínűségek mértékegység nélküli számok, a sűrűségfüggvényeknek van mértékegysége, a fenti példában 1/°C.
17	0.866667	0	A játékelmélet kezdetei a 17. századra nyúlnak vissza, Christiaan Huygens és Gottfried Leibniz javaslataihoz, a versengő és együttműködő emberi interakciók tudományos és matematikai vizsgálatára. A 19. század folyamán számos vezető közgazdász alkotott egyszerű matematikai példákat, hogy a versengési helyzetek konkrét eseteit elemezze. Az első formális eredmények a játékelméletben Zermelótól származnak (Zermelo, 1913) (aki egy évvel korábban a minimax keresés egy – bár hibás – változatát javasolta játékokra). Emil Borel vezette be a kevert stratégia fogalmát (Borel, 1921). Neumann János bizonyította be, hogy minden kétszemélyes, zérusösszegű játéknak van egy maximin egyensúlya a kevert stratégiák körében és egy jól definiált értéke (Neumann, 1928). Neumann együttműködése a közgazdász Oskar Morgensternnel vezetett a Theory of Games and Economic Behavior c. könyv megjelenéséhez 1944-ben, ami a játékelmélet meghatározó könyve. A könyv megjelenése a háború miatti papírhiány miatt késett, míg végül a Rockefeller család egy tagja személyesen támogatta a könyv kiadását.
8	0.548387	0	A  fejezetben megadtunk néhány ítéletlogikai axiómát a wumpus világra. Az ebben az alfejezetben szereplő elsőrendű logika axiómái sokkal tömörebbek lesznek, természetes módon ábrázolva azt, amit pontosan mondani szeretnénk.
9	0.37931	0	szabály (ismét) illeszthető a Rakéta(M[1])-hez, és természetesen a Fegyver(M[1]) konklúziót már ismerjük, így semmi sem történik. Az ilyen felesleges szabályillesztést elkerülhetjük, ha figyelembe vesszük a következő megfigyelést: Minden, α t-edik iterációban kikövetkeztethető új tény levezetéséhez szükséges legalább egy, α t – 1 ciklusban kikövetkeztetett új tény felhasználása. Ez azért igaz, mert bármely olyan következtetés, amely nem igényel egy új tényt a t – 1 ciklusból, már elvégezhető lett volna a t – 1 ciklusban.
7	0.12	0	aminek jelentése, hogy az α mondat maga után vonzza a β mondatot. A vonzat formális definíciója a következő: α ⊨ β akkor és csakis akkor, ha minden modellben, amelyben α igaz, β szintén igaz. Közvetlenebbül azt mondhatjuk, hogy β igazságát „tartalmazza” α igazsága. A vonzat reláció ismerős az aritmetikából is, örömmel vehetjük észre, hogy az x + y = 4 mondat maga után vonzza a 4 = x + y mondatot. Nyilvánvaló, hogy bármely modellben, ahol x + y = 4, mint például az a modell, amelyben x és y is 2 értékű, a 4 = x + y is fenn áll. Hamarosan látni fogjuk, hogy a tudásbázist tekinthetjük egy kijelentésnek, és gyakran beszélhetünk arról, hogy egy tudásbázis maga után vonz egy mondatot.
4	0.125	0	Az egyenletes költségű keresés esetén (A^* keresés h = 0 mellett) a csomópontsávok a kiinduló csomópont köré húzott koncentrikus „köröket” alkotnak. Pontosabb heurisztikus függvény alkalmazásával a sávok a célállapot felé elnyúlnak, és keskenyebben fókuszálódnak az optimális út körül. Ha C^* az optimális megoldási út költségét jelöli, akkor az alábbiakat jelenthetjük ki: * Az A^* keresési algoritmus kifejti az összes f(n) < C^* értékkel rendelkező csomópontot. * Ezek után az A^* keresési algoritmus egy célcsomópont kiválasztása előtt még kifejthet néhány csomópontot a „célhatárvonalon”, amelyekre f(n) = C^*.
18	0.578947	0	A legelterjedtebben használt együttes tanulási módszert turbózásnak (boosting) nevezzük. Ahhoz, hogy működését megértsük, be kell vezetnünk a súlyozott tanító halmaz (weighted training set) fogalmát. Egy ilyen tanító halmazban minden mintához hozzárendelünk egy w[j] ≥ 0 súlyt. Minél magasabb ez a súly, annál nagyobb jelentőséget tulajdonítunk az adott mintának a hipotézis tanulása során. Az eddigiekben áttekintett tanuló algoritmusaink kézenfekvő módon módosíthatók úgy, hogy súlyozott tanító halmazokkal is tudjanak működni.^[185]  ábra - A együttes tanulás eredményeképpen nyert megnövekedett kifejezőerőt illusztráló példa. Három lineáris küszöb jellegű hipotézist vizsgálunk, mindegyik a nem vonalkázott félsíkon ad pozitív besorolást. Az együttesben csak arra adunk pozitív osztályozást, amelyre mindhárom pozitívat ad. Az eredményül kapott háromszögterület egy olyan hipotézisnek felel meg, amelyet az eredeti hipotézistér egyetlen eleme sem képes kifejezni. A együttes tanulás eredményeképpen nyert megnövekedett kifejezőerőt illusztráló példa. Három lineáris küszöb jellegű hipotézist vizsgálunk, mindegyik a nem vonalkázott félsíkon ad pozitív besorolást. Az együttesben csak arra adunk pozitív osztályozást, amelyre mindhárom pozitívat ad. Az eredményül kapott háromszögterület egy olyan hipotézisnek felel meg, amelyet az eredeti hipotézistér egyetlen eleme sem képes kifejezni.
24	0.166667	1	Ma már egyetlen, a hazai viszonylatban is csak közepesen fejlettnek mondható egészségügyi intézmény sem létezhet valamilyen szintű, működőképes informatikai rendszer nélkül, a betegellátás csúcsát jelentő intézmények pedig egyszerűen működésképtelenek lennének korszerű egészségügyi informatikai rendszerek hiányában.
10	0.575758	0	Itt n egy futási idejű változó, aminek értékét a Kikeres cselekvés fogja rögzíteni, és amit majd a Tárcsáz cselekvés felhasználhat. Az ilyen tervek sűrűn előfordulnak a részben megfigyelhető tárgyterületeken. Látni fogunk erre példákat a következő alfejezetben és a  fejezetben.
4	0.083333	0	A  ábra egy Aradról Bukarestbe vezető út mohó legjobbat-először keresését mutatja, h[LMT]-t alkalmazva. Aradból az első kifejtett csomópont Nagyszeben, mert ez közelebb van Bukaresthez, mint Nagyzerénd vagy Temesvár. A következő kifejtendő csomópont pedig Fogaras, mert az van a legközelebb. Fogaras majd generálja Bukarestet, ami egyben a célállapot. Erre a konkrét problémára a h[LMT ]-t alkalmazó mohó legjobbat-először keresés úgy talál megoldást, hogy soha sem fejt ki olyan csomópontot, ami nem a megoldási úton fekszik. Következésképpen minimális a keresési költsége. Azonban nem optimális: a Nagyszebenen és Fogarason keresztül Bukarestbe vezető út 32 kilométerrel hosszabb a Rimnicu Vilceán és Piteştin keresztül vezető útnál. Ebből látszik, hogy az algoritmus miért „mohó” – minden lépésben igyekszik annyira közel kerülni a célhoz, ahogy csak lehet.  ábra - A mohó legjobbat-először keresés lépései Bukarest esetén a légvonalban mért távolságot (h[LMT]) alkalmazva. A csomópontok a saját h-értékeikkel vannak felcímkézve. A mohó legjobbat-először keresés lépései Bukarest esetén a légvonalban mért távolságot (hLMT) alkalmazva. A csomópontok a saját h-értékeikkel vannak felcímkézve.
24	0.083333	0	A látás egy jelenet (scene) objektumairól szóródó fényt összegyűjti, majd egy kétdimenziós képet (image) alkot egy képsíkon. A képsíkot fényérzékeny anyag borítja: a retinában rodopszinmolekulák, a negatív filmen ezüst-halogenidek, a digitális fényképezőgépben pedig egy töltéscsatolt eszköz (CCD) lapka. A CCD minden cellája öszszegyűjti a fényelnyelés által adott idő alatt keltett elektronokat. A digitális fényképezőgépben a képsík egy néhány millió képpontból (pixel) álló négyzethálóra van felosztva. A szem hasonló képpontráccsal rendelkezik, amely körülbelül 100 millió pálcikát és 5 millió csapot tartalmaz egy hexagonális mozaikba rendezve.
14	0.086957	1	Ezek az elméleti eredmények úgynevezett lokálisa tanulási algoritmusokban hatékonyan használhatóak oksági viszonyok felfedezésére, azaz megkerülik a költséges teljes modell alapú, eszenciális gráfokon alapú oksági következtetést. Mindazonáltal a teljes modell alapú módszerek lehetővé teszik a Bayes statisztika használatát is [?, ?, ?, ?]. Ekkor formálisan is kijelenthető, hogy X→Y  oksági kapcsolatnak az éppen rendelkezésre álló adatok alapján az a posteriori valószínűsége mekkora.
26	0.642857	0	Továbbmenve, amikor Searle beismeri, hogy elméletileg a neuronoktól különböző anyag is lehet elme, akkor két okból is tovább gyengül az érve: egyrészt csak Searle intuícióira (vagy a saját intuíciónkra), támaszkodhatunk, hogy eldöntsük, elme-e a kínai szoba; másrészt, még ha úgy is döntünk, hogy a szoba nem elme, ez semmit nem mond arról, hogy a programot futtató más fizikai közeg (például a számítógép) lehet-e elme.
4	0.5	0	A szimulált lehűtési algoritmust először elterjedten VLSI-elrendezési problémák megoldására használták a ’80-as évek elején. Azóta széles körben alkalmazzák ipari termelés ütemezésére és egyéb nagy volumenű optimalizációs feladatokra. A  feladat a szimulált lehűtési algoritmus és a véletlen újraindítású hegymászó algoritmus teljesítményének összehasonlítását kéri az n-királynő problémán.
9	0.206897	0	Még egy további nehézségen kell túljutni. Azt mondtuk, hogy az Egyesít olyan helyettesítéseket ad vissza, amelyek a két argumentumot látszólag azonossá teszi. Azonban több különböző ilyen egyesítés létezhet. Például az Egyesít (Ismer(János, x), Ismer(y, z)) visszaadhatja azt is, hogy: {y/János, x/z}, vagy azt is, hogy: {y/János, x/János, z/János}. Az első egyesítési lépés azt eredményezi, hogy: Ismer(János, z), ezzel szemben a második azt adja, hogy: Ismer(János, János). A második eredményt megkaphatjuk az elsőből is egy további helyettesítés hozzáadásával: {z/János}. Láthatjuk, hogy az első egyesítés általánosabb, mint a második, mert kevesebb korlátozást ad meg a változók értékeire. Azt állapíthatjuk meg, hogy minden egyesítendő kifejezéspárra létezik egy legáltalánosabb egyesítés (most general unifier), amely egyedi a változók átnevezésében. Ebben az esetben ez: {y/János, x/z}.
6	0.1	1	A Nim különböző variációit már az ókorban is játszották. A játék eredetének Kínát tartják, hisz hasonlít több Kínai játékra, de ez az elmélet nem bizonyított. Európában az első feljegyzések, melyek a Nimről szólnak, a 16. században jelentek meg. A mai nevét Charles L. Bouton adományozta neki, aki a Harvard egyetemen először írt a játék matematikai elemzéséről 1901-ben „Nim, a Game With a Complete Mathematical Theory” címmel [1]. A névválasztásra nem tért ki az értekezésben, ezért csak feltételezés, hogy a német nimm ‘elvenni’ szóból származik [2].
18	0.473684	0	Vizsgáljuk meg azt a problémát, amikor egy kockadobás eredményét akarjuk megjósolni. Tegyük fel, hogy több napon át kísérleteket végzünk számos kockával. Mindegyik tanító példát a következő attribútumokkal írunk le: 1. Nap: az a nap, amelyen a kockadobást végeztük (hétfő, kedd, szerda, csütörtök). 2. Hónap: a hónap, amelyben a kockadobást végeztük (január vagy február). 3. Szín: a kocka színe (vörös vagy kék).
20	0.714286	0	 Fontos A W · x = 0 egyenlet egy hipersíkot határoz meg a bemeneti térben, tehát a perceptron akkor és csak akkor ad 1-et, ha a bemenet ennek a hipersíknak az egyik oldalán van. Ezért a küszöbperceptront lineáris szeparátornak (linear separator) is nevezik. A  (a) és (b) ábra mutatja a szeparáló hipersíkot (ami két dimenzióban egy egyenes) a kétbemenetű és, illetve vagy függvények perceptronreprezentációja esetén. Fekete pötty jelzi a bemeneti tér olyan pontjait, amelyekre a függvény értéke 1, fehér pötty pedig az olyan pontokat, amelyre 0 ez az érték. A perceptron azért képes reprezentálni ezt a függvényt, mert létezik olyan egyenes, ami az összes fehér pontot az összes feketétől elválasztja. Az ilyen függvényeket lineárisan szeparálhatónak (linearly separable) nevezzük. A  (c) ábra egy olyan függvényre mutat példát, amely nem szeparálható lineárisan – ez az xor függvény. Nyilvánvalóan nincs lehetőség arra, hogy egy küszöbperceptron megtanulja ezt a függvényt. Általánosságban elmondható, hogy egy küszöbperceptron csak lineárisan szeparálható függvények reprezentációjára képes. Ez a függvényeknek csak kis töredékét jelenti; a  feladat azt kéri, hogy fejezze ki számszerűen, mekkora is ez a töredék. A szigmoiddal felépített perceptronok hasonlóképpen korlátozott képességűek abban az értelemben, hogy csupán „lágy” lineáris szeparátorokat reprezentálnak. (Lásd  (b) ábra.) Fontos Korlátozott kifejezőképessége ellenére a küszöbperceptronnak vannak előnyei is. Különösen is fontos, hogy létezik olyan egyszerű tanuló algoritmus, amely a küszöbperceptront tetszőleges lineárisan szeparálható adathalmazra képes illeszteni. Mégsem mutatjuk most be ezt, inkább levezetünk egy ehhez közel álló tanuló algoritmust a szigmoid perceptronokra.
14	0.782609	1	Programozás szempontjából legegyszerűbb az a tagsági függvény volna, mely mindössze annyit állapít meg a betegkártya tulajdonosáról, hogy: * él és egyszer sem volt orvosnál, tehát nagy valószínűséggel egészséges, * volt orvosnál n-szer, minél többször annál valószínűbb, hogy nem teljesen egészséges * rendszeresen jár orvoshoz, diagnosztizáltan eltérés van a szervezetében, tehát beteg
25	0.851852	0	Emberi kiegészítők. Az utolsó alkalmazás, amiről szót ejtünk, az emberi kiegészítők. A kutatók kifejlesztettek már a kerekes székhez hasonló lépegető járógépet, amelyek alkalmasak emberek szállítására. Számos helyen jelenleg arra koncentrálnak, hogy olyan eszközöket alkossanak, amelyek megkönnyítik az embernek a járást vagy a karok mozgatását egy, a testhez kívülről csatlakoztatott vázzal, amely képes pluszerőt kifejteni. Ha valakire tartósan rögzítenek egy ilyen szerkezetet, akkor mesterséges végtagnak is tekinthető. A robotok általi távjelenlét, illetve teleoperáció is felfogható emberi kiegészítésnek. A teleoperáció azt jelenti, hogy robotikai eszközök segítségével nagy távolságból tudunk megadott feladatokat végrehajtani. A teleoperáció népszerű megvalósítása a mester–szolga (master-slave) elvű konfiguráció, amikor is a robot manipulátor a távolban lévő, humán operátor mozdulatait követi, egy heptikus (érzetet is közvetítő) interfészen keresztül. Ezek a rendszerek mind jobban kiterjesztik az emberi képességeket a környezettel való tökéletesebb kölcsönhatás érdekében. Néhány projekt azt tűzte ki célul, hogy lemásolja az embert, legalábbis felületes szinten. Japánban már számos cégnél kaphatók humanoid robotok.
1	0.37931	1	Az MR vizsgálatot eredetileg nem képalkotásra, hanem olyan kíméletes anyagelemzési célra dolgozták ki, amelynek során a minta nem károsodik. Legalább 1,5 Tesle mágneses térerejű berendezésekkel a szövetek anyagi összetétele és anyagcseréje az élő szervezet bármely részében, mintavétel nélkül, kémiailag elemezhető. A technika széleskörű klinikai alkalmazása még várat magára.
10	0.212121	0	Eredmény([], s) = s  ábra - Szituációkalkulusban minden szituáció (az S[0]-t kivéve) valamilyen cselekvés eredménye Szituációkalkulusban minden szituáció (az S0-t kivéve) valamilyen cselekvés eredménye
1	0.241379	0	Ha az elme a benne levő ismereteken operáló fizikai eszköz, akkor a következő probléma a tudás forrásának a meghatározása. Francis Bacon (1561–1626) Novum Organumától^[3] induló empiricista (empiricist) mozgalmat John Locke (1632–1704) kijelentése jellemzi: „Nincs semmi a megértésben, ami előbb ne létezne az érzékszervekben.” David Hume (1711–1776) A Treatise of Human Nature c. művében (Hume, 1739) javasolja azt a fogalmat, amit ma indukciónak (induction) nevezünk, nevezetesen hogy az általános elveket a komponenseik ismétlődő kapcsolataiból emeljük ki. Ludwig Wittgenstein (1889–1951) és Bertrand Russell (1872–1970) munkájára alapozva a Rudolf Carnap (1891–1970) vezette híres Bécsi Kör kialakította a logikai pozitivizmus (logical positivism) doktrínáját. Ez a doktrína azt állítja, hogy minden tudást végső soron az érzékszervi bemeneteknek megfelelő megfigyeléses állításokon (observation sentences) alapuló logikai elméletekkel meg lehet magyarázni.^[4] Rudolf Carnap és Carl Hempel (1905–1997) igazoló elmélete (confirmation theory) megkísérelte megvilágítani, miként gyarapítja a tudást a tapasztalat. Carnap könyve, a The Logical Structure of the World (Carnap, 1928) a tudás elemi tapasztalatból történő kinyerésére egy explicit számítási eljárást definiált. Ez volt talán az első olyan elmélet, amely az elmét számítási folyamatként ábrázolta.
16	0.956522	0	A helyes válaszok a fejezet utolsó feladata után találhatók meg. A döntéselemzés szempontjából nem az az érdekes, hogy az ön mediántippjei milyen közel vannak a valódi válaszokhoz, hanem inkább az, hogy milyen gyakran van a valódi érték az ön által tippelt 25%-os és 75%-os határ között. Ha ez az esetek felénél így van, akkor a határai pontosak. De ha ön az emberek többségéhez hasonló, akkor a kelleténél magabiztosabb, és az esetek felénél kevesebbszer lesz az igazi érték az ön által tippelt határokon belül. Ezen gyakorlással „javíthat”, és így hasznosabb információt nyújthat a döntéshozáshoz. Próbálja ki ezt a második kérdéssort, hogy lássa, bekövetkezett-e valamilyen javulás: a. Becslések szerint Picasso hány képet, illetve vázlatot festett az élete során? b. Hány statiszta szerepel Sir Richard Attenborough Ghandi c., 1982-ben készült filmjének temetési jelenetében? c. Milyen magas a világ legmagasabb építménye (varsói rádiótorony)? d. Milyen hosszú a transzszibériai vasútpálya? e. Hány utas fordult meg az O’Hara chicagói repülőtéren 1988-ban? f. A világ leglassabban mozgó mechanikus szerkezete (óra) hány év alatt tesz meg egy fordulatot? g. A dobozos sör piacra dobásának éve? h. A világ legnagyobb „tojásgyárában”, a Croton Egg Farmon Amerikában a cég tyúkjai hány tojást tojnak naponta? i. Milyen volt a népsűrűség 1968-ban Macaó portugál tartományban, a világ legsűrűbben lakott helyén? j. A Man-szigeten ülésezik a megszakítás nélkül leghosszabb ideje fennálló törvényhozás. Az idén hány éves? k. Mikor helyezték üzembe az első forgalomirányító jelzőlámpákat (Londonban)? l. Mikor alakult a Nemzetközi Labdarúgó Szövetség (a FIFA)?
6	0.1	1	A „Gyáva Nyúl” játékkal ellentétben, ahol a kölcsönös versengés volt a legrosszabb, most láthatjuk, hogy a kölcsönös kooperáció adja a játékosok számára legrosszabb kimenetelt. Az (Opera, Foci) kimenetelhez (0,0) kifizetés tartozik.
12	0.52381	0	A  ábra a folyamat sematikus illusztrációja. Az újratervező észreveszi, hogy a terv első cselekvésének előfeltételeit az aktuális állapot nem elégíti ki. Ezután meghívja a tervkészítőt, hogy készítsen egy új javítás-nak nevezett résztervet, amely az aktuális állapotból a teljes_terv valamely s állapotába vezet vissza. Ebben a példában az s történetesen egylépésnyi visszalépést jelent az aktuális hátralévő terv-ből. (Ez az oka, hogy a hátralévő terv helyett a teljes tervet figyeljük.) Általánosságban s-et a jelen állapothoz a lehető legközelebbre választjuk. Az új terv a javítás és a teljes_terv s-től hátralevő része — amit folytatás-nak nevezünk — összefűzéséből adódik, mellyel az ágens készen áll a végrehajtás folytatására.
10	0.151515	0	Hogy az anyagot jól reprezentálhassuk, egy nyilvánvaló dologgal kezdünk. Ontológiánkban az anyag nagyobb kötegeit kell tudnunk objektumként kezelni. Például a vajban felismerjük azt a vajat, amit tegnap este az asztalon hagytunk, esetleg felemelhetjük, megmérhetjük, eladhatjuk vagy akármi mást csinálhatunk vele. Ilyen értelemben ez egy objektum, pontosan olyan, mint egy malac. Nevezzük Vaj[3]-nak. Definiálni fogjuk a Vaj kategóriát is. Ennek elemei, informálisan, mindazok az objektumok, amikre azt lehet mondani: „Ez vaj”, a Vaj[3]-at is beleértve. A nagyon kicsi, de most elhanyagolt alkotórészek szerepére vonatkozó intésről nem megfeledkezve, a vaj objektum minden része szintén vaj objektum:
9	0.689655	1	Legyen a konkrét megfigyelés az, hogy: Nyomás1 van, Mosdó telik, mind a Cs1, mind a Cs3 szelep nyitva van, azonban a víz nem folyik: Nyomás(Ny1), Telik(Ms), Nyitva(Cs1), Nyitva(Cs2), ¬Folyik(Vz1). Bizonyítsuk be (rezolúcióval!), hogy igaz az a sejtés, hogy a mosdó el van dugaszolva![ ]
24	0.916667	0	Chan és társai írják le a légy meghökkentő vizuális apparátusát, amelynek tízszer nagyobb az időbeli vizuális aktivitása, mint az embereké (Chan és társai, 1998). Azaz egy légy egy maximum 300 képkocka/másodperc sebességű filmet is úgy tudna nézni, hogy felismeri az egyes képkockákat.
19	0.181818	0	Fontos tulajdonsága ennek a megközelítésnek, hogy inkrementális: soha nem kell visszalépnünk és újravizsgálnunk a régi példákat. Az összes megmaradt hipotézis garantáltan konzisztens az összes példával. Másrészt legkisebb megkötés elvű (least commitment) algoritmusnak is nevezhetjük, ugyanis nem tesz önkényes választásokat (vö. a  fejezetben található részben rendezett tervkészítő algoritmussal). Van viszont egy nyilvánvaló probléma. Már leszögeztük, hogy a hipotézistér óriási, hogyan tudjuk akkor leírni ezt az óriási diszjunktív állítást?  ábra - A verziótér a példákkal konzisztens összes hipotézist tartalmazza A verziótér a példákkal konzisztens összes hipotézist tartalmazza
23	0.888889	0	Az adj-hozzá-egyet simítás Jeffreystől származik (Jeffreys, 1948), míg a törölt interpolációs simítás Jelinektől és Mercertől, akik beszédfelismerésre használták (Jelinek és Mercer, 1980). További technikákra példa a Witten–Bell-simítás (Witten–Bell, 1991) és a Good–Turing-simítás (Church és Gale, 1991). Az utóbbit gyakran használják bioinformatikai problémáknál is. A biostatisztika és a valószínűségi természetes nyelv feldolgozás (NLP) közelednek egymáshoz, mivel mindkettő alkotóelemek ábécéjéből felépülő hosszú, strukturált szekvenciákkal foglalkozik.
18	0.578947	0	Az eddigiekben olyan tanulási algoritmusokat vizsgáltunk, amelyek eredményeként a hipotézistérből kiválasztott egyetlen hipotézist használunk arra, hogy predikciót végezzünk. Az együttes tanulás (ensemble learning) alapötlete, hogy válasszunk ki a hipotézistérből egy teljes hipotéziskollekciót vagy hipotézisegyüttest (ensemble), és kombináljuk az általuk adott predikciókat. Generálhatunk például ugyanazon tanító halmaz alapján száz különböző döntési fát, és egy új példa esetén szavazással alakíthatjuk ki a legjobb predikciós osztályozási eredményt.
5	0.181818	1	Az értékadás eredményeképp az {NSW=RED, WA=RED, NT=GREEN, Q=GREEN} behelyettesítés adódik, amely viszont megint csak ellentmond az egyik korlátnak (egész pontosan a 4-esnek, amely szerint NT és Q értéke különböző kell, hogy legyen).
12	0.761905	0	Egy utolsó példa a madarak gyülekezési viselkedése. Megfelelő szimulációt nyerhetünk, ha minden egyes madár ágens (melyet néha madaroidnak vagy roidnak nevezünk) a következő három szabályt követi valamilyen kombináció alapján: 1. Különválás: távolodjunk el a szomszédoktól, amikor túl közel kerülünk; 2. Kohézió: kerüljünk átlagos távolságra a szomszédainktól; 3. Irányultság: kerüljünk a szomszédokhoz képest átlagos orientációba (haladási irányba).
26	0.857143	1	A rendszeres testmozgás tekintetében közel minden második lakos csak nagyon keveset vagy egyáltalán nem mozog rendszeresen, illetve ugyanekkora azok aránya is, akik egy héten többször végeznek valamilyen mozgást, esetleg sportolnak.
25	0.185185	0	Az érzékelés az a folyamat, amelynek során a robot a szenzoraiból érkező jeleket környezetének belső reprezentációjára képezi le. Az érzékelés nehéz, mivel általában a szenzorok adatai zajjal terheltek, a környezet csak részlegesen megfigyelhető, nem jósolható viselkedésű és gyakran dinamikus is. Ökölszabály, hogy egy jó belső reprezentációnak három tulajdonsága van: elég információt hordoz ahhoz, hogy a robot a megfelelő döntést meghozhassa; strukturáltsága lehetővé teszi, hogy hatékonyan frissíthető legyen; valamint természetes olyan értelemben, hogy a belső állapotváltozók megfeleltethetők egy-egy valós fizikai világbeli állapotváltozónak.
13	0.363636	0	Folytonos változók esetén az eloszlás nem foglalható össze táblázatos formában, mivel a lehetséges értékek száma végtelen. Ehelyett annak valószínűsége, hogy egy valószínűségi változó egy adott x értéket vesz fel, általában x egy paraméterezett függvényeként definiálható. Például az X véletlen változó jelölje a holnapi hőmérséklet maximumát Berkeleyben. Ezzel a
24	0.833333	1	A nem jellemző alapú alakzatfelismerők közé sorolható minden olyan alakzatok felismerésére kialakított algoritmus, melynél nem különíthető el egy kulcspont kereső és jellemző számító fázis egy betanítást követő találatkeresési fázistól. Általában a tárgyalt algoritmusokat egy előre meghatározott objektum megtalálására fejlesztették ki. A jellemző alapú alakzatfelismerőkkel szemben itt tipikusan elmarad a tanítás, a keresés alapjául szolgáló tulajdonságok beleépülnek az algoritmusba. Természetesen előfordulnak átfedések a két kategória között.
5	0.181818	1	Az ebben a szakaszban bemutatott lokális keresés viszont nem feltétlen térképezi fel az egész keresési teret, és ráadásul alapesetben garanciát sem ad a megoldás megleléséhez szükséges lépések számára (azaz elképzelhető, hogy akár egy végtelenségen át is körbe-körbe jár, hogyha ezt nem zárjuk ki valahogy). Viszont ennek a „lazításnak” köszönhetően szerencsés esetben még akár az előző szakaszokban bemutatott módszerek legjobbját is felülmúlhatja, illetve amennyiben egy bizonyos probléma-típus (pl. 8-királynő) esetén a megoldások viszonylag egyenletesen/sűrűn oszlanak el a keresési térben, úgy gyakorlatilag a probléma méretétől (változók számától, értékkészletűk méretétől) függetlenül átlagosan konstans számú lépésben is képes megoldást találni.
10	0.787879	0	négy állítás megfelelőjével, a count * from Tantárgy SQL-felkérés 4-es válasszal tér vissza. Másfelől egy elsőrendű logikai rendszer válasza az lenne, hogy „egy és végtelen között valahány”, és nem „négy”. Ennek magyarázata, hogy a Tantárgy állítás nem zárja ki, hogy más, nem említett tantárgyakat is fel lehessen venni, és azt sem, hogy az említett tantárgyak mind különbözők.
3	0.916667	1	A kocsikázás és gyönyörű tájak példájánál a válasz egyszerű: akármilyen szép is egy táj, ha elég sokszor láttuk már, biztosan csökken az élvezeti értéke, és egy idő után a benzinköltség fontosabb szemponttá válik. Ezt úgy építhetjük be legegyszerűbben a feladat megfogalmazásába, ha bevezetünk egy idő változót, amely minden cselekvés végrehajtásával növekszik egy pozitív értékkel, és ezt felhasználjuk a h() vagy a g() függvény megfogalmazásánál! Ekkor minél tovább kocsikázunk, annál kevésbé lesz kecsegtető a körút folytatása.
26	0.5	0	Annak a vélekedésnek, hogy a hamburger ízletes, benső természete van: van valami, amihez az ilyen vélekedés hasonlít. Most már beléptünk a qualiák, a benső élmények birodalmába (a qualia szó a latin nyelvből származik, megközelítő jelentése: ’ilyen dolgok’). Tegyük fel, hogy a retina és az idegrendszer valamilyen sérülése folytán X személy úgy érzékeli a vörös színt, mint Y a zöldet, és vice versa. Ebben az esetben ugyanúgy látják a közlekedési lámpát, és ugyanúgy is cselekszenek, de tapasztalataik valamiképpen különbözni fognak. Mindketten elfogadhatják, hogy tapasztalatuk neve: „a lámpa vörös”, de tapasztalatuk különböző érzés lesz. Nem világos, hogy mit jelent ez a mentális állapotok megegyezését illetően. A következőkben egy olyan gondolatkísérlettel foglalkozunk, amely azt vizsgálja, hogy az emberi neuronokon kívül más fizikai tárgyaknak is lehetnek-e mentális állapotai.
5	0.181818	1	Viszont kérdés, hogy mely értékével kezdjük a keresést (értékadást). Ezt ugyebár most az LCV heurisztikával döntjük el. Az SA változó aktuális értékkészletének elemeihez a következő heurisztikus értékeket rendeli az LCV: {RED(5), GREEN(5), BLUE(5)}. Ezek szerint, ha a RED értéket adnánk az SA változónak, azzal a szomszédai értékkészletéből effektíve összesen 5 értéket zárnánk ki (hiszen a RED értéket ezek után már nem adhatnánk az NSW, WA, NT, Q, és V változónak). De ugyanez igaz az SA változó GREEN, és BLUE értékére is. Mindegyik rendre összesen 5 értéket zárna ki az SA szomszédainak értékkészletéből. Tehát a választás megint nem egyértelmű, nincs kiemelt minimum, így a (RED, GREEN, BLUE) fix sorrend szerint haladva választunk értéket az SA-nak. Első lépésben tehát a RED értéket fogja kapni (SA=RED).
10	0.69697	0	Állítások reifikálása lehetővé teszi, hogy az elsőrendű logika minden rögzített, függvénymentes atomi állítása reprezentálható szemantikus hálós jelöléssel. Univerzálisan kvantifikált állítások bizonyos típusai reprezentálhatók a kategóriákra alkalmazott inverz kapcsolatok, valamint egyszeresen és kétszeresen bekeretezett élek alkalmazásával, ettől még persze az elsőrendű logikától messze vagyunk. A negálás, a diszjunkció, a beágyazott függvényszimbólumok és az egzisztenciális kvantifikálás mind hiányzik. Manapság lehetséges a jelölés kiterjesztése, hogy az az elsőrendű logikával ekvivalens legyen – ilyenek például a Pierce-féle egzisztenciális gráfok vagy Hendrix-féle particionált szemantikus hálók (Hendrix, 1975) – ez viszont a szemantikus hálók fő előnyét – az öröklődéses folyamat egyszerűségét és átláthatóságát – semmisíti meg. A tervezők nagy hálókat építhetnek, és még mindig lehetnek jó ötleteik, hogy mely lekérdezések lesznek hatékonyak, mert (a) az öröklődéses eljárás lépéseit könnyű vizualizálni, (b) egyes esetekben a lekérdezés nyelve olyan egyszerű, hogy bonyolult lekérdezéseket feltenni nem is lehet. Azokban az esetekben, amikor a kifejezőerő túlságosan korlátozott, számos szemantikus hálórendszer a procedurális kiegészítéshez (procedural attachment) folyamodik, hogy a hiányokat kitöltse. A procedurális kiegészítés egy olyan módszer, amikor egy bizonyos relációra vonatkozó lekérdezés (néha állítás) egy, a relációhoz megtervezett speciális eljárás, és nem egy általános öröklődéses algoritmus meghívását eredményezi.
27	0.4	1	Látható, hogy amíg minden architektúrának és programnak megfeleltethető egy-egy ágens-függvény, addig – adott architektúra esetén – már nem biztos, hogy tudunk olyan programot találni, amellyel tetszőleges ágens-függvényt implementálhatunk. Érdemes tehát bevezetnünk az adott architektúrán megvalósítható ágens-függvények halmazát:
21	0.1875	1	A feladat jelentősen eltér az alap MAB feladattól: míg a MAB esetén a véletlen folyamat eloszlását ismertük (vagy azt az eloszlást, mely meghatározta a véletlen folyamat működését), addig ebben az esetben a feladat része a független, ismeretlen, azonos eloszlású folyamatok eloszlásának meghatározása. Illetve további eltérés, hogy míg minden MAB feladat esetén az egyes folyamatok t időpillanatbeli állapotai függtek az előző állapottól/állapotoktól, addig ebben az esetben az állapotok függetlenek.
23	0.777778	0	A P(Termékenység = n|szó[F]) kezdeti termékenységi modell becslése: legyen adott egy m hosszúságú francia mondat, amely egy n hosszúságú angol mondathoz illeszkedik, ekkor vegyük ezt annak alátámasztásaként, hogy mindegyik (a mondatban előforduló) francia szó termékenysége n/m. Vegyük figyelembe ezeket az összes mondatra az egyes szavak termékenységi eloszlásának meghatározásához.
11	0.846154	0	A kombinatorikus robbanás kordában tartására több lehetőség is van. Az  fejezetben láthattuk, hogy a kényszerkielégíthetőségi problémák (CSP-k) visszalépési számának kontrollálásához számos megoldás létezik, mint például a függőségirányított visszalépés. Ezen technikák mindegyike alkalmazható a tervkészítéshez is. Például a megoldás kinyerése egy tervkészítési gráfból kezelhető egy kétértékű CSP-ként, melynek változói azt jelzik, hogy egy adott cselekvés bekövetkezik-e egy adott időpontban, vagy sem. A CSP megoldható az  fejezet bármely algoritmusával, például a min-konfliktusok algoritmussal. Egy közeli rokon, a Blackbox rendszerben használt megoldás, a tervkészítési gráfot CNF kifejezésre fordítja, melyből ezután egy SAT megoldóval nyeri ki a tervet. Ez a megközelítés jobb, mint a SATplan algoritmus, feltételezhetően azért, mert a tervkészítési gráf már számos lehetetlen állapotot és cselekvést eltávolított a feladatból. A Graphplan algoritmusnál is jobban működik, valószínűleg azért, mert a kielégíthetőségi keresés, mint a WalkSAT, nagyobb rugalmasságú a Graphplan algoritmus által használt szigorú visszalépéses keresésnél.
5	0.181818	1	 ábra - 8. lépés: az előbbi, Q=BLUE értékadás következményeként a BLUE érték eltávolítása az SA változó értékkészletéből az előretekintés miatt 8. lépés: az előbbi, Q=BLUE értékadás következményeként a BLUE érték eltávolítása az SA változó értékkészletéből az előretekintés miatt
2	0.526316	1	Az ágens által a grafikus felületen megjelenített szám azonosító lecserélése a label értékére. Ezáltal a grafikus felületen egyértelműen azonosíthatók az egyes különböző (forráskódú vagy funkciójú) ágensek.
6	0.9	1	Egy igazán tömör megoldás a Huffman-kódolás. Ezzel elérhető, hogy a teljes tábla tárolható legyen (az összes speciális szabályt beleértve) 24 byte-on. 500 Mbyte = 1073741824 Byte; 1.073.741.824 / 24 ~ 44.739.242; tehát ennyi állás biztosan elférhet egyszerre 500 Mbyte-on a transzpozíciós táblában.
2	0.368421	1	Az egyes sugárzási szinteket és az ezekhez kapcsolható biológiai hatásokat a szemlélteti. Látható, hogy a sztochasztikus, illetve a determinisztikus hatásokat kiváltó dózistartományok több nagyságrenddel különböznek egymástól. Hangsúlyozni kell azt is, hogy míg a determinisztikus hatások orvosi-biológiai módszerekkel diagnosztizálhatók, addig a sztochasztikus hatások az alacsony dózisok tartományában csak epidemiológiai módszerekkel mutathatók ki. Erre alapozta a kockázati tényezőket a Nemzetközi Sugárvédelmi Bizottság (ICRP).
25	0.592593	0	A gyakorlatban a PD szabályozónak is lehetnek hibái. Van úgy, hogy a PD szabályozó akkor sem tudja nullára redukálni a hibát, ha a külső eltérítés megszűnik. Ez a példánkból nem nyilvánvaló, de néha szükség van egy másik visszacsatolásra is az arányoson felül, hogy a hibát meg lehessen szüntetni. A megoldás erre a problémára egy harmadik tag hozzáadása a szabályozáshoz, ami a hiba idő szerinti integrálján alapul:
2	0.736842	0	A hasznosságalapú ágens struktúrája a  ábrán látható. Valódi hasznosságalapú ágens programok az V. részben szerepelnek, ahol olyan döntéshozó ágenseket tervezünk, amelyeknek a részlegesen megfigyelhető környezetekben elkerülhetetlen bizonytalanságot is kezelniük kell.
6	0.75	0	A Deep Blue csapata a Kaszparovval való visszavágó alól kibújt. Helyette 2002-ben a fő mérkőzés a Fritz program és Vlagyimir Kramnyik világbajnok összecsapása volt, amely nyolc játszmában döntetlennel végződött. A mérkőzés feltételei az emberi játékosnak sokkal jobban kedveztek, és a hardver egy közönséges PC volt, nem egy szuperszámítógép. Kramnyik véleménye szerint mégis „most már világos, hogy a csúcsprogramok és a világbajnok közel azonos szinten vannak”.
22	0.925926	0	Az első valódi feladatot megoldó NLP-rendszer valószínűleg a Baseball kérdésválaszoló rendszer volt (Green és társai, 1961), amely baseball-statisztikák adatbázisával kapcsolatos kérdéseket kezelt. Nem sokkal utána következett Woods Lunar rendszere, amely az Apolló program által visszahozott kövekkel kapcsolatos kérdéseket válaszolt meg (Woods, 1973). Robert Schank és hallgatói több programot is készítettek (Schank és Abelson, 1977; Wilensky, 1978; Schank és Riesbeck, 1981; Dyer, 1983), amelyek mindegyikének a nyelv megértése volt a feladata. A hangsúly azonban kevésbé volt magán a nyelven, sokkal inkább a reprezentáción és következtetésen. A problémák között volt a sztereotip szituációk reprezentálása (Cullingford, 1981), az emberi memóriaszervezés leírása (Rieger, 1976; Kolodner, 1983), valamint tervek és célok megértése (Wilensky, 1983).
22	0.777778	0	szövegben „Marsha” az első mondat alanya, így ő a „she” preferált előzménye. Egy másik preferencia annak az entitásnak az előtérbe helyezése, amelynek a tárgyalása a legnyilvánvalóbb. Ha a következő mondatpárt önállóan vizsgáljuk
23	0.333333	1	„igaz pozitív” – a teszt által helyesen betegnek minősítettek száma, „igaz negatív” – a teszt által helyesen minősített egészségesek száma, „hamis pozitív” – a teszt által tévesen minősített egészségesek száma, „hamis negatív” – a teszt által tévesen minősített betegek száma.
21	0.1875	0	Azzal, hogy figyelmen kívül hagyja az állapotok közötti összefüggéseket, a közvetlen hasznosság becslése eljátssza a tanulás lehetőségeit. Például a bemutatott három kísérlet közül a második érinti a (3,2) állapotot, amelyet előzőleg az ágens nem érintett még. A következő átmenet után (3,3)-ba jut, amely az első kísérlet alapján nagy hasznosságot mutat. A Bellman-összefüggés azonnal rámutat, hogy valószínűleg akkor a (3,2)-nek is nagy a hasznossága, mivel a (3,3)-ba vezet, de a közvetlen hasznosságbecslés semmit se tanul meg ebből a kísérlet végéig. Általánosabban megfogalmazva azt mondhatjuk, hogy a közvetlen hasznosságbecslésre úgy tekinthetünk, mint ami jóval nagyobb U hipotézistérben keres, mint amire szükség van. Ennek oka, hogy számos olyan függvényt is számon tart a hipotézisek közt, amelyek sértik a Bellman-egyenletet. Emiatt az algoritmus gyakran csak nagyon lassan konvergál.
19	0.772727	0	Az inverz rezolúció visszafelé haladó bizonyítási eljárását mutatjuk be, amely egyedi visszafelé mutató lépésekből áll. Egy közönséges rezolúciós lépés a C[1] és C[2] klózból indul ki, és azokat rezolválja egy C rezolvenst létrehozva eredményül. Az inverz rezoluciós lépés a C rezolvens alapján két klózt, C[1]-et és C[2]-t hoz létre úgy, hogy C a C[1] és C[2] rezolválásának az eredménye, vagy pedig C és C[1] alapján állít elő egy lehetséges C[2]-t.  ábra - Az inverz rezolúciós eljárás kezdő lépései. Az árnyékolt klózokat az inverz rezolúciós eljárás generálja a jobb oldalon és az alatta lévő klózokból. A nem árnyékolt klózok a Leírások-ból és a Besorolások-ból származnak. Az inverz rezolúciós eljárás kezdő lépései. Az árnyékolt klózokat az inverz rezolúciós eljárás generálja a jobb oldalon és az alatta lévő klózokból. A nem árnyékolt klózok a Leírások-ból és a Besorolások-ból származnak.
20	0.821429	0	A neurális hálók tárgyalása után maradt egy dilemmánk. Az egyrétegű hálóknak nagyon egyszerű és hatékony tanulási algoritmusuk van, de nagyon korlátozott a kifejezőképességük, csupán lineáris döntési határokat képesek megtanulni a bemeneti térben. Másrészt a többrétegű hálók sokkal kifejezőbbek – általános nemlineáris függvényeket képesek reprezentálni –, de a rengeteg lokális minimum jelenléte, illetve a sokdimenziós súlytér miatt nagyon nehéz a tanításuk. Ebben az alfejezetben egy relatíve új tanulómódszer családot fedezünk fel, az úgynevezett szupport vektor gépeket (support vector machines, SVM), vagy általánosabban a kernelgépeket (kernel machines). Bizonyos fokig a kernelgépek a két oldal legjobb tulajdonságait egyesítik. Azaz ezek a módszerek hatékony tanítási algoritmusokat alkalmaznak, ugyanakkor képesek bonyolult, nemlineáris függvények reprezentálására.
15	0.111111	0	Az állapotátmenet-modellhez és az érzékelő modellhez még meg kell adnunk egy P(X[0]) a priori eloszlást a 0. időpontbeli állapotok felett. Ez a három eloszlás, kombinálva a   és a   egyenletekben megfogalmazott feltételes függetlenségi állításokkal, biztosítja számunkra a teljes együttes eloszlás meghatározását az összes változó felett. Bármely véges t-re azt kapjuk, hogy
15	0.444444	0	Azaz az egylépéses előrejelzés eloszlása Gauss-eloszlás, ugyanazzal a μ[0] átlaggal, a szórásnégyzet pedig egyenlő az eredeti  szórásnégyzetnek és az átmenet  szórásnégyzetének az összegével. Egy pillanatnyi belegondolás után ez szemléletesen is elfogadhatónak tűnik.
10	0.242424	0	Ha összesen F folyó esemény és A cselekvés lenne, akkor O(AF) keretaxiómára lenne szükségünk. Másfelől, ha minden cselekvésnek legfeljebb E hatása lenne, ahol az E tipikusan jóval kisebb, mint F, akkor a történteket sokkal kisebb, O(AE) nagyságú tudásbázissal is ki tudnánk fejezni. Ez a reprezentációs keretprobléma (representational frame problem). A vele szorosan kapcsolódó következtetési keretprobléma (inferential frame problem) egy t-lépéses cselekvéssorozat eredményeinek O(Et) időben, és nem O(Ft) vagy O(AEt) időben való kivetítése. Sorban egymás után az összes problémával fogunk foglalkozni. Azonban egy probléma mégis marad – biztosítani, hogy egy cselekvés sikeres elvégzéséhez minden feltételt sikerült megfogalmazni. Így például a Megy kudarccal fenyeget, ha az ágens útközben meghal. Ez az ún. kvalifikációs probléma (qualification problem), melynek teljes megoldása nincs.
6	0.1	1	Mi változott tehát azzal, hogy a külső szemlélő közzétette azt a látszólag nyilvánvaló, „redundáns” információt, hogy legalább egy kalap piros? Válasz: a közzétett információ kölcsönös tudás lett, és ennek ekkora az „ereje” (az interaktív következtetés során). Ha tudjuk, hogy ki mit tudhat, akkor tudásuk alapján ésszerűen meghozott cselekvéseikből további tudásra tehetünk szert (pl. jobban megismerhetjük a világ aktuális állapotát, még hogyha percepciónk direkte nem is ad erre lehetőséget). Nézzük mindezt formálisan!
21	0.375	0	Először is az ágensnek nem csupán egy rögzített stratégia modelljét kell megtanulnia, hanem egy teljes modellt, amibe az összes cselekvésének lehetséges eredményeihez tartozó valószínűségek is beletartoznak. Erre a Passzív-ADP-Ágens esetén alkalmazott egyszerű tanulási eljárás is kiválóan alkalmas. Ezek után figyelembe kell vennünk, hogy az ágens választhat a cselekvések között. A megtanulandó hasznosságok azok, amelyeket az optimális stratégia definiál. Ezek a hasznosságok megfelelnek a 17. szakasz - Az állapotok hasznossága részben közölt Bellman-egyenletnek, amit itt megismétlünk:
25	0.074074	1	Egyes rendszerekben erővisszacsatolást alkalmaznak, hogy a kezelőnek legyen információja a robot végén lévő eszköz és a szövetek közötti erőhatásokról is. Műtőrobotok első generációja ipari manipulátorokból fejlődött ki. 1991-ben jelent meg a Computer Motion által tervezett Zeus orvosi robotrendszer (1.sz ábra), amely komoly áttörést jelentett.  ábra - Zeus, az első háromkarú robotrendszer Zeus, az első háromkarú robotrendszer
11	0.846154	0	Nem kétséges, hogy a Graphplan-hoz, a SATplan-hoz és a Blackbox-hoz hasonló tervkészítők előremozdították a tervkészítés fejlődését azáltal, hogy megnövelték a tervkészítő rendszerek teljesítményét, és tisztázták a kapcsolódó reprezentációs és komlexitási kérdéseket. Ezek a megoldások azonban eredendően ítéletlogikai megoldások, így korlátozott a problémakör, amelyet képesek kifejezni. (Például néhány tucat objektumot és helyet tartalmazó logisztikai problémának megfelelő CNF kifejezésekhez gigabájtnyi kapacitásra van szükség.) Bár a tervkészítési gráfhoz hasonló struktúrák továbbra is hasznosak lesznek, mint a heurisztikák forrása, valószínűnek tűnik, hogy elsőrendű reprezentációkra és algoritmusokra lesz szükség a további fejlődéshez.
12	0.47619	0	Az előző alfejezet teljesen megfigyelhető környezetekkel foglalkozott, amelyek előnye, hogy a feltételes ellenőrzések bármit kérdezhetnek, és biztosak lehetnek a választ kapnak. A valódi világban a részleges megfigyelhetőség jóval gyakoribb. Egy részlegesen megfigyelhető tervkészítési feladat kiinduló állapotában az ágens csak bizonyos dolgokat tud az aktuális állapotról. Ennek a helyzetnek a legegyszerűbb modellezése, ha a kiinduló állapotról annyit mondunk, hogy egy állapothalmazba tartozik. Az állapothalmaz az ágens kiinduló hiedelmi állapotát (belief state) írja le.^[125]
18	0.894737	0	Nagyon sok, a gépi tanulással foglalkozó fontos publikációt gyűjtöttek egybe a Readings in Machine Learning c. kötetben (Shavlik és Dietterich, 1990). A kétkötetes Machine Learning 1 (Michalski és társai, 1983), illetve Machine Learning 2 (Michalski és társai, 1986a) is sok fontos közlést tartalmaz, továbbá hatalmas bibliográfiát. Weiss és Kulikowski a függvény tanulás áttekinthető bevezetését adja gépi tanulási, statisztikai és neurális alapokon (Weiss és Kulikowski, 1991). A Statlog projektben (Michie és társai, 1994) végezték a tanuló algoritmusok teljesítményének messze legkimerítőbb összehasonlítását. A jelenleg is folyó, a gépi tanulással foglalkozó fontos kutatási eredmények az International Conference on Machine Learning éves kiadványaiban, a Neural Information Processing Systems konferencián, a Machine Learning és a Journal of Machine Learning Research folyóiratokban, továbbá a fontosabb MI-újságokban jelennek meg. A tanulás számítási elméletének eredményei megjelennek az éves ACM Workshop on Computational Learning Theory (COLT) kiadványokban, valamint Kearns és Vazirani (1994), továbbá Anthony és Bartlett (1999) publikációiban.
25	0.148148	0	Más típusú mobil robotok teljesen eltérő módszereket használnak a mozgáshoz. A légi járműveken általában propellereket vagy turbinákat alkalmaznak. Robot léghajók a meleg áramlatokat használják ki, hogy a levegőben maradjanak. Az autonóm víz alatti járművek gyakran alkalmaznak a tengeralattjárókon használtakhoz hasonló fúvókákat.
14	0.086957	1	A tanulási algoritmus teljesítményének becslése A tanulási algoritmus akkor jó, ha jó hipotéziseket szolgáltat azon esetekre, amelyeket nem látott elotte. 1. Egy nagy példahalmazt bontsuk szét: egy tanító halmazra és egy teszt halmazra. 2. A tanuló algoritmust a tanító halmazra alkalmazva állítsuk elo a H hipotézist. Vizsgáljuk meg, hogy H a teszt halmaz példáinak hány százalékát sorolja be helyesen. 4. Ismételjük a 2-4 lépéseket különbözo tanító halmaz méretekre és mindegyik mérethez különbözo, véletlenszeruen kiválasztott tanító halmazra. Tanulási görbe: a tanító halmaz méretének függvényében (jó, ha a jóslás minősége javul)  ábra - Tanulási görbék Tanulási görbék
5	0	0	Ebben a fejezetben megmutatjuk azt, hogy ha az állapotokat nem egyszerűen kis fekete dobozoknak tekintjük, akkor új hatékony keresési módszerek egész sorához jutunk, valamint jobban megértjük a probléma struktúráját és komplexitását.
1	0.172414	1	Az említett hipotézisek természetesen hamisak is lehetnek. A FSzR hipotézist érő kritikák jó összefoglalója a Wikipedia cikk. Azonban lássuk be, hogy mielőtt foglalkoznánk, hogy egy hipotézis igaz, vagy hamis, érdemes terítékre venni, hogy releváns-e (tudományosan hasznos)? Egy hipotézis releváns, ha világosan megadja, hogyan kellene azt verifikálni és a tesztekben hol kellene látni a hipotézis sikerét, vagy bukását. Az FSzR és a HK hipotézisek mindegyike releváns. Igazak-e? Építsük egyre bonyolultabb fizikai szimbólumrendszereket és értékeljük a viselkedésüket! Ugye egyszerű!
9	0.758621	0	A matematikai indukciós sémákkal (mathematical induction schema) kibővítve az elsőrendű logikát, Gödel nemteljesség tétele (incompleteness theorem) megmutatta, hogy léteznek olyan igaz aritmetikai mondatok, amelyek nem bizonyíthatók.
16	0.347826	0	Jelölje X = X[1], X[2], …, X[n] az attribútumokat, az attribútumértékek vektorát pedig x = 〈x[1], x[2], …, x[n]〉. Általában minden attribútumról feltételezzük, hogy diszkrét vagy folytonos értékekkel rendelkezik. Az egyszerűség kedvéért feltételezzük, hogy az attribútumokat úgy határoztuk meg, hogy a nagyobb attribútumértékek nagyobb hasznosságértékékhez tartoznak, ha minden más változatlan. Például a repülőtér probléma esetén minél nagyobb a ZajMentesség értéke, annál jobb a megoldás. Bizonyos esetekben szükséges lehet az értéktartomány felosztása, ahol a hasznosságértékek az egyes tartományokban monoton módon változnak.
19	0.590909	1	Definíció (Erős relevancia). Egy X[i] jegy erősen releváns akkor és csak akkor, ha létezik valamely x[i], y és s[i] = x[1],…, x[i-1], x[i+1],…, x[n][ ,]melyekre p(x[i], s[i])> 0 úgy, hogy p(y|x[i], s[i]) ≠p(y| s[i]).
11	0.346154	0	A visszafelé keresést regressziós (regression) tervkészítésnek is nevezik. A regressziós keresés meghatározó kérdése a következő: melyek azok az állapotok, amelyekből egy adott cselekvés a célhoz vezet? Ezen állapotok leírásának számítását a cél adott állapoton keresztüli regresszálásának (regressing) nevezzük. Hogy lássuk ennek menetét, vegyük a légi szállítási feladatot. Adott a cél az
4	0.625	0	Egyes esetekben a maximumot a ∇f = 0 egyenlet megoldásával találhatjuk meg (ezt megtehetnénk például akkor, ha csak egy repülőteret helyeznénk el; a megoldás az összes város koordinátáinak számtani közepe lesz). Sok esetben azonban ezt az egyenletet zárt alakban nem lehet megoldani. Három repülőtér esetén például a gradiens kifejezése attól függ, hogy az adott állapotban mely városok esnek legközelebb az egyes repülőterekhez. Ez azt jelenti, hogy a gradienst lokálisan, és nem globálisan tudjuk számítani. Ennek ellenére még mindig folyamodhatunk a legmeredekebb emelkedő hegymászáshoz a pillanatnyi állapotot az
1	0.068966	1	A humorérzéken kívül a humor és viccek hatását is többen vizsgálták. Mivel ezeket kognitív folyamatoknak tekintjük, ezért jogos a kérdés, hogy milyen hatással vannak a tanulók teljesítményére, illetve az oktatásra. A humor megítélése az oktatásban azonban nem egyöntetű. Stopsky(1992) szerint a humor elengedhetetlen a kritikus gondolkozás kialakításához a diákokban. Több lehetséges módszert ad, hogy a humor milyen módon építhető be az oktatásba, azonban állításait nem tudja kísérleti eredményekkel alátámasztani. Shade(1996) szerint a humorérzék és a humor egyaránt szükségesek. Sok tanár hozza példaként a személyes tapasztalatait, miszerint a humor nagy mértékben segíti a tanulási folyamatot, azonban a kutatási tapasztalatok különböző eredményeket hoznak.
1	0.344828	0	Az ép agy aktivitásának mérése 1929-ben kezdődött, amikor Hans Berger kidolgozta az elektroencefalográfia (EEG) elvét. A funkcionális mágneses rezonancia (fMRI) közelmúltbeli kifejlesztése (Ogawa és társai, 1990) eddig nem látott részletességgel tárja az idegsejtkutatók elé az agy aktivitását, olyan méréséket is lehetővé téve, amelyek érdekes módon korrelálnak a zajló kognitív folyamatokkal. Az ismereteket kiegészíti az egyedi sejt szintjén történő neuronaktivitás rögzítésének fejlődése. A nagymértékű fejlődés ellenére még messze vagyunk attól, hogy megértsük, hogy e kognitív folyamatok bármelyike valójában hogyan is működik.  ábra - A számítógépek számítási erőforrásainak (2003 körül) és az agy erőforrásainak durva összehasonlítása. A könyv első kiadása óta a számítógépekre jellemző számok legalább egy 10-es szorzóval megnőttek, és várható, hogy ez a növekedés ebben az évtizedben is folytatódik. Az agyra jellemző számok az utóbbi 10 000 évben nem változtak. A számítógépek számítási erőforrásainak (2003 körül) és az agy erőforrásainak durva összehasonlítása. A könyv első kiadása óta a számítógépekre jellemző számok legalább egy 10-es szorzóval megnőttek, és várható, hogy ez a növekedés ebben az évtizedben is folytatódik. Az agyra jellemző számok az utóbbi 10 000 évben nem változtak. Fontos Az igazán csodálatos észrevétel az, hogy egyszerű sejtek gyűjteménye elvezethet a gondolathoz, a cselekvéshez és a tudathoz, vagy más szavakkal: az agytól eljutunk az elméhez (Searle, 1992). Az egyedüli elvi alternatíva a miszticizmus: hogy létezik egy misztikus világ, ahol megvalósul az elme a fizikai tudományok hatáskörén túl. Fontos Az agy és a számítógép igen eltérő feladatokat végeznek és eltérő tulajdonságokkal rendelkeznek. Az  ábra azt mutatja, hogy az emberi agyban tipikusan 1000-szer több neuron van, mint ahány kapu található egy korszerű számítógép processzorában. A Moore-törvény^[9] alapján meg lehet jósolni, hogy egy processzorban lévő logikai kapuk száma az agyi neuronok számát 2020 körül éri el. Az ilyen jóslatokból persze vajmi kevés következtetésre lehet jutni. Ráadásul a tárolókapacitásbeli különbség elenyésző a kapcsolási sebességben és a párhuzamosságban mutatkozó különbségekhez képest. Egy számítógépes chip nanomásodpercek alatt hajt végre egy utasítást, a neuronok ennél milliószor lassabbak. Az agy ennél többet is kompenzál. Minden neuron és szinapszis egyidejűleg aktív, holott a legkorszerűbb számítógépeknek is csak egy vagy legfeljebb néhány processzora van. Így annak ellenére, hogy a számítógép a nyers kapcsolási sebességben milliószor gyorsabb, az agy végeredményben százezerszer gyorsabban oldja meg a feladatait.
18	0.421053	0	Ennek az eljárásnak az eredményeként egy adathalmazt kapunk, amelynek feldolgozásával megkaphatjuk az átlagos jóslási képességet a tanító halmaz méretének függvényében. Ezt a függvényt ábrázolva kapjuk az adott algoritmusnak egy adott tématerületre vonatkozó tanulási görbéjét (learning curve). A döntési-Fa-Tanulás algoritmus étterem példáinkkal felvett tanulási görbéje a  ábrán látható. Vegyük észre, hogy a tanító halmaz méretével javul a predikció minősége! (Ez okból az ilyen görbéket ún. boldog görbéknek (happy graphs) is nevezik.) Ez annak a jele ugyanis, hogy valóban van valami mintázat az adatokban, és az algoritmus felfedezi ezt a mintázatot.  ábra - Tanulási görbe az étterem problématérre véletlenszerűen generált 100 példa esetén. A görbe 20 kísérlet eredményét összegzi. Tanulási görbe az étterem problématérre véletlenszerűen generált 100 példa esetén. A görbe 20 kísérlet eredményét összegzi.
9	0.655172	0	A CNF-mondatok átalakításának eljárása nagyon hasonló az ítéletlogikai eljáráshoz, amelyet a 7.5. szakasz - Konjunktív normál formarészben láthatunk. A legfontosabb különbség abból fakad, hogy ki kell vonnunk a mondatokból az egzisztenciális kvantorokat. Ezt az eljárást a következő mondat lefordításával illusztráljuk: „Mindenkit, aki az összes állatot szereti, valaki szeret”, vagyis:
2	0.526316	1	Az AgentGame verseny világa a BME-MIT saját fejlesztéseként egy ágenskörnyezetként került megvalósításra a Jason nevű, Java alapú reaktív tervkészítő és ágens modellező keretrendszeren belül. A Jason a gyakorlatban egy AgentSpeak interpreter és egy környezet szimulátor együttesének tekinthető. Az AgentSpeak egy nyelv, melynek segítségével az ágensek programja tervek alakjában definiálható, míg az AgentGame a világot definiáló Java nyelvű környezet.  ábra - Az Jason főablaka Az Jason főablaka
7	0.6	0	Az egyik legegyszerűbb és leghatékonyabb algoritmus, amely ezen munkák között felbukkant a WalkSAT ( ábra). Minden iterációban az algoritmus vesz egy kielégítetlen klózt és egy szimbólumot a klózból, amelynek értékét ellenkezőre cseréli. Az értéket cserélő szimbólum kiválasztása a következő két módszer közül – véletlenszerűen választva – az egyikkel történik: (1) a „min-konfliktus” lépés, amely minimalizálja a kielégítetlen klózokat az új állapotban, és a (2) „véletlen-bejárás”, amely véletlenszerűen választja a szimbólumot.  ábra - A WalkSat algoritmus, kielégíthetőségének ellenőrzése véletlenszerűen cserélgetetett változó értékekkel. Számos változata ismert az algoritmusnak. A WalkSat algoritmus, kielégíthetőségének ellenőrzése véletlenszerűen cserélgetetett változó értékekkel. Számos változata ismert az algoritmusnak.
11	0.153846	0	A  ábra egy teherszállítási problémát mutat be, ami a teher be-, illetve kirakodását és állomások közötti légi szállítását tartalmazza. A probléma három cselekvéssel írható le: Berakodás, Kirakodás és Repülés. A cselekvések két predikátumot érintenek: a Benne(c, p) jelentése, hogy a c teher a p repülőgépben van, és az Ott(x, a) jelentése, hogy az x objektum (teher vagy repülőgép) az a repülőtéren található. Vegyük észre, hogy a teher nincs Ott sehol, ha Benne van egy repülőgépben, azaz az Ott valójában azt jelenti, hogy az objektum „elérhető a megadott helyen”. Tapasztalattal kell rendelkezni a cselekvésdefiníciók területén, ahhoz hogy az ilyen részleteket konzisztensen ábrázoljuk. A következő terv megoldása a feladatnak:
19	0.727273	0	amely az összes példát helyesen sorolja be. A Foil képes lesz ezt a literált megtalálni és kiválasztani, és ezzel a tanulási feladatot megoldja. Általánosságban, a helyes megoldás megtalálása előtt, a Foil-nak számos sikertelen klóz között kell keresnie. Ez a példa a Foil működésének egyszerű illusztrációja. A teljes algoritmus váza a  ábrán látható. Az algoritmus lényegében literálról literálra egy klózt konstruál, amíg az meg nem egyezik a pozitív példák valamilyen részhalmazával, és egyik negatív példával sem egyezik. A klóz által lefedett pozitív példákat ekkor a tanító halmazból elhagyjuk, és az eljárást folytatjuk, amíg egyetlen pozitív példa sem marad. Az algoritmus két fő komponense szorul magyarázatra – az Új-Literálok, amely a klózhoz hozzáadandó összes új literált konstruálja, és a Literál-Megválasztása, amely kiválasztja a hozzáadandó literált.  ábra - A Foil algoritmus váza, amely példákból elsőrendű Horn-klózokat tanul meg. Az Új-Literálok és a Literál-Megválasztása eljárásokat a szövegben magyarázzuk meg. A Foil algoritmus váza, amely példákból elsőrendű Horn-klózokat tanul meg. Az Új-Literálok és a Literál-Megválasztása eljárásokat a szövegben magyarázzuk meg.
2	0.526316	1	Ezután azt a helyzetet kell kezelnünk, hogy az ágens elérte a célnak választott ennivalót (target), de ott már nincs ennivaló. Ha lenne ugyanis, akkor az eggyel ezelőtti terv lenne aktív: ez a második terv csak akkor aktiválódik, ha az előző nem tudott, vagyis az ágens a target pozíción van, de ott nem érzékel magától 0 távolságra ennivalót. Ilyenkor a célról le kell mondani és az ágens továbbhalad abba az irányba, amerre néz (a mydir érzékelés segítségével határozza meg saját nézési irányát).
1	0.413793	0	Az azóta eltelt fél évszázad során a számítógéphardver minden újabb generációja sebességben és kapacitásban növekedést, árban esést hozott. A teljesítőképesség mintegy 18 havonta megduplázódik, és ez így mehet még egy vagy két évtizedig. Utána molukuláris gépekre vagy valamilyen más technológiára lesz szükségünk.
9	0.931034	1	 Tételezzük fel, hogy egy tudásbázis csak egy mondatot tartalmaz: ∃x OlyanMagasMint(x,Everest)  . A következők közül melyek a törvényszerű következményei az Egzisztenciális Példányosítás alkalmazásának? a. OlyanMagasMint(Everest, Everest) b. OlyanMagasMint(Kilimandzsáró, Everest) c. OlyanMagasMint(Kilimandzsáró, Everest) ^ OlyanMagasMint(BenNevis, Everest)
12	0.47619	0	Az eddigiekben az állapottér és-vagy keresésén alapuló feltételes tervkészítésre mutattunk be egy általános megközelítést. Ez a megközelítés néhány tesztproblémán elég hatékonynak bizonyult, de más feladatokra alkalmatlan. Bizonyítható, hogy a feltételes tervkészítés nagyobb algoritmikus komplexitású, mint a hagyományos. Emlékezzünk vissza, hogy az NP osztály definíciója alapján egy megoldásról ellenőrizhető, hogy polinomiális idejű-e. Ez a hagyományos tervekre (legalábbis a polinomiális méretűekre) igaz, így a hagyományos tervkészítés az NP osztályba tartozik. A feltételes tervkészítés esetén egy jelöltre ellenőrizni kell, hogy az összes lehetséges állapotra a tervben létezik-e valamilyen, a célt kielégítő útvonal. Az „összes/valamilyen” összeállítás nem ellenőrizhető polinomiális időben, így a feltételes tervkészítés nehezebb, mint NP. Ez csak úgy kerülhető el, hogy a tervkészítési fázisban figyelmen kívül hagyunk néhány lehetséges eshetőséget, és ezeket csak akkor kezeljük, ha valójában fellépnek. A következő alfejezetben ezt a megközelítést elemezzük.
14	0.086957	1	Összefoglalva az adatbányászati alkalmazásokhoz igazodva, a bevezetőben vázolt parametrikus függvényosztályok esetében az egyik esetben egy optimális osztályozót ϕ:{ ℝ d }→{0,1}  szeretnénk kiválasztani, a másik esetben pedig optimális becslő függvényt f ω :{ ℝ d }→[0,1]  a p(Y=1|X)  közelítésére. Az a meglátás, hogy optimális döntéshez nem szükséges pontos becslés, statisztikai értelemben továbbvihető és megmutatható, hogy adott jóságú regresszió sokkal nehezebb feladat mint adott jóságú döntés a szükséges mintaszám tekintetében [?].
4	0.041667	0	Az általunk vizsgált általános megközelítést a legjobbat-először keresésnek (best-first search) nevezzük. A legjobbat-először keresés az általános Fa-Keresés vagy Gráf-Keresés algoritmusok olyan speciális esete, ahol egy csomópont kifejtésre való kiválasztása egy f(n) kiértékelő függvénytől (evaluation function) függ. Hagyományosan a legkisebb értékű csomópontot választjuk kifejtésre, mert a kiértékelő függvény a céltól való távolságot méri. A legjobbat-először keresés az eddigi általános keresési eljárások keretein belül egy prioritási sor segítségével implementálható, ami egy olyan adatstruktúra, mely a peremet a növekvő f-értékek szerint rendezi.
5	0.181818	1	Ezzel a következő behelyettesítéshez jutottunk: {NSW=RED, WA=RED, NT=GREEN, Q=BLUE}. Mivel ez a behelyettesítés nem mond ellent a korlátok egyikének sem, ezért az algoritmus tovább lép, újra meghívja önmagát ezzel a behelyettesítéssel, és azok után egy újabb, behelyettesítetlen változót keres. Tegyük fel, hogy az SA-ra esik a választása, és első körben ennek is a RED értéket adja (SA=RED).
19	0.090909	0	logikai kifejezésben. Ahogy a példák érkeznek, a példákkal nem konzisztens (consistent) hipotéziseket ki lehet zárni. Vizsgáljuk meg alaposabban a konzisztencia ezen fogalmát. Nyilvánvaló, hogy ha a H[i] hipotézis a teljes tanító halmazzal konzisztens, akkor mindegyik példával konzisztensnek kell lennie. Mit jelent viszont az, hogy valamelyik példával ellentmondásban van? Ez kétféle módon történhet meg: * A hipotézis szempontjából egy példa hamis negatív (false negative), ha a valóságban pozitív, de a hipotézis szerint negatív. Például a következő leírással rendelkező X[13] új példa:
21	0.875	0	A stratégiakeresésre Williams hívta fel a figyelmet (Williams, 1992), ő volt az, aki kifejlesztette a Reinforce algoritmuscsaládot. A későbbi munkák megerősítették és általánosították a stratégiakeresés konvergenciájára vonatkozó eredményeket: (Marbach és Tsitsiklis, 1998; Sutton és társai, 2000; Baxter és Bartlett, 2000). Ng és Jordan (2000) alkották meg a Pegasus algoritmust (Ng és Jordan, 2000), bár hasonló technikák már Van Roy PhD-disszertációjában is megtalálhatók (Van Roy, 1998). Mint a fejezetben említettük, a sztochasztikus stratégiák teljesítménye a paramétereik folytonos függvénye, ami elősegíti a gradiensalapú technikák alkalmazhatóságát. Nem ez az egyetlen előnyük: Jaakkola és társai amellett érvelnek, hogy részlegesen megfigyelhető környezetben a sztochasztikus stratégiák jobban működnek, mint a determinisztikusok, ha mindkét stratégia esetén a cselekvés pusztán a jelenlegi észlelésen alapul (Jaakkola és társai, 1995). (Ennek egyik oka, hogy a sztochasztikus algoritmusok kevésbé hajlamosak „beragadni", ha valamilyen eddig még nem látott akadály jelentkezik.) A  fejezetben rámutattunk, hogy részlegesen megfigyelhető MDF-ekben az optimális stratégiák inkább a hiedelemállapot determinisztikus függvényei, mint az aktuális megfigyeléseké. Ennek megfelelően még jobb eredményeket várnánk, ha a  fejezetben tárgyalt szűrési (filtering) módszerekkel nyomon követnénk a hiedelemállapot alakulását. Sajnálatos módon a hiedelemállapot-terek sokdimenziósak és folytonosak, és az eddigiekben nem sikerült hatékony módszereket kifejleszteni a hiedelemállapotok megerősítéses tanulására.
1	0.413793	1	A szinapszisok nagy része az ingerületet kémiailag közvetíti, vagyis a preszinaptikus axonvégződésből transzmitter anyag szabadul fel. Ez aztán a posztszinaptikus sejt membránján elhelyezkedő receptorhoz kötődik, és ott speciális szinaptikus ioncsatornák kinyílását eredményezi.
1	0.551724	1	Ha egy vegyész egy ismeretlen vegyülettel találkozik, első feladata, hogy meghatározza az összetevő atomokat és azok relatív arányát. Ehhez analitikai tesztekre és kísérletekre van szüksége. Az egyik gyakran alkalmazott műszer a tömegspektrométer. A DENDRAL is felhasználja a vegyület tömegspektrumát.
9	0.448276	1	Az 1981-es 5. generációs japán program meg is jelölte ezt a T-Prologot, mint lehetőséget a sokprocesszoros Prolog gépek programozására. A japán program nem volt siker, de előlendítette az M-Prolog életét. Több, mint 1500 példányt értékesítettek az M-Prologból (1982-ben!!!). A Turbo Prolog megjelenéséig tartott ez a siker. 1990 után az M-Prolog fejlesztése megszűnt. Az ELL kivált az SZKI-ból, IQSOFT Rt. néven folytatta a logikai programozásban való kutatást, fejlesztést. Mai jogutód az IQSYS Zrt .
25	0.111111	1	Az emberi karra emlékeztető robotkar vagy más szokásos megnevezéssel a soros manipulátor izületekkel egymáshoz kapcsolt kartagok sorozatából áll. Az ipari manipulátornak azonban egyenes vonalú mozgást biztosító izületei is lehetnek. Ebben az alfejezetben szisztematikusan koordináta-rendszereket fogunk rendelni minden egyes kartaghoz annak érdekében, hogy a karrendszerek mozgását leíró általános karegyenleteket kapjunk. Ennek érdekében először pontosítunk néhány fogalmat (pl. kartag, izület), majd bizonyos paramétereiket definiáljuk, amelyeket a leíráshoz fogunk alkalmazni.
18	0.578947	0	Az együttes tanulás motivációja kézenfekvő. Vizsgáljunk egy M = 5 hipotézisből álló együttest, és tegyük fel, hogy a predikciós eredményeket egyszerű többségi szavazással kombináljuk össze. Ahhoz, hogy az együttes rosszul osztályozzon egy új példát, legalább háromnak az öt hipotézisből rossz osztályozási eredményt kell adnia! Reményünk szerint ez sokkal kevésbé valószínű, mint az, hogy egyetlen hipotézis rossz osztályozásra jusson. Tegyük fel, hogy az együttes minden h[i] hipotézisének p a hibavalószínűsége, azaz p annak valószínűsége, hogy h[i] rosszul osztályoz egy véletlen módon kiválasztott példát. Továbbá tegyük fel, hogy a hipotézisek által elkövetett hibák függetlenek. Ez esetben – ha p kicsi – rendkívül kicsi a valószínűsége, hogy nagy számban történjék téves osztályozás. Egyszerű számítással (lásd  feladat) megmutatható például, hogy öt hipotézisből álló együttest használva a hibaarány 0,1-ről kevesebb mint 0,01-ra csökken. Valójában a függetlenség feltételezése nem racionális, mert a hipotéziseket a tanító halmaz félrevezető tulajdonságai hasonló módon vezetik félre. Mindamellett, ha a hipotézisek legalább kismértékben eltérőek, lecsökkentve a hibáik közti korrelációt, akkor az együttes tanulás nagyon hasznos lehet.
8	0.548387	0	Eddig ebben az alfejezetben az idővel operáló mondatok mind szinkrónok (synchronic), azaz egyidejűek voltak, ami azt jelenti, hogy a világ állapotának tulajdonságait vonatkoztatják ugyanannak a világállapotnak más tulajdonságaihoz. Azokat a mondatokat, amelyek lehetővé teszik az időbeliséget figyelembe vevő következtetést diakrónnak (diachronic) nevezzük. Például az ágensnek tudnia kell, hogy hogyan kombinálja a megelőző helyzetéről lévő információt azzal az információval, amely helyzetének meghatározásához szükséges. A diakrón mondatok tárgyalását elhalasztjuk a  fejezetig, most csak tételezzük fel, hogy a helyzetre és más időfüggő predikátumokra vonatkozó következtetések megtörténtek.
3	0.583333	0	Cs(SZK) = 10 + 100 + 1000 + 10 000 + 100 000 + 999 990 = 1 111 100 Fontos Általánosságban nagy keresési térrel rendelkező problémák esetén és ha a megoldás mélysége nem ismert, a nem informált módszerek köréből az iteratívan mélyülő keresés a javasolt.  ábra - Az iteratívan mélyülő keresési algoritmus mélységkorlátozott keresést alkalmaz ismételten, növekvő mélységkorláttal. Az algoritmus megáll, ha a megoldást megtalálja, vagy ha a mélységkorlátozott keresés kudarccal tér vissza, jelezve, hogy megoldás nem létezik. Az iteratívan mélyülő keresési algoritmus mélységkorlátozott keresést alkalmaz ismételten, növekvő mélységkorláttal. Az algoritmus megáll, ha a megoldást megtalálja, vagy ha a mélységkorlátozott keresés kudarccal tér vissza, jelezve, hogy megoldás nem létezik.  ábra - Az iteratívan mélyülő keresési algoritmus négy iterációja egy bináris fán Az iteratívan mélyülő keresési algoritmus négy iterációja egy bináris fán
24	0.333333	0	Van arra esélyünk, hogy optimalizáljuk a munkát ezen a ponton: egyetlen műveletben kombinálhatjuk a simítást és az éldetektálást. Egy tétel szerint tetszőleges f és g függvények esetén megmutatható, hogy a konvolúció deriváltja (f ∗ g)' megegyezik a derivált konvolúciójával: f ∗ (g)'. Tehát ahelyett, hogy először simítanánk, majd differenciálnánk, egyszerűen konvolváljuk a képet a Gauss simító függvény deriváltjával, G'[σ]-val. Így az egydimenziós éldetektálás algoritmusa a következő: 1. Az I képet a G'[σ]-val kell konvolválnunk, hogy az R-et megkapjuk. 2. Jelöljük be az azokat a csúcsokat ||R(x)||-ben, amelyek egy előre definiált T küszöbnél magasabbak. A küszöb értékét úgy határozzuk meg, hogy a zaj miatti másodlagos csúcsokat elimináljuk.
14	0.869565	1	Amire a sciFLT képes: * Takagi-Sugeno és Mandami rendszerek. * Tagsági függvények, t-normák, s-normák és komplemensek. * T-normák: Dubois-Prade, Yager, Drasztikus összeg, Einstein szorzat, Algebrai szorzat és Minimum. * S-normák: Dubois-Prade, Yager, Drasztikus összeg, Einstein összeg, Algebrai összeg és Maximum. * Komplemens: klasszikus, Yager és Dubois. * Implikáció: összeg és minimum. * Aggregáció: Algebrai összeg és maximum. * Defuzzyfikáció: centrum, biszektor, maximum közepe, legnagyobb maximum, legkisebb maximum, súlyozott átlag és közép átlag. * Tagsági függvények: háromszög, trapéz, Gauss, kiterjesztett Gauss, szigmoid, két szigmoid összege, két szigmoid különbsége, S-alakú, Z-alakú és Pí-alakú. A kimenet lehet lineáris és konstans a Takagi-Sugeno típusúnál. * Beépített szerkesztővel rendelkezik, ami lehetővé teszi a tulajdonságok, ki- és bemenetek, valamint a tagsági függvények hozzáadását és módosítását.
14	0.130435	0	Mi történik, ha történetesen rossz sorrendet választunk? Vizsgáljuk meg újra a betöréses példát. Tételezzük fel, hogy a változókat a következő sorrendben adjuk a hálóhoz: MáriaTelefonál, JánosTelefonál, Riasztás, Betörés, Földrengés. Ekkor egy kicsit bonyolultabb hálót kapunk ( (a) ábrán). Az eljárás a következő: * MáriaTelefonál hozzáadása: szülők nincsenek. * JánosTelefonál hozzáadása: ha Mária telefonál, az valószínűleg azt jelenti, hogy a riasztó megszólalt, ami természetesen valószínűbbé teszi, hogy János telefonáljon. Így a JánosTelefonál-nak szükségszerűen szülője a MáriaTelefonál.
15	0.185185	0	Az összegzésen belül az első tényező egyszerűen az állapotátmenet-modell és a második a jelenlegi állapot eloszlása. Így megvan a kívánt rekurzív képlet. A szűrt P(X[t]|e[1:t]) becslésre úgy gondolhatunk, mint egy f[1:t ]„üzenetre”, amit előre terjesztünk végig a sorozaton, minden átmenetnél az új megfigyeléssel módosítva és frissítve. A folyamat
2	0.578947	0	A legegyszerűbb fajtájú ágens az egyszerű reflexszerű ágens (simple reflex agent). Ezek az ágensek az aktuális észlelés alapján választják ki a cselekvéseket, figyelmen kívül hagyva az észlelési történet többi részét. Például a porszívó ágens, amelynek ágensfüggvényét a  ábra táblázatos formában mutatja, egy egyszerű reflexszerű ágens, mivel döntései csak a jelenlegi helyszínen és azon alapulnak, hogy ott van-e piszok. A  ábra mutatja ezen ágens programját.
5	0.181818	1	Szerencsére NT minden értékéhez létezik konzisztens értéke a Q-nak, így az (NT, Q) élet töröljük a listából, és újra kivesszük az aktuális első élet, az (SA, Q)-t. Ezzel is ugyanez a helyzet: SA minden értékéhez létezik konzisztens értéke a Q-nak (a RED-hez a GREEN vagy a BLUE, a GREEN-hez a BLUE, a BLUE-hoz pedig a GREEN), így ezzel is készen vagyunk, az (SA, Q) élet töröljük a listáról, és vesszük a lista első élét, az (NSW, SA) élet.
5	0.545455	0	A min-konfliktusok heurisztika meglepően hatékony sok kényszerkielégítési probléma megoldásában, különösen amikor adott egy viszonylag jó kezdeti állapot. Teljesítményét az  ábra utolsó oszlopa mutatja. Meglepő módon az n-királynő probléma esetén a min-konfliktusok algoritmus futási ideje a kezdeti elhelyezéseket nem számítva nagyjából független a probléma méretétől. Akár a millió-királynő problémát is megoldja átlagosan ötven lépésben (a kezdeti értékadást követően). Ez a figyelemre méltó megfigyelés a kilencvenes években komoly kutatómunkához vezetett a lokális keresés, valamint a könnyű és nehéz problémák megkülönböztetése terén (ezzel a  fejezetben még foglalkozunk). Durván szólva az n-királynő azért könnyű a lokális keresés számára, mert a megoldások az állapottérben sűrűn helyezkednek el. A min-konfliktusok algoritmus nehéz problémák esetén is működik. Alkalmazták például a Hubble-űrtávcső megfigyeléseinek ütemezésére, és az egy hétre tervezett megfigyelések ütemezésének elkészítéséhez szükséges három hetet (!) körülbelül tíz percre rövidítette le.  ábra - A Min-Konfliktusok algoritmus kényszerkielégítési problémák megoldására lokális kereséssel. A kezdeti állapotot véletlenszerűen választjuk ki, vagy egy mohó hozzárendelési folyamat segítségével, amely minden egyes sorra kerülő változónak egy minimális-konfliktus értéket választ. A Konfliktusok függvény megszámolja az adott érték által megsértett kényszerek számát (adottnak tekintve az aktuális hozzárendelések fennmaradó részét). A Min-Konfliktusok algoritmus kényszerkielégítési problémák megoldására lokális kereséssel. A kezdeti állapotot véletlenszerűen választjuk ki, vagy egy mohó hozzárendelési folyamat segítségével, amely minden egyes sorra kerülő változónak egy minimális-konfliktus értéket választ. A Konfliktusok függvény megszámolja az adott érték által megsértett kényszerek számát (adottnak tekintve az aktuális hozzárendelések fennmaradó részét).
12	0.285714	0	Kezdjük a rossz hírrel: a tiszta HFH-tervkészítés (ahol az egyetlen megengedett tervfinomítás a dekompozíció), a véges állapottér ellenére is, eldönthetetlen! Ez nagyon elszomorítónak tűnhet, mivel a HFH-tervkészítés lényege, hogy növeljük a hatékonyságot. Ez a nehézség azért lép fel, mert a cselekvésdekompozíciók rekurzívak (recursive) (például a sétálás implementálható egy lépés megtételével és utána egy sétálással), így a HFH-tervek tetszőlegesen hosszúra nyúlhatnak. Nevezetesen a legrövidebb HFH-megoldás is tetszőlegesen hosszú lehet, így nincs arra lehetőség, hogy a keresést egy megadott idő után leállítsuk. Ennek ellenére azonban legalább három okunk van a bizakodásra: 1. Kizárhatjuk a rekurziót, amit csak nagyon kevés tervkészítési feladat igényel meg. Ebben az esetben az összes HFH-terv véges vagy megszámlálható hosszúságú. 2. Korlátozhatjuk azon megoldások hosszát, amelyekre kíváncsiak vagyunk. Mivel az állapottér véges, az olyan terv, amelynek több lépése van, mint az állapottér állapotainak száma, mindenképpen tartalmaz ciklust, ami ugyanabba az állapotba többször lép be. Az ilyen HFH-megoldások kizárásával nagyon picit vesztünk, de uraljuk a keresést. 3. Létrehozhatunk egy hibrid megközelítést, ami a részben rendezett és a HFH-tervkészítőket kombinálja. A részben rendezett tervkészítés önmagában elegendő, hogy eldöntsük, létezik-e terv, így a hibrid feladat is nyilvánvalóan eldönthető.
25	0.074074	1	Az amerikai egyesült államokbeli Johns Hopkins University (JHU-Baltimore) Computer-Integrated Surgical Systems and Technology (CISST ERC) kutatólaboratóriumában folyó projekt célja egy integrált robotrendszer fejlesztése, amely közvetlen segítséget nyújt az agyalapi csontfúrással járó műtétek esetében. A projekt célja a koponyafúrás pontosabbá és biztonságosabbá tétele a NeuroMate sztereotaktilis robot és StealthStation intraoperációs navigációs rendszer integrálásával. A JHU-rendszernek több kiemelkedően előnyös tulajdonsága is van. Először is kiváló műtéti vizualizációt tesz lehetővé, képes pontosan megjeleníteni a sebészeti eszközt a beteg 3D-s preoperatív CT-felvételekből készített modelljén. Ezen túlmenően, mivel a csontfúró egy robothoz van rögzítve, az egész szerkezet stabil és robosztus, teljesen kiküszöböli a kézremegést. A robot a rászerelt csontfúróval erő/nyomaték irányítás révén folyamatosan követi a sebész kezének mozgását a manipulátorhoz illesztett érzékelő segítségével (kooperatív mód és admittancia irányítással).
24	0.833333	1	A Multi-Scale Oriented Patches algoritmust leginkább képek egymásra igazításához használják, de alkalmas alakzatok felismerésére is. A jellemző pontok kereséséhez a Harris sarokpont detektort használja. A kulcspont leíró számítása előtt a területet beforgatja a domináns gradiens irányba, mely lépés rotációra invariánssá teszi az algoritmust. Maga a felhasznált leíró a normalizált intenzitásértékekből áll. A közeli kulcspontok elnyomják egymást, hogy egyenletesebb legyen az eloszlásuk a képen. A felismeréskor a leírók keresése a nearest neighbour algoritmussal történik néhány kisfrekvenciás wavelet együtthatót felhasználva indexelésre. A hibás találatokat a módszer a RANdom SAmple Consensus (RANSAC) algoritmussal szűri ki.
1	0.37931	0	Abban az esetben, ha egy szervezet magában hordja a külső valóság és a saját lehetséges cselekvéseinek „kisméretű modelljét”, képes különféle alternatívákat kipróbálni, a számára legjobb mellett dönteni, a jövőbeli helyzetekre azok bekövetkezése előtt reagálni, a múltbeli események ismeretét a jelen és a jövő kezelésében felhasználni, és a felmerülő szükséghelyzetekre minden vonatkozásban kimerítőbb, biztonságosabb és kompetensebb módon reagálni.
20	0.035714	0	Az utolsó egyszerűsítést az adja, ha a hipotézistérben egyenletes (uniform) priort feltételezünk. Ebben az esetben a MAP-tanulás egy olyan h[i ]választására redukálódik, amely maximálja P(d|h[i]) -t. Ezt maximum-likelihood (ML) hipotézisnek nevezzük, és h[ML]-lel jelöljük. A maximum-likelihood tanulás nagyon elterjedt a statisztikában. Ez egy olyan tudomány, amelynek sok kutatója nem bízik az a priori hipotézisek szubjektív természetében. Ez józan megközelítés akkor, amikor nincs semmi okunk, hogy apriori kitüntessük az egyik hipotézist egy másikkal szemben, például amikor az öszszes hipotézis egyformán komplex. Az ML-tanulás jó közelítését adja a Bayes- és MAP-tanulásnak olyankor, amikor az adathalmaz nagy, hiszen az adatok végül is felülírják a hipotézisek a priori eloszlását, de kis adathalmazok esetén problémák merülnek fel az alkalmazásánál (mint látni fogjuk).
23	0.333333	0	Honnan tudjuk, hogy egy IR-rendszer jól teljesít? Elvégzünk egy kísérletet, amelyben a rendszer kap egy lekérdezéshalmazt, az eredményhalmazokat pedig pontozzuk az emberi relevanciamegítélés szerint. Tradicionálisan két mértéket használunk a pontozásra: a felidézést (recall) és pontosságot (precision). Ezeket egy példán keresztül fogjuk bemutatni. Képzeljük el, hogy egy IR-rendszer visszaadott egy eredményhalmazt egy olyan lekérdezésre, amelyre tudjuk, hogy egy 100 dokumentumot tartalmazó korpuszból mely dokumentumok relevánsak, és melyek nem. Az egyes kategóriákba tartozó dokumentumok számát az alábbi táblázat adja meg:
6	0.9	0	A számítógépes játékokról több fórumon jelennek meg cikkek. A felettébb félrevezető nevű konferenciakiadvány, a Heuristic Programming in Artificial Intelligence számol be a Számítógépes Sakkolimpiákról, amely rendezvények a játékok egész sorára terjednek ki. A játékprogramok kutatásáról fontos cikkeket publikáltak számos szerkesztett cikkgyűjteményben (Levy, 1988a; Levy, 1988a; Marsland és Schaeffer, 1990). Az 1977-ben alapított Nemzetközi Számítógépes Sakkszövetség (International Computer Chess Association, ICCA) negyedévenként adja ki az ICGA Journalt (korábban ICCA Journal). (Clarke, 1977) óta fontos cikkek jelentek meg az Advances in Computer Chess antológiasorozatban. Az Artificial Intelligence folyóirat 134. kötete (Artificial Intelligence, 2002) leírásokat tartalmaz a legfejlettebb sakk, Othello, Hex, shogi, gó, ostábla, póker, Scrabble™ és más játékprogramokról.
6	0.1	1	A mai programok már átalakultak olyan mesteri rendszerekké, amelyek átfogó emberi tudással és tapasztalattal bírnak. Óriási adatbázisok állnak rendelkezésre megnyitásból, végjátékból, és olyan cselekből, melyekkel már akár helyzeti előnyre cserélhetik az anyagi hasznot.
24	0.208333	1	A színkeverésnek két módja van: * additív színkeverés: a keverékszín monokróm fényforrások fényének egymásra vetítésével áll elő. (pl.: TV) Alapszínei: vörös, zöld, kék. * szubtraktív színkeverés: széles sávban sugárzó fényforrás fényéből kivonunk egyes hullámhosszokat, tartományokat. A maradék lesz a keverékszín. (pl.: színes nyomtatás) Alapszínei: cián, magenta (bíbor), sárga, fekete, latin nevéből ered a K rövidítés (CMYK). A színeket a feketéből vonjuk ki.
14	0.73913	1	Statisztikai alapon történő felosztás: Az alsó ábrán, statisztikai alapon történő felosztás eredménye látható. Ebben az esetben is, a változó jellemző intervallumára illesztett négy darab, kék színű háromszög egyenlőszárú. Úgy próbáljuk meg őket elhelyezni, hogy mind a négy háromszöghöz azonos számú változó érték tartozzon.  ábra - Statisztikai alapú felosztás Statisztikai alapú felosztás
6	0.9	1	Rögtön látható, hogy ez a módszer nem minden esetben célravezető. Léteznek olyan játékok, amelyek a végtelenségig folytathatóak (ilyen például a potenciálisan végtelen lapon játszott amőba), ezeknél nem lehetséges az összes végjáték legenerálása. Azonban ha a lehetséges állapotok száma még ha nagy is, de véges (ilyen például a sakk), akkor lehetséges a végjátékok generálása a fenti módszerrel. A sakk esetén például létezik végjáték adatbázis hat vagy kevesebb (beleértve a két királyt) megmaradt bábú esetén.
6	0.1	1	Később a versenyeket kiíró Robert Axelrod még további két analízissel igazolta a TFT stratégia hatékonyságát/ésszerűségét az iterált Fogolydilemma esetében: (1) végzett egy úgynevezett ökológiai analízist, ahol egy végtelen méretű populáció az eredeti versenyekben résztvevő programokból alkotott adott arányú részpopulációinak alakulását vizsgálta, feltéve, hogy ezek mérete (pontosabban a teljes populációhoz viszonyított arányuk) függ az átlagos hasznuktól, amit egy-egy körben nyernek. Itt is a TFT részpopuláció jött ki győztesként. A másik kísérlet, (2) evolúciós analízis címen vált ismertté. Itt Axelrod egy genetikus algoritmushoz hasonló környezetet konstruált, és azon belül evolvált bináris kromoszómák (génszekvenciák) által kódolt iterált stratégiákat. Ezeket vetette körről körre, generációról generációra össze, és a sikeresebbek örökítődhettek tovább. Ennél a kísérletnél is a TFT-hez igen hasonló tulajdonságokkal rendelkező iterált stratégiát kódoló génszekvencia jött ki eredményül. A TFT mélyebb analíziséről Axelrod ezzel kapcsolatos publikációit érdemes elolvasni.
7	0.16	1	Helyes? Bizony helyes! Értelmes? Hm, hm. Amit rá lehet mondani az az, hogy inkább megtévesztő. De valóban ki számára? A gépi rendszer számára semmiképpen sem, ld. a „D” esetet. Az ember számára viszont megtévesztő, hiszen a Kutya(Som) ^ ¬  zold(Som)
23	0.722222	0	Az elmúlt évtizedben elmozdulás volt megfigyelhető a statisztikai alapú gépi fordító rendszerek irányába. Természetesen, a  ábra bármely lépésének javára szolgálnának statisztikai adatok, valamint egy olyan egyértelmű valószínűségi modell használata, amely megadja, hogy mi egy jó analízis vagy átvitel. Azonban a „statisztikai gépi fordítás” az egész fordítási probléma olyan megközelítésének a megnevezésévé vált, amely a mondat legvalószínűbb fordításának kétnyelvű korpuszon alapuló megtalálását jelenti. A kétnyelvű korpuszok egyik példája a Hansard,^[257]^ amely parlamenti viták naplója. Kanada, Hongkong és más országok kétnyelvű Hansardokat tesznek közzé, az Európai Unió 11 nyelven^[258]^ publikálja hivatalos dokumentumait, míg az Egyesült Nemzetek Szervezete többnyelvű dokumentumokat ad ki. Ezek a statisztikai gépi fordítás számára felbecsülhetetlenül értékes forrásoknak bizonyultak.
14	0.73913	1	Általános eset, hogy a tanítás folyamataként kapott szabálybázis hiányos. A bemeneti változók fuzzy halmazainak száma alapján megadható, hogy hány külön esetre vonatkozó szabálynak kellene szerepelnie a szabálybázisban.
1	0.103448	1	Arisztotelész a tudás három fajtáját különböztette meg. A poiétikus, a praktikus és a teoretikus tudást. A poiétikus az alkotó tudás, ami a mesterségekben jelenik meg. A praktikus tudás a társadalomhoz köthető tudás: etika és politika. A teoretikus tudás elméleti tudás, mely három részre osztható: metafizika, fizika és matematika. Ezekkel a következő műveiben foglalkozik: Nikomachoszi Etika, Politika, Metafizika, Fizika, Az égbolt, Organon, Kategóriák, Első Analütika. A témával kapcsolatban most a Metafizika és Organon műveket emelném ki. Ezek különböző időben készült művek gyűjteményei, így a tanítványok és a mester munkái is megtalálhatóak közöttük. A Metafizika a tudományoknak többféle meghatározását adja meg. Egyrészt ez a dolgok alapvető okainak tudománya, a „létezővel, mint létezővel” foglalkozó tudomány. Másrészt ez a legfőbb szubsztanciának (az Első Mozgatónak, Istennek) a tudománya. [2] Arisztotelész logikával kapcsolatos műveit az Organon tartalmazza. Benne található lét és kategóriaelmélettel kapcsolatos írásai. Az organon jelentése eszköz. A logika fogalma, mely egyben kifejezi, hogy mi Arisztotelész álláspontja a logikáról: a logika minden tudomány alapja, tehát nem egy külön tudományág. Út a megértéshez a helyes gondolkodáson keresztül. Két legfontosabb írása az Organonból a Kategóriák és az Első Analütika. Utóbbiban a logikai következtetés módszeréről ír. Számos területen újat alkotott. Az arisztotelészi logika a logikai alanyra és a logikai állítmányra felbontható ítéletekkel foglalkozik.
10	0.939394	0	A temporális logikában az időt általában a nyelv modellelméletébe ágyazzák be. Az MI-ben a tendencia az volt, hogy az időpontokra és az eseményekre vonatkozó axiómákat explicit módon a tudásbázisban írjuk fel, anélkül hogy az időnek a logikában valamilyen speciális státust adnánk. Az ilyen megközelítés egyes esetekben nagyobb rugalmasságot és áttekinthetőséget biztosít. Ráadásul az elsőrendű logikában kifejezett temporális logika nagyobb eséllyel integrálható az ebben a formalizmusban felhalmozott más tudásanyaggal.
5	0.363636	0	A legfontosabb magasabb rendű kényszer talán az erőforráskényszer (resource constraint), amit néha legfeljebb kényszernek is neveznek. Jelölje például PA[1], ..., PA[4] rendre négy feladathoz hozzárendelt személyzet számát. Azt a kényszert, miszerint öszszesen nem lehet 10-nél több embernek feladatot adni, így írhatjuk fel: legfeljebb(10, PA[1], PA[2], PA[3], PA[4]). Az inkonzisztenciát egyszerűen ki lehet mutatni az aktuális tartományok minimális értékeinek összegzésével: ha például mindegyik változó tartománya a {3, 4, 5, 6}, akkor a legfeljebb kényszert nem lehet kielégíteni. A konzisztenciát azáltal is érvényesíthetjük, hogy töröljük bármely tartomány maximális értékét, amely nem konzisztens az összes többi tartomány minimális értékével. Így ha példánkban mindegyik változónak {2, 3, 4, 5, 6} a tartománya, akkor az 5 és a 6 értékeket mindegyik tartományból törölni lehet.
3	0.208333	0	Milyen absztrakciókhoz folyamodtunk itt? A cselekvéseket a kezdeti és végállapotuk erejéig absztraháltuk, elmozdítás közben egy kocka közbülső helyzeteit figyelmen kívül hagytuk. Az olyan cselekvésektől is elvonatkoztattunk, mint a tábla megrázása, ha a kockák megakadtak, vagy a kockák késsel való kiszedése és visszahelyezése. Amit kaptunk, az a játék szabálykészlete, a manipulációk fizikai részleteitől eltekintve.
1	0.172414	1	A kigenerált, a teszten elbukott, de várhatóan még hasznos struktúrák (problémahelyzetek) tárolásához problématérre van szükség, ahol többek között helyezkednek a probléma kezdeti és a célhelyzete. A FSzR korábban említett hipotetikus tulajdonságai garantálják, hogy problémamegoldó mechanizmus gyanánt felépíthetünk benne a problémateret a lépésgenerátorával együtt.
5	0.181818	1	1. House1Person: az 1. házban lakó személy nemzetisége. 2. House2Person: a 2. házban lakó személy nemzetisége. 3. House3Person: a 3. házban lakó személy nemzetisége. 4. House4Person: a 4. házban lakó személy nemzetisége. 5. House5Person: az 5. házban lakó személy nemzetisége. 6. House1Color: az 1. ház színe. 7. House2Color: a 2. ház színe. 8. House3Color: a 3. ház színe. 9. House4Color: a 4. ház színe. 10. House5Color: az 5. ház színe. 11. House1Pet: az 1. házban tartott állat fajtája. 12. House2Pet: a 2. házban tartott állat fajtája. 13. House3Pet: a 3. házban tartott állat fajtája. 14. House4Pet: a 4. házban tartott állat fajtája. 15. House5Pet: az 5. házban tartott állat fajtája. 16. House1Drink: az 1. házban fogyasztott ital fajtája. 17. House2Drink: a 2. házban fogyasztott ital fajtája. 18. House3Drink: a 3. házban fogyasztott ital fajtája. 19. House4Drink: a 4. házban fogyasztott ital fajtája. 20. House5Drink: az 5. házban fogyasztott ital fajtája. 21. House1Brand: az 1. házban szívott cigaretta márkája. 22. House2Brand: a 2. házban szívott cigaretta márkája. 23. House3Brand: a 3. házban szívott cigaretta márkája. 24. House4Brand: a 4. házban szívott cigaretta márkája. 25. House5Brand: az 5. házban szívott cigaretta márkája.
25	0.37037	0	A munkatér-reprezentációval az a probléma, hogy a robot számára nem minden munkatér-koordináta érhető el, még akkor sem, ha nincsenek akadályok. Ez a munkatér elérhető koordinátáira vonatkozó összekapcsolási kényszerek (linkage constrains) miatt van. Például a könyök (x[könyök], y[könyök]) és a megfogó (x[megfogó], y[megfogó]) pozíciója egymástól mindig adott távolságra van, mert egy merev alkar kapcsolja őket össze. Ha a robotmozgás-tervezés munkatér-koordinátákban történik, akkor a generált útvonalaknak mindig meg kell felelniük ezeknek a kényszereknek. Ez azért különösen nehéz, mert az állapottér folytonos, a kényszerek pedig nemlineárisak.
18	0.947368	0	Egy jó „butácska” tanulási algoritmus a következő: készítsünk egy táblázatot az összes tanítópéldából. Vizsgáljuk meg, hogy milyen kimenet szerepel a legtöbbször a tanítópéldákban: jelöljük ezt d-vel. Ezek után, ha olyan minta jelenik meg a bemeneten, ami nincs a táblázatban, akkor adjunk vissza d-t. Olyan bemenetekre, amelyek megtalálhatók a táblában, adjuk vissza a táblázatban a bemenethez asszociált kimeneti értéket (vagy ha egynél több kimeneti érték van azonos bemenethez, akkor a leggyakrabban előfordulót). Implementálja ezt az algoritmust, és vizsgálja meg egy példának választott területen (például az étterem problémán) azt, hogy mennyire működik jól! Ennek alapján fogalmat alkothatunk a tanulás területének alapszintjéről – a minimális elvárható teljesítményről, amelyet minden tanuló algoritmusnak el kell érnie.
20	0.285714	0	A rejtett változók fontosak, de bonyolítják a tanulási problémát. A  (a) ábrán például nem világos, hogy adott szülőcsomópontok esetén hogyan tanulható meg a SzívBetegség feltételes eloszlása, mivel nem ismert az értéke az egyes esetekben. Ugyanez a probléma fellép a tünetek eloszlásának tanulásánál is. Ebben a részben egy olyan – expectation–maximization,^[200] EM nevű – algoritmust ismertetünk, amely nagyon általános megoldást ad erre a problémára. Három példát mutatunk be, majd általános leírást adunk. Ez az algoritmus először holmi mágiának tűnik, de amint a mögöttes intuíciót megértettük, a tanulási problémák hatalmas területén egy sor helyen alkalmazhatjuk.
20	0.714286	0	Vegyünk egyetlen tanító példát, amelynek kívánt kimeneti értéke T, és legyen erre a példára a perceptron válasza p. Ha T = 1, akkor az adat feltételes valószínűsége p, ha T = 0, akkor a feltételes valószínűség (1 – p). Egy egyszerű trükk alkalmazásával a log likelihoodot differenciálható formában írhatjuk fel. A trükk az, hogy ha a 0/1 változót egy kifejezés kitevőjébe írjuk, akkor indikátorváltozóként (indicator variable) viselkedik: p^Takkor p, ha T = 1, egyébként 1; hasonlóképpen (1 – p)^(1–T) akkor (1 – p), ha T = 0, különben 1. Ezek szerint az adat log likelihood értékét felírhatjuk, mint:
16	0.173913	0	Vegyük észre, hogy a hasznosságelmélet axiómái nem mondanak semmit a hasznosságról. Kizárólag a preferenciákról szólnak. Azaz a racionális ágens alapvető tulajdonságainak a preferenciákat tételezzük fel. A hasznosságfüggvény létezése a hasznosság- axiómákból következik: 1. A hasznosság elv (utility principle)
6	0.1	1	A fentebbi fólia első két sorában tehát behelyettesítettünk, és kiszámítottunk mindent, amit csak lehetett. Most már csak az a feladatunk, hogy megpróbáljuk megtalálni azt a p12 és p22 értéket, amelyből adódó q kevert stratégia-kombináció egyensúly.
1	0.344828	1	Az elemi mágnesek azonban eközben sem kerülnek nyugalmi állapotba, hanem búgócsigára emlékeztető módon, körkörösen kerülgetik a külső mágneses tér erővonalait, precessziós mozgást végeznek. A spinek ilyenkor még összerendezetlenül támolyognak, tengelyeik egy-egy adott időpillanatban a pólusaik által bejárt körpálya legkülönbözőbb pontjaira mutatnak. A precesszió rezgésszámát, az ún. Larmor-frekvenciát a protonokra ható, külső mágneses erőtér nagysága és az anyag belső szerkezetéből eredő hatások együttesen határozzák meg.
15	0.259259	0	Így a legvalószínűbb állapotsorozat kiszámítása hasonló a szűréshez: előrefelé végigfut a sorozaton, minden időpontban kiszámítva az m üzeneteket a   egyenlet szerint. A számítás menetét a  (b) ábra mutatja. Végül ez kiadja az összes végső állapothoz vezető legvalószínűbb útvonal valószínűségét. Így már könnyen kiválasztható a teljes hosszúságú legvalószínűbb sorozat (a vastagon szedettel kiemelt végső állapottól). Az aktuális sorozat azonosításához – szemben azzal, amikor csak a valószínűségét számítjuk ki – az algoritmusnak minden állapotból mutatókat kell nyilvántartania a legjobb hozzá vezető állapothoz (vastagon szedettel látható); a sorozat a mutatóknak a legjobb végső állapottól való visszafelé követésével határozható meg.  ábra - (a) Az Eső[t] lehetséges állapotsorozatait tekinthetjük egy átvezető útnak egy gráfon, aminek csomópontjai a lehetséges állapotok az egyes időpontokban. (Az állapotokat négyzetes csomópont jelzi, hogy félreérthetetlenül megkülönböztessük őket egy Bayes-háló csomópontjaitól.) (b) A Viterbi-algoritmus működése az [igaz, igaz, hamis, igaz, igaz] megfigyelési sorozatra. Minden t időpontra feltüntettük az m[1:t] üzenet értékeit, ami minden egyes t időpontbeli állapothoz megadja a legjobb, benne végződő sorozat valószínűségét. Minden egyes állapothoz egy vastag nyíl is vezet, ami a legjobb elődjét jelzi, a megelőző sorozat valószínűségének és az átmenet valószínűségének a szorzata szerint. A vastag nyilak visszafelé követése az m[1:5]-beni legvalószínűbb állapotból pedig megadja a legvalószínűbb sorozatot. (a) Az Esőt lehetséges állapotsorozatait tekinthetjük egy átvezető útnak egy gráfon, aminek csomópontjai a lehetséges állapotok az egyes időpontokban. (Az állapotokat négyzetes csomópont jelzi, hogy félreérthetetlenül megkülönböztessük őket egy Bayes-háló csomópontjaitól.) (b) A Viterbi-algoritmus működése az [igaz, igaz, hamis, igaz, igaz] megfigyelési sorozatra. Minden t időpontra feltüntettük az m1:t üzenet értékeit, ami minden egyes t időpontbeli állapothoz megadja a legjobb, benne végződő sorozat valószínűségét. Minden egyes állapothoz egy vastag nyíl is vezet, ami a legjobb elődjét jelzi, a megelőző sorozat valószínűségének és az átmenet valószínűségének a szorzata szerint. A vastag nyilak visszafelé követése az m1:5-beni legvalószínűbb állapotból pedig megadja a legvalószínűbb sorozatot.
27	0.4	0	Egy ágensnek saját következtetéseit is az ellenőrzése alá kell tudnia vonni. A következtetést abba kell hagynia, ha cselekvésre van szükség, és a következtetésre rendelkezésre álló időt a legígéretesebb számításokra kell fordítania. Egy taxisofőr ágensnek, például, ha közvetlenül maga előtt balesetet észlel, nem félórák alatt, hanem a másodperc töredéke alatt el kell tudnia dönteni, hogy fékezni fog, vagy inkább kikerüli a balesetet. A másodperc ezen töredékét a legfontosabb kérdések vizsgálatára kell fordítania, hogy balra, illetve jobbra szabad-e a sáv, és nincs-e közvetlenül mögötte egy nagy teherautó, és nem arra, hogy milyen az idő, mennyire kopnak a gumik, vagy hogy hol találja a következő utast. Az ilyen problémákkal a valós idejű MI (real-time AI) foglalkozik. Ahogy az intelligens rendszerek egyre bonyolultabb tárgyterületekre vonulnak be, minden probléma valós idejűvé válik, hiszen az ágensnek soha nem lesz elegendő ideje arra, hogy a döntési problémát egzakt módon oldja meg.
22	0	0	Az embereket a nyelvként (language) ismert, strukturált üzenetekből álló összetett rendszer különbözteti meg más élőlényektől, amely lehetővé teszi számunkra, hogy a világról szóló ismereteink nagy részét átadhassuk egymásnak. Bár a csimpánzok, delfinek és más emlősök több száz jeles szókinccsel rendelkeznek, és van valamiféle hajlamuk ezek összekapcsolására, az ember az egyedüli faj, amely minőségileg különböző üzenetek korlátlan számát képes megbízhatóan átadni.
24	0.833333	1	A detektornak két elterjedt módosítása is van. A multi-scale Harris operátor skála térben számol, így különböző nagyságú sarkok megtalálására alkalmas, azaz invariáns a nagyításra. A Shi and Tomasi sarokpont detektor a sajátérték eredeti közelítése helyett használ egy pontosabb becslést.
2	0.263158	1	Például egy Forma 1-es autóversenyző ágens számára cél lehet az, hogy minél több világbajnoki címet nyerjen. Ez az elsődleges. Viszont alaposabban megvizsgálva a helyzetet az sem mindegy, hogy ezt miként éri el. Számításba jöhet a szabálytalanságok és incidensek számának minimalizálása, a rajt és verseny elsőségek, illetve a versenyen futott leggyorsabb körök számának maximalizálása, vagy akár a felhasznált erőforrás ráfordítás (energia, idő, pénz) minimalizálása is. Általánosságban tehát nem csak egy maximálisan hasznos állapot elérése lehet cél, hanem egy maximálisan hasznos állapot-történet elérése is.
21	0.625	0	A megerősítéses tanulás első fontos alkalmazása Arthur Samuel dámajáték programja volt (Samuel, 1959; 1967) – egyben ez volt a tanuló programok összes válfaja közt is az első jelentősebb. Samuel először egy legfeljebb 16 tagú súlyozott lineáris álláskiértékelő függvényt használt. A   egyenlet egy variánsát alkalmazta frissítési szabályként. Mindamellett volt néhány lényeges eltérés az ő programja és a jelenleg használt módszerek közt. Az első az, hogy ő a jelen állapot és a keresési fában végrehajtott teljes előretekintéses keresés által adott érték közti különbség alapján frissítette a súlyokat. Ez nagyon jól működik, mert ahhoz vezet, hogy az állapotteret különböző felbontással lássuk. A második különbség, hogy a programja nem használt semmilyen megfigyelt jutalmat! Tehát a végállapot értékét figyelmen kívül hagyta. Ez azt jelenti, hogy könynyen elképzelhető, hogy Samuel programja nem konvergál, vagy ha konvergál, akkor a nyerő helyett a vesztő stratégiához tart. Samuel ezt oly módon kerülte el, hogy ragaszkodott ahhoz, hogy az anyagi előnyhöz tartozó súly pozitív legyen. Érdekes módon ez elegendő volt ahhoz, hogy programját a súlyok terének olyan részébe irányítsa, amely jó dámajátékot eredményezett.
9	0.655172	0	∀x [∃y Állat(y) ∧ ¬Szereti(x, y)] ∨ [∃z Szereti(z, x)] * Skolemizáció. A skolemizáció (skolemization) az az eljárás, amelynek során eliminációval eltávolítjuk az egzisztenciális kvantorokat. Egyszerű esetben ez megegyezik a  alfejezetben található egzisztenciális példányosítási szabállyal: fordítsuk le a ∃x P(x)-et P(A)-ra, ahol az A egy új konstans. Ha ezt a szabályt alkalmazzuk a mintamondatunkra, akkor azonban ezt kapjuk:
14	0.608696	0	Miért működik az MCMC? Fontos Most megmutatjuk, hogy az MCMC konzisztens becsléseket szolgáltat az a posteriori valószínűségekre. A fejezet anyaga eléggé technikai jellegű, de az alapállítás egyszerű: a mintavételi folyamat egy olyan „dinamikus egyensúlyban” állapodik meg, amelyben az egyes állapotokban töltött idő hosszú távon számolt hányada pontosan az a posteriori valószínűséggel arányos. Ez a figyelemre méltó tulajdonság a speciális átmenetvalószínűség (transition probability) miatt áll fent, amely szerint a folyamat egyik állapotból a másikba lép át, ahogyan ezt a feltételes eloszlást a mintavételezett változó Markov-takarója meghatározza.  ábra - Az MCMC algoritmus Bayes-hálóban történő közelítő következtetéshez Az MCMC algoritmus Bayes-hálóban történő közelítő következtetéshez
3	0.083333	1	A tezauruszban található összes tárgyszó vagy deszkriptor az online kereséshez is felhasználható, és szinte mindegyik egyaránt alkalmas az indexelésre és katalogizálásra. Az indexelés során a feldolgozó annyi deszkriptort rendel egy dokumentumhoz, amennyivel annak tartalmát a lehető legpontosabban tudja feltárni. A 10-12 tárgyszóból csillaggal jelzik az online változatban azokat, amelyek a legfontosabb információt jelentik a cikkel kapcsolatosan. A többi deszkriptor azokat a fogalmakat jelöli, amelyeket a cikk érintőlegesen tárgyal. Vannak olyan speciális kifejezések (kvalifikátorok) is, amelyeket az Index Medicus nem használ (így csillag sem kerül soha eléjük), az indexelés és online keresés során viszont nagyon hasznosak. Ilyen kvalifikátornak számít a kiadvány típusa, az ellenőrző cédula (TG) és a földrajzi név.
24	0.833333	1	A Kadir Brady detektor alapfeltételezése, hogy az intenzitáscsúcsokban megnő a kép komplexitása. A komplexitás mérésére az entrópiát használja. Így leegyszerűsítve a magas entrópiájú területek lesznek a keresett kulcspontok. Létezik affin és hasonlósági transzformáció invariáns változata is. Utóbbi implementációja gyorsabb, de természetéből fakadóan kevésbé kezeli a nézőpont megváltozásait.
2	0.368421	0	Az automata taxisofőr rendelkezésére álló beavatkozók lényegében ugyanazok lesznek, amelyek egy emberi vezető számára adottak: a motor vezérlése a gázpedál segítségével, kormányzás és fékezés. Ezek mellett szükséges egy képernyő vagy beszédszintetizátor a kimenet megjelenítéséhez az utasok számára, és valószínűleg valamilyen mód arra, hogy más járművekkel kommunikálhasson, udvariasan vagy másképp.
5	0.181818	1	Sajnos a (Q, NT) él is inkonzisztens, mivel a Q változó BLUE értékéhez az előbbi esethez hasonlóan ugyancsak nem tudunk megfelelő, konzisztens értéket találni az NT változó értékkészletében. Ennek megfelelően a Q változó értékkészletét is {GREEN}-re redukáljuk, majd töröljük a (Q, NT) élet a listáról, és a lista végére tesszük az összes Q-ba mutató élet. Ekkor a következő lista adódik:
14	0.086957	1	Vegyük észre, hogy az ekvivalencia osztályok tartalmazhatnak n!  számú DAG-ot (amelyek bármelyike azt reprezentálja, hogy nincs egyetlen függetlenségi viszony sem) vagy csak 1  darabot (ami a teljes függetlenséget reprezentálja).
22	0.777778	0	Annak megértéséhez, hogy a „he” a második mondatban Johnra utal, meg kellett értenünk, hogy az első mondat két személyt említ, valamint azt, hogy John játssza a vendég szerepét, és ezért valószínűleg rendel, míg a pincér nem. Általában az utalásfeloldás egy hivatkozott kiválasztása a jelöltek listájáról, de néha magában foglalja új jelöltek létrehozását is. Vegyük például a következő mondatot:
20	0.214286	0	A  (a) cukorka példának egyetlen θ paramétere van; annak valószínűsége, hogy egy véletlenszerűen kiválasztott cukorka meggyízű. Bayes-megközelítésben θ a Θ valószínűségi változó (ismeretlen) értéke, a hipotézis prior pedig nem más, mint a P(Θ) a priori eloszlás. Így P(Θ = θ) annak a priori valószínűsége, hogy a csomag θ arányban tartalmaz meggyízű cukrokat.  ábra - Példák a béta[a,b] eloszlásra különböző [a,b] értékek esetén Példák a béta[a,b] eloszlásra különböző [a,b] értékek esetén
9	0.206897	0	Az utolsó egyesítés sikertelen, mert az x nem tudja a János és az Erzsébet értékeit egyszerre felvenni. Emlékezzünk arra, hogy az Ismer(x, Erzsébet) azt jelenti, hogy: „Mindenki ismeri Erzsébetet”, így képesnek kellene lennünk azt kikövetkeztetni, hogy János ismeri Erzsébetet. A probléma abból származik, hogy a két mondat történetesen ugyanazt a változónevet, az x-et használja. A problémát úgy kerülhetjük el, hogy az egyesítendő mondatokban átnevezzük a változókat (standardizing apart) úgy, hogy elkerüljük a nevek egybeeséseit. Például átnevezhetjük az x-et az Ismer(x, Erzsébet)-ben például z[17]-re (egy tetszőleges új változónévre) anélkül, hogy a jelentését megváltoztatnánk. Most már működik az egyesítésünk:
17	0.666667	0	Aliz a következőképpen elemzi a jutalommátrixot: Tegyük fel, hogy Bendegúz tanúskodik. Ha tanúskodom, 5 évet kapok, és 10 évet, ha nem, ebben az esetben a tanúskodás jobb. Másrészről, ha Bendegúz tagad, akkor 0 évet kapok, ha tanúskodom, és 1 évet, ha tagadok, így a tanúskodás ebben az esetben is jobb. Így mindkét esetben számomra jobb tanúskodni, így ez az, amit tennem kell.
25	0.148148	1	A két mátrix összeszorzásával az egész manipulátort leírtuk. Ha pedig ismert a manipulátor leíró mátrixa, akkor az behelyettesíthető a következő egyenletbe (ezt az egyenletet manipulátor-egyenletnek is nevezik):
10	0.363636	0	Jegyezzük meg, hogy ez az első alkalom, amikor a kategóriák megnevezésére komplex termeket vetettünk be, egyszerű konstansszimbólumok helyett. Ez nem jelent új nehézséget. Az argumentumstruktúrát valójában a hasznunkra is fordíthatjuk. Az argumentumok eliminálása az általánosabb kategóriák bevezetését teszi lehetővé:
12	0.047619	0	A kritikus útvonal algoritmus komplexitása csak O(Nb), ahol N a cselekvések száma és b az egy cselekvésbe be-, illetve kimenő maximális elágazások száma. (Ennek megértéséhez vegyük észre, hogy az LS és ES számításokat minden cselekvésre csak egyszer hajtjuk végre, és minden számítás legfeljebb b másik cselekvésen megy végig.) Ezért, ha adott a cselekvések egy részben rendezése, a minimális időtartamú ütemezés megtalálása elég könnyedén elvégezhető.
3	0.916667	1	Egy adott állapotot határozzon meg az, hogy az olvasófej a lemez mely pozícióján áll (réteg, cilinder, stb.), cselekvés pedig legyen az olvasófej mozgatása egy másik pozícióba, amely szintén az állomány egy rekordját tárolja! A feladat továbbra sem hasonlít egy ’szokványos’ MI feladathoz, a módszerei azonban már alkalmazhatóak rá.
22	0.962963	0	(Barton és társai, 1987) alapján. Ez a gyakorlat az általunk Buffalo^n-nek nevezett nyelvvel foglalkozik, ami nagyon hasonlatos az angolhoz (legalábbis az ℰ[0]-hoz), azzal a kivétellel, hogy a szókincsben csak egy szó található: a buffalo. Íme, két mondat a nyelvből:
22	0.111111	0	Analízis (analysis). H kikövetkezteti, hogy W[2]-nek P[1], …, P[n] lehetséges jelentése van. Az analízist három fő részre osztjuk: szintaktikai elemzésre (parsing), szemantikai értelmezésre és pragmatikus értelmezésre. Az elemzés (parsing) egy bemeneti füzérhez tartozó elemzési, más szóval levezetési fa (parse tree) építésének a folyamata, ahogy a  ábrán látható. Az elemzési fa belső csomópontjai kifejezéseket reprezentálnak, míg a levelek szavakat jelképeznek. A szemantikus értelmezés (semantic interpretation) az a folyamat, amelynek során kinyerjük egy kijelentés jelentéstartalmát valamilyen reprezentációs nyelven. A  ábrán két lehetséges szemantikai értelmezést mutatunk be: azt, hogy a wumpus nem él, és azt, hogy fáradt (a dead egy köznyelvi jelentése). A több lehetséges értelmezéssel rendelkező kijelentéseket többértelműnek (ambiguous) mondjuk. A pragmatikus értelmezés (pragmatic interpretation) figyelembe veszi azt a tényt, hogy ugyanazon szavaknak más jelentése lehet eltérő helyzetekben. Míg a szintaktikai értelmezés egy egy argumentummal, a füzérrel rendelkező függvény, addig a pragmatikus értelmezés a kijelentést és annak környezetét vagy szituációját figyelembe vevő függvény. A példában a pragmatikus elemzés két dolgot tesz: a Now konstans értéket kicseréli az S[3] konstanssal, ami a jelenlegi szituációt jelenti, illetve a Wumpus-t kicseréli Wumpus[1]-re, ami arra az egyetlen Wumpusra utal, amelyről tudott, hogy a barlangban van. Általánosságban a pragmatikus elemzés a kijelentés végső értelmezéséhez sokkal többel járulhat hozzá; gondoljunk csak például arra, amikor a „A gyémántra nézek” elhangzik egy ékszerész, illetve egy baseballjátékos szájából.^[221] A  alfejezetben látni fogjuk, hogy a pragmatikus elemzés segít értelmezi az „It is dead” kijelentést úgy, hogy a wumpus halott, ha egy olyan szituációban vagyunk, amikor a wumpus áll a figyelem középpontjában.
2	0.894737	1	Igen, lehet. Az, hogy egy ágens racionális, mindössze annyit jelent, hogy a jelenlegi tudása alapján maximalizálni igyekszik a teljesítménymértékét. Mivel kezdetben mindössze a kezdőnégyzetről tudja eldönteni az ágens, hogy piszkos-e, a többiről fel kell tételeznie, hogy az. (Már a  feladatban indokoltuk, miért kell a legrosszabbra felkészülni.) Így tehát a feladat visszavezethető az utazó ügynök problémájára: minden mezőt szeretnénk meglátogatni legalább egyszer, a lehető legkevesebb mozgással. A kapott megoldást felhasználhatjuk egy reflexszerű ágens tervezéséhez: * Ha az ágens a megoldási út egy mezőjén van, és ott van kosz, szívja fel. * Ha az ágens a megoldási út egy mezőjén van, és ott nincs kosz, lépjen át az út következő mezőjére.
11	0.923077	1	Van tehát egy olyan cselekvésünk, ami egy olyan kockát, amin nincs másik rátesz egy olyan kockára, amin szintén nincs másik (azt azonban ebben a modellben nem tudjuk kizárni, hogy saját magára tegyünk egy kockát...), és egy másik, ami egy kockát, amin nincs másik, levesz róla (ilyenkor feltételezzük, hogy a levett kocka az asztalon van).
1	0.448276	1	Real-time, azaz a beteg oldali és az orvos oldali eszközök on-line kommunikációt végeznek. Jellemzően ilyen alkalmazások: * telekardiológia * telementális segítőrendszer (pl. videokonferencia technológia alkalmazása a pszichiáter és a mentális ellátásra szoruló beteg között) * teleneurológia * teledermatológia * telerehabilitáció. * teleaudiológia * telefogászat.
1	0.689655	0	E megközelítés egyik korai példája a Dendral program volt (Buchanan és társai, 1969). A programot a Stanfordon fejlesztették ki, ahol Ed Feigenbaum (Herbert Simon volt hallgatója), Bruce Buchanan (a számítógépes szakemberből lett filozófus) és Joshua Lederberg (Nobel-díjas genetikus) összefogtak, hogy a tömegspektrométer által szolgáltatott adatokból a molekuláris struktúra kinyerésének problémáját megoldják. A program bemeneti adatai a molekula alapképlete (például C[6]H[13]NO[2]) és a tömegspektrum voltak. A spektrum megadta a molekula bizonyos részeinek a tömegét, amikor a molekulát elektronsugárral bombázták. A tömegspektrum tartalmazhatott például m = 15-nél egy csúcsot, amit a metil (CH[3]) molekularésszel lehetett azonosítani.
2	0.526316	1	A második ágens neptun néven szerepel és kódja teljesen azonos a simple ágensével. Utóbbi célja, hogy a szimulátor azonnal kipróbálható legyen két csapattal. A második csapat tagjai az elnevezési konvenció alapján neptun_1, neptun_2, stb. nevet kapnak.
6	0.1	1	Tegyük fel, hogy az információs partíciók kölcsönös tudás a játékosok körében: ez sem irreális feltevés, hiszen az egyes játékosok (főleg egy homogén multi-ágens rendszerben) tisztában lehetnek egymás percepciós képességeivel. A példában a szereplők ilyen értelemben gyakorlatilag azonosak.
22	0.925926	0	Az első gépesített elemző algoritmusokat Yngve mutatta be (Yngve, 1955). Hatékony algoritmusokat a hatvanas évek végén fejlesztettek ki, néhány kisebb újítással azóta (Kasami, 1965; Younger, 1967; Graham és társai, 1980). A diagramelemzőnk Early rendszeréhez áll a legközelebb (Early, 1970). Egy jó összefoglaló Aho és Ullman elemzésről és fordításról szóló tanulmányában található (Aho és Ullman, 1972). Maxwell és Kaplan mutatja meg, hogy a kiterjesztett diagramelemző algoritmus hogyan tehető hatékonnyá az átlagos esetekben (Maxwell és Kaplan, 1993). Church és Patil foglalkozik a szintaktikai többértelműség feloldásával (Church és Patil, 1982).
23	0.444444	0	Az IR-rendszerek teljesítménynövelésének egyik leghatékonyabb módja a relevancia-visszacsatolás (relevance feedback), amely a felhasználó visszajelzése, hogy az eredeti eredményhalmazból mely dokumentumok voltak relevánsak. A rendszer ezután egy második eredményhalmazt prezentálhat, amelynek dokumentumai hasonlók a megadottakhoz.
23	0.5	0	Amennyiben a lekérdezés egyetlen szó (Silverstein szerint ilyen az esetek 26%-a (Silverstein és társai, 1998)), akkor a feldolgozás igen gyors. Egyszerűen kikeressük a szót a szókincsből, hogy megkapjuk a találati lista címét, majd egy üres prioritási sort hozunk létre. Ezután egyesével végigmegyünk a találati lista dokumentumain, és megnézzük a szó gyakoriságát a dokumentumban. Amennyiben a prioritási sor R-nél kevesebb elemet tartalmaz (ahol R az eredményhalmaz elvárt mérete), akkor hozzáadjuk a (dokumentum, gyakoriság) párt a sorhoz. Ellenkező esetben, ha a gyakoriság nagyobb, mint a prioritási sor legkisebb elemének gyakorisága, akkor töröljük a legkisebb elemet, és hozzáadjuk az új (dokumentum, gyakoriság) párat. Ezáltal a lekérdezés megválaszolása O(H + R log R) időt vesz igénybe, ahol H a találati lista dokumentumainak száma. Amennyiben a lekérdezés n szót tartalmaz, akkor n találati listát kell összevonni, ami O(nH + R log R) időt vesz igénybe.
17	0.066667	0	Tételezzük fel, hogy egy ágens a  (a) ábrán látható 4 × 3-as környezetben helyezkedik el. A kezdő állapotból indulva minden időpontban választania kell egy cselekvést. A környezettel való interakció leáll, ha az ágens eléri a +1-gyel vagy a –1-gyel jelölt állapotot. Az egyes helyzetekben az elérhető cselekvések nevei: Fel, Le, Balra, Jobbra. Egyelőre feltételezzük, hogy a környezet teljesen megfigyelhető (fully observable), azaz az ágens mindig ismeri a helyzetét.  ábra - (a) Egy egyszerű 4 × 3-as környezet, ami az ágens számára szekvenciális döntési probléma. (b) A környezet állapotátmenet-modelljének illusztrálása: a „szándékolt” kimenetel 0,8 valószínűséggel következik be, de 0,2 valószínűséggel az ágens oldalra mozdul a szándékolt irányhoz képest. A fallal való ütközéskor nincsen mozgás. A két végállapot jutalma a jelzett +1 és –1, az összes többi állapot jutalma –0,04. (a) Egy egyszerű 4 × 3-as környezet, ami az ágens számára szekvenciális döntési probléma. (b) A környezet állapotátmenet-modelljének illusztrálása: a „szándékolt” kimenetel 0,8 valószínűséggel következik be, de 0,2 valószínűséggel az ágens oldalra mozdul a szándékolt irányhoz képest. A fallal való ütközéskor nincsen mozgás. A két végállapot jutalma a jelzett +1 és –1, az összes többi állapot jutalma –0,04.
6	0.1	1	Ha viszont a 2-es játékos, miután az 1-es játékos a Red lap birtokában emel (Raise), nem tartja a tétet, hanem passzol (Pass), akkor csak azt az 1 dollárt veszti el, amit addig betett a közösbe, és az 1-es játékos is csak ennyi nyer. Ekkor tehát a kifizetési vektor (1, -1).
11	0.807692	0	A szimbólum felosztás önmagában lecsökkenti ugyan a szimbólumok számát, de a tudásbázisban szereplő axiómák számát nem csökkenti automatikusan. Azaz, ha minden klózban szereplő cselekvésszimbólumot egyszerűen csak három szimbólum konjunkciójára cserélnénk, a tudásbázis mérete nagyjából azonos maradna. A szimbólumfelosztás valóban csökkenti a tudásbázis méretét, mivel néhány szétbontott szimbólum feleslegessé válik bizonyos axiómákban, és elhagyható. Vegyük például a   egyenletben szereplő követő állapot axiómát, módosítva, hogy tartalmazza LAX-ot, és elhagyva a cselekvés előfeltételeket (melyeket külön előfeltétel axiómákkal fedünk le):
1	0.896552	0	Ebben a fejezetben definiáltuk az MI-t és áttekintettük az MI fejlődésének kulturális hátterét. A legfontosabb gondolatok közül néhány: * Az egyes emberek különböző módon vélekednek az MI-ről. A két fontos felteendő kérdés az, hogy: a gondolkodás vagy a viselkedés az, ami Önt érdekli? Embereket akar modellezni, vagy egy idealizált megközelítést választ?
27	0.6	0	Itt az ideje ismét végiggondolni, mi is az MI pontos célja. Ágenseket akarunk építeni, de milyen specifikáció van közben a fejünkben? Íme, négy lehetőség: 1. Tökéletes racionalitás (perfect rationality): A tökéletesen racionális ágens minden pillanatban úgy cselekszik, hogy a környezetről szerzett információja alapján várható hasznosságát maximalizálja. Mivel láttuk, hogy a legtöbb környezetben túlságosan időrablók a tökéletes racionalitáshoz szükséges számítások, ezért ez nem realisztikus cél. 2. Számítható racionalitás (calculative rationality): Ez az a megközelítés, amit implicit módon a logikai és döntéselméleti ágensek tervezésekor használtunk. Egy számíthatóan racionális ágens végül meghatározza azt, ami racionális választás lehetett volna következtetéseinek az elején. Ez érdekes tulajdonsága egy rendszernek, de a legtöbb környezetben a rosszkor érkező jó válasznak nincs semmi értéke. A gyakorlatban az MI-rendszerek tervezői rá vannak kényszerítve arra, hogy a tervezési minőséget illetően egy elfogadható általános teljesítmény érdekében kompromisszumot hozzanak; szerencsétlen módon azonban a kalkulatív racionalitás elméleti alapja nem nyújt jól kidolgozott lehetőséget egy ilyen kompromisszum meghozatalára. 3. Korlátozott racionalitás (bounded rationality): Herbert Simon elvetette a tökéletes (vagy akár a közelítőleg tökéletes) racionalitás gondolatát, és a korlátozott racionalitást állította a helyére (Simon, 1957), ami a valódi ágensek döntéseinek leíró elmélete. A következőt írta:
7	0.2	0	⇒(implikáció). Egy mondatot, mint amilyen a (W[1,3] ∧ C[1,3]) ⇒ ¬W[2,2] implikációnak (implication) (vagy feltételes mondatnak) nevezünk. Ennek premisszája (premise) vagy előzménye (antecedent) a (W[1,3] ∧ C[1,3]), konklúziója (conclusion) vagy következménye (consequent) pedig a ¬W[2,2]implikáció szabályként (rule) vagy ha–akkor (if–then) állításként is ismert. Az implikációt más könyvekben időnként a ⊃ vagy a → szimbólumokkal jelölik.
16	0.956522	1	A HELP rendszer támogatja az integrált adatbázis felépítését, amely megkönnyíti a döntés meghozatalát. Az adatbázis szerkezete önmagában is tervező alkalmazás, független a beteg jelentésektől. Támogatja az interaktív alkalmazást is.
14	0.086957	1	Tegyük fel, hogy X,Y,Z  bináris változók, ahol X,Y  függetlenek, egyenletes eloszlásúak, és Z  pedig egy Z=XOR(X,Y)  logikai függvénnyel meghatározott. Ekkor (X    ⊥⊥    Z)  és (Y    ⊥⊥    Z)  , de ({X,Y}    ⊥⊥    Z)  , azaz az együttesüktől már függ. Azaz a függések (asszociák) nem feltétlenül monotonak.
22	0.259259	0	A  ábra bemutat egy példát a lentről felfelé történő elemzésre.  ábra - A „the wumpus is dead” lentről felfelé történő elemzési lépései. A szavakat tartalmazó csomópontok listájával kezdünk. Ezek után egy szabály jobb oldalára illeszkedő részsorozatokat felcserélünk egy új csomóponttal, amelynek gyökere a szabály bal oldala. Például a harmadik sorban az Article és Noun csomópontokat lecseréljük egy NP csomópontra, amelynek e két csomópont lesz a gyereke. A fentről lefelé elemzés hasonló lépéseket eredményezne, de épp a fordított irányban. A „the wumpus is dead” lentről felfelé történő elemzési lépései. A szavakat tartalmazó csomópontok listájával kezdünk. Ezek után egy szabály jobb oldalára illeszkedő részsorozatokat felcserélünk egy új csomóponttal, amelynek gyökere a szabály bal oldala. Például a harmadik sorban az Article és Noun csomópontokat lecseréljük egy NP csomópontra, amelynek e két csomópont lesz a gyereke. A fentről lefelé elemzés hasonló lépéseket eredményezne, de épp a fordított irányban.
13	0.772727	0	Vegyük észre, hogy ez a kijelentés valamelyest erősebb, mint amit a   egyenlet fejez ki. Ez utóbbi csak a Fogfájás és Beakadás bizonyos értékeihez rendel függetlenséget. Éppúgy, mint a   egyenletben az abszolút függetlenségnél, a következő ekvivalens kifejezések is használhatók:
21	0.375	0	A  fejezetben közölt értékiterációs vagy stratégiaiterációs algoritmusok segítségével ezek az egyenletek megoldhatók az U hasznosságfüggvényre nézve. A végső kérdés az, hogy mit csináljunk az egyes lépésekben. Az egyik lehetőség, hogy a megtanult modell alapján nyert optimális U hasznosságfüggvény alapján az ágens meghatároz egy egy lépésre előretekintő optimális cselekvést annak érdekében, hogy maximálja a várható hasznosságot. A másik lehetőség, hogy ha stratégiaiterációt használt, akkor az optimális stratégia már rendelkezésére áll, így „gondolkodás nélkül” csak végre kell hajtania az optimális stratégia által javasolt cselekvést. A kérdés az, hogy valóban végre kell-e hajtania?
26	0.071429	0	A mesterséges intelligencia lehetséges mivolta nyilván azon múlik, miként definiáljuk. Lényegét tekintve a mesterséges intelligencia egy adott architektúrához a legjobb ágensprogramot keresi. Ebben a megfogalmazásban már a definíció szerint is lehetséges az MI: bármely k tárbitet tartalmazó digitális architektúrához pontosan 2^k ágensprogram tartozik; ahhoz pedig, hogy megtaláljuk a legjobbat, egyszerűen csak egyesével fel kell sorolni és tesztelni az ágenseket. Ez ugyan nem lenne praktikus nagy k esetén, de a filozófia az elmélettel, nem pedig a gyakorlattal foglalkozik.
1	0.37931	1	Az MR-vizsgálat egyik erőssége, hogy a gyulladt vagy daganatosan beszűrt, vizenyős területek meggyőzően ábrázolhatók. Korlátozó tényező maga a mágnes, mert a térerő eloszlásának egyenetlensége messzemenően meghatározza, hogy a szövetekben mekkora mágneses egyenetlenségek mutathatók ki egyáltalán. A számítógép, illetve a képrekonstrukciós algoritmusok teljesítménye nem érte még el azt a szintet, ami az igazán finom felbontáshoz szükséges lenne. A hosszú adatgyűjtési idő alatt mozgási életlenség és műtermékek jöhetnek létre.
19	0.590909	0	A minimális konzisztens meghatározás: Anyaga ∧ Hőmérséklete ≻ Vezetőképessége. Létezik konzisztens, de nem minimális meghatározás is: Tömege ∧ Nagysága ∧ Hőmérséklete ≻ Vezetőképessége. Ez azért konzisztens a példákkal, mert a tömeg és a méret meghatározza a sűrűséget, és az adatbázisunkban nincs két különböző anyag, amelynek sűrűsége azonos lenne. Mint mindig, most is nagyobb példahalmazra lenne szükségünk, hogy a közel helyes hipotézist kiszűrjük.
3	0.916667	1	1) Továbbra is figyeljük, hogy az aktuális pozíció az-e, amire számítottunk. Ha nem, úgy tároljuk el a már megtalált megoldást, és indítsunk egy új útvonaltervezést a jelenlegi pontból az eltárolt útvonalterv legközelebbi csúcsába. Ha ez megvan, hajtsuk végre ezt a megoldást. Ha eközben megint eltévedünk, az előzőhöz hasonlóan újra próbáljuk meg megkeresni és elérni az eredeti útvonal legközelebbi pontját. Ha visszaérünk az eredeti útvonal egy pontjára, folytassuk az eredeti tervet!
9	0.965517	1	* Phoundry 4.4 tartalomkezelő rendszer (dekódolt) * PHP 4.3.4 szkriptnyelv (dekódolt) * MYSQL adatbázis 4.0.16 * a teljes konfiguráció házigazdája a dedikált szerver ACCC. * Linux operációs rendszer Apache webszerveren
6	0.1	1	Mivel ezek a hiedelmek a Közös Priorok Feltevés (Common Priors Assumption), avagy a Harsányi Doktrína szerint mind egyetlen közös apriori p eloszlásból erednek, amely szerint a Természet kezdetben leosztja a típus-kombinációkat, azaz amely a típuskombinációk feletti eloszlást meghatározza, ezért effektíve a pi feltételes eloszlások halmazát a fenti definícióban nyugodtan lecserélhetjük p-re (hiszen p-ből bármelyik játékos kedvére származtathatja bármelyik játékos hiedelmeit). Az így kapott ötösről (5-elemű struktúráról), mint játékról az eddigiekhez híven most is feltesszük, hogy minden elemében kölcsönös tudás a játékosok közt.
7	0.72	0	Ezután azt kell mondanunk, hogy legfeljebb egy wumpus van. Az egyik lehetséges módja ennek, hogy minden két mezőre kijelentjük, hogy a két mező egyikének wumpusmentesnek kell lennie. Ha n négyzet van, akkor n(n – 1)/2 mondatot kapunk, olyanokat mint a ¬W[1,1] ∨ ¬W[1,2]. Egy 4 × 4-es világ esetében, így összesen 64 különböző szimbólumot tartalmazó 155 mondattal kezdünk.
9	0.724138	0	A második példánk kihasználja a skolemizációt, és nem határozott klózokat is tartalmaz. Ez valamivel bonyolultabb bizonyítási struktúrát eredményez. Természetes nyelven megfogalmazva a probléma a következő:
9	0.310345	0	Az elsőrendű határozott klózok nagyon emlékeztetnek az ítéletlogikai határozott klózokra (7.5. szakasz - A rezolúció teljességerészben). Az ilyen klózok olyan literálok diszjunkciói, amelyek közül pontosan egy diszjunkt pozitív. Egy határozott klóz vagy egy atomi mondat, vagy egy implikáció, amelynek a feltétel része pozitív literálok konjunkciója, és amelynek következménye egyetlen pozitív literál. A következő mondatok elsőrendű határozott klózok:
3	0.333333	1	* Entrez a neve annak a keresőrendszernek, melynek segítségével az adatbázisokban, köztük a PubMed-ben végrehajtjuk a keresést. * Text Version – a PubMed szöveges változata * Help/FAQ – Súgó és gyakran feltett kérdések * Tutorial – oktatóprogram az adatbázis használatához * New/Noteworthy – az újabb fejlesztésekről ad híradást
21	0.9375	0	A cselekvések a négy lehetséges irányba való determinisztikus lépések. Minden esetben háromdimenziós ábrákat használva végezze el az összehasonlítást! Mindegyik környezetben adjon javaslatot további olyan tulajdonságokra (x-en és y-on túl), amelyek javíthatják az approximációt, majd ábrázolja az eredményeket!
5	0.181818	1	Mivel az előretekintés nem eredményezett üres értékkészletet, ezért az algoritmus tovább lép, és az aktuális {NSW=RED} behelyettesítéssel és módosított (értékkészlet-szűkített) KKP-vel meghívja önmagát. Ezen belül, mivel a kapott behelyettesítés még nem megoldás, ezért a következő vizsgált változó kiválasztása következik. Az MRV heurisztika szerint a jelenleg még behelyettesítetlen változók heurisztikus értékei (melyek közül a minimum(okat) keressük) a következők:
4	0.916667	0	Held és Karp (Held és Karp, 1970) nagy hatású cikke a minimális-feszítőfa alkalmazását (lásd  feladat) taglalja az utazó ügynök problémára, megmutatva, hogy a relaxált probléma vizsgálatával hogyan lehet elfogadható heurisztikákra jutni.
5	0.363636	0	A nagy erőforrás-korlátozott egész értékű problémáknál – ilyenek például az emberek ezreit és járművek százait mozgató logisztikai problémák – általában nem tehető meg az, hogy mindegyik változó tartományát egy nagy egészhalmazzal ábrázoljuk, majd ezt a halmazt a konzisztencia-ellenőrző módszerek segítségével fokozatosan csökkentjük. Ehelyett a tartományokat az alsó és a felső határaikkal ábrázoljuk, és határterjesztés segítségével kezeljük. Tegyük fel például, hogy két repülőjárat van, a 271-es és a 272-es, amelyekre a repülőgépek kapacitása rendre 165 és 385. A repülőjárat utasszámának kezdeti tartománya tehát
22	0.777778	0	Bizonyos vezérfonalak olyan preferenciák, amik nem állnak mindig fenn. Például amikor egymás utáni mondatoknak párhuzamos struktúrája van, olyankor előnyös, ha a névmási utalások követik ezt a struktúrát. Így a
9	0.172414	0	Mivel a θ az általánosított Modus Ponensben úgy van definiálva, hogy: Helyettesít (θ, p[i]′) = Helyettesít (θ, p[i]) minden i-re; ebből kifolyólag a két mondatból az első pontosan illeszkedik a másodiknak a premisszájához. Így tehát a Helyettesít (θ, q) következik a Modus Ponensből.
23	0.666667	0	Más rendszerek az átvitelen (transfer) alapulnak. Fordítási szabályok (vagy példák) adatbázisát tartalmazzák, és amikor egy szabály (vagy példa) illeszkedik, akkor közvetlenül fordítanak. Az átvitel lexikai, szintaktikai vagy szemantikai szinten történhet. Például egy szigorúan szintaktikai szabály az angol [Melléknév Főnév] szekvenciát a francia [Főnév Melléknév] szekvenciába képezi le. Egy kevert szintaktikai és lexikai szabály a francia [S[1] „et puis” S[2]] szekvenciát az angol [S[1] „and then” S[2]] szekvenciába képezi le.^[256] Azt az átvitelt, amely egy mondatot közvetlenül egy másikba visz át, memóriaalapú fordításnak (memory-based translation) nevezünk, mivel nagyszámú (angol, francia) pár memorizálására támaszkodik. Az átviteli módszer robusztus, mert minden esetben generál valamilyen kimenetet, és legalább a szavak egy része feltétlenül helyes. A  ábra bemutatja az egyes átviteli pontokat.  ábra - Egy gépi fordító rendszer választási lehetőségeit ábrázoló sematikus diagram. A fenn található angol szöveggel kezdjük. A köztes nyelven alapuló rendszer a folytonos vonalakat követi, az angol szöveget először szintaktikai elemzésnek veti alá, majd szemantikai és köztes nyelvi reprezentációt állít elő, végül szemantikai, szintaktikai és lexikai formákon keresztül francia szöveget állít elő. Az átvitelalapú rendszerek a szaggatott vonalak által jelölt rövidzárakat használják. Az egyes rendszerek eltérő szinteken végzik az átvitelt, egyes rendszerek több szinten is. Egy gépi fordító rendszer választási lehetőségeit ábrázoló sematikus diagram. A fenn található angol szöveggel kezdjük. A köztes nyelven alapuló rendszer a folytonos vonalakat követi, az angol szöveget először szintaktikai elemzésnek veti alá, majd szemantikai és köztes nyelvi reprezentációt állít elő, végül szemantikai, szintaktikai és lexikai formákon keresztül francia szöveget állít elő. Az átvitelalapú rendszerek a szaggatott vonalak által jelölt rövidzárakat használják. Az egyes rendszerek eltérő szinteken végzik az átvitelt, egyes rendszerek több szinten is.
3	0.25	0	Összetett objektumok robotok általi automatikus összeszerelését (automatic assembly sequencing) először a Freddy robot mutatta be (Michie, 1972). Azóta lassú, de biztos előrehaladás tapasztalható ezen a területen. Ma már például villanymotorok automatikus összeszerelése gazdaságossági szempontból is kivitelezhető. Az összeszerelési feladatoknál a probléma az alkatrészek összeszerelési sorrendjének megkeresése. Amennyiben rossz szerelési sorrendet választunk, valamikor a későbbiek folyamán egy adott alkatrészt nem tudunk egy másik alkatrész kiszerelése nélkül beszerelni. Annak eldöntése, hogy az összeszerelési sorrend egy lépése megvalósítható-e vagy sem, a robotnavigációhoz hasonló összetett geometriai keresési probléma. Így az összeszerelési sorrend megtervezésében a költséges feladat egy kivitelezhető következő lépés megtervezése. Minden gyakorlati fontosságú algoritmusnak kerülnie kell az állapottér egy kis töredékén túlmenő feltárását. Egy másik fontos összeállítási probléma a fehérjetervezés (protein design), ahol a célkitűzés olyan aminosav-szekvencia megkeresése, amely valamilyen betegség gyógyítása szempontjából lényeges tulajdonságokkal rendelkezik és háromdimenziós fehérjévé formálható.
4	0.083333	0	A mohó legjobbat-először keresés^[35] (greedy best-first search) azt a csomópontot fejti ki a következő lépésben, amelyiknek az állapotát a legközelebbinek ítéli a célállapothoz, abból kiindulva, hogy így gyorsan megtalálja a megoldást. A csomópontokat az algoritmus tehát az f(n) = h(n) heurisztikus függvénnyel értékeli ki.
14	0.26087	0	Számos valós problémában fordulnak elő folytonos mennyiségek, mint a magasság, tömeg, hőmérséklet és pénz; valójában a statisztika nagy része olyan valószínűségi változókkal foglalkozik, amelyek értéktartománya folytonos. Definíció szerint, a folytonos változóknak végtelen számú értéke lehet, így lehetetlen feltételes valószínűségeket megadni minden egyes értékre. Egy lehetséges módszer a folytonos változók kezelésére, ha elkerüljük őket diszkretizálással (discretization) – azaz felosztjuk a lehetséges értékeket intervallumok adott halmaza szerint. Például, a hőmérsékletet feloszthatjuk (<0°C), (0°C–100°C) és (>100°C) intervallumokra. A diszkretizálás néha adekvát megoldás, de gyakran eredményezi a pontosság jelentős romlását, valamint nagyon nagy FVT-ket. Egy másik megoldás, ha a valószínűség sűrűségfüggvények alapvető családjaiból választunk (lásd A) függelék), amelyek véges számú paraméterrel megadhatók. Például, a Gauss- (vagy normál) eloszláshoz N(μ, σ^2)(x) a μ átlag és σ^ 2 szórásnégyzet tartozik mint paraméterek.
24	0.75	1	Az élkeresőknek a működésük szerint három alapvető változata terjedt el: léteznek derivált alapú, második derivált alapú és fázis alapú megoldások. A legelső esetben a tipikus lépések a következők: véges differencia számítás, azaz a derivált közelítése, ezután a keletkezett kép küszöbözése, majd a kialakuló élek vékonyítása. Ezen az elven működik az egyik legelterjedtebb és leghatékonyabb megoldás, a Canny éldetektor. A második derivált alapú megoldásoknál a másodrendű derivált közelítése történik, majd a közelített függvény zérushelyeinek keresése. Ezek a megoldások jellemzően kevésbé hatékonyak, a véges közelítés nem elég pontos. Megfelelő interpolációt alkalmazva azonban az élek akár szubpixel pontossággal is meghatározhatók. A harmadik csoportba tartozó, fázis alapú módszerek alapötlete a következő: a képet frekvenciatartományba transzformálva vizsgálhatók a Fourier komponensek fázisa. Ahol a legtöbb szinuszos függvény azonos fázisban van, ott él valószínűsíthető. A megoldás ígéretes, a tapasztalatok szerint az így kapott eredmény közelebb áll az emberi szem által detektált élekhez.
22	0.814815	0	Eddig az utalásfeloldást és a szövegstruktúrát külön vizsgáltuk. Azonban a kettő valójában összefügg. Grosz és Sidner (1986) elmélete például azzal foglalkozik, hogy a beszélő és hallgató figyelme mire koncentrál a szöveg során. Elméletük tartalmaz egy vermet, amely fókusztereket (focus spaces) tartalmaz. Bizonyos megnyilvánulások a fókusz elmozdulását okozzák egy elem verembe helyezésével vagy kivételével. Például az éttermi történetben a „John went to a fancy restaurant” mondat új fókuszt helyez a verem tetejére. Ezen a fókuszon belül a beszélő egy határozott NP-t használhat a „the waiter”-re történő utalásra (az „a waiter” általános NP helyett). Ha a történet folytatódna egy „John went home” mondattal, akkor a fókuszteret kivenné a verem tetejéről, és a szöveg nem utalhatna tovább a pincérre a „the waiter” vagy a „he” kifejezésekkel.
2	0.789474	0	Összegezve, az ágenseknek sokféle komponensük van, és ezen komponensek sokféleképpen reprezentálhatók az ágensprogramban, így úgy tűnik, sokféle tanulási módszer létezik. Van ugyanakkor egy egyesítő motívum. A tanulás az intelligens ágensekben összefoglalható úgy, mint egy folyamat, amely az ágens minden komponensét úgy módosítja, hogy az összhangba kerüljön a rendelkezésre álló visszacsatolt információval, ily módon növelve az ágens általános teljesítményét.
3	0.083333	1	A szakkifejezések és tárgyszavak abc sorrendben és hierarchikus felépítésükben is visszakereshetők. A hierarchikus szerkezet legáltalánosabb szintjén találjuk a legáltalánosabb tárgyszavakat (deszkriptorokat), mint pl. IDEGRENDSZER. Alatta a KÖZPONTI IDEGRENDSZER, ennél alacsonyabb szinten az ennél specifikusabb tárgyszavakat, mint pl. AGY, innen az AGYTÖRZS, és így tovább.
16	0.956522	1	Az aneszteziológiai ambulancián a beteg kikérdező lapja az első állomás. Ennek bevezetése azért fontos, mert kitöltésével az anamnézis pontosítható, a kikérdezés állomásai kötelezően meglépendőek, speciális aneszteziológiai szempontok is érvényesíthetőek. Megoldására az előre elkészített kérdőív kitöltése is megfelelő, azonban úgy is megszerkeszthető PC használatával, hogy nyomógombok segítségével e kérdőív állomásait követve a beteg maga is összeállíthatja ezt az információcsomagot. Erre fejlesztették ki az ún. „Internet kioszk” információs állomást, amelyet sajnos gyakrabban látunk a plázákban és egyéb közforgalmú helyeken, mint az egészségügyben. A rendszer hiányában a teljes anamnézis felvételt a vizsgáló orvosnak kell végrehajtania. Ennek analizálása után készíthető el az ambuláns vizsgálat lapja, melynek tartalmaznia kell a következőket: a beteg személyi adatai, megjelenésének oka és körülményei, műtét előtti állapota, vizsgálati adatai és az ezekből levont következtetések. Ezt követően az aneszteziológus véleményét és állásfoglalását, a beteg beleegyező nyilatkozatait – a tájékoztatás megtörténtéről, a megbeszélt anesztézia típusáról – és az aneszteziológiai előkészítést kell rögzíteni.
18	0	0	A tanulás alapgondolata az, hogy a megfigyeléseket ne csak az ágens jelenlegi cselekvéseinek kialakítására használjuk, hanem arra is, hogy javítsuk a cselekvésre való jövőbeli képességeit. A tanulás aközben zajlik, míg az ágens megfigyeli a környezettel való kölcsönhatásait és saját döntéshozó folyamatait. A tanulás széles skálán értelmezhető: egyik végén a tapasztalatok egyszerű memorizálása található, amit a  fejezetben megismert wumpus ágens példáz, a skála másik végén pedig a tapasztalatok alapján kialakított komplett tudományos elmélet áll, mint például Albert Einstein elmélete. Ebben a fejezetben a megfigyeléseken alapuló induktív tanulással (inductive learning) foglalkozunk. Speciálisan azzal, hogy hogyan tanulhatók meg a propozíciós logikában megfogalmazott egyszerű elméletek. Annak elemzésére, elméleti magyarázatára is sor kerül, hogy miért működik az induktív tanulás.
6	0.1	1	A fenti fólián tehát már át is írtuk a pi feltételes eloszlások halmazát p-re, továbbá alatta kifejtjük, hogy ezt hogyan is kell érteni. Látható, hogy a pi eloszlásokat a Bayes-tétel szerint kapjuk a p apriori eloszlásból. Ez indokolja e játékok elnevezését.
14	0.913043	0	A valószínűség-számítás MI-n belüli feltámadása főként a Bayes-hálók felfedezésén múlt, ami módszert adott a feltételes függetlenségek reprezentálására és kihasználására. Ez az újjászületés igen küzdelmes volt; Peter Cheeseman harcias In defense of Probability (Cheeseman, 1985) és a későbbi An Inquire into Computer Understanding (Cheeseman, 1988, megjegyzésekkel) c. cikke ízelítőt ad a vitából. A logika művelőinek egyik legfőbb kifogása az volt, hogy a valószínűség-számítás miatt szükségesnek vélt számítások önelemzéssel nem érhetők el, és egy nem reális pontossági szintet tételeznek fel a bizonytalan tudásunkban. A kvalitatív Bayes-hálók (qualitative probabilistic networks) (Wellman, 1990a) lehetőséget adnak a Bayes-hálók tisztán kvalitatív absztrakciójára, csupán a változók közötti hatások pozitív és negatív jellegét kihasználva. Wellman megmutatta, hogy számos esetben ennyi információ is elegendő az optimális döntéshozatalhoz a valószínűségi értékek precíz meghatározása nélkül. Adnan Darwiche és Matt Ginsberg munkája kivonatolja a valószínűség-számítás elméletében szerepelő feltételesség és a tények kombinálásának alapvető tulajdonságait, és megmutatja, hogyan lehet ezeket alkalmazni logikai és alapértelmezési következtetésekben (Darwiche és Ginsberg, 1992).
2	0.736842	0	A  fejezetben megmutatjuk, hogy minden racionális ágensnek úgy kell működnie, mintha rendelkezne hasznosságfüggvénnyel, amelynek várható értékét maximalizálni akarja. Egy ágens, amelynek van egy explicit hasznosságfüggvénye, ily módon racionális döntéseket hozhat, és ezt egy általános algoritmussal teheti meg, amely nem függ a maximalizálandó specifikus hasznosságfüggvénytől. Ezáltal a racionalitás „globális” definíciója – amely azon ágensfüggvényeket tekinti racionálisnak, amelyek a legnagyobb teljesítményt hozzák – átváltozik a racionáliságens-tervezés egy „helyi” kényszerévé, amely kifejezhető egy egyszerű programban.
5	0.181818	1	A következő vizsgált változó kiválasztásánál nincs sok választási lehetőségünk. Egyedül a T változó behelyettesítetlen még, így erre kerül a választás, és ehhez az első lehetséges értéket, a RED-et rendeljük (T=RED).
14	0.695652	0	Más tudományágak (például fizika, genetika, közgazdaságtan) régóta a valószínűségszámítást részesítették előnyben a bizonytalanság modellezésére.^[154] Pierre Laplace 1819-es megfogalmazásában „A valószínűség-számítás semmi egyéb, mint a józan ész számokban megfogalmazva”. James Maxwell 1850-ben tett kijelentése szerint „a világ igazi logikája a valószínűségek kalkulusa, ami figyelembe veszi a valószínűség nagyságát, ahogy azt minden gondolkodó ember megteszi vagy meg kellene tennie”.
19	0.545455	1	A burkoló módszerek korai megvalósításai közé sorolhatóak a determinisztikus keresést alkalmazó burkolók, úgy mint az SFS (Sequetial Forward Selection), SBE (Sequential Backward Elimination) [9] és a Beam-search [13]. Bár determinisztikus voltuk miatt egyszerűek, ugyanakkor könnyen beragadhatnak egy lokális optimumban, és a túlilleszkedést sem előzik meg. Később jelentek meg a randomizált keresést alkalmazó burkoló módszerek (genetikus algoritmus [6], EDA [7], szimulált lehűtés és randomizált hegymászás alapú burkoló [14]), melyek a beragadást ugyan többnyire kiküszöbölik, de a túlilleszkedés szempontjából nem jobbak.
26	0.642857	0	Most már a lényegi kérdésnél vagyunk. A papírok tartalmának memorizálása csak elterelő hadművelet, hiszen mindkettő ugyanúgy egy futó program fizikai megtestesülése. Searle igazi állítása a következő négy axiómán alapszik (Searle, 1990): 1. A számítógépprogramok formális, szintaktikai entitások. 2. Az elmének mentális tartalma, azaz szemantikája van. 3. A szintaktika önmagában még nem elégséges a szemantikához. 4. Az elmét az agy okozza.
25	0.074074	1	A robotkarok csuklókoordinátáit realizáló szögelfordulások és elmozdulások pillanatnyi értékének meghatározására szolgálnak. Fajtái: * Digitális, abszolút – kódolt mérőléc, kódtárcsa, * Digitális, növekményes – lineáris rács, forgóadó.
4	0.916667	1	Olyan heurisztikát kell most tehát szerkesztenünk, ami a célhoz szükséges költséget nem becsüli túl, de a következő csúcs elérésének költségét túlbecsülheti. Tekintsük az ábrán látható állapotteret! A csúcsok sorszámai egyben jelzik a kifejtésük sorrendjét is. * Az algoritmus először az 1. csúcsot fejti ki, hisz f(1) = g(1) + h(1) = 1 + 0 = 1 < f(4) = g(4) + h(4) = 1 + 3 = 4. * Ezután a 2. csúcs kerül kifejtésre: f(2) = g(2) + h(2) = 2. * A 3. csúcs következik: f(3) = g(3) + h(3) = 3. * Most következik a 4. csúcs. * Újra a 3. csúcs következne, de mivel ezt már kifejtettük, nem vizsgáljuk meg újra, noha most rövidebb utat találtunk volna hozzá! * Végül kifejtjük a célcsúcsot (f(Cél) = g(Cél) + h(Cél) = 5 ). A visszaadott megoldás egy 5 hosszú út. Könnyen látható, hogy ez nem optimális.
26	0.714286	0	Az MI-rendszerek alkalmazása megszüntetheti a felelősségre vonhatóságot. Az Egyesült Államokban ma uralkodó pereskedő közhangulat fontos kérdéssé tette a jogi felelősséget. Amikor egy orvos a diagnózis felállításakor egy orvosi szakértői rendszer ítéletére hagyatkozik, ki tehető felelőssé a diagnózis hibájáért? Szerencsés módon, és ez részben a döntéselméleti megközelítés orvoslásra gyakorolt egyre növekvő befolyásának köszönhető, ma már elfogadott alapelv, hogy az orvos, aki végrehajtja a nagy várható hasznossági értékű beavatkozásokat, akkor sem vádolható hanyagsággal, ha ezeknek a beavatkozásoknak katasztrofálisak a tényleges következményei a páciensnél. A kérdés ezek után a következő: „Kinek a hibája, ha a diagnózis nem plauzíbilis?” Mindeddig a bíróságok úgy tartották, hogy az orvosi szakértői rendszerek ugyanazt a szerepet töltik be, mint az orvosi tankönyvek és kézikönyvek: az orvosoknak felelőssége, hogy megértsék a döntések indoklását, és saját megítélésük alapján kell határozniuk, hogy elfogadják-e a rendszer javaslatát. Tehát ha az orvosi szakértői rendszereket ágensekként tervezzük, akkor cselekvéseiket nem úgy kell tekinteni, mint ami közvetlenül kihat a páciensre, hanem mint ami befolyásolja az orvos viselkedését. Ha a szakértői rendszerek megbízhatóbban pontosabbak lesznek, mint a diagnózisokat felállító emberek, akkor az orvosok akár jogilag is felelősek lehetnek, ha nem használják fel a rendszer javaslatait. Gawande (Gawande, 2002) ezt a feltételezést térképezi fel.
6	0.9	1	e) Karikázza be a 2-es szinten levő azon csomópontokat, amelyeket az alfa-béta nyesés alkalmazása esetén az algoritmus nem értékelne ki, feltételezve, hogy a csomópontokat az algoritmus az alfa-béta nyeséshez optimális sorrendben generálja.
24	0.166667	1	A Sketchpad elsődleges vezérlője a fényceruza, de ezen kívül használhatók parancsok kiadására gombok, különböző funkciók ki- és bekapcsolására kapcsolók, valamint mozgatáshoz és nagyításhoz tekerhető beállítók.
2	0.210526	1	A neurális hálózatok közül az un. előrecsatolt és rétegelt neurális hálózatok kiemelt szerepet kaptak, egyrészt jól érthető működésük, másrészt széleskörű alkalmazhatóságuk miatt. Az előadás bemutatja a neurális hálózatok tervezésének főbb lépéseit és elemzi az eldöntendő változók szerepét. Az előrecsatolt hálózatok tanító algoritmusai közül részletesen tárgyalja az un. „hiba visszaterjesztő” algaritmust. Ismerteti a súlytényezők változtatását értelmező „általánosított delta szabályt” és a leíró egyenletek származtatását. A „hiba visszaterjesztő” módszer lényege, hogy a hálózat súlytényezőit a hálózati hiba létrehozásában játszott szerepük arányában változtatja meg, ami megfelel a klasszikus „hegymászó” módszernek. E módszer köztudottan csak a helyi legjobb megoldást (lokális optimumot) képes megtalálni, ezért –bár széleskörűen alkalmazott- mégis továbbfejlesztése számos ponton indokolt. A korlátok elemzése után az előadás bemutat reprezentatív gyorsító megoldásokat is. A klasszikus alkalmazási példák közül az írott szövegből beszédet (fonémákat) előállító „NetTalk” példáját felhasználva elemzi a neurális hálózatok alkalmazásával járó tulajdonságokat és tanulságokat.
6	0.1	1	Láthatjuk tehát, hogy az, hogy h állapot nem igaz, egy-elemű partícióba helyezi formálisan a h állapotot. Ráadásul ez rendre különválasztotta a h-t az 1-es, 2-es, és 3-as játékos esetén a d, f, és g állapotoktól. Ha megnézzük, láthatjuk, hogy d, f, és g azok az állapotok, amikor vagy csak az 1-es, vagy csak a 2-es, vagy csak a 3-as játékos kalapja piros. Ez egyértelmű helyzet lenne. Ekkor az 1-es, 2-es, vagy 3-as játékos pontosan meg tudná mondani, hogy mi a kalapja színe (hiszen látná maga előtt a másik két játékos fekete kalapját, miközben tudja, hogy legalább egy piros kell, hogy legyen). Ezt jelenti tehát az, amit fentebb egyértelműsítés címszóval tettünk. Ha most, a „Legalább egy piros kalap van” bejelentést követően például d, f, vagy g állapot lenne igaz, akkor az 1-es, vagy 2-es, vagy 3-as játékos tudná a kalapjának a színét, és ha ezt el is árulná, akkor nyilván abból már a 2-es és 3-as játékos is tudná, hogy melyik állapotban vannak. ...de emlékezzünk csak vissza, hogy a példánkban feltételeztük, hogy pillanatnyilag az a világállapot igaz, azaz a-ban vagyunk!
9	0.862069	0	Az algoritmusok formális szintézise volt a tételbizonyítások egyik első felhasználása, amint azt Cordell Green (Green, 1969a) felvázolta, aki Simon korábbi ötleteire támaszkodott (Simon, 1963). Az alapötlet az volt, hogy egyféle módon bizonyítsák azt a tételt, hogy „létezik egy p program, amely eleget tesz egy bizonyos specifikációnak”. Ha a bizonyítást úgy korlátozzuk, hogy konstruktív legyen, a program maga is kinyerhető lesz a bizonyításból. Habár ez egy teljesen automatizált deduktív szintézis (deductive synthesis), legalábbis így nevezzük, még nemigen használható általános célú programok készítésére, ám a kézzel irányított deduktív szintézis már sikeresen tervezett néhány újszerű és bonyolult algoritmust. A speciális célú programok szintézise szintén aktív kutatási terület. Az Aura tételbizonyítót sikerrel alkalmazták a hardverszintézis területén olyan áramkörök tervezésére, amelyek kompaktabbak, mint minden azt megelőző terv (Wojciechowski és Wojcik, 1983). Sok áramkör tervezésénél az ítéletlogika elegendő, mivel a legfontosabb ítéletállítások halmaza rögzített, ugyanis ezek az áramkör elemeit írják le. Az ítéletlogikai következtetés alkalmazása a hardverszintézisben ma már egy standard technika, amelynek sok nagyméretű hálózati alkalmazása létezik (lásd például Nowick és társai, 1993).
26	0.5	0	Az egyik kiút a dilemmából annak megállapítása, hogy a mentális állapotok tartalma két különböző szempontból értelmezhető. A tág tartalom (wide content) nézet képviselői a mentális állapotok tartalmát a mindentudó külső megfigyelő szemszögéből értelmezik, amely megfigyelő átlátja az egész szituációt, és felismeri a világ különbségeit. Tehát a tág tartalom nézet szerint a tartályba helyezett agy vélekedései különbözők a „normál” személy vélekedéseitől. A szűk tartalom (narrow content) nézet szerint viszont csak a belső, szubjektív nézőpontot kell figyelembe venni, és szerintük a két vélekedés megegyezik.
14	0.869565	1	A kilenc, feljebb tárgyalt bemenet végeredménye legvégül egy kimenetben egyesül. A személyes, a pénzügyi és az érték jellemzők alkotják a végső kimenetnek a bemeneteit. A kimenet pedig megadja az eredményt; vagyis, hogy mennyire kockázatos az adott ügyfélnek kölcsönt adni.  ábra -  ábra. Kockázat jellemzők: 3 bemenet, 1 kimenet, 27 szabály  ábra. Kockázat jellemzők: 3 bemenet, 1 kimenet, 27 szabály  ábra -  ábra. Kockázati jellemzők: 3 bemenet, 1 kimenet (jobb oldalon, lenn), kibontva  ábra. Kockázati jellemzők: 3 bemenet, 1 kimenet (jobb oldalon, lenn), kibontva  ábra -  ábra. Kockázati jellemzők: a bemenetek felülete  ábra. Kockázati jellemzők: a bemenetek felülete  ábra -  ábra. Kockázati jellemzők: az első öt szabály  ábra. Kockázati jellemzők: az első öt szabály
21	0.25	0	Magának a modellnek egyszerű a megtanulása, mivel a környezet teljesen megfigyelhető. Ennek megfelelően egy ellenőrzött tanítási feladatunk van, amelyben a bemenet az állapot-cselekvés pár, a kimenet pedig a következő állapot. A legegyszerűbb esetben az állapotátmenet-modellt valószínűségek táblázatával reprezentálhatjuk. Számon tartjuk, hogy a cselekvések egyes eredményei milyen gyakran lépnek fel, és abból a gyakoriságból becsüljük a T(s, a, s') állapotátmenet valószínűségét, hogy hányszor következett s', amikor az s állapotban az a cselekvést választottuk.^[212]^ Például ha a  szakasz - Passzív megerősítéses tanulás rész három útvonalában a Jobbra cselekvést háromszor választottuk az (1,3) állapotban, és a háromból kétszer a (2, 3) lett a következő állapot, akkor T((1, 3), Jobbra, (2, 3)) becsült értéke 2/3 lesz.
11	0.076923	0	A cselekvések leírása. A cselekvést a következő két állapot határozza meg: az előfeltétel, aminek teljesülni kell az akció végrehajtásához, és a következmény, ami a végrehajtás eredményeként lép fel. Például két állomás közötti repülés leírása az alábbi:
18	0.894737	1	A minimum szint a számítógépbe történő adatbevitelt jelenti mintegy „beolvasási” jelleggel. Ez alatt azt értik, hogy a kézzel kitöltött adatlap adatai kerülnek a számítógépbe. Már e lépés megkönnyítésére is született technikai segítség, az ún. „OPTICAL-MARK READER”, amely a helyesen kitöltött adatlap felett átfutva automatikusan felismeri, és a számítógépbe beviszi az adatokat. Ennek hiányában ezt kézzel, mintegy a számítógépbe „begépelve” kell elvégezni.
25	0.814815	0	Sok robotvezérlőnek megvan a saját külön programozási nyelve. Például az alárendelt architektúra sok programja a Brooks (Brooks, 1990) által megalkotott viselkedési nyelvet (behavior language) alkalmazza. Ez egy szabályalapú, valós idejű nyelv AFSM vezérlésekhez. A LISP-hez hasonló szintaxisú, egyedi szabályokat fordít AFSM-ekra, valamint több AFSM lokális és globális üzenetküldő mechanizmussal van integrálva.
24	0.166667	1	* diagnosztikus munkára alkalmas formátumú (DICOM információvesztés nélküli) hozzáférésének biztosítása a radiológus számára: meghatározott minőségű kommunikációs csatorna (Internet kapcsolat biztosítása - ADSL vagy hozzáférés a kórház Internet kapcsolatán keresztül - a kép és a WEB szerverhez); kórházoldali végpontjának kialakítása, fenntartása, költségei. * A kórházi információs rendszerhez történő állandó, távoli hozzáférés (terminál) a leletező radiológus számára. * A szakmai szabály szerinti, kidolgozandó protokollban elfogadott képformátumról történő leletezés, annak összes adottságát megjeleníteni tudó hardverrel (például monitor) és szoftverekkel (ajánlott). * Adatvédelem, adatbiztonság, betegjog
6	0.9	1	A "?" értékeket nullaként kezeltük. Ezek egyik játékosnak sem kedvező helyzetek, hisz egy korábbi állapotba visznek vissza, ahol ha már mikor először jártunk ott, is tudnunk kellett, mi az optimális lépés, így visszatérni oda nem érdemes. A kezdőállapot mellé rajzolt +1 mutatja, hogy az A játékosnak van nyerő stratégiája.
27	0.4	1	Ezek szerint nem tudunk racionális ágenst tervezni? – merülhet fel a kérdés. A válasz (szerencsére) nem, a helyzet korántsem ilyen kilátástalan. Példának okáért a korlátozott optimalitás a tökéletes racionalitás egyfajta ésszerű, használható, és legfőképp megvalósítható alternatívája. Ebben az esetben is a legjobb cselekvést várjuk minden pillanatban az ágenstől, viszont immár nem abszolút értelemben, hanem architektúrája, képességei viszonylatában. Csak olyat várunk tehát egy korlátozottan optimális ágenstől, amit az képes kiszámítani és végrehajtani, azon belül viszont abszolút mércével mérve a legjobbat.
7	0.76	0	A  ábra ágensprogramja „csal”, mert a helyzetének nyomkövetését a tudásbázison kívül oldja meg, ahelyett hogy logikai következtetést végezne.^[72] Hogy „helyesen” oldjuk meg a nyomkövetést, szükségünk lesz az elhelyezkedéssel kapcsolatos állításokra. Első hallásra hajlamosak lehetünk felvenni egy H[1,1] szimbólumot, ami azt reprezentálná, hogy az ágens az [1, 1]-ben van. Így a kezdeti tudásbázis ilyen mondatokat tartalmazhatna:
14	0.304348	0	Az alapvető feladat bármely valószínűségi következtető rendszer számára az, hogy kiszámítsa a célváltozók (query variables) egy halmazának a posteriori valószínűség-eloszlását egy adott megfigyelt esemény (event) esetén – azaz bizonyítékváltozók (evidence variables) egy halmazához történő érték-hozzárendelés esetén. A  fejezetben bevezetett jelölést fogjuk használni: X a célváltozót jelöli; E a bizonyítékváltozók E[1], …, E[m] halmazát, e pedig a megfigyelt eseményt; Y fogja jelölni az (olykor rejtett változóknak (hidden variables) nevezett) nem-bizonyítékváltozók Y[1], …, Y[k] halmazát. Így a változók teljes halmaza X = {X} ∪ E ∪ Y. Egy jellemző lekérdezés a P(X∣e) a posteriori eloszlásra irányul.^[148]
11	0.769231	0	igaz, és minden más cselekvésszimbólum hamis, modellje a tudásbázisnak. Eddig itt minden rendben. Vannak más lehetséges modellek, melyeket a kielégíthetőségi algoritmus visszaadhat? Valójában igen. Ezen modellek mindegyike kielégítő terv? Sajnos nem. Vegyük például a
1	0.344828	0	Ma már vannak adataink arról, hogy az agy egyes területei és az általuk kontrollált, vagy a szenzorikus bemeneteket generáló test részei között milyen leképezések vannak. Az ilyen leképezések hetek alatt képesek drasztikus változásokra, ráadásul egyes állatoknál úgy tűnik, többszörös leképezéseket találhatunk. Azt azonban még nem teljesen értjük, hogy az egyes területek miként veszik át más részek funkcióit, ha azok megsérülnek. Az egyedi emlékek tárolásáról kis híján semmilyen elméletünk nincs.
13	0.545455	0	Más, erősen filozofikus érveléseket is előterjesztettek a valószínűségek használata mellett, amelyek közül a legnevezetesebb Cox és Carnap nevéhez fűződik (Cox, 1946; Carnap, 1950). Lévén a világ olyan, amilyen, a gyakorlati példák sokszor minden bizonyítéknál erősebbek. Így a valószínűség-számításon alapuló következtető rendszerek sikere minden érvelésnél hatékonyabb volt a hitetlenek megtérítésében. A következőkben azt vizsgáljuk meg, hogy az axiómák hogyan használhatók a következtetésben.
24	0.166667	1	A digitális képalkotó berendezéseket a PACS- rendszerek teszik igazán hatékony alternatívává. A digitális képalkotás akkor vezethet jelentős hatékonyság – növekedéshez, ha integrált módon működik együtt az intézmény meglévő informatikai rendszerével. A PACS rendszert össze kellett kapcsolni a RIS- el. A RIS- ben ugyanis sok adat megvan azok közül, amelyek a vizsgálatok részletes leírásához szükségesek. A kérés a RIS-ben indul, ezek automatikusan átkerülnek a PACS- be, ezért az asszisztensnek nem kell többszörös adatbevitelt elvégeznie. A kérés feladása tehát a RIS-ben történik és megjelenik a PACS-ban, ebben állítja elő a munkalistát.  ábra - Digitalizálás rendszervázlata Digitalizálás rendszervázlata
2	0.157895	1	Ezzel párhuzamosan alakult munkacsoport a szakma minimális adatállományának (minimum basic data set) kialakítására, és az aneszteziológia intenzív terápia adataira jellemző rekordkép létrehozására. Az 1989-ben megalakult ESCTAIC (European Society for Computing and Technology in Anasthesia and Intensive Care) tapasztalatai felhasználásra kerültek a munka minden fázisában. A www.anesztinfo.hu oldal (2.sz ábra) kialakításakor az aneszteziológiában történelmet író www.gasnet.org megalkotóinak tapasztalatai szintén komoly segítséget jelentettek.
20	0.035714	0	A cukorka példánkban azt feltételezzük, hogy a h[1],…, h[5] a priori valószínűségei megfelelnek a gyártó reklámjában közölt 〈0,1, 0,2, 0,4, 0,2, 0,1〉 értékeknek. Az adatok valószínűségét e.f.e (angol rövidítése: i.i.d.) feltételezéssel számítjuk – azaz egyforma és független eloszlást (independently and identically distributed) teszünk fel, így:
1	0.551724	1	A DENDRAL volt a legelső szakértői rendszer. Fejlesztői azt akarták megvalósítani, hogy rendszerük alkalmazni tudja a tudományos ismereteket és következtetéseket a szerves kémia tudomány területéről. Céljuk volt egy olyan technológia létrehozása, amellyel képesek jobban megérteni a szakterület alapvető problémáit. Ezt a rendszer által szolgáltatott megoldások magyarázásának a lehetősége biztosítja. Képes volt az ismeretbázis alapján eddig ismeretlen szerves anyagok felépítésének meghatározására, képessége sok esetben az emberi szakértőével vetekedett. Az elkészítéshez vegyészek,biológusok és informatikusok egyaránt hozzájárultak, és megszületett az első szabály-alapú szakértői rendszer, a DENDRAL, amelyet az egyetemeken és az iparban egyaránt használtak.
25	0.333333	0	A robotikában a döntések végül is a beavatkozó szervek mozgásában jutnak kifejezésre. A ponttól pontig mozgás (point-to-point motion) esetén a cél a robotnak vagy végbeavatkozó szervnek egy megadott helyre való eljuttatása. Nagyobb kihívást jelent a követő mozgás (compliant motion), amikor is a robot úgy mozog, hogy közben végig fizikai kontaktusban marad egy akadállyal. Példa erre, amikor egy robotkar becsavar egy égőt, vagy amikor végigtol az asztalon egy dobozt.
4	0.625	0	A lokális keresési algoritmus analógiájáról írtunk már. A sztochasztikus nyaláb keresés és az evolúció közötti alapvető különbség a szexuális reprodukció használata, ahol az utódokat több egyedből hozzuk létre, és nem csak egyből. Az evolúció tényleges mechanizmusai azonban sokkal gazdagabbak, mint amit a genetikus algoritmus lehetővé tenne. A mutációhoz például az átfordítás, a duplikálás, a DNS nagy szegmenseinek a mozgatása is hozzátartozik. Egyes vírusok a DNS-t az egyik szervezetből veszik és egy másik szervezetbe beillesztik. Vannak átvihető gének is, amelyek nem tesznek mást, csak egy génállományon belül többezerszer lemásolják magukat. Olyan gének is vannak, amelyek a potenciális reprodukciós partnereknél ezeket a géneket nem tartalmazó sejteket megmérgezik, növelve így a sokszorozódás esélyét. A legfontosabb tény, hogy maguk a gének tartalmazzák annak a mechanizmusnak a kódját, amely által a génállomány reprodukálódik, és egy szervezetté alakul át. A genetikus algoritmusokban ezek a mechanizmusok különálló programok részei, vagyis a manipulált füzérekben nem jelennek meg.
1	0.551724	0	1951-ben a Princeton Egyetem matematika tanszékén két végzős hallgató – Marvin Minsky és Dean Edmonds – megépítette az első neurális számítógépet. A Snarc-nak elnevezett gépben 3000 elektroncső és a B–24 bombázó automatapilóta mechanizmusa egy 40 neuronból álló hálózatot szimulált. Minsky PhD-bizottsága szkeptikus volt, vajon egy ilyen munkát matematikának lehet-e nevezni, de Neumann János (aki tagja volt a bizottságnak) állítólag úgy nyilatkozott, hogy „ha ez nem is matematika most, valamikor az lesz”. Minsky volt később az, aki nagy hatású tételeivel kimutatta a neuronhálós kutatás korlátait.
17	0.733333	0	Az előző alfejezetben azt a kérdést próbáltuk megválaszolni, hogy „Ha adott egy játék, mi a racionális stratégia?” Ebben az alfejezetben azt kérdezzük, hogy „Ha az ágensek racionálisak, milyen játékot tervezzünk?” Pontosabban, egy olyan játékot szeretnénk tervezni, aminek a megoldása az egyes ágensek által követett saját racionális stratégiáik együttese, és ez egy globális hasznosságfüggvény maximálását eredményezi. Ezt a problémát működési mód tervezésnek (mechanism design) nevezik, vagy néha inverz játékelméletnek (inverse game theory). A működési mód tervezés a közgazdaság-tudományok és a politikai tudományok a lényege. Ágensek együttesénél ez annak lehetőségét hordozza magában, hogy játékelméleti működési módokat használva ügyes rendszereket hozunk létre korlátoltabb rendszerek együtteséből – még nem együttműködő rendszerekből is –, nagyon hasonlóan ahhoz, ahogy emberek csoportjai olyan célokat tudnak elérni, amik messze túl vannak az egyéni lehetőségeken.
10	0.878788	0	Hatékonyabb megközelítés az igazolásalapú igazság-karbantartó rendszer vagy JTMS (justification-based truth maintenance system). Egy JTMS-ben a tudásbázis minden mondatát olyan igazolással (justification) látják el, amely meghatározza azokat a mondatokat, amelyekből lekövetkeztették azokat. Például ha a tudásbázis már tartalmazza a P ⇒ Q-t, akkor az Állít (P) hatására a Q-t hozzáadjuk, az {P, P ⇒ Q} igazolással. Általánosságban bizonyos mondatoknak egynél több igazolása lehet. Az igazolások felhasználhatók hatékony visszavonásokra. A Visszavon (P) hívást követően, a JTMS pontosan azokat a mondatokat fogja a tudásbázisból eltávolítani, amelyeknél P minden igazolás része. Így, ha egy Q mondatnak a {P, P ⇒ Q} lenne az egyetlen igazolása, akkor törlődne; ha az {P, P ∨ R ⇒ Q} igazolása is létezne, még mindig visszavonásra kerülne, de ha az {R, P ∨ R ⇒ Q} igazolása is létezne, akkor megmaradna. Ily módon a P visszavonásához szükséges idő csakis azon múlik, hogy P-ből hány állítást vezettünk le, és nem azon, hogy P hozzáadása után hány állítás került még be a tudásbázisba.
7	0.88	0	Bevezettük a tudásbázisú ágens ötletét, és megmutattuk, hogy hogyan tudunk olyan logikát definiálni, amellyel az ágens képes következtetni a világról. A legfontosabb pontok a következők: * Az intelligens ágensnek szüksége van tudásra a világról, hogy jó döntéseket hozhasson. * A tudást az ágens egy tudásbázisban (knowledge base) egy tudásreprezentációs nyelv (knowledge represantion language) mondatainak (sentences) formájában tárolja. * Egy tudásbázisú ágenst a tudásbázis és a következtetési mechanizmus alkotja. Működésének lényege, hogy a tudásbázisában a világot leíró mondatokat tárol és következtetési mechanizmust alkalmaz új mondatok következtetésére, majd felhasználja ezeket cselekvések meghatározására. * Egy reprezentációs nyelvet szintaxisa (syntax) és szemantikája (semantics) definiál. A szintaxis a mondatok struktúráját határozza meg, a szemantika a mondatok igazságát (truth) határozza meg minden lehetséges világban (world) vagy modellben (model), * A mondatok közötti vonzat (entailment) kapcsolatnak alapvetően fontos szerepe van a következtetés megértésében. Egy α mondat maga után vonz egy másik β mondatot, ha β igaz minden világban, ahol α igaz. Ezzel ekvivalens definíciók az α ⇒ β mondat érvényességét (validity) és a α ∧ ¬β mondat kielégíthetetlenségét (unsatisfiability) meghatározó definíciók. * A következtetés az a folyamat, amivel új mondatok vezethetők le régiekből. A helyes (sound) következtetési algoritmusok csak vonzat mondatokat vezetnek le; a teljes (complete) algoritmus az összes következményt levezeti. * Az ítéletkalkulus (propositional logic) egy nagyon egyszerű nyelv, amely ítélet-szimbólumokból (proposition symbols) és logikai összekötőjelekből (logical connectives) áll. Képes kezelni olyan állításokat, amelyekről tudjuk, hogy igazak, tudjuk, hogy hamisak, vagy teljesen ismeretlen az igazságértékük. * Ha adott egy ítéletkalkulus szimbólumszótár, akkor a lehetséges modellek száma véges, így a vonzatok ellenőrzése történhet a modellek felsorolásával is. Hatékony ítéletkalkulus modellellenőrző (model checking) algoritmusok többek között viszszalépéses vagy lokális keresési eljárásokat alkalmaznak, amelyekkel gyakran nagyméretű problémákat is nagyon gyorsan meg tudnak oldani. * A következtetési szabályok (inference rules) helyes következtetési minták, amelyeket felhasználhatunk bizonyítások megtalálásához. A rezolúció (resolution) szabály teljes következtetési algoritmust biztosít olyan tudásbázisokhoz, amelyek konjunktív normál formában (conjunctive normal form) vannak kifejezve. Az előrefelé láncolás (forward chaining) és a hátrafelé láncolás (backward chaining) igen természetes érvelési algoritmusok Horn-formában (Horn form) adott tudásbázisokon. * Kétfajta ágenst lehet építeni az ítéletkalkulus alkalmazására: a következtetésalapú ágens (inference-based agent) következtetési algoritmusokat használ a világ eseményeinek követésére, és képes rejtett jellemzőket is levezetni, míg az áramkörön alapuló ágens (circuit-based agent) az állításokat regiszterek bitjeiként reprezentálja, és jelek logikai áramkörökben történő terjesztésével végzi ezek frissítését. * Az ítéletkalkulus meglehetősen hatékony bizonyos feladatokra egy ágensben alkalmazva, de kezelhetetlen nemkorlátos méretű környezetekben, mivel hiányzik a megfelelő kifejező erő az idő, a tér és az objektumok közötti kapcsolatok általános mintáinak leírására.
5	0.181818	1	 ábra - 6. lépés: az előbbi, NT=GREEN értékadás következményeként a GREEN érték eltávolítása az SA és Q változók értékkészletéből az előretekintés miatt 6. lépés: az előbbi, NT=GREEN értékadás következményeként a GREEN érték eltávolítása az SA és Q változók értékkészletéből az előretekintés miatt
17	0.666667	0	A dilemma a fogolydilemmában az, hogy az egyensúlyi helyzet kimenetele mindkét játékosnak rosszabb, mint az a kimenetel, amit akkor érnének el, ha mindketten megtagadnák a tanúskodást. Másképpen fogalmazva, az egyensúlyi megoldás kimenete Pareto-dominált a (tagad, tagad)-nak a (–1, –1)-es kimenetelével.
1	0.137931	0	A 19. században a logikusok – a logika tudományát művelők – megadták a világ mindennemű objektumára és az azok közötti relációkra vonatkozó állításoknak a precíz megfogalmazását. (Hasonlítsuk ezt a közönséges aritmetikai jelölésrendszerhez, ami főleg a számokon értelmezett egyenlőségek és egyenlőtlenségek kifejezésére alkalmas.) 1965-ben léteztek már olyan programok, amelyek – legalább elvben – képesek voltak tetszőleges, logikai jelölésekkel kifejezett problémához megadni a probléma megoldását.^[2] Az MI-n belül uralkodó logicista (logicist) hagyomány azt reméli, hogy ilyen programokra alapozva intelligens rendszereket képes létrehozni.
1	0.103448	1	[3] Gregor Reisch, Typus logicae, Margarita Philosophica, letöltés dátuma: 2010. december 6., http://upload.wikimedia.org/wikipedia/commons/4/44/Gregor_Reisch%2C_Mar garita_Philosophica%2C_Typus_Logice.jpg
1	0.172414	1	– és a problémamegoldásban az intelligens viselkedés egyik elsődleges jellemzőjét látják. Problémamegoldáshoz elengedhetetlen a probléma megfogalmazása, aminek elemei egy teszt a megoldást jelentő szimbolikus struktúrák észlelésére és a potenciális megoldásokat jelentő szimbolikus struktúrák (lépés)generátora. Problémát megoldani azt jelenti, hogy egy olyan szimbolikus struktúrát képesek vagyunk generátorral generálni, ami teljesíti a megoldástesztet. Nyilvánvaló, hogy a probléma (akkor) létezik, ha tudjuk, mire van szükségünk (ez a teszt), de a megoldását nem tudjuk azonnal létesíteni (generátor valamilyen értelemben nem tökéletes).
20	0.428571	0	Amint megértettük az általános elgondolást, amin az EM alapul, az összes variáns és javítás könnyen levezethető. Például: sok esetben az E-lépés – a rejtett változók posteriorjainak kiszámítása – kezelhetetlen problémát okoz, mint például a nagy Bayes-hálókban. Kiderült, hogy alkalmazhatunk egy közelítő E-lépést, és még ezzel is hatékony algoritmust kapunk. Egy mintavételi algoritmussal – mint amilyen például az MCMC (lásd  alfejezet) – a tanulási folyamat nagyon szemléletes: minden egyes, az MCMC által bejárt állapotot (a rejtett és megfigyelt változók konfigurációját) úgy kezelünk, mintha teljes megfigyelés volna. Ennek megfelelően a paraméterek minden egyes MCMC-átmenet után frissíthetők. A közelítő következtetés más formái – mint például a variációs és hurkos módszerek – szintén hatékonynak bizonyultak nagyon nagy hálók tanulásánál.
22	0.074074	1	A Noam Chomsky által kifejlesztett környezetfüggetlen nyelvtanokkal (context-free grammar, CFG) nem egy konkrét szöveg szemantikai értelmét tudjuk reprezentálni, hanem segítségükkel magát a természetes nyelvet próbálhatjuk meg leírni. Ha sikerül formálisan leírnunk egy nyelvet, akkor az azon a nyelven írt szövegek értelmezéséhez, a konkrét jelentést leíró tudásbázis építéséhez is egy jó eszközt kapunk a nyelvet leíró szabályokkal (megjegyzendő, hogy utóbbiak is egy tudásbázist alkotnak). A természetes nyelv leírása egy egyszerű matematikai modellel mindazonáltal sok problémába ütközik.
14	0.869565	1	Az ábra forgatható, így bármilyen irányból megnézhető, ezáltal pontosabb képet ad a függvény tulajdonságairól. Az esetleges exportálás (Export/ToWorkspace) után keletkezett ábra is forgatható, ahogy korábban a fuzzy metszetek 3 dimenziós ábrázolásánál is látható volt. Így az ábra egyszerűen elmenthető, később is könnyen kezelhető lesz.
19	0.318182	0	A Brazíliába utazónak egészen más a helyzete. Az utas szükségszerűen nem is képes megmagyarázni, hogy Fernando miért beszél úgy, ahogy beszél, amíg az idevágó pápai bullákat nem ismeri. Az általánosításra azonban képes lesz a történelemben teljesen járatlan utas is. Ebben az esetben a releváns háttértudás az, hogy minden egyes országban az emberek többsége ugyanazt a nyelvet beszéli. Azt azonban nem tételezzük fel, hogy minden brazil embert Fernandónak hívnak, mert az effajta szabályosság a nevekre nem vonatkozik. Hasonlóképpen, az elsőéves fizikushallgató is nehezen tud magyarázatot adni a réznél felfedezett vezetési és sűrűségi értékekre. Azt azonban tudja, hogy a vezetést az objektum anyaga és annak hőmérséklete határozza meg együttesen. Mindegyik esetben az a priori Háttértudás szerepe az, hogy a célpredikátum szempontjából releváns tulajdonsághalmazok körülhatárolhatók legyenek. Ez a tudás megfigyelésekkel együtt lehetővé teszi, hogy az ágens új, általános szabályt hozzon létre megfigyeléseinek megmagyarázására:
24	0.583333	0	Az árnyalást (shading) – a jelenethez tartozó felület különböző részeiről kapott megvilágítás intenzitásváltozását – a jelenet geometriája és a felület-visszaverési tulajdonságai határozzák meg. A számítógépes grafikában a feladat a kép I(x,y) fényességfüggvényének a megadása, ha a jelenet geometriája és a visszaverődési tulajdonságok adottak. A számítógépes látásban azt reméljük, hogy ez a folyamat invertálható, vagyis visszaállíthatjuk a jelenet geometriáját és visszaverődési tulajdonságait, ha az I(x,y) képfényesség adott. A probléma olyan nehéznek bizonyult, hogy a legegyszerűbb esetektől eltekintve e téren nem sikerült eredményeket elérni.
10	0.212121	1	Az informatikában általánosan diszkrét idejű, múltat nem kezelő pontlogikákat alkalmaznak. Ezen belül lineáris és elágazó idejű logikák egyaránt elterjedten használatosak. A következőkben mindkettőre bemutatok egy-egy elterjedt logikát, a PLTL és CTL struktúrákat. Ezek után bemutatom a CTL* logikát is, mely e kettőt egyesíti.
11	0.346154	0	Az állapottérben történő hátrafelé keresést a kétirányú keresés egy részeként a  fejezetben röviden már bemutattuk. Ott megjegyeztük, hogy a hátrafelé keresés megvalósítása nagyon nehéz lehet, ha a célállapotokat az explicit megadás helyett megkötésekkel határozzuk meg. Nevezetesen nem mindig nyilvánvaló, hogy hogyan generáljuk le a célállapotok halmazának a lehetséges elődállapotait (predecessors). Látjuk majd, hogy a Strips reprezentáció esetén ez meglehetősen egyszerű, mert az állapothalmazokat azokkal a literálokkal írhatjuk le, amelyeknek igaz értékűeknek kell lenni az adott állapotokban.
6	0.1	1	A bizonyítás lényege tehát a következő: feltételezésünk szerint egy w világállapotban kölcsönös tudás az, hogy mit tesznek a játékosok, így többek között az is kölcsönös tudás, hogy az i játékos ai-t cselekszi. Ekkor azonban az előző fóliák alapján tudjuk, hogy az Eai esemény (az a legszűkebb esemény, melynek i minden elemében az ai-t cselekszi) is kölcsönös tudás kell, hogy legyen a játékosok körében. Mindazonáltal, ha az E=Eai esemény kölcsönös tudás, úgy nyilvánvaló is mindegyik játékos számára, azaz rendre, minden játékos esetén, az i játékost is beleértve, felírható az információs partíció megfelelő, diszjunkt celláinak uniójaként. Mivel az i játékos e cellák mindegyikében ai-t cselekszi (E=Eai definíciójából következően), ezért amennyiben stratégiája unió-konzisztens, úgy nyilván e cellák uniójában, azaz E-ben is ai-t kell, hogy cselekedje (egyébként, ha stratégiája nem lenne unió-konzisztens, úgy nem lenne biztos, hogy E-ben is ai-t cselekszi). Mivel pedig minden játékosnak ugyanaz a stratégiája, ezért mind ugyanazt teszik E-ben, mint amit az i játékos, azaz ai-t. Ezzel a tételt bebizonyítottuk.
3	0.25	1	Szükségünk lehet arra is, hogy egy jelet két-, vagy akár háromfelé osszunk, erre nyújt lehetőséget a  ábrán látható „splitter” elem (ha csak kétfelé akarunk ágazni, az előbb bevezetett lezáró elemmel megoldhatjuk a problémát).  ábra - „Splitter” „Splitter”
5	0.181818	1	A visszalépéses keresés során (lásd. tankönyv  ábráját) kezdetben választunk egy még behelyettesítetlen változót. Mivel az algoritmus ezen a szinten nem tesz megkötést arra, hogy ha több ilyen változónk is van (mint például most esetünkben is, mikoris kezdetben még az összes változó behelyettesítetlen), akkor hogyan válasszunk közülük. Tegyük hát fel, hogy az algoritmus implementációja véletlenszerűen például az NSW változót választja először.
13	0.409091	0	alakban is, amelyet szorzatszabálynak (product rule) hívunk. A szorzatszabályt talán könnyebb megjegyezni: ez abból következik, hogy a és b együttes teljesüléséhez, szükséges, hogy b igaz legyen, valamint hogy a is igaz legyen b feltétele mellett. A szabályt megadhatjuk fordítva is:
17	0.733333	0	Az ilyen problémák szabványos megközelítése a működési mód tervezésben az, hogy a köztulajdon használatáért mindegyik ágensnél költséget számítunk fel. Általánosabban, azt kell biztosítanunk, hogy minden külsőség (externalities) – olyan globális hasznosságot befolyásoló tényező, amely az egyéni ágensek tranzakcióiban nincsenek elismerve – különállóan nevesítve megjelenjen. Ebben a nehéz a helyes árak megállapítása. Ennek a megközelítésnek a végletes formája egy olyan működési mód megalkotását jelenti, amelyben mindegyik ágenstől valójában a globális hasznosság maximálását követeljük meg. Ez megoldhatatlanul nehéz feladat az ágens számára, aki sem megbecsülni nem tudja a világ jelenlegi állapotát, sem megfigyelni a cselekvéseinek az összes többi ágensre gyakorolt hatását. A működési mód tervezés ezért olyan működésmódok megtalálására összpontosít, amelyeknél az egyes ágensek döntési problémája könnyen megoldható.
5	0.181818	1	Az előbbi (WA, SA) élhez hasonlóan a következő, (NT, SA) él is inkonzisztens, hiszen NT értékkészletében a RED értékhez hasonlóképpen nem tudunk konzisztens értéket találni SA értékkészletében. Tehát a RED értéket NT értékkészletéből is eltávolítjuk, azaz NT értékkészletét is {GREEN, BLUE}-ra redukáljuk, majd töröljük az (NT, SA) élet a listából, és a lista végére tesszük az összes NT-be mutató élet. Ekkor az él-lista a következő:
23	0.611111	0	A fordítás azért nehéz, mert általában a szövegek mély megértését igényli, amihez pedig a közölt szituáció mély megértése szükséges. Ez még nagyon egyszerű szövegek esetén is fennáll, sőt egyszavas „szövegek” esetén is. Vegyük a „Open” szót egy üzlet ajtaján.^[253] Ez azt az információt közvetíti, hogy az üzlet pillanatnyilag fogad vevőket. Most vegyük ugyanezt a szót egy újonnan felépített üzleten található hatalmas transzparensen. Ez azt jelenti, hogy az üzlet megnyílt, de az olvasók nem éreznék becsapva magukat, ha éjszaka a transzparens eltávolítása nélkül lenne zárva a bolt. A két felirat ugyanazt a szót használja különböző jelentések közvetítésére. Német nyelvű országban a felirat az ajtón „Offen”, míg a transzparensen „Neu eröffnet” lenne.^[254]
12	0.571429	0	Miután a régi Mozgat(D, B) és Befejez közötti okozati kapcsolatot eltávolítottuk, a Mozgat(D, B) továbbiakban nem forrása egyetlen okozati kapcsolatnak sem. Ez most egy redundáns lépés (redundant step). Minden redundáns lépést és bármely ezt biztosító kapcsolatot kitörlünk a tervből. Ez a  ábrán látható tervet eredményezi.
2	0.894737	0	Horvitz kifejezetten azt javasolja, hogy az MI alapja a racionalitás mint az elvárt hasznosság maximalizálása legyen (Horvitz és társai, 1988). Pearl írása (Pearl, 1988) volt az első az MI-ben, amely részletesen tárgyalta a valószínűséget és a hasznosságelméletet; az írás a bizonytalanság melletti következtetés és döntéshozatal praktikus módszereinek kifejtésével valószínűleg a legnagyobb önálló tényező volt a hasznosságorientált ágensek felé történő elmozdulásban a kilencvenes években (V. rész).
2	0.526316	1	A szimulátor legfontosabb grafikus felülete a főablak. Ennek az ablaknak a jobb oldalán látható a játéktér, melyen a játék folyamán az összes fontos esemény nyomon követhető: * A különböző ágensek a csapatuknak megfelelő szín (piros / zöld) különböző árnyalataiban jelennek meg * Az ágensek előtt látható az egyes ágensek háromszög alakú látótere. * Az ennivaló lila színnel jelenik meg, és ahogy értéke csökken, úgy halványodik egyre inkább el. * A vízzel teli cellákat kék szín jelöli.
4	0.708333	0	Az ágens célja tipikusan az, hogy elérjen egy célállapotot, és eközben minimalizálja a költségeket (egy másik lehetséges cél egyszerűen az egész környezet feltárása). A költség az ágens által megtett tényleges út teljes költsége. Szokásos ezt a költséget azzal az útköltséggel összehasonlítani, amit az ágens követne, ha az egész keresési teret előre ismerné – azaz az aktuális legrövidebb úttal (vagy a legrövidebb teljes feltárással). Az online algoritmusok nyelvén ezt kompetitív aránynak (competitive ratio) nevezzük, és azt szeretnénk, ha ez a lehető legkisebb lenne.
25	0.074074	1	Mechanikai struktúra vagy manipulátor, amely merev testek (szegmensek) sorozatából áll, melyeket összeillesztések (csuklók, izületek) kapcsolnak össze. A manipulátor szokásos részei: kar (mozgatás), kézcsukló (kézi funkciók), végberendezés (kívánt feladat elvégzése). A sebészrobotok (műtőrobotok) komplett manipulátor rendszerek,amelyek bonyolult sebészi beavatkozások végrehajtására és támogatására képesek.
27	0.4	1	Definíció 4. Adott környezetben, adott Architektúrá-val rendelkező korlátozottan optimális ágens Program-jára teljesül, hogy: Program = argmax Prg∈PrgNyelv( Architektúra ) ∨( Prg, Architektúra, Környezet ) 
9	0.931034	0	Habár McCarthy (McCarthy, 1958) javasolta először az elsőrendű logika használatát reprezentációs feladatokra és következetésre az MI-ben, az első ilyen rendszert a matematikai tételbizonyítás iránt érdeklődő matematikai logika kutatói fejlesztették ki. Abraham Robinson javasolta először, hogy használják az ítéletlogikára történő átalakítást és Herbrand-elméletet együtt. Gilmore (Gilmore, 1960) készített először egy olyan programot, amely ezen a megközelítésen alapult. Davis és Putnam (Davis és Putnam, 1960) vezették be a klózformát, és hoztak létre egy olyan programot, amely megkísérelt cáfolatokat találni, oly módon, hogy a Herbrand-univerzum elemeit a változók helyére alapklózokat helyettesítve és ítéletinkonzisztenciákat keresve az alapklózok között. Prawitz (Prawitz, 1960) vezette be azt az alapötletet, hogy az ítéletinkonzisztencia lekérdezése vezesse a keresési folyamatot, és azt is, hogy csak akkor hozzunk létre termeket a Herbrand-univerzumban, hogyha ez szükséges az ítélet-inkonzisztencia megállapítása céljából. Más kutatók egyéb fejlesztései után, ez a gondolat vezette el J. A. Robinsont (nem rokona az előzőnek) a rezolúció módszerének kifejlesztéséhez (Robinson, 1965). Az úgynevezett „inverz módszer”, amit egyidejűleg fejlesztett ki S. Maslov szovjet kutató, kissé eltérő elveken alapult, mint Robinson rezolúciós módszere, de hasonló számítási előnyöket nyújt a propozicionalizációhoz képest (Maslov, 1964, 1967). Wolfgang Bibel kapcsolati módszere (connection method) e megközelítés kiterjesztésének tekinthető.
15	0.703704	0	Ebben az alfejezetben az időbeli valószínűségi modellek egyik legfontosabb alkalmazását, a beszédfelismerést (speech recognition) tekintjük át. A feladat egy beszélő által elmondott szósorozat azonosítása az adott akusztikus jelből. A beszéd az emberek közötti kommunikációnak a domináns modalitása, és a megbízható számítógépes beszédfelismerés felmérhetetlenül fontos lenne. Még ennél is hasznosabb volna a beszédmegértés (speech understanding) – az elhangzott beszéd jelentésének a meghatározása. Ennek tárgyalására a  fejezetig kell várnunk.
26	0.571429	0	A második lehetőséget ugyan nem zárhatjuk ki, de ez arra redukálná a tudatot, amit a filozófusok epifenomenális (epiphenomenal) szereplőnek neveznek: valami: ami megtörténik ugyan, de mintha nem is vetne árnyákot a megfigyelhető világban. Valamint ha a tudat tényleg epifenomén, akkor az agyban lennie kell egy második, nem tudatos mechanizmusnak, amelyhez a „Juj!” tartozik.
9	0.965517	1	Palliatív ellátás: nem kizárólag onkológiai ellátásra öszpontosít, hanem az összes kezelt beteg palliatív ellátás. A palliatív ellátás egy bizottság által készített iránymutatáson és felülvizsgált konszenzuson alapuló módszer.
18	0.894737	0	A tanulási algoritmusok elméleti vizsgálata Gold munkájával kezdődött (Gold, 1967) az identifikáció határátmenetben (identification in the limit) probléma tanulmányozásával. Ez a megközelítés ugyan részben tudományfilozófiai felfedezésből eredt (Popper, 1962), de alkalmazásának legfőbb területe nyelvtanok példamondatok alapján történő tanulása volt (Osherson és társai, 1986).
10	0.969697	0	definícióját a KimerítőFelosztás, a Partíció és a KölcsönösenKizáró definíciójával analóg módon. Igaz-e, hogy RészPartíció(s, Kötege(s))? Ha igen, bizonyítsa be, ha nem, adjon meg egy ellenpéldát, és definiáljon elégséges feltételeket, amelyek mellett igaz lesz.
4	0.625	0	Az utolsó téma, amivel érdemes futó ismeretséget kötni a korlátozott optimalizálás (constrained optimization). Egy optimalizálási probléma korlátozott, ha a megoldásnak minden változójának értékeire nézve valamilyen kemény korlátozást kell teljesítenie. A repülőteres problémánkban korlátozhatjuk például a helyszíneket, hogy a repülőterek Románián belül és szárazföldön (nem tavak közepén) helyezkedjenek el. A korlátozott optimalizálás nehézségei a korlátozások és a célfüggvény természetén múlnak. A legismertebb kategóriát a lineáris programozási (linear programming) problémák jelentik, ahol a korlátozások lineáris egyenlőtlenségek, amelyek egy konvex régiót képeznek, és ahol a célfüggvény szintén lineáris. A lineáris programozási problémákat változó számban polinomiális időben meg lehet oldani. Olyan problémákat is tanulmányoztak, ahol más típusú korlátozások és célfüggvények fordulnak elő. Ilyen problémák például a kvadratikus programozási feladat, a másodrendű kónikus programozási feladat stb.
16	0.130435	0	Ezek a kérdések megválaszolhatók, ha leírjuk a preferenciákra vonatkozó azon megkötéseket, amelyekkel egy racionális ágensnek rendelkeznie kell, majd ezután megmutatjuk, hogy az MVH-elv ezekből a megkötésekből levezethető. Az ágens preferenciáit a következő jelöléssel írjuk le:
24	0.166667	1	A különböző képalkotó eljárásokkal a szervezet más és más jellemzőiről kapunk képet. Nem csontot vagy szervfelszínt, vérkeringést vagy fekélyt ábrázolunk, hanem azokat a térben elrendezett energiamódosulásokat, amelyeket ezek a képletek vagy folyamatok az alkalmazott hullámféleségen végbevittek. Az elsődleges kép információtartalmát a testtel kölcsönhatásba lépő energiaféleség fizikai jellemzői (így röntgensugár keménysége, az ultrahanghullám frekvenciája stb.), vagyis a vizsgálati paraméterek határozzák meg.
23	0.888889	0	Két kitűnő könyv szól a valószínűségi nyelvfeldolgozásról: Charniak könyve rövid és lényegre törő (Charniak, 1993), míg Manning és Schütze munkája átfogó és naprakész (Manning és Schütze, 1999). A gyakorlati nyelvfeldolgozás terén végzett munkákat a kétévente megrendezett Applied Natural Language Processing (ANLP) és az Empirical Methods in Natural Language Processing (EMNLP) konferenciák, valamint a Natural Language Engineering folyóirat mutatja be. A SIGIR egy hírlevelet és egy információkeresést tárgyaló évenkénti konferenciát támogat.
10	0.212121	1	A temporális logikák számos kritérium alapján osztályozhatók [2]. * Pont- vagy intervallumlogikák: A pont logikák esetén a temporális operátorokat egy-egy időpillanatban értékeljük ki, míg az intervallumlogikák esetén a temporális operátorokat időintervallumokra definiáljuk és értékeljük ki. * Diszkrét vagy folytonos idejű logikák. * Lineáris vagy elágazó idejű logikák. Lineáris temporális logikák esetén minden időpillanatnak csak egyetlen rákövetkező időpillanata lehetséges, azaz csak egyféle lehetséges jövőt veszünk figyelembe. Elágazó idejű temporális logika esetén az egymás utáni időpillanatok egy elágazó fa struktúrát alkotnak, így minden időpillanatnak többféle lehetséges rákövetkezője lehet. * Múlt kezelése. A temporális logikák segítségével csak a jelenre és a jövőre fogalmazhatunk meg kifejezéseket, azonban egyes logikák alkalmasak a múlt kezelésére is.
5	0.181818	1	A MAC tehát az AC3-at használja, arra alapoz. A könyv  ábráján szereplő AC3 algoritmusnak csak egyetlen bemenete van: a KKP. A MAC-nek viszont két bemenete is van: (1) a KKP, és (2) a kezdetben megvizsgálandó élek sora. Az AC3-nál ez a sor nem volt bemenő paraméter, hanem az algoritmusba huzalozott módon kezdetben mindig a KKP összes éle volt. A MAC-nél viszont ez a sor, mint látjuk, már bemenő paraméter, így az AC3 célzottan futtatható. A fenti két különbség tehát végeredményben csak a hatékonyság növelését szolgálja, és a következtetés hatásfokát (a keresés során kikövetkezetett inkonzisztenciák össz-számát) nem befolyásolja. Mondhatni a MAC az AC3-at fókuszáltan hívja meg (a keresésben éppen aktuális értékadással/behelyettesítéssel kapcsolatban).
6	0.7	0	Azt lehetne mondani, hogy a játékok valami olyat jelentenek az MI számára, mint amit a Forma–1 versenyek a gépkocsiipar számára. A legfejlettebb játékprogramok villámgyors, hihetetlenül finoman hangolt rendszerek, amelyek nagyon fejlett módszereket alkalmaznak, de amelyeknek nem sok hasznát vesszük a vásárláskor. Bár vannak kutatók, akik azt gondolják, hogy a játékok az MI fővonalát tekintve többé-kevésbé irrelevánsak, mégis élénk érdeklődést váltanak ki, és folyamatosan fenntartják az innovációt, amit a szélesebb közösség fel is karol.
2	0.210526	1	Másik gyakran emlegetett tünete a racionalitásnak a kognitív funkciók, képességek megléte. Észre kell vennünk, hogy bár ez is gyakori kísérőjelenség, nem állíthatjuk azt, hogy a racionalitásból kötelezően következik az, hogy az ágens kognitív képességekkel is rendelkezik. Számunkra az ágens, a definíciójából kiindulva, csupán egy „fekete doboz”, amibe észlelések mennek be, és cselekvések jönnek ki eredményül. Arra egyáltalán nem tehetünk megkötést, hogy mi lehet belül [1]. Így akár elképzelhető, hogy a kognitív képességekkel (értelmezés, felfogás, tervezés, következtetés) nem rendelkező ágens racionális legyen (pl. reaktív ágensek). Értelmezéstől függően természetesen érvelhetünk amellett is, hogy a reflexszerű viselkedés is kognitív folyamat. Persze megfelelően mikroszkopikus szinten vizsgálva a másik végletet is igazolhatjuk, nevezetesen azt, hogy az ágensek viselkedését csakis reflexszerű folyamatok (láncolatai) alkotják, így kognitív képességek tulajdonképpen nem is léteznek. Ám a jelen írásnak szerencsére nem célja filozófiai és definícióbeli kérdések feloldása, így a kognitív képességek alatt a továbbiakban is az észlelésre („ko-gnózis”-ra, azaz megismerésre) alapuló információfeldolgozást értem, mely valamivel több a sima „érzékelésnél”.
17	0.466667	0	amit k-szor ismétlünk, hogy a következő hasznosságbecslés előálljon. Az adódó algoritmust módosított eljárásmód-iterációnak (modified policy iteration) nevezzük. Ez gyakran sokkal hatékonyabb, mint a szabványos eljárásmód-iteráció vagy értékiteráció.
24	0.833333	1	Az algoritmus a kulcspontokat egy több skálán működő Derivative of Gaussian (DoG) szűrővel keresi meg, majd a pontokat különböző utófeldolgozásoknak veti alá, hogy jobban jellemezzék az adott objektumot. Az így keletkezett kulcspontok körüli pixeleket skála térben tárolja el, ezek lesznek a jellemző vektorok. A felismerés során a hasonló vektorokat egy speciális fa struktúrában keresi, hogy ne kelljen minden pontot minden ponttal összehasonlítania. Az alakzatokat ezek után a Hough transzformáció adaptált változatával nyeri ki: minden jellemző vektor néhány lehetséges alakzatot és annak lehetséges elhelyezkedését valószínűsíti. Azok az alakzatok és pozíciók, melyekre sokan szavaznak, nagy valószínűséggel léteznek is a képen, így kialakulnak lehetséges hipotézisek.
4	0.5	1	A mutáció az örökítő anyag spontán, maradandó megváltozása, amelynek során új genetikai tulajdonság keletkezik. A H. de Vries által a múlt század elején bevezetett fogalmat ma szűkebb értelemben a génen belüli bázissorrend-változásra vonatkoztatjuk, tágabb értelemben azonban mutációnak tekinthető a kromoszóma-szerkezetben, ill. a kromoszómák számában bekövetkezett minden változás, ideértve a poliploidiát is.
1	0.137931	1	Maksimov az akkoriban elfogadott általános MI filozófiai megközelítést alkalmazta, vagyis a problémákat egy állapottérként fogta fel, ahol valamilyen heurisztika szerint kell az állapotokon a cél felé haladni, hogy az exponenciális idő és tárigényt csökkentse. A képekből egy fa gráfot épített, ahol az eredeti kép a gyökér, ebből különböző műveletekkel származtat le új képeket, amikre rekurzívan ugyanezeket a műveleteket alkalmazza. Ilyen művelet a csak körvonalak meghagyása, minden körvonal kitöltése, konvex burok, elemek szétválasztása. Közben numerikus és logikai értékeket rendel a képekhez, úgy mint terület (pixelek száma), kerület, konvexitás, kitöltöttség. Az eljárás akkor ér véget, ha elér egy olyan állapotot, ahol a bal oldali képek egyik értéke minden képre megegyezik, de a jobb oldali képekétől különböző.
2	0.368421	1	A génaktiválás és géngátlás jelenségei, a sejtciklus szabályozásának szerepe, a sejt-sejt közötti kommunikáció módozata terén, egyre több új ismeretet szerzünk. Ennek köszönhetően még több új kockázatot növelő ismerethez jutunk.
18	0.526316	0	Egy döntési fa tanulásra szolgáló, valós problémák megoldását célzó rendszernek képesnek kell lennie mindezen problémák kezelésére. A folytonos értékű változók kezelése különösen fontos, mivel mind a fizikai, mind a gazdasági folyamatok numerikus értékekkel jellemezhetők. Számos, üzleti forgalomban kapható programcsomag készült, amelyek megfelelnek mindezen a kritériumoknak, és segítségükkel több száz – valamilyen konkrét területen – alkalmazott rendszert fejlesztettek ki. Az ipar és kereskedelem sok területén, ha minták alapján kialakított osztályozásra van szükség, akkor elsősorban döntési fákkal próbálkoznak. A döntési fák egyik fontos tulajdonsága, hogy az ember számára jól érthető a tanuló algoritmus által előállított eredmény. (Valójában olyan gazdasági döntések esetén, amelyeknek megkülönböztetés elleni jogszabályoknak kell megfelelniük, ez jogi követelmény.) A neurális hálózatoknál hiányzik ez a fontos tulajdonság (lásd  fejezet).
22	0.074074	1	A másik irányzat, az „adat alapú”, vagy empirikus megközelítés lényege, hogy egy részletes szabályok alapján elkészített logikus tudásbázis helyett mindössze egy nagyon általános nyelvi modellt alkotunk meg, továbbá meghatározzuk azokat a képességeket, amelyekre egy nyelv megtanulásához szükség lehet (pl. asszociáció, általánosítás, mintafelismerés), majd egy ilyen képességekkel rendelkező gépi tanulást (példák alapján) megvalósító modellt használunk fel eszközként. [4] A példák alapján történő tanuláshoz nagy számú tanító bemenetre van szükség, mely célra ebben az esetben való életben használt szövegek gyűjteménye, úgynevezett korpusz szolgál. [4] Egy tipikus, mesterséges intelligenciából ismert, gépi tanulást megvalósító modell lehet például a neurális háló.
11	0.923077	0	Az 1970-es évek elejének tervkészítői általában teljesen rendezett cselekvéssorokkal dolgoztak. A problémadekompozíciót úgy érték el, hogy minden részcélhoz egy résztervet készítettek, majd ezeket valamilyen sorrendben összefűzték. Hamarosan felfedezték, hogy ez a megközelítést, melyet Sacerdoti lineáris tervkészítésnek (linear planning) nevezett (Sacerdoti, 1975), nem teljes. Nem képes megoldani néhány nagyon egyszerű problémát, mint pédául a Sussman-anomáliát (lásd  feladat), amit Allen Brown a Hacker rendszerrel végzett kutatásai során fedezett fel (Sussman, 1975). Egy teljes tervkészítőnek meg kell engedni egy mondatban a különböző résztervekből származó cselekvések összefésülését (interleaving). A sorrendezhető részcélok alapötlete (Korf, 1987) pontosan megfeleltethető azon problémák halmazának, melyekre az öszszefésülésre nem alkalmas tervkészítők teljesek.
25	0.592593	0	Hagyományosan az ilyen problémákat az irányításelmélet (control theory) tárgykörébe sorolják. Ennek a tudományágnak egyre nagyobb a jelentősége a mesterséges intelligenciával foglalkozó kutatók számára. Évtizedek kutatásai során számos olyan szabályozót alkottak meg, amelyek lényegesen bonyolultabbak a fent használt egyszerű szabályozónál. Egy referenciaszabályozó stabil (stable), ha kis megváltozások csak korlátos hibát eredményeznek a referenciajelhez képest. Szigorúan stabil (strictly stable), ha a robot a kis megváltozások ellenére is vissza tud térni a referenciapályára. Látható, hogy a P szabályozónk stabil, de nem szigorúan stabil, mivel képtelen visszatérni a referenciatrajektóriára.
9	0.551724	0	Egy egyszerű, három csomópontos gráfot, amelyet a kapcsolat(a,b) és a kapcsolat(b,c) definiál, mutat be a  (a) ábra. Az útvonal(a,c) lekérdezésére a program a  (a) ábrán látható bizonyítási fát generálja. Másrészt viszont, ha a két klózt ebbe a sorrendbe tesszük:
3	0.416667	0	Azok, akik járatosak a komplexitáselemzésben, kezdenek aggódni (vagy izgatottak lesznek, ha szeretik a kihívásokat), amikor exponenciális komplexitást látnak, mint amilyen például az O(b^d+^1). A  ábra megmutatja, hogy miért. Az ábra egy b = 10 elágazási tényezővel rendelkező szélességi keresést mutat a d megoldás mélység több értékére. A táblában feltételezzük, hogy másodpercenként 10 000 csomópontot generálunk, illetve egy csomópont tárolásához 1000 bájtra van szükség. Számos feladvány jellegű probléma felel meg ezeknek a feltételezéseknek (egy 100-as tényezővel ide vagy oda), ha azokat modern személyi számítógépeken futtatjuk. Fontos A  ábra alapján két tanulságot vonhatunk le. Először is a szélességi keresés esetén a tárigény nagyobb problémát jelent az időigénynél. A legtöbb ember, amennyiben érdekli a válasz egy fontos problémára, türelmesen ki tud várni 31 órát, hogy egy 8 mélységű keresés lefusson, de csak kevés számítógépnek van a kereséshez szükséges Tbájtnyi memóriája. Szerencsére léteznek ennél kevesebb memóriát igénylő keresési algoritmusok is.  ábra - A szélességi keresés idő- és tárigénye. Az ábra adatai b = 10-es elágazási tényezőt, 10 000 csomópont/percet és 1000 bájt/csomópontot feltételeznek. A szélességi keresés idő- és tárigénye. Az ábra adatai b = 10-es elágazási tényezőt, 10 000 csomópont/percet és 1000 bájt/csomópontot feltételeznek. Fontos A második tanulság, hogy az időigény még mindig fontos tényező. Ha a problémánk 12 mélységű, akkor (a feltételezéseink mellett) a szélességi keresésnek (vagy akármlyik nem informált keresési algoritmusnak) 35 évbe telne a megoldás megtalálása. Általánosságban az exponenciális komplexitású keresési problémák közül csak a legkisebb problémapéldányok oldhatók meg.
23	0.777778	0	Ennek a modellnek még egy 1000 szót tartalmazó, szerény szókincs esetén is paraméterek millióira van szüksége. Nyilvánvalóan adatokból kell megtanulnunk őket. Feltételezzük, hogy az egyetlen rendelkezésünkre álló adat egy kétnyelvű korpusz. Lássuk a felhasználási módját:
14	0.73913	1	Mind a négy változóhoz hét darab fuzzy halmazt rendeltünk egyenletes eloszlással. Ahogy az látható a rendszerrel generált eredmények közelébe sincsenek a kontroll hónap során mért értékeknek.  ábra - Hibás fuzzy rendszer Hibás fuzzy rendszer
11	0.923077	0	A tervkészítés kutatása a megjelenésétől kezdve központi kérdése a mesterséges intelligencia kutatásának, így a tervkészítésről született cikkek is számottevő részét képezik a folyóiratok és konferenciák anyagának. Specializált konferenciákat is rendeznek, mint az International Conference on AI Planning Systems (AIPS), az International Workshop on Planning and Scheduling for Space vagy a European Conference on Planning.
4	0.333333	0	A h[1] és h[2] a 8-as kirakójátékban a fennmaradó út hosszát becsülik, azonban a játék egyszerűsített változatánál a tökéletesen pontos úthossz értékét adják meg. Ha a játék szabályait úgy módosítanánk, hogy egy lapka bárhová áthelyezhető legyen, nemcsak a szomszédos mezőkre, akkor h[1] pontosan megadná a legrövidebb megoldáshoz vezető lépések számát. Hasonlóan, ha egy lapkát bármelyik szomszédos mezőre átmozgathatnánk, még akkor is, ha az adott mezőn már van egy másik lapka, akkor h[2] megadná a legrövidebb megoldás pontos lépésszámát. Fontos Az olyan problémát, amelyben az operátorokra kevesebb megkötést teszünk, mint az eredeti problémában, relaxált problémának (relaxed problem) nevezzük. A relaxált probléma optimális megoldásának költsége egy elfogadható heurisztika az eredeti problémára. A heurisztika elfogadható, mert az eredeti probléma optimális megoldása definíciószerűen megoldása a relaxált problémának is, és így legalább olyan költséges, mint a relaxált probléma optimális megoldása. Mivel a számított heurisztika a relaxált problémára egy pontos költség, teljesítenie kell a háromszög egyenlőtlenséget, és ebből kifolyólag konzisztens 4. szakasz - A* keresés: a teljes becsült útköltség minimalizálása részben.
24	0.166667	1	A kép: tárgyak vagy események síkban való megjelenítése. A radiológiában képnek tekintünk minden olyan látvány jellegű, vizuális információt (görbét, sík- vagy térhatású megjelenítést, vektort, spektrumot stb.), ami a lényeget illetően egyszerű megszemléléssel is értékelhető.
10	0.060606	1	A leírásban segítségünkre lesznek a fogalmak, egyedek halmaza, illetve az egyedek közti kapcsolatok, szerepek. Alapfogalmakból, melyeknek el tudjuk dönteni az igazságtartalmát, összetettebb fogalmakat tudunk építeni. Például: ember és férfi és nem házas és nincs gyereke, kifejezés leírhatja a szingli férfiak halmazát. Az ilyen állítások konstruálásából felépíthetjük a tudásbázisunkat, mely áll egy T- dobozból(Terminológiai axiómák): a fogalmi definíciók, és egy A-dobozból(Adataxiómák): egyedekre vonatkozó kijelentések. A fentiek alapján a következtető logika képes lesz eldönteni az A-doboz elemeinek igazságtartalmát.[14]
19	0.090909	0	Mindegyik hipotézis azt jósolja meg, hogy példák egy bizonyos halmaza, nevezetesen azok, amelyek kielégítik a hipotézisdefiníció jelöltjét, a célpredikátumnak megfelelő példák lesznek. Ezt a halmazt a predikátum kiterjedésének (extension) nevezzük. Két különböző kiterjedéssel rendelkező hipotézis így logikailag ellentmondásban van egymással, hiszen legalább egy példa esetén eltérő eredményt jósolnak. Ha viszont azonos a kiterjedésük, akkor logikailag ekvivalensek.
5	0.181818	1	A visszalépés eredményeképp az NT változó szintjére kerülünk (ahol az NT változó számára választottunk értékeket a FOR-ciklusban). Mivel ezen a szinten a visszalépéses keresés most HAMIS értékkel tért vissza, ezért az algoritmus szerint vissza kell csinálnunk az itteni legutóbbi értékadás és előretekintés általi változtatásokat. Az értékadás ugyebár az NT=GREEN volt, így ezt kivéve az aktuális {NSW=RED, WA=RED, NT=GREEN} behelyettesítésből a 3. lépésben kapott {NSW=RED, WA=RED} régi-új behelyettesítéshez jutunk (amit ugyebár az 5. lépésben bővítettünk).
24	0.333333	0	A  (a) ábra egy asztalon nyugvó tűzőgépet tartalmazó jelenet képét mutatja, a  (b) pedig a képre lefuttatott éldetektáló algoritmus eredményét mutatja. Láthatjuk, hogy az éldetektáló kimenete és az ideális vonalas ábra között van különbség. A kis részek élei nem mind illeszkednek egymáshoz, vannak hézagok, ahol nincsenek vonalak, valamint „zajos” kontúrok, amelyek a jeleneten semmilyen lényeges vonásnak nem felelnek meg. A későbbi feldolgozási fázisokban ezeket a hibákat majd korrigálni kell. Hogyan detektáljuk a képen az éleket? Figyeljük meg a kép fényintenzitás-profilját egy egydimenziós keresztmetszet mentén egy élre merőleges irányban, pl. az asztal bal éle és a fal között. Nagyjából olyan lesz ez, mint amit a  (a) ábra mutat. Az él helye az x = 50-nek felel meg.  ábra - Különféle élek: (1) mélységi diszkontinuitás, (2) felületi orientáció diszkontinuitás, (3) viszszaverődési képesség diszkontinuitás, (4) fényességi diszkontinuitás (árnyékok) Különféle élek: (1) mélységi diszkontinuitás, (2) felületi orientáció diszkontinuitás, (3) viszszaverődési képesség diszkontinuitás, (4) fényességi diszkontinuitás (árnyékok)  ábra - (a) Egy asztalon nyugvó tűzőgép fényképe. (b) Az (a) alapján meghatározott élek. (a) Egy asztalon nyugvó tűzőgép fényképe. (b) Az (a) alapján meghatározott élek.
3	0.083333	1	A MeSH kötött tárgyszó-rendszer, tezaurusz. A tezaurusz szakkifejezések olyan gondosan szerkesztett és ellenőrzött tárházát jelenti, ahol ezek a kifejezések egymással alá, fölé vagy mellérendelt viszonyban állnak. Így jön létre az a hierarchikus (fa) szerkezet, melynek segítségével a keresést különböző szinteken (a keresést szűkítve vagy tágítva) végezhetjük. A tezaurusz funkciója, hogy felsorolja és meghatározza a szótár megengedett és érvénytelen elemeit, és megmutassa, milyen kapcsolat van az érvényes elemek között.
20	0.857143	0	Számos különböző tanuló algoritmust kipróbáltak. Az elsők egyike, és egyben valószínűleg a legegyszerűbb, a 3-legközelebbi-szomszéd (3-nearest-neighbor) osztályozó, amelynek további nagy előnye, hogy nem igényel tanítási időt. Ugyanakkor memóriaalapú algoritmusként mind a 60 000 képet tárolnia kell, és a futási idejű teljesítmény lassú. A teszthalmazon elért hibaaránya 2,4%.
6	0.1	1	Az első, úgynevezett Minimax tétel Neumann Jánostól származik 1928-ból. Itt azt bizonyította be, hogy minden 2-szereplős zéró-összegű játéknak van egyensúlya. Ezt Ő még nyeregpontnak nevezte, és nem Nash-egyensúlynak, bár végső soron a Nash-egyensúly létezésének egy igen speciális, ámde alapvető fontosságú esetét sikerült bizonyítania. Nash pedig pár évtizeddel később általánosította Neumann eredményeit tetszőleges n-szereplős játékokra.
14	0.391304	0	Egy változó kiösszegzése tényezők szorzataiból szintén egyértelmű számítás. Az egyetlen észreveendő trükk az, hogy bármely tényező, ami nem függ a kiösszegzendő változótól, az az összegzésen kívülre mozgatható. Például:
19	0.363636	0	Bárki, aki a differenciálszámítást ismeri, a megoldást „ránézésre” tudja. Az ilyen problémákkal első alkalommal találkozó hallgatónak vagy netán a tapasztalatot nélkülöző programnak sokkal nehezebb lesz a dolga. A differenciálás közismert szabályai segítségével a kifejezést előbb-utóbb az 1 × (2 × (X^(2–1))) alakra lehet hozni, és ez előbb-utóbb elvezet minket a 2X-hez. A szerzők logikai programjának ez 136 bizonyítási lépésbe került, amiből 99 lépés a bizonyítás zsákutca elágazásaira esett. Ezt tapasztalva azt szeretnénk, ha a program ugyanennek a problémának a megoldását a következő alkalommal lényegesen gyorsabban adná meg.
6	0.1	1	A sablonok nagyon fontos részei a Hex-ben alkalmazott játékstílusnak. Ezek alapján lehet jó-rossz stratégiákat kialakítani. Egy sablon egy adott helyzetet ír le. Tehát azt, hogy egy adott pillanatban a pályán hol van piros, kék, és üres hatszög és, hogy pl. a piros következik. Az ábrán látható pl. egy olyan helyzet, ahol lényegtelen, hogy teszi a piros a következő figuráját (B-re vagy D-re), a kék a következő lépésében akkor is össze fogja tudni illeszteni a két élet (A-t és C-t).  ábra - Sablon [4] Sablon [4]
5	0.181818	1	Tehát mivel az előretekintés nem vezetetett üres értékkészlethez, így a következtetéseit átvezetjük az aktuális KKP-be: redukáljuk a Q, SA, és V változók értékkészletét. A behelyettesítés ettől még természetesen nem változik, továbbra is {NSW=RED}.
10	0.060606	0	Jegyezzük meg, hogy mivel a Kutya egy kategória és a HonosítottFajta kategóriának egy egyede, így a HonosítottFajta a kategóriák kategóriája. A kategóriák kategóriáinak a kategóriáiról is lehetne beszélni, de ennek kevés a haszna.
18	0.894737	1	Az első ARKIVE^R adatkezelő rendszer, amelyet a DIATEK cég fejlesztett ki az USA-ban, és amelyet az OHMEDA használ. Az OHMEDA MODULUS CD^R altatógép képes az anaesthesia összes mért paraméterét számítástechnikai módszerekkel akár rögzíteni, hálózatba továbbítani, és az ARKIVE^R rendszerrel kiegészítve a komplett altatási jegyzőkönyvet elkészíteni. Természetesen ez a rendszer egy a széles körű választékból, azonban az előbbiekben vázolt korszerű követelményeknek (ON LINE adatbevitel, objektív adatrögzítés, TOUCH SCREEN –szisztéma) meg tud felelni. Ezáltal az anaesthesia adatai mind a 4 lépcső követelményeinek eleget tesznek. Az így összegyűjtött információkból minden egyes beteget vissza lehet keresni éves viszonylatban. Az egyes betegnél felhasznált gyógyszer mennyisége analizálható a műtéti típusra havi bontásban, és gyógyszer mennyiségben egyaránt. Az egyes anaesthesiológusok érzéstelenítési módszereit ki lehet gyűjteni, elemzést lehet készíteni akár havi vagy éves bontásban.
14	0.73913	1	A két szabály ugyanarra a bemeneti változó állapotra különböző kimeneti változó állapotot határoz meg. Egyértelmű, hogy nagy jelentősége van annak, hogy a foszfor-koncentráció értéke melyik fuzzy halmazhoz tartozzon a legerősebben.
5	0.181818	1	Most tehát, mivel a rekurziónak erre a szintjére HAMIS értékkel tért vissza a rekurzív hívás, ezért vissza kell csinálnunk a legutóbbi értékadás és előretekintés következményeit. A legutóbbi értékadás, WA=RED volt (a 3. lépésben). Ennek megfelelően az értékadás inverziója során az aktuális {NSW=RED, WA=RED} behelyettesítésből az {NSW=RED} behelyettesítést kapjuk. Az előretekintés inverziója pedig, mivel az NT értékkészletéből lett kivéve a RED érték (a 4. lépésben), ezért a jelenlegi {GREEN, BLUE} értékkészletet visszanöveli a teljes kiindulási {RED, GREEN, BLUE}-ra.
3	0.916667	1	Nagyon hasznos az ismétlődő állapotok kiküszöbölése, hisz minden cselekvés megfordítva is legális, viszont nem vezet előbbre! (A fenti két módszer vizsgálatakor mindkét alkalommal eltekintettünk a visszafelé mutató utak kifejtésétől.)
6	0.1	1	A játék nimbereit az előző pontban meghatározott módszerrel adhatjuk meg: a bal alsó sarokból kiindulva egy általános csúcsba a tőle balra levő sorból, az alatta levő oszlopból, illetve a tőle balra és lefele elhelyezkedő átlóból lehet eljutni, így az adott csúcsban levő szám az ezen három szakaszon elhelyezkedő számok legkisebb kizártja. Például az ábrán látható módon: 0,1,2,3,4,5,6,8,9,10,11,12 legkisebb kizártja a 7.
16	0.347826	0	Elsőként azokat az eseteket vizsgáljuk meg, amikor döntéseket anélkül hozhatunk, hogy az attribútumértékeket egyetlen hasznosságértékké egyesítenénk. Majd azokat az eseteket vizsgáljuk, ahol az egyes attribútumkombinációk hasznosságát nagyon tömören lehet megadni.
5	0.181818	1	 ábra - 4. lépés: az előbbi, NSW=GREEN értékadás következményeként a WA, NT, Q, és V változók értékkészletének egy-eleműre csökkentése az AC3/MAC következtetés miatt 4. lépés: az előbbi, NSW=GREEN értékadás következményeként a WA, NT, Q, és V változók értékkészletének egy-eleműre csökkentése az AC3/MAC következtetés miatt
14	0.782609	1	A fuzzy logika abban hoz újat, hogy egy halmazba tartozó 0, illetve 1 értékei nem élesen elkülönülők, hanem köztes értékek is léteznek, nemcsak fekete és fehér, hanem például a szürke is, sőt azt is tudjuk kezelni, hogy mennyire szürke a szürke, mennyi feketéből és mennyi fehérből tevődik össze. A fehér és fekete mértékét meghatározó mennyiségek megmutatják, hogy egy adott elem mennyire tartozik bele a halmazba: nagyon, kevésbé, vagy egyáltalán nem. Így minden x[i ]elemhez hozzárendelünk egy w[i](a) és w[i](b) általában 0 és 1 közötti számot, ami jellemzi az x[i] elem A illetve B halmazba tartozásának mértékét.
15	0.185185	0	Az előrejelzés feladatát tekinthetjük egyszerűen szűrésnek új bizonyíték hozzáadása nélkül. Valójában a szűrési folyamat már magában foglal egy egylépéses előrejelzést és könnyen származtatható a következő rekurzív számítás a t + k + 1 állapot előrejelzésére a t + k előrejelzéséből:
24	0.833333	1	A SUSAN egy bonyolultabb detektor, a részletek nélkül a lényege, hogy minden pixelre megvizsgálja azon pontok számát és elhelyezkedését, melyek hasonlítanak a középponti pixelre. Ha kevés ilyen tulajdonságú pont van, és ezek távol vannak a középponttól, akkor az egy sarkot jelenthet.
23	0.333333	1	A diagnosztikai tesztek hatékonyságának jellemzésére többféle statisztikai módszer alkalmazható. Gyakorlatban fontos a különböző diagnosztikai tesztek hatékonyságának összehasonlítása is. A ROC (Receiver Operating Characteristic) analízis kezdeti felhasználásai az 1950-es években történtek, a radarjel észlelésével kapcsolatban.
6	0.1	1	A Hex maga egy táblajáték, melynek mezői hatszög alakúak. A tábla nagysága többféle lehet, de tradicionálisan egy 11x11-es rombusz alakút szoktak használni a játékhoz. Ami még elterjedtebb az a 13x13-as és a 19x19-es. Ennek köze van ahhoz a játékhoz is, mely lényegében alapot adott a Hex játék létrehozásában. Ennek neve a Go. Megállapítások szerint a 14x14-es tábla lenne a legoptimálisabb a játék számára, mégis a kisebbet használják mely fentebb, legelsőként lett megemlítve. Általánosságban ketten játsszák, mégis előfordulnak olyan formái is, melyben akár több személy is szerepet kaphat. Természetesen a mai világban számítógépek ellen akár úgymond egyedül is lehet játszani.
27	0.4	1	Az ágens környezete tehát jelen megközelítésünk szerint négy elemből tevődik össze: 1) lehetséges környezeti állapotok halmaza, 2) a lehetséges környezeti állapotok egy kiemelt eleme (a kezdeti környezeti állapot), 3) az f[Érzékelés] függvény, és 4) az f[Átmenet] függvény. Összefoglalva, az ágens környezetét a következő négyes formájában definiálhatjuk.
11	0.461538	0	 ábra - A terv alakulása, az OtthagyÉjszakára választása után, amit a ¬Ott(LaposKerék, Tengely) eléréséhez választottunk. Hogy elkerüljük az ütközést az Ott(Pótkerék, Csomagtartó)-t védő, az Eltávolít(Pótkerék, Csomagtartó)-ból induló okozati kapcsolattal, az OtthagyÉjszakára cselekvést egy rendezési megkötéssel az Eltávolít(Pótkerék, Csomagtartó) elé helyeztük, amit a szaggatott nyíllal jelöltünk. A terv alakulása, az OtthagyÉjszakára választása után, amit a ¬Ott(LaposKerék, Tengely) eléréséhez választottunk. Hogy elkerüljük az ütközést az Ott(Pótkerék, Csomagtartó)-t védő, az Eltávolít(Pótkerék, Csomagtartó)-ból induló okozati kapcsolattal, az OtthagyÉjszakára cselekvést egy rendezési megkötéssel az Eltávolít(Pótkerék, Csomagtartó) elé helyeztük, amit a szaggatott nyíllal jelöltünk.
5	0.181818	1	Szerencsére az SA-ba mutató élek mindegyike konzisztens, azaz mind NSW, mind WA, mind NT, mind Q, mind pedig V minden értékéhez létezik SA-nak olyan értéke, amellyel konzisztens. Ezek szerint ez az 5 él sorra ki is kerül a listából, és a helyükre nem kerülnek be újabb élek. Az aktuális él-lista tehát most a következő:
5	0.181818	1	Sajnos azonban az így kapott {NSW=RED, WA=RED, NT=GREEN, Q=BLUE, SA=BLUE} behelyettesítés sem jó, mivel ellentmond az 5-ös korlátnak (ami szerint az SA és a Q változó értéke kell, hogy különbözzön). Ráadásul ezzel a próbálgatással most zsákutcába is jutottunk, hiszen az SA változónak már nincs további szóbajövő értéke. Az algoritmus tehát törli ezt az SA=BLUE értékeadást a behelyettesítésből, és a FOR-ciklus végére ér, majd utána a tankönyv 5.3-as ábráján látható kód utolsó sorára lép, azaz hamis értékkel tér vissza a rekurzió előző szintjére.
16	0.391304	0	Tételezzük fel, hogy az S[1 ]reptér kevesebbe kerül, kisebb zajjal jár és biztonságosabb is, mint S[2]. Ekkor az mondjuk, hogy S[1] szigorúan dominálja (strict dominance) S[2]-t. Általában, ha egy lehetőség minden attribútumának kisebb az értéke, mint egy másik lehetőségé, akkor nem szükséges tovább vizsgálódni. A szigorú dominancia gyakran nagyon hasznos, mert leszűkíti a választási lehetőségeket a valódi jelöltekre, bár ritkán eredményez egyetlen választási lehetőséget. A  (a) ábra egy sematikus helyzetet mutat egy kétattribútumos esetben.  ábra - Szigorú dominancia. (a) Determinisztikus: A-t szigorúan dominálja B, de sem C, sem D nem. (b) Bizonytalan: A-t szigorúan dominálja B, de C nem. Szigorú dominancia. (a) Determinisztikus: A-t szigorúan dominálja B, de sem C, sem D nem. (b) Bizonytalan: A-t szigorúan dominálja B, de C nem.
5	0.181818	1	Láthattuk, hogy a jó heurisztikáknak (de főleg a fokszám heurisztika által javasolt 1. lépésnek) köszönhetően az AC3/MAC következtetés olyannyira hatékony volt (ez előző szakaszban bemutatottaktól eltérően, ahol heurisztikák nélkül több, mint másfélszer ennyi lépés kellett ahhoz, hogy megtaláljuk a megoldást), hogy gyakorlatilag már a 4. lépésben „megoldotta” a KKP-t, amit ezek után már csak „gondolkodás nélkül” ki kellett színezni. Ráadásul emiatt visszalépésre sem volt szükség, ami még tovább gyorsította a végrehajtást.
5	0.181818	1	Sajnos, ahogy azt már előzőleg is láttuk, az így kapott {NSW=RED, WA=RED, NT=BLUE, Q=GREEN, SA=BLUE} értékadás is ellentmondásban van a korlátokkal (nevezetesen a 3-assal, miszerint az NT és SA változók értéke különböző kell, hogy legyen).
3	0.125	1	Keresési algoritmusok vizsgálatában alapvető különbséget jelent egyrészt, hogy a kereső (döntést hozó) ágens egy élő ágens (ember, állat, ...), vagy az emberi intelligencia megvalósítására megtervezett gépi ágens (szoftver program, vagy robot), másrészt az is, hogy a keresés milyen keresési térben történik. Ha az alternatívák feltárása fizikailag érzékelhető térben (légtér, erdő, város utcái, irodaház folyosói, stb.) történik, akkor a kereséssel valódi mozgás, ill. más fizikai hatás párosul. Keresünk utat, helyet, tárgyat, szerelünk órát, motort, polcon rendezünk könyveket, vagy spájzban befőttes üvegeket, …. A tér azonban lehet matematikai absztrakt tér, aminek kapcsolata a közvetlenül tapasztalt valósággal általában sokkal összetettebb. Ilyen terekben keresünk matematikai problémák megoldását, egy logikai állítás bizonyítását, egy feladatot megvalósító tervet. Az iIlyen absztrakt térben valósul meg szintén az ágens tanulási folyamata.
23	0.722222	0	Ismernünk kell az olyan bigram valószínűségeket, mint például a P(Eiffel|tour) = 0,02.^[262] Ez a szintaxis mindössze nagyon lokális jellemzőit képes leírni, ahol a szó csak az őt megelőző szótól függ. A nyersfordításhoz azonban többnyire ez is elegendő.^[263]
21	0.4375	0	Amit a mohó ágens nem vett figyelembe, az az, hogy a cselekvésnek több funkciója is van annál, mint hogy a jelenleg megtanult modell alapján jutalmat hozzon, ezenfelül hozzájárul az igazi modell megismeréséhez is a nyert észleléseken keresztül. A modell javítása viszont azt eredményezheti, hogy az ágens több jutalomhoz jut a jövőben.^[214] Ennek megfelelően az ágensnek kompromisszumot kell kötnie a kihasználás (exploitation) – a jelenlegi hasznosságbecslésében tükrözött modell alapján történő jutalom maximalizálás – és a felfedezés (exploration) között, ez utóbbi a hosszú távú eredményességet szolgálja. Ha csupán a kihasználásra tör, akkor azt kockáztatja, hogy beragad valamilyen megszokott kerékvágásba. Ha pedig csak a felfedezéssel törődik, hogy tudását bővítse, de soha nem ülteti át a tudást a gyakorlatba – nem hoz semmilyen hasznot. A való életben állandóan döntenünk kell, hogy folytassuk-e kényelmes életünket, vagy vágjunk neki az ismeretlennek, hátha egy új és jobb életet fedezünk fel. Minél több mindent értünk, annál kevesebb felfedezésre van szükségünk.
5	0.181818	1	15. lépés: ebben a lépésben LCV nélkül az NT=RED értékadás történt. Ugyanez a választás történik akkor is, ha LCV heurisztika szerint választunk értéket, mivel ekkor a heurisztikus értékek a következőképp alakulnak: NT{RED(1), BLUE(3)}. E szerint tehát nem meglepő, hogy egyértelműen az NT=RED értékadásra kerül sor. De pontosan miért is ezek a heurisztikus értékek? RED(1) azért, mert az NT-vel szomszédos változók, azaz WA, SA, és Q közül aktuálisan már csak a WA értékkészletében van ott a RED érték, viszont a GREEN érték mindhárom változó értékkészletében szerepel (így NT=GREEN esetén azt már egyikőjüknek sem adhatnánk, azaz 1+1+1=3 potenciális későbbi ütközés lenne/lehetne).
19	0.590909	1	Jelölje X[1,] X[2…] X[n ]az n darab független, azonos eloszlású (i.i.d) véletlenszerű változót, S[i] ezen változók egy n-1 elemű halmazát, melyre igaz, hogy S[i]-nek nem eleme X[i], valamint Y az osztályváltozót. Továbbá x[i], y rendre X[i], Y változók egy-egy felvett lehetséges értéke, illetve s[i] a halmaz elemeinek egy értékkonfigurációja.
22	0.074074	1	A számítógépes nyelvészet foglalkozik beszéddel (beszélt nyelvvel) és írott szöveggel, és mindkét esetben lehet szó elemzésről (beszédfelismerés, illetve szövegelemzés) vagy előállításról (beszéd- vagy szövegszintetizálás). Továbbá léteznek olyan alkalmazások, feladatok (például a gépi fordítás, vagy egy beszélgető robot), amelyek ezek közül a területek közül többet is magukba foglalnak. Az írott szöveg alatt is érthetünk egy papíron lévő, vizuális módon elemezhető szöveget, vagy egy számítógépben digitális formában (karakterekként) tárolt szöveget. Előbbi esetben a számítógépnek először fel kell ismernie az írásjeleket, tehát ez a feladatkör (karakterfelismerés) is besorolható a számítógépes nyelvészet alá (hiszen a szöveg feldolgozásának része) [1], ám ez a probléma egyben az általános alakzatfelismerés speciális esete is.
25	0.148148	1	A b izületi távolság és az ϑ izületi szög az izület paraméterei. A manipulátor struktúrában különbséget teszünk eltolást és elforgatást biztosító izületek között. Azt, hogy melyik paraméter változik a mozgás során, az izület típusa határozza meg. Ha a kartag elcsavarodhat vagy billenhet az izületi tengely körül, akkor ϑ a mozgásra jellemző változó. Abban az esetben pedig, ha a kartag a tengely mentén egyenes vonalú mozgást végez, akkor b izületi távolság a változó paraméter. Az izületi paraméterekkel szemben a kartagparaméterek értékei mindig konstansok és a mechanikai tervezés alapján határozható meg értékük. Az iparban alkalmazott manipulátorok esetében a kartag csavarási szöge π/2 egész számú többszöröse. Néhány esetben az (i‑1)-edik és az i-edik izületi tengely metszi egymást, ilyenkor a kartag általánosított hossza nulla.
21	0.3125	0	Hasonló módon az ADP-eljárás hatékonyabb változatait hozhatjuk létre közvetlenül approximálva az értékiteráció és stratégiaiteráció algoritmusait. Ne felejtsük, hogy a teljes értékiteráció kezelhetetlenné válhat, ha az állapottér nagy. Ugyanakkor a módosítási lépések közül számos csak nagyon parányi. Elfogadhatóan jó válaszok gyors generálásához vezető lehetséges megközelítés, ha megkötjük a megfigyelt átmenetek után elvégzett módosítások számát. Azt is megtehetjük, hogy valamilyen heurisztika segítségével rangsoroljuk a lehetséges módosításokat, és csak a legfontosabbakat végezzük el. A prioritásos végigsöprés (prioritized sweeping) heurisztikája preferálja azon állapotok módosítását, amelyek valószínű követő állapotainak hasznosságában éppen most nagy módosítás történt. Ehhez hasonló heurisztikák segítségével a közelítő ADP-algoritmusok rendszerint nagyjából ugyanolyan gyorsan képesek tanulni, mint a teljes ADP, ha pusztán a tanító szekvenciák számát nézzük. Viszont több nagyságrenddel hatékonyabbak lehetnek, ha a számítási igényt vizsgáljuk (lásd  feladat). Ezáltal lehetővé válik számukra olyan állapotterek vizsgálata is, amelyek messze túl nagyok a teljes ADP-nek. A közelítő ADP-algoritmusoknak további előnye, hogy egy új környezet tanulásának korai fázisában a T környezeti modell gyakran olyan távol van a helyestől, hogy nincs sok értelme egy azzal pontosan konzisztens hasznosságfüggvényt kiszámítani. A közelítő algoritmus használhat olyan minimális méretű módosítást, amely csökken annak mentén, ahogy a környezeti modell egyre pontosabbá válik. Ez elkerülhetővé teszi a nagyon hosszú értékiterációkat, amelyek a tanulás korai szakaszában azért lépnek fel, mert nagy változások történnek a modellben.
23	0.555556	0	A második lépés komplex szavak (complex words) kezelése, ideértve az olyan szókapcsolatokat, mint a „set up” és a „joint venture”, valamint olyan tulajdonneveket, mint a „Prime Minister Tony Blair ” és a „Bridgestone Sports Co.”.^[250] Ezeket szótárbejegyzések és véges állapotú nyelvtani szabályok kombinációjaként ismeri fel. Például egy cégnevet a közvetkező szabállyal lehet felismerni:
23	0.722222	0	A fordítási modell végső része a szavak megfelelő sorrendbe történő permutálása. Ez egy eltolási modellel történik, amely során a szó az eredeti pozíciójából a végleges pozícióba mozog. Például a „chien brun” „brown dog”-ra történő fordítása során a „brown” szó +1 eltolási értéket kap (azaz jobbra egy pozíciót mozog), míg a „dog” –1 értéket. Az olvasó elképzelheti, hogy az eltolásnak függnie kellene a szótól: az olyan melléknevek, mint a „brown” többnyire pozitív eltolási értékkel rendelkeznének, mert a francia nyelv általában a főnév után helyezi el a mellékneveket. Azonban az IBM Model 3 úgy döntött, hogy a szótól függő eltolás túl sok paramétert igényelne, ezért az eltolás független a szótól, és csak a mondatbeli pozíciótól és a mondat mindkét nyelvbeli hosszától függ. Azaz a modell a következő paramétereket becsüli:
6	0.1	1	Ezt a játékot a „Scientific American” folyóirat hirdette meg az 1980-as évek elején. A játékosok száma itt nyilván jóval nagyobb, mint az 1 dolláros játék esetén (akár az USA egész akkori lakossága). A játékosoknak két választási lehetősége van (ellenben az előző játékkal, ahol 10+1 választásuk volt: vagy emelik a tétet 1-10 Ft-tal, vagy nem): vagy jelentkeznek a pályázatra, vagy nem. Mi mit tennénk? ...vajon mi volna ésszerű ebben a helyzetben? Mi volna ésszerű egyéni, és közösségi szinten? Ha jelentkeznénk, és hozzánk hasonlóan mindenki más is, akkor egy „szerencsés” nyerne nagyjából semmit (ahogy a többiek is). Ha viszont emiatt senki sem jelentkezne, akkor a többiektől eltérő játékos (aki egyedül jelentkezik) akár milliomos is lehetne.
14	0.913043	0	Általános Bayes-hálókban történő egzakt következtetésre Pearl fejlesztett ki egy csoportosításon alapuló algoritmust, felhasználva egy konverziót változók csoportjai feletti irányított polifába, amelyben üzenetváltások biztosítják a csoportok közös változói feletti konzisztenciát. Egy hasonló módszer, amit David Spiegelhalter és Steffen Lauritzen fejlesztett ki (Spiegelhalter, 1986; Lauritzen és Spiegelhalter, 1988), egy irányítatlan Markov-hálóba vivő konverzión alapul. Az eljárást a Hugin rendszerben valósították meg, ami egy hatékony és széles körben használt eszköz a bizonytalansági következtetések esetén (Andersen és társai, 1989). Ross Shachter, a hatásdiagramok kutatói közösségéből, egy egzakt módszert fejlesztett ki, ami a háló célirányos csökkentésén alapul a posteriori megőrző átalakításokat felhasználva.
24	0.833333	1	A sarokpontok speciális kulcspontok, azaz különböző objektumokat jól jellemző struktúrák. Jó kiindulásként szolgálnak alakzatok felismeréséhez. Lehetnek az objektumok sarkai, a fényesség szélsőértékei, vonalvégek, görbék legnagyobb görbületei, stb.. A sarkokat leggyakrabban leegyszerűsítik két él találkozására, hogy megkönnyítsék a felismerést. A sarokpont keresők számára fontos, hogy minél több invariáns tulajdonságuk legyen. A lényeg, hogy hasonló, de nem azonos képeken megtalálják az egymásnak megfelelő sarkokat, tehát megismételhetők legyenek.
24	0.958333	0	A képbeli élek a jelenetesemények sokaságának felelhetnek meg. Tekintsen egy tetszőleges fényképet, amely valódi háromdimenziós jelenetet ábrázol. Azonosítson a képen tíz élt, és kísérelje meg egyenként eldönteni, hogy az él (a) a mélység, (b) a felületi normális, (c) a reflektancia, illetve (d) a megvilágítás szakadásának felel-e meg.
16	0.913043	0	A maximális várható hasznosság elvének az egyik legkorábbi, bár végtelen hasznosságokat is tartalmazó szokatlan alkalmazása Pascal fogadása volt, melyet először mint a Port-Royal Logic egy részét Arnauld közölt (Arnauld, 1662). Daniel Bernoulli volt az első, a szentpétervári paradoxont vizsgálva, aki felismerte a szerencsejátékokra vonatkozó preferenciák felmérésének a fontosságát, megállapítva, hogy „egy dolog értékét nem az árának kell meghatároznia, hanem a hasznosságának, amit eredményez” (Daniel Bernoulli, 1738, eredeti kiemelés). Jeremy Bentham javasolta a hedonisztikus kalkulust (hedonistic calculus) az „örömök” és „bánatok” összehasonlítására, amellett érvelve, hogy minden döntésnek (nem csak a pénzügyieknek) redukálhatónak kell lennie hasznosságok összehasonlítására (Bentham, 1823).
9	0.965517	1	Gyűjtött adatok: * cég neve, esetleges divíziója, - kontakt adatok (postai cím, levélcím, telefon), - ORKI-kód, - profilkód (pl. orvostechnikai gyártócég), - alkód-rendszer (főbb gyártmánycsaládok), - kontaktszemély adatai, . egyéb információk.
1	0.275862	0	Ámbár az eldönthetetlenség és a kiszámíthatóság fontos fogalmak a számítások megértéséhez, a kezelhetetlenségnek (intractability) sokkal nagyobb hatása volt. Durván fogalmazva a problémák egy osztályát kezelhetetlennek mondjuk, ha az egyes problémapéldányok megoldásához szükséges idő legalább exponenciálisan nő a problémapéldányok nagyságától függően. A bonyolultság polinomiális és exponenciális növekedése közötti különbségre először az 1960-as évek közepén hívták fel a figyelmet (Cobham, 1964; Edmonds, 1965). A kétfajta növekedés közötti különbség fontos, mert az exponenciális növekedés következménye, hogy közepes nagyságú problémapéldányokat sem lehet értelmes időkorláton belül megoldani. Az intelligens viselkedés generálásának általános problémáját tehát inkább kezelhető, mint kezelhetetlen részproblémákra kellene lebontanunk.
23	0.722222	0	Ez a szabály azt állítja, hogy minden lehetséges F francia mondatot figyelembe kell vennünk, és azt kell választanunk, amelyik maximalizálja P(E|F)P(F)-t. A P(E) tényezőt nem kell figyelembe venni, hiszen minden F esetén azonos. A P(F) tényező a francia nyelvi modell (language model), azt adja meg, hogy milyen valószínűségű egy adott francia mondat. A P(E|F) a fordítási modell (translation model), azt adja meg, hogy milyen valószínűségű egy adott angol mondat, mint az adott francia mondat fordítása.
25	0.962963	0	A Monte Carlo-helymeghatározás torzított bármilyen véges méretű mintára. Azaz az algoritmus által kiszámolt várható érték a részecskeszűrés működéséből adódóan eltér a tényleges várható értéktől. Ebben a példában ezt a torzítást kell kiszámolni.
14	0.73913	1	A fuzzy rendszer kialakítása során a következő szempontokat kell figyelembe venni: * A fuzzy rendszer felépítéséhez megfelelő mennyiségű és minőségű tanuló adatpárra van szükség. * A bemeneti változók meghatározása során azokra a változókra kell koncentrálni, amelyek jelentős mértékben befolyásolják a kimeneti változók értékét. Jellemzően ez a szakember feladata. * A bemeneti változók fuzzy halmazainak kialakítása során kis halmazszámmal, és statisztikai alapon végezzük a létrehozásukat. A kis szabályszám, kevesebb szabályt jelent, amit könnyebb tanítás során létrehozni. * A kimeneti változók fuzzy halmazainak kialakítása során nagy halmazszámot célszerű választani, szintén statisztikai alapon történő létrehozással. * A modellezés tárgya jelentősen befolyásolja a becslés pontosságát.
3	0.916667	1	Egy keresési algoritmus a működése során minden lépésben megvizsgál egy (valamilyen szisztéma szerint kiválasztott) állapotot, és az ebben az állapotban végrehajtható legális cselekvésekkel elérhető más állapotokat. Eközben felépíti az úgynevezett keresési fát, amely minden egyes újonnan felfedezett állapotot egy csúccsal, minden legális cselekvést pedig egy éllel jelöl.
5	0.181818	1	Miután a következtetés hatás nélkül, de sikeresen visszatért, a keresés újra meghívja magát rekurzíve, majd újra a következő, még be nem helyettesített változó kiválasztásához ér. Ezt a következő heurisztikus értékek alapján próbálja eldönteni.
15	0.37037	0	Világos, hogy több folytonos változóra lesz szükségünk a rendszer állapotának megadásához. Például a madár repülése megadható egy (X, Y, Z) pozícióval és egy (X, Y, Z) sebességgel minden egyes időpillanatban. Szükségünk lesz még alkalmas feltételes sűrűségfüggvényekre az állapotátmenet- és érzékelő modellekhez; a  fejezethez hasonlóan, lineáris Gauss-eloszlásokat (linear Gaussian) fogunk használni. Ez azt jelenti, hogy a következő X[t+1] állapot a jelenlegi X[t] állapot lineáris függvénye, amihez még egy Gauss-zaj adódik, amely feltétel a gyakorlatban igen elfogadhatónak bizonyul. Tekintsük például a madár X koordinátáját, pillanatnyilag figyelmen kívül hagyva a többi koordinátát. Legyen a megfigyelések közötti intervallum Δ, és tételezzünk fel állandó sebességet; ekkor a pozíció frissítésére az adódik, hogy
11	0.692308	0	Eddig átsiklottunk a leállás kérdése fölött. Lehetünk-e biztosak abban, hogy amennyiben egy problémának nincs megoldása, a Graphplan algoritmus nem kerül végtelen ciklusba, iterációnként bővítve a tervkészítési gráfot? A válasz igen, de ennek bizonyítása túlmutat ennek a könyvnek a keretein. Itt csak a fő ötleteket körvonalazzuk, különösen azokat, melyek a tervkészítési gráfok általános tulajdonságaira világítanak rá.
14	0.869565	1	A nagy számú kockázati paramétert csoportosíthatjuk egy-egy szabályrendszer köré, amely csak az adott paramétercsoporthoz kapcsolódó kockázati szintet számítja ki. Több ilyen alrendszerből kiszámítva kockázati szinteket, azokat egy újabb szabályrendszerbe vezetve a következtetési rendszer egy magasabb szintjén, összefoglalhatjuk azok hatását a teljes kockázati szint számításához.
10	0.818182	0	A 7. és a  fejezetekben láttuk, hogy Horn-klóz formájú tudásbázisnak kedvező számítástechnikai tulajdonságai vannak. Sok alkalmazásban azonban nem kényelmes azt biztosítani, hogy klózok törzseiben csak pozitív literálok legyenek. Szeretnénk például azt mondani, hogy „Kimehetsz, ha nem esik”, anélkül hogy olyan predikátumokhoz kellene folyamodni, mint a NemEsik. Ebben a részben annak a lehetőségét kutatjuk, hogy a Horn-klózokhoz az explicit negálás egy formáját adjuk hozzá a negálás mint kudarc (negation as failure) ötletét felhasználva. Az ötlet az, hogy egy negatív „not P” literált igaznak „bizonyíthatunk”, hasonlóan, mint ahogy P bizonyítása kudarcba fulladhat. Ez az alapeseti következtetés egy formája, ami a zárt világ feltételezéshez szorosan kapcsolódik: tételezzük fel, hogy valami hamis, ha nem bizonyítható, hogy igaz. Hogy a negálás mint kudarc-ot a logikai „¬” operátortól megkülönböztethessük, megjelölésére a „not”-ot fogjuk használni.
1	0.586207	1	Általában az orvosi szakértői rendszerek képesek a következtetési lépéseiket leírni, amelyekkel az adott megoldáshoz vagy javaslathoz eljutottak. Ezen felül az emberi szakértő fejlesztheti a rendszer adatbázisát. (egy ilyen segítő rendszer a Mycin-hez a Teiresias).
15	0.111111	0	A függetlenségi állítások egy nagyon egyszerű Bayes-hálóstruktúrának felelnek meg, ami az egész rendszert leírja. A  ábrán látható a háló struktúrája az esernyős példa esetén, beleértve az állapotátmenet- és az érzékelő modellekhez tartozó feltételes eloszlásokat.
6	0.1	1	Az előbbi eszmefuttatást követően térjük vissza az 1-lapos póker játékhoz, és válaszoljuk meg, hogy mi a játék megoldása! Immár rendelkezésünkre áll a játék ekvivalens normál alakja, így akár ennek alapján is, az eddig bemutatott eszköztár segítségével is megpróbálhatjuk meghatározni a megoldást. Például a fenti normál alakra is felírhatnánk azokat a Forintpárosítás játék kapcsán bemutatott egyenletrendszert, és abból kiszámíthatnánk a játék Nash-egyensúlyát.
8	0.032258	0	A programok adatstruktúráinak (és így az adatbázisoknak is) a másik hátránya annak a képességnek a hiánya, hogy egyszerűen lehessen kijelenteni például azt, hogy „Van egy lyuk a [2, 2]-ben vagy a [3, 1]-ben”, vagy azt, hogy „Ha a wumpus az [1, 1]-ben van, akkor nincs a [2, 2]-ben”. A programok egyetlen értéket tudnak tárolni minden változóhoz, néhány rendszer lehetővé teszi azt is, hogy az érték „ismeretlen” legyen, de hiányzik belőlük a részinformációk kezeléséhez szükséges kifejezőerő.
14	0.869565	1	A beállított blokkokat ezután össze kell kötni.Két fajta link van, az egyik a hagyományos, ami továbbítja a blokkok kimenő jelét. A másik az activation link, ami az eseményekhez köthető aktivációs időt továbbítja, ez alapból piros színű.
22	0.222222	0	A következő lépés a szavak kifejezésekké történő kombinálása. Öt nem záró szimbólumot fogunk használni a különböző típusú kifejezések definiálására: mondat (S), főnévi kifejezés (NP), igei kifejezés (VP), elöljárói kifejezés (PP) és relatív klóz (RelClause).^[222] A  ábra ℰ[0] számára mutat egy nyelvtant, minden egyes átíró szabályra példát adva. Az ℰ[0 ]jó angol mondatokat generált, mint amilyenek például a következők:
23	0.055556	0	Ennek következtében az unigram modell szerint a „without” százszor nagyobb valószínűségű, mint a „with out”.^[241]  ábra - Viterbi-alapú szószegmentáló algoritmus. Egy szóközöket nem tartalmazó szófüzért feldolgozva megadja a legvalószínűbb szavakra történő szegmentációt. Viterbi-alapú szószegmentáló algoritmus. Egy szóközöket nem tartalmazó szófüzért feldolgozva megadja a legvalószínűbb szavakra történő szegmentációt.
20	0.107143	1	Egy további lehetséges EM variáns a Bayes-hálós modell kiválasztás egyik gyakran alkalmazott formájával a Markov-lánc Monte Carlo (MCMC) szimulációval alkot egységet. Ez esetben a struktúrákat kereső MCMC metódus belső magjába ágyazódik egy parametrikus EM algoritmus.
2	0.894737	1	Az ágensfüggvény egy absztrakt matematikai függvény. Függvények programmal való megvalósíthatóságáról szól a kiszámíthatóság-elmélet. Eszerint léteznek olyan problémák, amelyekre nem létezik algoritmus, amely megoldaná őket. A válasz tehát igen, léteznek ilyen ágensfüggvények. Nem kell azonban megijedni, bármely elméletileg kiszámítható függvényhez létezik olyan program, amely kiszámítja azt, ez tehát nem jelent komoly gyakorlati akadályt.
5	0.181818	1	Ha V-nek a GREEN értéket adnánk, akkor az nem okozna ütközést a szomszédaival, így csak az ezen felüli 3 ütközés maradna a WA-SA, NT-Q, és Q-NSW közti korlátokkal. Ha viszont V-nek továbbra is a BLUE értéket adnánk, akkor a RED-hez hasonlóan (a fentebbi ábrán látott állapotnak megfelelően) ugyancsak 4 ütközés adódna, hiszen egyrészt a 9-es korlát szerint az NSW és a V változó értékének különböznie kell, továbbá sérülne még a másik 3 korlát is, melyek a WA-SA, az NT-Q, és a Q-NSW változókra vonatkoznak.
24	0.75	1	A Robert Cross operátor még egyszerűbb, mint a Sobel féle változat. Ez egy 2x2-es mátrixszal konvolvál. Nincs simító hatása, csak véges differenciát számol, ettől a zajokra is érzékenyebb. Az iránymenti deriváltakat nem a főirányok mentén, hanem a diagonális irányokban adja meg. Előnye, hogy gyorsabb lehet a Sobel operátornál.
11	0.769231	0	További meglepetésekre számíthatunk, amikor egy új repülőteret illesztünk be, a LAX-ot (Los Angeles repülőtere). Most minden repülőgéphez minden állapotban két megengedett cselekvés is tartozik. Amikor egy kielégíthetőségi algoritmust futtatunk, úgy találjuk, hogy a Repül(P[1] SFO, JFK)^0, a Repül(P[2], JFK, SFO)^0 és a Repül(P[2], JFK, LAX)^0-ból álló modell kielégíti az axiómákat. Azaz a követő állapot axiómák és az előfeltétel axiómák megengedik, hogy egy repülőgép egyszerre két célállomásra is repülhessen! A kiinduló állapot a P[2] mindkét repülőútjának előfeltételeit teljesíti, így a követő állapot axiómák szerint a P[2] az SFO-n és a LAX-on található az 1-es időpillanatban, azaz a cél teljesül. Nyilvánvaló, hogy további axiómákat kell felvennünk, hogy kizárjuk ezeket a hibás megoldásokat. Az egyik megközelítés, hogy cselekvéskizáró axiómákat (action exclusion axioms) veszünk fel, melyek meggátolják az egyidejű cselekvéseket. Pédául teljes kizárást érhetünk el, ha az összes
2	0.263158	0	Ezek alapján a racionalitás definíciónk nem követel mindentudást, hiszen a racionális választás csak az adott pillanatig felépített érzékelési sorozattól függ. Azt is biztosítanunk kell, hogy tudtunk nélkül se engedjük meg az ágensnek, hogy tudatosan unintelligens cselekvésbe kezdjen. Például ha egy ágens nem néz körül mindkét irányban, mielőtt egy forgalmas utat keresztez, akkor az érzékelési sorozata nem fogja neki megmondani, hogy egy hatalmas kamion közeledik nagy sebességgel. Azt mondja-e a racionalitás definíciónk, hogy ebben az esetben rendben átkelhet az úton? Egyáltalán nem! Először is, az útkeresztezés nem lenne racionális ezen információszegény észlelési sorozat mellett: az átkelés szétnézés nélkül túlságosan rizikós. Másodszor, egy ideális racionális ágensnek a „szétnézés” cselekvést kellene választania az útra lépés előtt, mivel ez segíti a teljesítmény maximalizálásában. A hasznos információk beszerzése érdekében véghezvitt – általában információgyűjtésnek (information gathering) hívott – cselekedetek a racionalitás fontos részét jelentik, részletesebben a  fejezetben lesz szó róluk. Az információgyűjtés másik példáját a felfedezés (exploration) szolgáltatja, amit egy porszívóágensnek egy ismeretlen környezetben meg kell tennie.
10	0.515152	0	Az ilyen ágens, axiómáinkból adódóan, minden érvényes konklúziót képes azonnal kikövetkeztetni. Ezt a jelenséget logikai mindentudásnak (logical omniscience) hívják. Számos kísérlet történt arra, hogy korlátos racionalitású ágenseket definiáljunk, amelyek véges idő alatt korlátozott számú következtetésre képesek. Ezek egyike sem teljesen kielégítő, azonban e megfogalmazások lehetővé teszik, hogy korlátos ágensekről igen korlátozott terjedelmű jóslásokat végezzünk.
6	0.1	1	Egy játékos lehetséges lépéseinek száma az elágazási tényező (b, mint branching factor). Az előre megvizsgált lépések számát d-vel jelöljük (mint depth). A keresés komplexitása O(b^d), amely egyértelműen exponenciális. A szemléltetés végett, egy sakkjátszma közepén, nagyjából 35 különféle lépést tehet meg a játékos. Ilyen esetekben egy 4 lépés/játékos -t vizsgáló (8-ply) algoritmusnak 1500000 utat kellene megvizsgálnia.
8	0.064516	1	Az EMYCIN segítségével fejlesztették ki a Stanford egyetemen. Az EMYCIN és ezzel együtt a PUFF alkalmazására az egyetem nagy teljesítményű SUMEX számítógépén volt lehetőség, majd a finomított második verzió által (POP1-1) a rendszer használhatóvá vált arra, hogy a Pacific Medical Center eszközein is működjön. Ezt a viszonylag kisméretű rendszert később átalakították kisebb számítógépeken is futtatható BASIC nyelvűvé, ezáltal rutinszerűen, a laboratóriumban is lehetővé vált a rendszer használata.  ábra - A PUFF helye a szakértő rendszerek között A PUFF helye a szakértő rendszerek között
1	0.37931	0	Miután Craik 1945-ben egy biciklibalesetben meghalt, munkáját Donald Broadbent folytatta. Műve, a Perception and Communication (Broadbent, 1958) a pszichológiai jelenségek néhány első információfeldolgozó modelljét írja le. Közben, az Egyesült Államokban, a számítógépes modellezés fejlődése elvezetett a kognitív tudomány (cognitive science) kialakulásához. Ez a terület mondhatni egy tudományos találkozóval indult 1956 szeptemberében az MIT-n. (Látni fogjuk, hogy ez éppen két hónappal később követte azt a konferenciát, ahol az MI „megszületett”.) A találkozón George Miller a The Magic Number Seven, Noam Chomsky a Three Models of Language, Allen Newell és Herbert Simon pedig a The Logic Theory Machine c. előadásokat tartották. Ez a három befolyásos előadás azt mutatta, hogy a számítógépes modelleket hogyan lehet bevetni a memória, a nyelv és a logikai gondolkodás pszichológiájába. Manapság a pszichológusok közt teljesen elfogadott, hogy „a kognitív elméletnek olyannak kell lennie, mint egy számítógépes programnak” (Anderson, 1980). Ezen azt értik, hogy az elméletnek egy kognitív funkció megvalósításához az információfeldolgozó mechanizmust részletesen le kell írnia.
6	0.1	1	A ’70-es évektől gép-gép sakktornákat indítottak, amely a tudósokat tovább ösztönözte. Ekkorra kialakult a két alapvető megközelítés: tudás-alapú és “brute force” jellegű. 1977-ben a Belle nevű eszköz már 160.000 pozíciót vizsgált másodpercenként. Ekkor megjelentek a máig használt algoritmusok elődei is, amelyekről később fogok írni. A ’80-as évek közepére egyre gyakoribb volt, hogy egy sakktornát gép nyerjen. A ’90-es években egyre több különböző mikroprocesszorra épülő sakkozó gép készült és már nagymester szintű játékosokkal is összemérték tudásukat.
4	0.25	0	A 8-as kirakójáték a legrégebbi heurisztikus keresési feladatok egyike. Mint azt a  alfejezetben láttuk, a játék lényege, hogy a számozott lapkákat vízszintesen és függőlegesen az üres helyre tolva a kiindulóállásból a célállásba jussunk (lásd  ábra).
23	0.055556	0	Korábban láthattuk, hogy a Viterbi algoritmus   hogyan használható a legvalószínűbb szekvencia megtalálására egy szó-valószínűségi hálóban. A  ábrán látható a Viterbi algoritmus olyan változata, amelyet specifikusan a szegmentációs probléma megoldására terveztünk. Bemenete a P(szó) unigram valószínűségi eloszlás és egy karakterfüzér. Ezután az algoritmus a karakterfüzér minden egyes i pozíciójára a legjobb[i] elemben eltárolja a legvalószínűbb i-ig tartó karakterfüzér valószínűségét. Emellett a szavak[i] elemben eltárolja azt az i-edik pozícióban végződő szót, ami a legnagyobb valószínűséget adta. Miután felépítette a legjobb és a szavak tömböket dinamikus programozási módon, hátrafelé mozogva feldolgozza a szavak tömböt, hogy megtalálja a legjobb utat. Ebben az esetben, a könyv unigram modellje alapján a legjobb szekvencia ténylegesen az „It is easy to read words without spaces”,^[239] 10^–25 valószínűséggel. A szekvencia részeinek összehasonlítása során látható, hogy az „easy” unigram valószínűsége 2,6 × 10^–4, miközben az alternatív „e as y”^[240] valószínűsége sokkal kisebb, 9,8 × 10^–12 annak ellenére, hogy a könyv képleteiben viszonylag gyakran előfordul az „e” és az „y”. Hasonlóképpen:
12	0.904762	0	Történelmi távlatból már látható, hogy hogyan vezetett a két fő klasszikus tervkészítő algoritmus kibővített verziókhoz a bizonytalan környezetek kezelése céljából. A keresésalapú technikák a hiedelmi állapottér keresésre vezettek (Bonet és Geffner, 2000). A SATplan algoritmus a sztochasztikus SATplan (Majercik és Littman, 1999) algoritmusra, valamint a kvantorokat alkalmazó logikai tervezésre vezetett (Rintanen, 1999). A részben rendezett tervkészítésből az UWL (Etzioni és társai, 1992), a CNLP (Peot és Smith, 1992) és a Cassandra (Pryor és Collins, 1996) származik. A Graphplan, az érzékeléses Graphplan (sensory Graphplan-SGP) (Weld és társai, 1998) algoritmusra vezetett, de a teljesen valószínűségi Graphplan algoritmus még kifejlesztésre vár.
9	0.965517	0	Adja meg az alábbi atomi mondatpárok legáltalánosabb egyesítőjét, ha egyáltalán létezik ilyen: a. P(A, B, B), P(x, y, z) b. Q(y, G(A, B)), Q(G(x, x), y) c. Idősebb(Apja(y), y), Idősebb(Apja(x), János) d. Ismeri(Apja(y), y), Ismeri(x, x)
7	0.96	0	Vizsgálja meg a következő mondatokat, és döntse el mindegyikre, hogy érvényesek, kielégíthetetlenek, vagy egyik sem. Igazolja a döntését igazságtáblával, vagy felhasználva a  ábra ekvivalencia szabályait. Van-e olyan, amit elsőre eltévesztett? a. Füst ⇔ Füst b. Füst ⇒ Tűz c. (Füst ⇒ Tűz) ⇒ (¬Füst ⇒ ¬Tűz) d. Füst ∨ Tűz ∨ ¬Tűz e. ((Füst ∧ Hőség) ⇒ Tűz) ⇔ ((Füst ⇒ Tűz) ∨ (Hőség ⇒ Tűz)) f. (Füst ⇒ Tűz) ⇒ ((Füst ∧ Hőség) ⇒ Tűz) g. Nagy ∨ Hallgatag ∨ (Nagy ⇒ Hallgatag) h. (Nagy ∧ Hallgatag) ∨ ←Hallgatag
10	0.212121	1	A teljesség kedvéért megemlítem, hogy a fentiekben leírt állapotoperátorokon kívül még két, ritkábban használt operátor is létezik: * p W q: minden állapotban igaz p vagy addig igaz, amíg q igazzá nem válik (weak until) * p R q: q egészen addig fennáll, amíg p igaz nem lesz (release)
14	0.826087	0	A fuzzy predikátumoknak szintén adható egy valószínűségi értelmezés a valószínűségi halmazokat (random sets) felhasználva – azaz olyan valószínűségi változókat, amiknek lehetséges értékei objektumok halmazai. Például a MagasSzemély egy valószínűségi halmaz, amelynek lehetséges értékei emberek halmazai. A P(Magas = S[1]) valószínűség, ahol S[1 ]az embereknek valamely konkrét halmaza, annak a valószínűsége, hogy pontosan ezt a halmazt minősítené „magas”-nak a megfigyelő. Ekkor a „Nóri magas” valószínűsége minden olyan halmaz valószínűségének az összege, amelyben Nóri elemként jelen van.
22	0	0	Természetesen vannak más tulajdonságok, amelyek egyedülállóan emberiek: egyetlen más faj sem visel ruhát, készít művészeti alkotásokat vagy néz naponta három órán át televíziót. Azonban amikor Turing a tesztjét javasolta (lásd  alfejezet), a nyelvre alapozta azt, mivel a nyelv bensőséges kapcsolatban áll a gondolkodással. Ebben a fejezetben elmagyarázzuk, hogyan működik egy kommunikáló ágens, és bemutatjuk az angol nyelv egy egyszerűsített részletét.
12	0.095238	0	A heurisztika ugyanazon az ötleten alapul, mint a legjobban korlátozott változó heurisztika a kényszerkielégítésnél. Ez a gyakorlatban gyakran jól működik, de a mi összeszerelési problémánkra egy 130 perces megoldást ad, nem pedig a  ábrán bemutatott 115 perceset.
1	0.413793	1	ahol a az összes neuron aktivitásából képzett vektor, S pedig a szinaptikus hatékonyság-mátrix. Az f függvény alakja határozza meg az aktivitásdinamikát, az F funkcionál pedig a tanulási szabályt adja meg.
5	0.181818	1	A kapott {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=BLUE, V=GREEN} behelyettesítés az előbbi ábra szerint is jól láthatóan egyik korláttal sincs ellentmondásban, így a rekurzív hívást követően az utolsó, T nevű változóra kerül a sor. Láthatjuk, hogy ezt a változót egyetlen korlát sem érinti, nincs összefüggésbe hozva a többi változóval, azaz bármi lehet az értéke. Az algoritmus elsőként a RED értéket rendeli hozzá (T=RED).
19	0.545455	1	Leírás: Matlab alól futtatható, változók közötti kapcsolatok feltárását lehetővé tevő algoritmusok gyűjteménye. Ide tartozik az IAMB algoritmus család, a HITON algoritmusok, valamint a Koller-Sahami algoritmus, melyek mindegyike egy kijelölt központi változó Markov-takarójának meghatározását végzi egy adott módszerrel. * MDR – Multifactor Dimensionality Reduction
7	0.8	0	Most, hogy az ágensnek van már ismerete a szellős négyzetekről, foglalkozhat a csapdákkal is. Egy csapda hiánya az adott négyzetben akkor és csakis akkor határozható meg, ha valamelyik szomszédos négyzetéről ismert, hogy nem szellős. Például ha létezik
13	0.318182	1	Az eloszlási formák „a” pontjában lévő baloldali ábra: a magas értékeknél sok a kívül eső érték(baloldali görbe pld. Szérum LDH) ezt okozhatja a minták hemolízise. A hemolizált minták kiiktatásakor Gaussi eloszlást (jobboldali, szaggatott vonallal jelzett görbe) kapunk. Ha ez nem segít, akkor a percentilis módszert kell alkalmazni. Ugyanebben az „a” pontban lévő jobboldali ábra: az alacsony értékeknél vannak kívül esők.
3	0.083333	1	A MeSH az orvosi szakirodalomban és határterületein az információ feldolgozás és visszakeresés nemzetközi mércéjévé vált. A MeSH tezaurusz segítségével az amerikai Országos Orvostudományi Könyvtár, az NLM (National Library of Medicine) a vezető orvosi folyóiratot indexel a Medline számára, de egyéb dokumentumok (könyvek, audiovizuális anyagok) feldolgozására is ezt a tárgyszórendszert alkalmazzák. Egy bibliográfiai tételhez egyszerre több, a tartalmat részletesen feltáró MeSH kifejezés tartozik. A visszakeresés ugyancsak a MeSH segítségével történik.
3	0.083333	1	Most modellezni kellene az ágens cselekvéseit. Erre több lehetőség kínálkozik. Mivel a feladat leírása alapján ágensnek, a kezével a nyílásba benyúlva, lehetősége van érzékelni a kapcsolók állását és ennek alapján eldönteni, hogyan kapcsolja azokat át, mindenképpen IF ... THEN ... ELSE ... cselekvés-sémában kellene gondolkodnunk. A négy nyílásba két kézzel egyszerre többféle módon nyúlhatunk bele, de itt szerencsére a pörgés egyszer a segítségünkre is lesz, mert a feladatban egyfajta szimmetriát vezet be.
2	0.157895	0	A teljesítménymérték (performance measure) testesíti meg az ágens sikerességének kritériumát. Ha egy ágenst elhelyezünk a környezetében, akkor cselekvések sorozatával válaszol az érzékeléseire. A cselekvések sorozatának hatására a környezet állapotok sorozatán halad végig. Ha ez a sorozat kívánatos, akkor az ágens jól teljesített. Nyilvánvalóan nincs egyetlen olyan rögzített mérték, amely minden ágens számára megfelelő lenne. Megkérdezhetjük az ágens szubjektív véleményét, hogy mennyire érzi magát elégedettnek a saját teljesítményével, de egyes ágensek képtelenek lesznek válaszolni, míg mások becsapják magukat.^[20] Ezért valamilyen objektív teljesítménymértékhez fogunk ragaszkodni, tipikusan egy olyanhoz, amit az ágens tervezője határozott meg. Fontos Példaként tekintsünk az előző részben megismert porszívó ágenst. Teljesítménymértékként javasolhatjuk az egy nyolcórás műszakban feltakarított por mennyiségét. Egy racionális ágenssel, természetesen, az ember azt kapja, amit kér. Azaz a racionális ágens azzal maximalizálhatja ezt a teljesítménymértéket, hogy feltakarítás után kiönti a szemetet, majd újra feltakarítja és így tovább. Egy finomított mérték a tiszta padló elérését díjazná. Például minden tiszta négyzet egy pontot érhet minden időlépésben (talán valamilyen levonással figyelembe véve az elfogyasztott elektromos energiát, illetve a keltett zaj mennyiségét is). Általános szabályként megfogalmazható, hogy a teljesítménymértéket jobb aszerint megállapítani, hogy mit akarunk elérni a környezetben, mint aszerint, hogy miképp kellene az ágensnek viselkednie.
3	0.125	0	Az állapotleírás absztrahálása mellett magukat a cselekvéseket is absztrahálni kell. Egy vezetési cselekvésnek számos hatása van. Amellett, hogy megváltoztatja a gépkocsi és utasai helyét, időbe telik, üzemanyagot fogyaszt, szennyezi a levegőt és megváltoztatja az ágenst (azt mondják, hogy az utazás kiszélesíti a látókört). A mi megfogalmazásunkban csak a helyváltoztatást vesszük figyelembe. Van számos olyan cselekvés, amit teljesen elhagyunk: például a rádió bekapcsolását, az ablakon való kinézést, a lassítást, mert rendőr van a közelben stb. És persze a „fordítsd a kormányt balra 3 fokkal” szintű cselekvésekkel sem foglalkozunk.
25	0.074074	1	A mászó és lépegető (elterjedt összefogó elnevezésük CLAWAR) robotok gyakorlati célú alkalmazhatóságát elsőként a nukleáris iparban és az űrkutatásban ismerték fel. Ezeken a területeken olyan jól definiált karbantartási és technológiai feladatokat, problémákat kell megoldani, amelyek az emberre veszélyesek és bonyolult geometriájú környezetben végzendők. A kutatók és fejlesztők figyelme azért a járó robotokra eset e feladatokban, mert a kerekes (néha lánctalpas) mobilrobotok ilyen, úgynevezett strukturálatlan munkatérben csak korlátozottan tudnak mozogni. A lépegető berendezések ezzel szemben jóval adaptívabb megoldásnak tűnnek. A nagyobb akadályokat azonban a kerekes robotokhoz hasonlóan szintén kénytelenek kikerülni.
7	0.24	0	igaz a wumpus világban, de nem teljes. Nem szabályozza azokat a modelleket, amelyekben S[1,1] hamis és C[1,2 ]igaz, amivel megszegnénk a wumpus világ szabályait. Egy másik mód ennek érzékeltetésére, hogy az implikáció igényli a csapda jelenlétét, ha szellő van, miközben az ekvivalencia szintén megkívánja a csapda hiányát, ha nincs szellő.
4	0.916667	1	Jegyezzük meg, hogy ez az eshetőségi terv az adott leírást kielégítő minden lehetséges környezet számára megoldás. A keresés és a végrehajtás átlapolódása tehát egy ismeretlen környezetben nem szigorúan szükséges.
6	0.1	1	Természetesen mindennek megvannak a korlátai: nem minden játékos-viselkedés mellett implementálható minden f* KDF. Erre még később látunk példát. Ez az oka annak, hogy a mechanizmustervezés elméletén belül hemzsegnek a lehetetlenségi tételek, amelyek hasonló állításokat tesznek. A negatív kicsengéstől eltekintve azonban mindez igen konstruktív is lehet, mint majd látni fogjuk.
2	0.526316	1	A következő két terv az evéssel kapcsolatos. Az első terv feltétel részében az szerepel, hogy az ágens által érzékelt ennivalók (a food érzékelés paramétere, a Food lista tartalma) közül a legközelebbi (a .min beépített utasítás az első elem alapján rendezi a listaelemeket) 0 távolságra van. Ilyenkor el kell felejteni a korábbi célt ahova az ágens tartott (ami az esetek többségében egyébkén a jelenlegi pozíció), és enni kell!
2	0.421053	1	Például: * Neurológia: 1. Neuron, neurális hálózatok modelljei, az agy működése. 2. Funkciók, pl. nyelv, lokalizációjának vizsgálata 3. Tanulás, adaptáció, önszerveződés (leképezések), masszív párhuzamosság, folytonos számítások (a GOFAI gyökeres ellentéte) * Pszichológia Emberi tanulás és viselkedés modellezése Behaviorizmus: nem tételezünk fel közvetlenül nem megfigyelhető entitásokat. Ilyenek például a gondolatok, vágyak, az agy fekete doboz, esetleg bonyolult feltételes reflexek tárháza. Kognitív pszichológia: megenged modelleket, amelyekben fogalmak, mint pl. a hit, a cél, a vágy, memória, stb. szerepelnek. Ezeknek a következményeit ellenőrizhetjük kísérletileg. (pl. fizikában is így van: az áram, hőmérséklet, molekula, stb. csak elméleti fogalmak, nem direkt megfigyelhetők).
6	0.3	0	Ha feltételezzük, hogy ez megtehető,^[56] akkor az alfa-béta nyesésnek elég az O(b^m/2) csomópontot megvizsgálni, a legjobb lépés kiszámításához, a minimax O(b^m) értékével szemben. Ez azt jelenti, hogy az effektív elágazási tényező b helyett  lesz – például a sakk esetében 35 helyett 6. Más szóval, az alfa-béta nyesés ugyanannyi idő alatt kétszer olyan messzire néz, mint a minimax. Ha a követő csomópontokat véletlen sorrendben vizsgálnánk a legjobbat-először helyett, a vizsgált csomópontok össz-száma O(b^3m/4) lenne, mérsékelt értékű b-kre. A sakk esetében egy igen egyszerű rendezőfüggvény (mint például az, hogy először a leütésekkel, majd a támadásokkal, ezt követően az előrelépésekkel és végül a hátralépésekkel próbálkozunk) a legjobb esetre vonatkozó O(b^m/2) eredményt egy 2-es tényező erejéig közelíti meg. Dinamika hozzáadása a lépésrendező sémákhoz, mint például azokkal a lépésekkel próbálkozni először, amelyek legutóbb a legjobbnak bizonyultak, az elvi korláthoz egészen közel visz.
6	0.1	1	A példában 3 játékosunk, és azoknak 2-2 típusa van: piros, vagy fekete. Összesen tehát 8 (2*2*2) típuskombináció lehetséges. Vajon melyiket „osztotta le” a Természet? - kérdezhetné egy-egy játékos, hiszen az eddigiektől eltérően most, ebben a példában egy-egy játékos már nem csak a saját típusát ismeri, hanem pont fordítva, csak azt nem ismeri (hiszen a többiek kalapját mindenki látja). Ráadásul a fenti példában, és így a következőkben sem jelenik meg explicite az egyes típusok/típuskombinációk fennállásának valószínűsége. Egyelőre ne foglalkozzunk ezzel. Próbáljuk meg inkább megfejteni, hogy vajon tényleg lehetséges-e, hogy a látszólag semmi újat nem jelentő „legalább egy valakin piros kalap van” információ közhírré tétele után a 3-as játékos a fenti esetben valóban, őszintén „Igen”-nel tud válaszolni.
18	0.263158	0	Ugyanakkor némely függvényfajtánál ez valóban problémát jelent. Például ha a függvényünk a paritásfüggvény (parity function), amely akkor és csak akkor ad 1-et, ha páros számú bemenet 1 értékű, akkor egy exponenciálisan nagy döntési fára lesz szükség. Hasonlóan nehéz a többségfüggvény (majority function) reprezentálása döntési fával, amely függvény akkor ad 1-et, ha bemeneteinek több mint fele 1 értékű.
3	0.083333	0	A kezdeti állapot és az állapotátmenet-függvény együttesen implicit módon definiálják a probléma állapotterét (state space): azon állapotok halmazát, amelyek a kiinduló állapotból elérhetők. Az állapottér egy gráfot alkot, amelynek csomópontjai az állapotok és a csomópontok közötti élek a cselekvések. (Románia  ábrán látható térképe állapottérként értelmezhető, ha minden útját kétirányú gépkocsi-vezetési cselekvésként fogjuk fel). Az állapottér egy útja (path) az állapotok egy sorozata, amely állapotokat a cselekvések egy sorozata köt össze. * A célteszt (goal test), amely meghatározza, hogy egy adott állapot célállapot-e. Néha létezik a lehetséges célállapotok egy explicit halmaza, és a teszt egyszerűen megnézi, hogy az ágens elérte-e ezek egyikét. Romániában az ágens célja a {Benn(Bukarest)} szingleton. Néha a cél valamilyen absztrakt tulajdonsággal van definiálva, nem pedig explicit módon felsorolt állapothalmazzal. A sakkban például az úgynevezett „sakk-matt” állapot elérése a cél, amelyben az ellenfél királya az őt ért támadás elől nem tud elmenekülni. * Egy útköltség- (path cost) függvény, amely minden úthoz hozzárendel egy költséget. A problémamegoldó ágens azt a költségfüggvényt fogja választani, amely a saját hatékonysági mértékének felel meg. A Bukarestbe siető ágens számára az idő a lényeg, így az útköltség lehetne például az út a km-ben kifejezett hossza. Ebben a fejezetben az út költségének az utat alkotó egyes cselekvések költségének összegét fogjuk tekinteni az út mentén. Az x állapotból az y állapotba vezető cs cselekvés lépésköltsége (step cost) legyen lk(x, cs, y). Romániában a lépésköltségeket a  ábra mutatja úttávolságok formájában. Feltételezzük, hogy a lépésköltségek nemnegatívak.^[30]
3	0.958333	0	Gondoljon a Murphy-törvény uralma alatt álló kétlokációjú, szenzor nélküli porszívóvilágra. Rajzolja fel az {1, 2, 3, 4, 5, 6, 7, 8} kezdeti hiedelmi állapotból elérhető hiedelem-állapotteret, és magyarázza meg, hogy a probléma miért megoldhatatlan. Mutassa meg azt is, hogy ha a világ teljesen megfigyelhető, minden kezdeti állapotból létezik egy megoldási szekvencia.
20	0.857143	0	A kézzel írott számjegyek felismerése számos alkalmazásban felmerülő fontos probléma. Néhány ezek közül: postai levelek irányítószám szerinti automatikus osztályozása, csekkek és adó-visszatérítési számlák automatikus leolvasása, kézi számítógépek adatbevitele. Ez olyan terület, ahol gyors volt a fejlődés, részben a jobb tanuló algoritmusoknak, részben a jobb tanító adatbázisoknak köszönhetően. Az Egyesült Államok Mérés- és Szabványügyi Hivatala (National Institute of Standards and Technology, NIST) egy 60 000 megcímkézett számjegyből álló archívumot hozott létre, amelyben minden számjegy egy 20 × 20 = 400 pixeles, 8 bites szürke árnyalatú képen jelenik meg. Ez az új tanuló algoritmusok összehasonlításának egyik standard mércéjévé (benchmark) vált. A  ábra bemutat néhány számjegyet.
14	0.695652	1	Ahhoz hogy a fenti jellegű kijelentésekhez is „értelmes” valószínűséget rendeljünk a hagyományos elsőrendű logikák egy másfajta kiterjesztése szükséges, ahol a valószínűségi információ nem a modellek lehetséges behelyettesítéseire, hanem magukra a modell elemeire vonatkozik.
14	0.565217	0	Könnyen látható, hogy a Prior-Minta a háló által meghatározott a priori együttes eloszlásból generál mintákat. Először, legyen S[PS](x[1], …, x[n]) annak a valószínűsége, hogy egy adott eseményt legenerál a Prior-Minta algoritmus. Pusztán a mintavételi folyamat alapján felírható, hogy
5	0.181818	1	* Kools: a házakban szívott Kools márkájú cigarettát reprezentáló érték * Chesterfields: a házakban szívott Chesterfields márkájú cigarettát reprezentáló érték * Winston: a házakban szívott Winston márkájú cigarettát reprezentáló érték * LuckyStrike: a házakban szívott Lucky Strike márkájú cigarettát reprezentáló érték * Parliaments: a házakban szívott Parliaments márkájú cigarettát reprezentáló érték
22	0.925926	0	A szemantikus hálókhoz hasonlóan a környezetfüggetlen nyelvtanok (amelyek kifejezésstruktúra nyelvtanokként is ismertek) a sásztra szanszkrit nyelvet tanulmányozó ősi indiai nyelvészek (különösen Pánini, kb. i. e. 350) által használt technika felelevenítései (Ingerman, 1967). A modern időkben Noam Chomsky fedezte fel újra őket az angol szintaxis elemzésére (Chomsky, 1956), és tőle függetlenül John Backus az Algol-58 szintaxis analízisére használta. Naur kiterjesztette Backus jelölésrendszerét (Naur, 1963), ma pedig őhozzá rendelik az „N” betűt a BNF-ben, ami eredetileg a Backus Normál Forma volt (Backus Normal Form) (Backus, 1996). Knuth egyfajta kiterjesztett nyelvtant definiált, amelyet attribútumnyelvtannak (attribute grammar) nevezünk, és programozási nyelvek esetén hasznos (Knuth, 1968). A definit klóz nyelvtanokat Colmerauer vezette be (Colmerauer, 1975), majd Pereira és Warren fejlesztette tovább és népszerűsítette (Pereira és Warren, 1980). A Prolog programozási nyelvet Alain Colmerauer találta ki, elsősorban a francia nyelv elemzésének problémájára. Colmerauer voltaképpen kidolgozott egy metamorfózis-nyelvtannak (metamorphosis grammar) nevezett formalizmust, amely továbbment a definit klózoknál, de a DCG hamarosan követte.
2	0.526316	1	A harmadik ágens a simple apró módosításával készült, és a simple_debug nevet viseli. Célja kettős: egyrészt demonstrálja az AgentSpeak Java alapú kiegészíthetőségének módját, másrészt egyszerűbb, de lefagyásra kevésbé hajlamos hibakereső felületet ad az ágensnek, mint a Jason beépített hibakereső ablaka.
6	0.1	1	Most nézzük azokat az eseteket, amikor az 1-es játékos C-től nem a Red lapot, hanem a Black lapot kapja. Ekkor, ha bedobja lapját (Fold), akkor a Red-es esethez hasonlóan most is elveszti az addig közösbe tett 1 dollárját, amit így a 2-es játékos visz el. A kifizetési vektor tehát ekkor is (-1, 1).
9	0.103448	0	Ekkor alkalmazzuk az univerzális páldányosítást az első mondatra úgy, hogy az összes lehetséges alapterm-helyettesítést felhasználjuk a tudásbázisszótárból, ami ebben az esetben az {x/János} és az {x/Richárd}. Így ezt kapjuk:
21	0.1875	1	[1] Multi-armed Bandit Problems, Aditya Mahajan, Demosthenis Teneketzis, Foundations and Applications of Sensor Management, A. O. Hero III, D. A. Castanon, D. Cochran and K. Kastella, (Editors), Springer-Verlag, 2007.
25	0.518519	0	Itt egy olyan robusztus technikát ismertetünk, amelyet összeszerelési feladatoknál finom mozgások tervezésére (FMT; fine motion planning) használnak. FMT-re például akkor van szükség, amikor egy robotkart egy nagy, merev tárgyhoz nagyon közel kell mozgatni. A fő probléma az FMT-vel az, hogy a környezet kisméretű, lényeges elemeivel kell dolgozni, nagyon apró mozdulatokkal. Ilyen kis lépték esetén a robot már képtelen pontosan mérni vagy irányítani pozícióját, sőt adott esetben még a környezet alakjáról sincs pontos képe. Feltételezzük, hogy ezek a bizonytalanságok mind korlátosak. Az FMT-problémákra a megoldást legtöbbször feltételes tervek és irányelvek kidolgozása jelenti, amelyek a végrehajtás közben visszacsatolásként használják a szenzorok adatait, és a megadott bizonytalansági korlátokon belül minden esetben megbízhatóan működnek.
1	0.965517	0	Tanulmányozza az MI-irodalmat, hogy eldönthesse, az alábbi feladatokat jelenleg meg lehet-e oldani számítógépen: a) Egy színvonalas tenisz- (pingpong-) játszma. b) Autóvezetés Kairó központjában. c) Heti élelmiszer-vásárlás a piacon. d) Heti élelmiszer-vásárlás a világhálón. e) Elfogadható bridzsparti versenyszinten. f) Új matematikai tételek felfedezése és bizonyítása. g) Szándékosan humoros történet írása. h) Kompetens jogi tanácsadás egy specializált jogi területen. i) Beszélt angol nyelv valós időben történő fordítása beszélt svéd nyel vre. j) Egy bonyolult sebészeti beavatkozás levezetése. A ma még nem megvalósítható feladatok esetén próbálja azonosítani a neh ézségeket, és megbecsülni, hogy mikorra tervezhető azok megoldása.
14	0.913043	0	A fejezetben leírt szívbetegség-kezelő rendszer Lucastól származik (Lucas, 1996). A Bayes-hálók más területen történő alkalmazásai között találjuk egyebek között a Microsoftnál végzett fejlesztéseket a felhasználó céljainak kikövetkeztetésére (Horvitz és társai, 1998) és a kéretlen elektronikus levelek szűrésére (Sahami és társai, 1998), az Electric Power Research Institute fejlesztését áramgenerátorok figyelésére és a NASA fejlesztését időkritikus információk megjelenítésére a Mission Controlnál Houstonban (Horvitz és Barry, 1995).
16	0.913043	1	Lehetővé kell tenni a különböző adatbázisok összekapcsolását egymással. Az integrálásnak számos akadálya van. A hasonló célú klinikai és genomikai adatbázisok sem kompatibilisek egymással. Az egyes ellátóhelyeken különböző adatokat tárolnak és különböző fogalomtárakat és szótárakat használnak.
4	0.041667	0	Ez a fejezet megmutatja, hogy az informált keresési (informed search) stratégia – amely a probléma definícióján túlmenően problémaspecifikus tudást is felhasznál – hogyan képes hatékonyabban megtalálni a megoldást.
2	0.526316	1	A futtatáson kívül lehetőség van a Jason-t hibakereső módban indítani. Ehhez a futtatás gombtól jobbra elhelyezkedő gombbal kell indítani a szimulációt. Ilyenkor megjelenik egy extra ablak, melyben az ágensek mentális állapotát lehet nyomon követni, illetve a szimulációt lehet körönként léptetni.  ábra - A Jason hibakereső támogató felülete A Jason hibakereső támogató felülete
21	0.9375	0	A  alfejezetben bemutatott közvetlen hasznosságbecslési módszerek elkülönített végállapotokat használtak a kísérlet végének jelzésére. Hogyan módosíthatók végállapottal nem rendelkező, leértékelt jutalmakat használó környezetekre?
6	0.1	1	Legyen adott a fentebbi fólián definiált Bayes-i játék: 2-szereplő, ahol mindkét szereplőnek 2-2 tiszta stratégiája van. Az 1-es játékosnak csak egy típusa legyen (t11), míg a 2-es játékosnak legyen két típusa (t21 és t22). A típuskombinációk feletti eloszlás legyen egyenletes, azaz mindkét lehetséges típuskombinációhoz 1/2 valószínűség tartozzon.
19	0.136364	0	A Pillanatnyilag-Legjobb-Tanulás algoritmusát nem determinisztikusan írjuk le, mivel bármely ponton számos olyan szűkítési vagy általánosítási lehetőség lehet, melyek bármelyikét alkalmazhatjuk. A már meghozott döntések nem szükségszerűen vezetnek a legegyszerűbb hipotézishez, sőt olyan megoldhatatlan szituációhoz is vezethetnek, amelyben nincs a hipotézisnek olyan egyszerű módosítása, amely minden adattal konzisztens hipotézist állít elő. Ilyen esetekben a programnak egy előző választási ponthoz kell visszalépnie.
3	0.916667	1	A változtatás igen egyszerű: ha a cselekvéssorozat végrehajtása során minden cselekvés végrehajtása után ellenőrizzük, hogy ott vagyunk-e, ahol a terv szerint lennünk kell. Amennyiben nem, tegyük félre a jelenlegi cselekvéssorozatot és tervezzünk egy új utat a jelenlegi pozícióból abba, ahol lennünk kellene! Jegyezzük meg továbbá azt is, hogy éppen eltévedtünk. Majd ha megvan az útvonal a kezdőállapotba, hajtsuk végre a megoldásként kapott cselekvéssorozatot. Ha ennek során újra eltévedünk, dobjuk el a jelenlegi cselekvéssorozatot és tervezzünk újat. (Ezért jegyeztük meg az imént, hogy el vagyunk tévedve.) Amennyiben sikeresen visszajutottunk abba az állapotba, amelybe az első eltévedés előtt indultunk, vegyük elő újra az eredeti tervünket (ami továbbra is egy jó terv, csak nem sikerült elsőre végrehajtani!), és próbálkozzunk meg vele újra!
22	0.962963	0	Írjon egy nyelvtant a DCG-jelölésrendszerrel, amely ugyanolyan, mint az ℰ[1], azzal a kivétellel, hogy kikényszeríti a mondat alanya és igéje közötti egyeztetést, így nem állítja elő az „I smells the wumpus”-t!
21	0.875	0	A megerősítéses tanulás területén a függvényapproximáció alkalmazása Samuel munkájáig vezethető vissza, aki mind lineáris, mind nemlineáris kiértékelő függvényeket alkalmazott, továbbá a tulajdonságok terének csökkentésére tulajdonságszelekciós algoritmusokat is használt. A későbbiekben bevezetett módszerek közé tartozik a CMAC (Cerebellar Model Articulation Controller) (Albus, 1975), amely lényegében átlapolódó lokális kernelfüggvények összegéből, és a Barto és társai által bevezetett asszociatív neurális hálókból áll (Barto és társai, 1983). Napjainkban a neurális hálók a legnépszerűbb függvényapproximátorok. A legismertebb alkalmazás az ebben a fejezetben bemutatott TD-Gammon (Tesauro, 1992, 1995). A neurális hálókkal megvalósított IK-tanulóknak súlyos problémája az, hogy hajlamosak elfelejteni korábbi tapasztalataikat. Ez különösen igaz azokra térrészekre, amelyeket a szakértelmük megszerzése után elkerülnek. Ez katasztrofális következményekkel járhat, ha helyzetek újra jelentkeznek. A példányalapú tanulás (instance-based learning) alkalmazásával ez a probléma elkerülhető (Ormoneit és Sen, 2002; Forbes, 2002).
1	0.586207	1	Annak ellenére, hogy nem vált az orvosok mindennapi eszköztárának részévé, a MYCIN nagymértékben befolyásolta a későbbi MI kutatásokat. Olyan rendszerek születtek meg mintájára, mint: TEIRESIAS, EMYCIN, PUFF, CENTAUR, VM, GUIDON, és SACON rendszerek.
5	0.181818	1	Talán meglepő lehet, de mindenképp megfontolásra méltó, hogy az LCV heurisztikával kiegészített, előretekintést használó visszalépéses mélységi keresés végrehajtása az adott,  ábrán látható kiindulási problémán  szakasz -  Visszalépéses keresés előretekintéssel. Azaz gyakorlatilag az LCV heurisztika hozzáadása az eddigiekben vizsgált KKP probléma esetén egyáltalán nem befolyásolja a futást. Ellenőrizzük ezt most lépésről lépésre!
12	0.904762	0	A valós környezetek kiszámíthatatlanságát és részleges megfigyelhetőségét elsőként tervkészítési technikákat használó robotikai projektekben – beleértve a Shakey (Fikes és társai, 1972) és a Freddy (Michie, 1974) projekteket – ismerték fel. A problémakör több figyelmet kapott McDermott nagy hatású Tervezés és cselekvés (Planning and Acting) c. cikkének megjelenését követően (McDermott, 1978a).
13	0.772727	0	Ahhoz, hogy ez az átfogalmazás működjön, a Lyuk minden értékére ismernünk kell a fogfájás ∧ beakadás együttes bekövetkezésének feltételes valószínűségét. Noha ez két tényváltozó esetén használható lehet, nagyszámú változó esetén már nem alkalmazható. Ha n figyelembe veendő tényváltozónk van (röntgen, diéta, szájhigiénia stb.), akkor a megfigyelt értékek lehetséges kombinációinak száma 2^n, amely esetek mindegyikénél ismernünk kell a feltételes valószínűséget. Ennyi erővel akár vissza is térhetünk a teljes együttes valószínűség-eloszlás használatához. Ez vezetett arra, hogy a kutatók a valószínűség-számítás helyett közelítő módszereket kezdtek el használni több tény együttes figyelembevételénél, mert bár az így kapott válaszok pontatlanok, de kevesebb számolást igényelnek.
19	0.227273	0	Amennyiben egy háttértudást felhasználó autonóm tanuló ágenst szeretnénk felépíteni, az ágensnek legelőször valamilyen módszerrel meg kell szereznie a háttértudást, hogy utána azt az új tanulási epizódokban felhasználhassa. E módszernek önmagában is egy tanulási folyamatnak kell lennie. Az ágens életútját így kumulatív vagy inkrementális fejlődés jellemzi. Az ágens feltételezhetően a semmiből kezdhet, egy jó kis induktív program mintájára. Ha egyszer azonban evett már a Tudás Fájából, többé ilyen naiv spekulációra nem adhatja a fejét, és a háttértudást a minél hatásosabb tanulásra kell fordítania. A kérdés most az, hogyan tudjuk ezt megvalósítani.
7	0.16	1	A tudásbázis tartalma nyílván igaz, ha „k” jelentése egy kutya, „e” jelentése egy emlős, „f” a fekete szín, „b” a barna szín, „B” a Bodri, „S” pedig a Som kutyám, és TÉNYLEG van egy Bodri nevű fekete és Som nevű barna kutyám.
7	0.72	0	A Kérdez eljárásban levő maga után vonzás számítása implementálható a fejezetben korábban bemutatott a módszerek közül bármelyikkel. Az IT-Vonzat? ( ábra) nyilván nem praktikus, mivel fel kellene sorolni a 2^64 sort. A DPLL ( ábra) néhány milliszekundum alatt végrehajtja a kívánt következtetést, leginkább az egység-propagáció heurisztikának köszönhetően. A WalkSAT szintén használható, a teljesség hiányából származó gyengeségeivel. A wumpus világokban, a modell megtalálásának kudarca, 10 000 cserét feltételezve, praktikusan megfelel a kielégíthetetlenségnek, így nem valószínű, hogy hiba fordulhatna elő a teljesség hiánya miatt.  ábra - (Egy wumpusvilág-beli ágens programja, amely ítéletkalkulust használ a csapdák, a wumpusok és a biztonságos négyzetek azonosítására. Az Útvonal-Probléma szubrutin létrehoz egy keresési problémát, aminek megoldása egy cselekvéssorozat, amely elvezet az [x, y] négyzetből az [i, j]-be, és csak korábban már látogatott négyzeteken vezet keresztül. (Egy wumpusvilág-beli ágens programja, amely ítéletkalkulust használ a csapdák, a wumpusok és a biztonságos négyzetek azonosítására. Az Útvonal-Probléma szubrutin létrehoz egy keresési problémát, aminek megoldása egy cselekvéssorozat, amely elvezet az [x, y] négyzetből az [i, j]-be, és csak korábban már látogatott négyzeteken vezet keresztül.
17	0.6	0	A dinamikus döntési háló alapú döntéselméleti ágenseknek számos előnye van más, egyszerűbb, a korábbi fejezetekben bemutatott ágensfelépítésekhez képest. Nevezetesen, részlegesen megfigyelhető és sztochasztikus környezeteket kezelnek, és könnyen felülbírálják a „terveiket” a váratlan események kezeléséhez. Megfelelő érzékelő modellekkel képesek kezelni az érzékelőmeghibásodást, és képesek megtervezni az információ begyűjtését. Az idő szorításában és komplex környezetekben „teljesítményromlásuk fokozatos”, különböző közelítő technikák kihasználásával. Így jogos a kérdés, hogy mi is hiányzik még? A DDH-alapú algoritmusunknak a legkomolyabb hiányossága az előrefelé kereséstől való függés, ahogyan a II. részbeli állapottér-keresési algoritmusoknak is. A IV. részben elmagyaráztuk, hogy részlegesen rendezett, absztrakt tervek mérlegelésének képessége célirányos kereséssel hogyan biztosította a problémamegoldó képesség lényegi növekedését, különösen a tervkönyvtárakkal összeillesztve. Ezeket a módszereket megkísérelték a valószínűségi területre is kiterjeszteni, de ez eddig nem bizonyult hatékonynak. Egy második, kapcsolódó probléma a DDH nyelv alapvető kijelentéslogikai természete. Szeretnénk, ha az elsőrendű valószínűségi nyelvek elképzeléseit (lásd  alfejezet) ki tudnánk terjeszteni a döntéshozatal problémájára. A jelenlegi kutatások azt mutatják, hogy ez a kiterjesztés lehetséges, és jelentős előnyöket rejt magában, ahogy ezt a fejezet végi megjegyzéseknél megtárgyaljuk.
6	0.1	1	A következő táblázat a Dezertőr (D) játékosok számának alakulásától függően (0-tól 10-ig haladva vízszintesen) mutatja a Dezertőrök, a Szabályos Tevékenykedő (SZT) játékosok, illetve kettejük együttesének, azaz a Közösségnek (K) a tehénállományát és összhozamát. Láthatjuk, hogy a K, illetve SZT összhozama 0 D esetén maximális, viszont D összhozama 5 D és 5 SZT játékos esetén maximális (50 liter tej).
8	0.967742	0	Egy logikai tudásbázis a világot mondatokkal reprezentálja határozott struktúra nélkül. Egy analóg (analog) reprezentáció viszont strukturált, ahol a leírás struktúrája közvetlenül megfelel a reprezentált dolog struktúrájának. Tekintsük egy ország autótérképét mint az országról ismert tények egy részének analóg reprezentációját. A térkép kétdimenziós felépítése megfelel a terület kétdimenziós felszínének. a. Adjon öt példát a térképnyelv szimbólumaira. b. Explicit mondatnak nevezzük az olyan mondatot, amelyet a reprezentáció létrehozója közvetlenül leír. Az implicit mondatok az explicit mondatokból keletkeznek az analóg reprezentáció tulajdonságai szerint. Adjon három példát a térképnyelv implicit és explicit mondataira. c. Adjon az ország fizikai struktúráját leíró tényekre három olyan példát, amely nem reprezentálható a térképnyelvvel. d. Adjon két példát olyan tényekre, amelyek egyszerűbben kifejezhetők a térképnyelvvel, mint az elsőrendű logikával. e. Adjon még két példát analóg reprezentációkra. Melyek az előnyei és a hátrányai ezeknek a nyelveknek?
14	0.173913	1	Tehát, ha a  ábrán látható Bayes-hálóból kiolvassuk az I(X[2], X[3] | X[1])[G] d-szeparációt, akkor az azt jelenti függetlenségi állításokra átfordítva, hogy X[2] és X[3] egymástól feltételesen független, feltéve X[1]–t .
16	0.434783	0	Bár ez nem tűnik egyszerűnek, három, egyenként egyetlen attribútumhoz kapcsolódó hasznosságfüggvényt tartalmaz, és csupán három állandót. Általában az n attribútumot tartalmazó KHF-et kielégítő problémát n számú, egyetlen attribútumú hasznossággal és n számú állandóval lehet modellezni. Minden egyes, egyetlen attribútumot leíró hasznosságfüggvényt a többi attribútumtól függetlenül lehet megtervezni, és ez a kombináció garantáltan előállítja a teljes preferenciarendszert. Hogy tisztán additív függvényt kaphassunk, további feltételek szükségesek.
14	0.347826	0	  ábra - A   egyenletben szereplő kifejezés struktúrája. A kiértékelés fentről lefelé halad, összeszorozva az értékeket az egyes útvonalak mentén, és összegezve a „+” csomópontoknál. Vegyük észre, a j-hez és az m-hez tartozó útvonalak megismétlődését. A   egyenletben szereplő kifejezés struktúrája. A kiértékelés fentről lefelé halad, összeszorozva az értékeket az egyes útvonalak mentén, és összegezve a „+” csomópontoknál. Vegyük észre, a j-hez és az m-hez tartozó útvonalak megismétlődését.
2	0.526316	1	Az 1-3 fejezetek alapján már készíthető komplex működést produkáló, a játékban sikeres csapat. Egy ilyen csapat a  fejezet alapján könnyen bővíthető kommunikációs képességekkel, illetve a  fejezet igen röviden bevezet a Java bővíthetőség rejtelmeibe.
1	0.206897	0	Ebben a részben azon tudományterületek rövid történetét mutatjuk be, amelyek ötleteikkel, nézőpontjukkal, módszereikkel hozzájárultak az MI-hez. Mint minden történetnél, most is csak kevés személyről és eseményről tudunk megemlékezni, másokat, akik, illetve amelyek szintén fontosak, figyelmen kívül hagyunk. Az eseményeket egy kérdéssorozat körül rendeztük sorba. Ugyanakkor azt a benyomást sem szeretnénk kelteni, mintha ezek a kérdések a terület által kizárólagosan vizsgált kérdések lennének, vagy, hogy ezek a tudományterületek célkitűzéseikben mind az MI irányába fejlődtek volna.
6	0.1	1	A játékot R. Nowakowski - az End-Wythoff egyik megoldója - javasolta. Az End-Wythoff az End-Nim és a Wythoff-Nim keveréke, egy nagyon bonyolult Nim. Van néhány halmunk, mindben néhány kaviccsal, a halmok sorba vannak téve, majd egy lépésben a két szélen levő halomból vehetünk el külön-külön bármennyi kavicsot, vagy mindkettőből ugyanannyit. A játéknak nagyon bonyolult az elmélete, így meg sem próbálkozom a leírásával. Részletesebb tárgyalást róla a Games of No Chance 3[7] című kombinatorikus játékokról szóló könyvben találhatunk, ahol a „vesztő” és „nyerő” állások taglalása mellett polinomiális algoritmust is mutat a cikk szerzője arra, hogy hogyan számoljuk ki a következő lépésünket.
3	0.25	1	A gondolatmenet hasonló: a két sárgával jelölt mező közül legfeljebb az egyiken van akna (az 1-es miatt). Levonható következtetésként, hogy a csillaggal jelölt mezőn biztosan akna van, így azt meg kell jelölnünk. Mivel a 2-es aknaszámú mező szomszédságában kell lennie még egy aknának, kimondhatjuk, hogy a sárga mezőkön pontosan egy akna van. Ettől viszont az 1-es mező telítetté válik, így (többek között) a jobb oldali ábrán kérdőjellel jelölt mezőről megállapíthatjuk, hogy biztonságos.
19	0.590909	1	Vagyis Xi változó erősen releváns Y szempontjából, ha az összes többi változó mellett plusz információt hordoz Y eloszlásáról. Tehát a p(x[i], s[i])> 0 azt jelenti, hogy az X[i] =x[i] , S[i]= s[i ]értékkonfiguráció együttesen lehetséges, a p(y|c, s[i]) ≠p(y| s[i]) pedig azt, hogy X[i ]értékének azaz x[i]-nek az ismerete jelentősen befolyásolja Y feltételes eloszlását.
9	0.241379	0	A Betölt függvényt azzal tehetjük hatékonyabbá, hogy biztosítjuk, hogy az egyesítési lépést csak olyan mondatokkal kíséreljük meg, amelyeknél van egyáltalán esély az egyesítésre. Például nincs értelme, hogy megpróbáljuk az egyesítést az Ismer(János, x)-re és a Fivér(Richárd, János)-re. Elkerülhetjük az ilyen egyesítési lépéseket, ha indexeljük (indexing) a tényeket a tudásbázisban. Egy egyszerű séma, amit predikátum indexelésnek (predicate indexing) nevezünk, beteszi az összes Ismer tényt egy verembe és az összes Fivér tényt egy másikba. A vermek egy hash-táblában^[88] tárolhatók, hogy hatékonyan elérhessük őket.
24	0.375	0	A szegmentálás (segmentation) a kép felbontása részcsoportokra a képpontok hasonlósága alapján. Az alapötlet a következő: minden képponthoz rendelhetünk bizonyos vizuális tulajdonságokat, mint például fényesség, szín és mintázat.^[271] Ezek az attribútumok egy objektumon vagy annak egyetlen részén belül, csak kismértékben változnak, míg az objektumok közötti határok mentén tipikusan egyik vagy másik attribútum jelentősen változik. Úgy kell a képet képpontok halmazaira felosztanunk, hogy ezeket a kényszereket amennyire csak lehet, kielégítsük.
3	0.916667	1	c) Definiálja a keresési probléma implementálásához szükséges függvényeket, beleértve az állapotátmenet-függvényt, amely bemenetként egy csúcsot kap, és a belőle egyenes vonalban elérhető csúcsok halmazát adja vissza (ne felejtsük ki a szomszédos csúcsokat ugyanazon a sokszögön sem). Heurisztikus függvénynek az egyenes vonalbeli távolságot használja.
17	0.666667	0	Ez a fejezet a bizonytalan környezetbeli döntéshozatalra összpontosított. De mi a helyzet akkor, ha a bizonytalanság más ágenseknek és azok döntéseinek köszönhető? És ha ezeknek az ágenseknek a döntéseit a mi döntéseink befolyásolják? Ezzel a kérdéssel egyszer már foglalkoztunk, amikor a  fejezetben a játékokat tanulmányoztuk. Ott azonban többfordulós, teljes információs játékokkal foglalkoztunk, amelyekre a minimax kereséssel optimális lépések találhatók. Ebben az alfejezetben a játékelmélet (game theory) azon vonatkozásait tanulmányozzuk, amelyek felhasználhatók szimultán játékok elemzésére. Egyszerűsítés céljából elsőként olyan játékokat nézünk meg, amelyek csak egy lépés hosszúak. A „játék” szó és az egyetlen lépésre való korlátozás ezt triviálisnak tüntetheti fel, de valójában a játékelméletet nagyon komoly döntéshozatali helyzetekben használják – ideértve a bankcsődeljárásokat, a távközlési frekvenciasávok aukcióját, a termékfejlesztési és ármegállapítási döntéseket, illetve a honvédelmi kérdéseket – olyan helyzetekben, amelyek dollármilliárdok és életek százezreinek a sorsát érintik. A játékelmélet legalább kétféle módon használható fel: 1. Ágenstervezés (agent design): A játékelmélet képes elemezni az ágensek döntéseit, és kiszámítani az egyes döntések várható hasznosságát (azon feltevés mellett, hogy más ágensek a játékelmélet szerint optimálisan cselekednek). Például a kétujjas snóblijátékban (two-finger Morra) két játékos, O és E egyidejűleg felmutatja egy vagy két ujját. Legyen az ujjak összes száma f. Ha f páratlan, akkor O kap f dollárt E-től, és ha f páros, akkor E kap f dollárt O-tól. A játékelmélet képes meghatározni a legjobb stratégiát egy racionális ellenféllel szemben, és az egyes játékosok várható hasznát.^[175] 2. Működési mód tervezés (mechanism design): Amikor a környezetet számos ágens népesíti be, előfordulhat, hogy a környezet szabályait (azaz a játékot, amit az ágenseknek játszaniuk kell) olyannak határozhatjuk meg, hogy az összes ágens együttes haszna akkor maximális, amikor mindegyik ágens egy saját hasznát maximáló játékelméleti megoldást követ. Például a játékelmélet segíthet olyan protokollok tervezésében az internetes forgalomirányítók számára, hogy minden irányítónak olyan ösztönzői legyenek, hogy a globális átvitel maximális legyen. A működési mód tervezés arra is felhasználható, hogy olyan intelligens többágenses rendszereket (multiagent systems) hozzunk létre, amelyek komplex problémákat elosztott módon oldanak meg, anélkül, hogy az egyes ágenseknek ismerniük kellene a megoldandó teljes problémát.
5	0.181818	1	Ezek után az algoritmus kiválasztja az előbbi változó első, eddigi behelyettesítéssel konzisztens értékét az aktuális értékkészletéből, avagy egy értéket, amely nem mond ellent a fentebb felsorolt 9 korlátozásnak feltéve az eddigi változó-behelyettesítéseket. Ha több ilyen érték is van, akkor tegyük fel, hogy az  ábrán szereplő sorrendjükben haladunk végig rajtuk. Ezek szerint az első, eddigi (üres) behelyettesítésnek (lévén még egyetlen változó sincs behelyettesítve) nem ellentmondó érték a “RED” lesz, azaz első értékadásunk NSW=RED. Ennek megfelelően a következő ábrán látható, {NSW=RED} behelyettesítést kapjuk (amely egyelőre nyilván csak az NSW változóhoz rendel értéket).
6	0.1	1	Adjunk most példát a VCG mechanizmusok felhasználására! Adjunk egy realisztikus példát, amiben egy teljesen önérdekű, egyéb ágensek hasznát nem mérlegelő multi-ágens közösséggel állunk szemben, ahol mindenki csak a saját hasznát szeretné maximalizálni a többiektől függetlenül, és ahol mi ennek ellenére szeretnénk elérni a globálisan/közösségi szempontból nézve optimális viselkedést/kimenetelt. Ezért az említett multi-ágens rendszerre egy VCG mechanizmust oktrojálunk, amely olyan játékot indukál, amiben a résztvevők domináns egyensúlyra törekvő viselkedése éppen a kívánt, közösségi szinten optimális kimenetelt fogja eredményezni. A feladat a következő.
5	0.181818	1	 ábra - 2. lépés: az előbbi, NSW=RED értékadás következményeként a RED érték eltávolítása a Q, SA, és V változók értékkészletéből az előretekintés miatt 2. lépés: az előbbi, NSW=RED értékadás következményeként a RED érték eltávolítása a Q, SA, és V változók értékkészletéből az előretekintés miatt
7	0.96	0	Ebben a feladatban tervezze tovább az áramkörön alapuló wumpus ágenst. a. Írjon egy a   egyenlethez hasonló egyenletet a Nyíl kijelentéshez, amelynek igaznak kell lennie, amikor az ágensnek még van nyíla. b. Ismételje meg az (a) feladatot egy ArccalJobbra kijelentésre, ahol használja fel a   egyenletet modellként. c. Készítsen változatokat a   és   egyenletekre a wumpus megtalálásához, és rajzolja fel az áramkört.
3	0.25	1	Az utolsó szükséges, és egyben legbonyolultabb áramköri elem a NOR (nem-vagy, sem-sem) kapu, aminek a megvalósítása a  ábrán látható (pirossal jelölve a bemenetek, kékkel a kimenet). A működés bizonyításához végezzük el az áramkör analízisét (egyelőre pár új ismeretlent bevezetve)! A NOR kapu elvi igazságtáblája a  ábrán látható.  ábra - NOR kapu megvalósítása NOR kapu megvalósítása  ábra - NOR kapu elemzése NOR kapu elemzése  ábra - NOR kapu igazságtáblája NOR kapu igazságtáblája
7	0.16	1	Térjünk vissza a kutyáink leírására megalkotott „D” tudásbázishoz. Mit mondanánk, ha egy barátunk, aki szintén egy alkalmas tudásbázis felírásán töri a fejét, a miénkre rápillantva, felkiáltaná: „Megvan! Ez kell nekem!” „Neked is vannak kutyáid?” Érdeklődünk finoman. „Á, dehogy! Én az egész számokkal vagyok elfoglalva”. „Látod, az „f1” a természetes szám, az „f2” egy egész, és minden természetes egyben egész is. A „K1” a 14-es szám, a „K2” a 15-ös szám, az „f3” és az „f4” pedig a páros és a páratlan, és ami páros, az nem páratlan. Ezzel ki is tudom hozni, hogy 14-es egy egész és páros.”
15	0.37037	0	Képzeljünk el egy kismadarat, amint a dzsungel sűrűjében repül szürkületkor: a mozgásának csupán rövid, szakaszos felvillanásait pillanthatjuk meg; minden igyekezetünkkel azt próbáljuk megjósolni, hogy hol van most a madár, és legközelebb hol fog felbukkanni, hogy nehogy szem elől tévesszük. Vagy képzeljük azt, hogy a második világháborúban radarkezelők vagyunk, egy gyenge, mozgó radarjelet kémlelve, ami 10 másodpercenként jelenik meg a képernyőn. Vagy, kissé még távolabbra visszalépve, képzeljük magunkat Kepler helyébe, ahogy a bolygók mozgását próbálja rekonstruálni igen pontatlan szögmérések sokaságából, amit rendszertelen és pontatlanul mért intervallumokban rögzítettek. Mindegyik esetben egy fizikai rendszer állapotát próbáljuk megbecsülni (helyet és sebességet például) időben egymást követő zajos megfigyelésekből. A problémát megfogalmazhatjuk egy időbeli valószínűségi modellben való következtetésként, ahol az állapotátmenet-modell a mozgás fizikáját írja le, az érzékelő modell pedig a mérési folyamatot. Ez a fejezet azokat a speciális reprezentációkat és következtetési algoritmusokat vizsgálja, amelyeket ilyen típusú problémákra fejlesztettek ki; a tárgyalt eljárást Kalman-szűrésnek (Kalman filtering) nevezik, a kidolgozója Rudolf E. Kalman^[159] után.
20	0.107143	1	Ennek a módszernek számos változata létezik, többek között a parametrikus EM, a strukturális EM [2] és a bayesi strukturális EM [3]. Ez utóbbiak alapvetően Bayes-hálókon alapulnak. A strukturális EM Bayes-háló struktúrák tanulását végzi komplexitást büntető likelihood score-ok alapján (BIC/MDL), míg a bayesi strukturális EM az egzakt módon számított Bayes-score alapján teszi ugyanezt.
24	0.208333	0	Kétféle visszaverődést modellezhetünk. A tükröző visszaverődés (specular reflection) azt jelenti, hogy a fény a tárgy külső felületéről verődik vissza, és teljesíti azt a kényszert, miszerint a beesés és a visszaverődés szöge megegyezik. Ilyen a tökéletes tükör viselkedése. A diffúz visszaverődés (diffuse reflection) azt jelenti, hogy a fény a tárgy felszínén belülre hatol, a tárgy a fényt elnyeli és ismételten kisugározza. A tökéletesen diffúz (avagy Lambert-féle) felület minden irányban azonos intenzitással szórja a fényt. Az intenzitás egyedül a fényforrástól érkező fény beesési szögétől függ: a felületre pontosan merőleges fényforrás esetén lesz a legnagyobb intenzitású a reflexió, míg majdnem párhuzamos fényforrás esetén a legkisebb. E két véglet között a viszszaverődést Lambert koszinusztörvénye írja le:
2	0.894737	1	Igen. Emlékeztetünk, hogy az ágensfüggvény nem feltétlenül függvény, azaz lehetséges, hogy érzékelések egy sorozatához több cselekvést is rendel, ekkor az ágens nem-determinisztikus. Erre olyankor van szükség, amikor az ágensnek valamilyen véletlenszerű cselekvést kell megvalósítania. Így tehát a véletlenszerűen viselkedő ágensprogram is pontosan egy ágensfüggvényt valósít meg. Ha pedig az ágensprogram determinisztikus, akkor a válasz triviális.
16	0.956522	0	J. Bernoulli 1738-ban vizsgálta a szentpétervári paradoxont, ami a következő. Lehetősége nyílik részt venni egy szerencsejátékban, amelyben egy szabályos érmét dobnak fel ismételten az első fej előfordulásáig. Ha az első fej az n-edik dobásnál következik be, akkor a nyereménye 2^n dollár. a. Mutassa meg, hogy ennek a játéknak a várható pénzügyi értéke végtelen. b. Mennyit fizetne ön, személy szerint a részvételért? c. Ezt a nyilvánvaló paradoxont Bernoulli azzal a javaslattal oldotta meg, hogy a pénz hasznossága logaritmikus skálát követ (azaz U(S[n]) = a + log[2]n + b, ahol S[n] azt az állapotot jelöli, hogy n dollárunk van). Mi a játék várható hasznossága ezzel a feltevéssel? d. Mi az a maximum összeg, amit racionális lenne kifizetni a részvételért, feltéve, hogy a kezdeti vagyona k dollár?
6	0.1	1	Az ábrán látszik, hogy a játék egy hármas: (1) a játékosok halmazának, (2) az egyes játékosok stratégia-halmazai halmazának, és (3) az egyes játékosok haszonfüggvényei halmazának együttese. A stratégia-halmazokat kombinálhatjuk. Így kapjuk a stratégia-kombinációk halmazát, amit S jelöl. Ennek elemei n-hosszú vektorok (ahol n a játékosok számát jelöli). A játékosok haszonfüggvénye egy-egy ilyen stratégia-kombinációhoz rendel egy-egy valós számértéket: egy-egy kifizetést. Tehát minden kimenetel esetén, amit egy-egy stratégia-kombináció jelöl, a haszonfüggvény megmondja, hogy az mennyire jó ez az egyes játékosoknak. Egy-egy kimenetel hasznossága nyilván különbözhet különböző játékosok esetén, bár adott esetben akár meg is egyezhet. Minderre lehetőséget ad a fenti modell.
25	0.074074	1	A robottal szemben megfogalmazott legfőbb kritika általában a magas beruházási költség. A bevezetéskor a készülék ára 1,2 millió dollár volt, ami 1,75-ra nőtt a da Vinci esetében, amihez újabb 500 000 dollár egy második konzol vagy negyedik robotkar. Ugyanakkor ez az ár még nagyságrendileg 100 000 dolláros éves szervízdíj mellett sem mondható kirívóan magasnak más orvosi nagygépekhez vagy robotokhoz képest. A robothoz való egyszerű laparoszkópos csipesz nagyjából 2000 dollárba kerül az Amerikai Egyesült Államokban, a bonyolultabb eszközök ára pedig ennek többszöröse.
17	0.533333	0	Így láthatóan τ(b, a, b′) és ρ(b) együtt egy megfigyelhető MDF-et definiál a hiedelmi állapotok terén. Továbbá megmutatható, hogy egy π^*(b) optimális eljárásmód erre az MDF-re, szintén optimális eljárásmód az eredeti RMMDF-re. Máshogy fogalmazva, egy RMMDF megoldása a fizikai állapottérben redukálható egy MDF megoldására a hozzá tartozó hiedelmi állapot térben. Ez a tény talán kevésbé meglepő, arra gondolva, hogy a hiedelmi állapot definíció szerint az ágens számára mindig megfigyelhető.
12	0.142857	0	Ez az alfejezet a hierarchikus feladathálókon vagy HFH-kon (hierarchical task networks – HTN) alapuló tervkészítési módszert mutatja be. A megközelítésünk ötvözi a részben rendezett tervkészítés ( alfejezet) alapötleteit, illetve a „HFH-tervkészítés” területét. A HFH-tervkészítésben a kiinduló problémát, amely a feladatot írja le, a végrehajtandó feladat egy nagyon magas szintű leírásának tekintjük, például: építsünk egy házat. A terveket cselekvésdekompozíciókkal (action decompositions) finomítjuk. Minden cselekvésdekompozíció a magas szintű cselekvést alacsonyabb szintű cselekvések részben rendezett halmazára bontja. A cselekvésdekompozíció ezért a cselekvések megvalósítására vonatkozó ismereteket testesíti meg. Például egy ház felépítése az engedélyek megszerzésére, a kivitelező megbízására, az építkezés elvégzésére és a kivitelező kifizetésére redukálható. (A  ábra egy ilyen dekompozícióra mutat példát.) A folyamat addig folytatódik, amíg csak az egyszerű cselekvések (primitive actions) maradnak a tervben. Az egyszerű cselekvések tipikusan azok a cselekvések, amelyeket az ágens automatikusan végre tud hajtani. Egy általános kivitelezőre a „kertépítés” egy egyszerű cselekvés lehet, mert egyszerűen csak egy kertépítő bevonását jelenti. Egy kertépítő számára azonban az olyan cselekvések tekinthetők egyszerűnek, mint az „ültessen rododendront ide”.
20	0.214286	0	Rugalmasságán túl a béta-családnak van még egy csodálatos tulajdonsága: ha a Θ priorja béta[a, b], akkor egy adatpont megfigyelése után Θ a posteriori eloszlása is béta-eloszlás. A béta-családot a logikai változók eloszlása konjugált priorjának (conjugate prior) nevezzük.^[198] Lássuk, hogyan is működik ez. Tegyük fel, hogy megfigyeltünk egy meggyízű cukrot, ekkor:
23	0.111111	0	A PCFG másik problémája az, hogy erősen preferálja a rövid mondatokat. Egy olyan korpuszban, mint a Wall Street Journal, az átlagos mondathossz körülbelül 25 szó. Azonban egy PCFG általában úgy végez, hogy viszonylag magas valószínűséget rendel olyan szabályokhoz, mint az S → NP VP, az NP → Pronoun és a VP → Verb. Ez azt jelenti, hogy a PCFG viszonylag nagy valószínűséget fog rendelni sok rövid mondathoz, mint pl. „ő aludt”, azonban a Journalban sokkal valószínűbben találkozunk olyan mondatokkal, mint „Egy megbízható kormányzati forrás jelentése szerint az az állítás, hogy aludt, hihető”. Úgy tűnik, hogy a Journal mondatai igazából nem környezetfüggetlenek, hanem az íróknak van elképzelésük az elvárt mondathosszról, amit fel is használnak lágy globális kényszerként a mondatok írásakor. Ezt nehéz visszatükrözni egy PCFG-ben.
6	0.6	0	Kétségtelen, hogy az olvasónak már eszébe jutott, hogy valami alfa-béta nyeséshez hasonló dolgot a véletlen csomópontokat tartalmazó játékfákra is alkalmazni lehetne. Kiderül, hogy ez valóban lehetséges. A max és a min csomópontok elemzése változatlan, de egy kis leleményességgel a véletlen csomópontokat is nyeshetjük. Tekintsük a  ábra C véletlen csomópontját, és nézzük meg, mi történik az értékével, amikor a gyermekeit vizsgáljuk és kiértékeljük. Kérdés, hogy lehetséges-e C értékére egy felső korlátot találni, még mielőtt az összes gyermekét megvizsgálnánk? (Idézzük vissza, hogy az alfa-béta nyesésnek pontosan erre van szüksége ahhoz, hogy egy csomópontot és az abból kiinduló részfát lenyeshesse.) Ez első pillantásra lehetetlennek tűnhet, mivel a C értéke a gyermekei értékének az átlaga, és amíg nem láttuk az összes kockadobás eredményét, addig ez az átlag akármi is lehet, mivel a meg nem vizsgált gyermekek akármilyen értéket felvehetnek. Ha azonban a hasznosságfüggvény lehetséges értékeit korlátok közé szorítjuk, akkor korlátokat kaphatunk az átlagra is. Például ha azt mondjuk, hogy a hasznosságértékek +3 és –3 között lehetnek, akkor a levélcsomópontok értékei már korlátosak, és a véletlen csomópont értékére az összes gyermekének megvizsgálása nélkül is adhatunk felső korlátot.
18	0.578947	0	A turbózás az összes mintára w[j] = 1 értékkel (azaz egy normál tanító halmazzal) indul. Ebből a halmazból generálja az első hipotézist, h[1]-et. Ez a hipotézis egyes tanítómintákat jól osztályoz, másokat rosszul. Azt szeretnénk, ha a következő hipotézis jobb eredményt érne el a rosszul osztályozott mintákon, ezért megnöveljük a rosszul osztályozottak súlyait, míg a jól osztályozottakét csökkentjük. Ebből az új, súlyozott mintahalmazból generáljuk a h[2] hipotézist. Az eljárást addig folytatjuk, míg M hipotézist nem generáltunk, ahol M a turbó tanulási algoritmus bemenő paramétere. Az algoritmus eredményeként kapott hipotézis együttes nem más, mint az M hipotézis súlyozott többségi szavazással kombinált eredője. A súlyokat aszerint határozzuk meg, hogy az egyes hipotézisek mennyire jól teljesítettek a tanító halmazon. A  ábrán bemutatjuk az algoritmus koncepcióját. Sok variánsa ismert a turbó tanulásnak, eltérő súlymódosítással, illetve a hipotézisek különböző kombinálási lehetőségeivel. Egy kiválasztott – AdaBoost nevű – algoritmust mutatunk be a  ábrán. Az alkalmazott súlymódosítási eljárás jelen esetben nem túl lényeges, viszont az AdaBoost algoritmusnak van egy nagyon lényeges jellemzője. Tegyük fel, hogy a használt L tanulási algoritmus egy gyenge tanulási (weak learning) algoritmus, ami azt jelenti, hogy L mindig visszaad egy olyan hipotézist, amelyik legalább egy csöppet jobban teljesít a tanító halmaz súlyozott hibájára nézve, mint a véletlen találgatás (azaz eredménye jobb mint 50% bináris osztályozás esetén). Ez esetben, kellően nagy M-re az AdaBoost mindig előállít egy olyan hipotézist, amely a tanító mintákat tökéletesen osztályozza! Tehát az algoritmus fokozza az eredeti tanuló eljárásnak a tanító mintán mért pontosságát. Ez mindig fennáll, attól függetlenül, hogy esetleg mennyire kevéssé kifejező az eredeti hipotézistér, és mennyire bonyolult a keresett függvény.  ábra - A turbó algoritmus működése. Mindegyik árnyékolt téglalap egy példának felel meg, a téglalap magassága mutatja a példa súlyát. A pipák és keresztek mutatják, hogy a példát jól vagy rosszul osztályoztuk a pillanatnyi hipotézis alapján. A döntési fa mérete mutatja, hogy ennek a hipotézisnek mekkora a súlya a végső együttesben. A turbó algoritmus működése. Mindegyik árnyékolt téglalap egy példának felel meg, a téglalap magassága mutatja a példa súlyát. A pipák és keresztek mutatják, hogy a példát jól vagy rosszul osztályoztuk a pillanatnyi hipotézis alapján. A döntési fa mérete mutatja, hogy ennek a hipotézisnek mekkora a súlya a végső együttesben.
9	0.586207	0	A CLP-rendszerek szintén hasznosítják az  fejezetben bemutatott különböző kényszerprogramozási keresési optimalizációs módszereket, mint a változók és értékek sorba rendezését, az előrefelé ellenőrzést vagy az intelligens visszalépés módszerét. Számos rendszert úgy terveztek meg, hogy a programozónak nagyobb kontrollja legyen a következtetések keresésének a sorrendje felett. Például az MRS nyelv (Genesereth és Smith, 1981; Russell, 1985) lehetővé teszi a programozó számára, hogy metaszabályokat (metarules) írjon a konjunktok megvizsgálási sorrendjének meghatározására. A felhasználó például írhat egy olyan szabályt, amely azt mondja ki, hogy a legkevesebb változóval rendelkező cél legyen először kipróbálva, vagy írhat tárgyterület-specifikus szabályokat bizonyos predikátumokhoz.
13	0.909091	0	A bayesi valószínűségi következtető rendszereket a hatvanas évek óta használják az MI-ben, különösen az orvosi diagnosztikában. Nemcsak azért, hogy meglevő tényekből következtetéseket vonjanak le, hanem azért is, hogy az információérték-elmélet (lásd  alfejezet) segítségével további kérdéseket és vizsgálatokat válasszanak, amikor a meglevő tények nem meggyőzők (Gorry, 1968; Gorry és társai, 1973). Az egyik rendszer felül is múlta az emberi szakértőket a heveny hasi megbetegedések diagnózisában (de Dombal és társai, 1974). Mindemellett azonban ezekkel a korai bayesi rendszerekkel igen sok gond is volt. Lévén, semmilyen elméleti modellel nem rendelkeztek azokról a körülményekről, amelyeket diagnosztizáltak, sebezhetők voltak mindazon esetekben, amikor olyan helyzetekre jellemző adatok tűntek fel, amelyeket csak kisszámú mintahalmaz képviselt (de Dombal és társai, 1981). Még ennél is alapvetőbb, hogy mivel nem volt tömör leíró módszerük (mint amilyet a  fejezetben ismertetünk) a feltételes függetlenség megjelenítésére és használatára, erősen függtek a hatalmas mennyiségű valószínűségi adat gyűjtésétől, tárolásától és feldolgozásától. E nehézségek miatt 1970-től a nyolcvanas évek közepéig a bizonytalanságkezelés valószínűségi módszerei kegyvesztettek lettek az MI-ben. A nyolcvanas évek vége óta bekövetkezett fejlődést a következő fejezet írja le.
1	0.793103	0	Judea Pearl Probabilistic Reasoning in Intelligent Systems c. műve a valószínűség- és a döntéselmélet MI-n belüli újbóli elfogadását jelezte (Pearl, 1988). Mindez azt követően történt, hogy Peter Cheeseman In Defense of Probability cikkében összefoglalta az érdeklődés újraéledését (Cheeseman, 1985). A Bayes-hálók (Bayesian networks) formalizmusát a bizonytalan tények hatékony ábrázolására és a velük történő szabatos következtetés céljára találták ki. Ez a megközelítés a valószínűségi következtető rendszerek 1960-as és 1970-es években tapasztalt problémáit nagyrészt megoldotta, és ma uralja a bizonytalan következtetésre és a szakértőrendszerekre irányuló MI-kutatásokat. Ez a megközelítés teszi lehetővé a tapasztalatból való tanulást és ez kapcsolja össze a klasszikus MI és a neurális hálók legfontosabb eredményeit. Judea Pearl, továbbá Eric Horvitz és David Heckerman munkája támogatta a normatív szakértőrendszer gondolatát, azaz egy olyan rendszerét, amely a döntéselméleti törvényeknek megfelelően racionálisan cselekszik, és nem kísérli meg az emberi szakértőket imitálni (Pearl, 1982a; Horvitz és Heckerman, 1986; Horvitz és társai, 1986). A Windows^™ operációs rendszer tartalmaz néhány normatív szakértőrendszert a felmerülő hibák javítására. Erről az elgondolásról szól a 13– fejezet.
4	0.916667	1	Legyen K az összes konkáv akadályok csúcsai számának maximuma. Ekkor k = K/2 + 1 lépés mindig elegendő lesz a lokális maximumok elkerüléséhez, ugyanis az előretekintő keresés k lépésben valamelyik irányból biztosan megkerüli az akadályt.
14	0.869565	1	Minden szabályrendszer maximum 3 bemenetet tartalmaz és egy kimenetet, intervallumuk: [0,1]. 19 bemeneti jel van, ezt az 1. szinten 13 fuzzy szabályrendszer dolgozza fel (a fent felsoroltak szerint). Ezeken kívül több szabályrendszer összegzi az eredményeket.  ábra -  ábra  ábra
5	0.181818	1	Ezek után, mivel az értékadás nem okozott inkonzisztenciát, és a KÖVETKEZTETÉS is gond nélkül lefutott, jöhet az algoritmus rekurzív meghívása. Ennek során pedig szokás szerint újra egy behelyettesítetlen változót kell választanunk (mivel a jelenlegi behelyettesítéssel még közel sem járunk a probléma megoldásánál). Tegyük fel, hogy az algoritmus a WA változót választja, és ehhez szokás szerint először a RED értéket rendeli (WA=RED).
25	0.074074	1	A master-slave alapon működő kettő plusz egy karú robot segítéségével realitássá vált a valódi minimális beavatkozással járó sebészet (Minimal Invasive Surgey). Ez azt jelenti, hogy az orvosok a bőrfelszín teljes megnyitása nélkül, mindössze három ponton ejtett bemetszéseken történő behatolással tudnak műteni, miközben endoszkópon keresztül figyelik az eseményeket. A robotot fejlett látórendszerrel és precíziós irányítással látták el, így pontosan követni tudja a műtőorvos minden mozdulatát. Sőt, még bizonyos fokú tremor szűrést is építettek bele, valamint lehetőséget ad a mozdulatok átskálázására, azaz a robot sokkal finomabb mozdulatokat tud végrehajtani, mint amilyenekre az ember képes. Speciális kesztyűk és egyéb eszközök segítségével tudják beolvasni az orvos mozdulatait, amelyeket azután a két kar tökéletesen végrehajt, az eredményt pedig a négy szabadságfokú karra szerelt endoszkóp által közvetített képen követhetik nyomon.
8	0.935484	1	(Megjegyzés: Itt a "Húga" általánosságban lánytestvért jelent, korkülönbségre tekintet nélkül.) * Lánya: ∀x,yLánya(x,y)↔Gyereke(x,y)∧Nő(x)  * Fia: ∀x,yFia(x,y)↔Gyereke(x,y)∧Férfi(x)  * Nagynénje: ∀x,yNagynénje(x,y)↔Nő(x)∧∃z(Gyereke(y,z)∧Testvére(x,z))  * Nagybátyja: ∀x,yNagybátyja(x,y)↔Férfi(x)∧∃z(Gyereke(y,z)∧Testvére(x,z))  * Sógornője: ∀x,ySógornője(x,y)↔Nő(x)∧∃z((Testvére(x,z)∧Házastársa(z,y))∧(Testvé re(y,z)∧Házastársa(z,x))  * Sógora: ∀x,ySógornője(x,y)↔Férfi(x)∧∃z((Testvére(x,z)∧Házastársa(z,y))∨(Tes tvére(y,z)∧Házastársa(z,x))  * Unokatestvére: ∀x,yUnokatestvére(x,y)↔∃a,b(Gyereke(x,a)∧Gyereke(y,b)∧Testvére(a,b) ) 
1	0.137931	1	Harry Foundalis ebből azt a következtetést vonja le, hogy a logikai formulák nem alkalmasak a Bongard problémák megoldására [4]. Az RF4 csak úgy tud hatékonyan működni, ha egy olyan ember készíti el számára az ábrák reprezentációját, aki már tudja a megoldást. Hiányzik belőle az a fontos képesség is, hogy ha zsákutcába ér a program, új nézőpontból vizsgálja meg a problémát.
4	0.916667	0	Pohl elsőként tanulmányozta az A^* algoritmus heurisztikahibája és időigénye közötti összefüggést (Pohl, 1970; 1977). Annak bizonyítása, hogy az A^* algoritmus lineáris időben fut, ha a heurisztikus függvény hibája egy állandó korlát alatt van, Pohl és Gaschnig cikkében található (Pohl, 1977; Gaschnig, 1979). Pearl ennek az eredménynek egy erősebb megfogalmazását adta meg, amely megengedte a hiba logaritmikus növekedését (Pearl, 1984). A heurisztikus keresés hatékonyságát jellemző „effektív elágazási tényező” mértéket Nilsson javasolta (Nilsson, 1971).
2	0.421053	1	Az ágenstechnológia fejlődési iránya a heterogénebb rendszerek, a rendszer tagjaiként és önmagukban egyaránt autonómabb, intelligensebb ágensek felé mutat. Az asszisztensi stb. – „magányos” – alkalmazások és a vizsgált periódus első felében elterjedő multi-ágens megoldások automatikusabbá teszik az ember-gép kapcsolatot: a gépi entitásokra az élet minden területén együttműködő partnereinkként fogunk tekinteni.
5	0.181818	1	Összességében tehát 4 lépésben találtunk megoldást a problémára, így ezzel az előbbi szakaszban tárgyalt kombinált algoritmust is megelőztük (amely 10 lépésben, 7 értékadással és 3 értékkészlet-szűkítéssel talált megoldást). Mondhatnánk tehát, hogy ez a legjobb módszer. Bizonyos esetekben ez így is van, de sajnos nem mindig. Egyrészt még egy ilyen egyszerű probléma esetében is, mint ez a mostani KKP, nem garantált, hogy az algoritmus véges időben talál megoldás. Nagyon kicsi, de mégsem zérus annak a valószínűsége, hogy tetszőlegesen sokáig lépked (habár láttuk, hogy a véletlenszerű választásokat józan változó és érték-választás ellenpontozza). Ez tehát keresési tértől függetlenül fennáll. Viszont, ha a keresési térben ritkán, és egyenetlenül oszlanak el a megoldások (pl. egy hatalmas keresési térben csak egyetlen megoldás van), akkor ez az algoritmus „tűt keres a szénakazalban” jelleggel várhatóan újfent nagyon sokáig bolyongana, mígnem meglelné (ha meglelné) a megoldást. Sőt, mi több, az előző módszerekhez képest ez az algoritmus nem képes arra, hogy szisztematikusan visszaadja nekünk az összes módszert (vagy csak egymás után néhány különbözőt). Természetesen többszöri futtatással akár több megoldás is nyerhető (ha például nem mindig ugyanoda lyukad ki), de több megoldás megtalálásának valószínűsége az egyes megoldások megtalálásának valószínűségével exponenciálisan csökken. Azaz, ha egy-egy megoldás megtalálásának p a valószínűsége (adott számú lépés alatt), és a keresési térben összesen n megoldás van, úgy p az n-ediken annak a valószínűsége, hogy egymás után n futtatás után az összes különböző megoldást megtalálja az algoritmus (adott számú lépésen belül). Látható tehát, hogy több megoldás megtalálásának valószínűsége exponenciálisan csökken. Ez az ára a sebességnek. Ugyanis az előző szakaszokban bemutatott módszerek mind garantáltan, 1-valószínűséggel megtalálták a KKP összes megoldását is akár, viszont ezért általában/átlagosan nagyobb számítási igénnyel fizettünk. Ez a teljesség ára.
5	0.181818	1	Az értékadás az {NSW=RED, Q=GREEN, SA=BLUE} konzisztens behelyettesítést eredményezi, így jöhet az előretekintés. Ennek során az előbbi SA=BLUE értékadásnak megfelelően az SA változó még behelyettesítetlen szomszédainak értékkészletéből töröljük a BLUE értéket, azaz a WA, NT, és V változók értékkészletét redukáljuk megfelelőképpen.
8	0.193548	0	azt jelenti egy korábban megadott szándékolt interpretáció szerint, hogy Oroszlánszívű Richárd testvére János királynak.^[78] Az atomi mondatoknak is lehetnek összetett termek az argumentumai. Így tehát a
22	0.037037	0	Minden szólásaktus befolyásolja a világot a levegőmolekulák rezgetésével (vagy ekvivalens hatással más médiumban), és ily módon megváltoztatja más ágensek mentális állapotát, valamint végső fokon a jövőbeli cselekedeteiket is. Bizonyos szólásaktusok információt juttatnak a hallgatóhoz, feltételezve, hogy a hallgató döntéshozatalát megfelelően befolyásolja az információ. Mások sokkal célzottabban késztetik a hallgatót valamilyen cselekvés véghezvitelére. A szólásaktusok további osztálya a deklaratív (declarative), amely sokkal közvetlenebb hatást gyakorol a világra: férjnek és feleségnek nyilvánítom önöket vagy Harmadik találat, ön kiesett. Természetesen a hatást az érintett ágensek mentális állapotai komplex hálózatának létrehozása vagy tudomásulvétele éri el: házasnak lenni vagy kiesni, olyan állapotok, amelyeket megállapodások rögzítenek és nem a világ „fizikai” jellemzői.
1	0.551724	1	A DENDRAL szerves molekula szerkezet azonosítására készített szakértői rendszer, olyan eszköz, amely probléma specifikus ismeret megértésére képes és intelligensen használja a tématerület ismeretanyagát egy tevékenység különböző megvalósítási útjainak felvetéséhez. A szakértőrendszerek nem csak az ismeretátadás technikáit alkalmazzák, hanem elemző eszközöket és tanulási technikákat is.
25	0.148148	1	A szerszámközépponthoz rendelt koordináta-rendszerből a bázis koordináta-rendszerbe történő leképezés úgy kapható meg, ha a szerszámközéppontba elhelyezet koordináta-rendszert a megelőző koordináta-rendszerbe képezzük le, majd lépésenként visszafelé hajtjuk végre a transzformációkat. Az A ¯ ¯ 0,n  transzformáció a szerszámközépponthoz rendelt, L[n] koordináta-rendszert a 0 indexű bázisba képezi le. Ezt a transzformációt gyakran karmátrixnak is nevezik:
1	0.931034	0	Az MI-kutatások kezdetétől a Feigenbaum és Feldman Computers and Thought (Feigenbaum és Feldman, 1963) és a Minsky Semantic Information Processing (Minsky, 1968) című művekben, továbbá a Donald Michie által szerkesztett Machine Intelligence sorozatban lehet olvasni. Webber és Nilsson (Webber és Nilsson, 1981) és Luger (Luger, 1995) nagy hatású cikkekből állítottak össze antológiákat. A Neurocomputing (Anderson és Rosenfeld, 1988) a neurális hálókkal foglalkozó korai cikkek gyűjteménye. Az Encyclopedia of AI (Shapiro, 1992) majdnem minden MI-témáról tartalmaz egy áttekintő cikket. Ezek a cikkek általában jó kiindulópontok az egyes témakörök kutatásával foglalkozó irodalomhoz.
25	0.074074	1	Ezt a robotot eredetileg szívsebészet (CABG: coronary artery bypass grafting) céljára fejlesztették ki, 2005-ben a da Vincivel közel két és fél ezer ilyen és más jellegű szívműtétet végeztek. Szinte alig van olyan sebészi szakma, ahol ne próbálták volna már használni (4.sz ábra).  ábra - A da Vinci-vel végrehajtott beavatkozások éves száma világszerte [Intuitive Surgical Inc.] A da Vinci-vel végrehajtott beavatkozások éves száma világszerte [Intuitive Surgical Inc.]
20	0.642857	0	Az aktivációs függvénnyel szemben két elvárásunk van. Először az, hogy az egység legyen „aktív” (+1 körüli kimenet), ha a „helyes” bemeneteket kapja, és „inaktív” (0 körüli kimenet), ha „rossz” bemeneteket kap. Másodszor az, hogy az aktiváció legyen nemlineáris, különben az egész neurális háló egy egyszerű lineáris függvénnyé fajul (lásd  feladat). A  ábra kétféle aktivációs függvényt mutat be: a küszöbfüggvényt (threshold function), illetve a szigmoid függvényt (sigmoid function) (mely utóbbi logisztikus függvényként [logistic function] is ismert). A szigmoid függvény előnye, hogy differenciálható, ami – mint később látni fogjuk – fontos a súlytanulási algoritmus szempontjából. Vegyük észre, hogy mindkét függvénynek van egy küszöbpontja (akár kemény, akár lágy) a nullánál; az eltolássúly állítja be az egység aktuális küszöbpontját. Ez azt jelenti, hogy az egység akkor aktiválódik, ha a „valódi” bemenetek súlyozott összege  meghaladja W[0,i]-t.
4	0.958333	0	A 4. szakasz - A mohó legjobbat-először keresés részben láttuk, hogy a légvonalban mért távolságheurisztika a mohó legjobbat-először keresést félrevezeti, amikor Iaşiról Fogarasra szerettünk volna eljutni. Az ellenkező problémára azonban, vagyis amikor Fogarasról Iaşira szeretnénk eljutni, a heurisztika tökéletes. Léteznek olyan problémák, amelyek esetében a heurisztika mindkét irányban félrevezet bennünket?
6	0.9	1	Itt, ha a kiértékelési sorrend optimális, akkor először azt az ágat vizsgáljuk meg, ahol az első X középre kerül. Ekkor rögtön megtaláltuk a maximális M=1 értéket az első szintre, így ha bármely második szinten lévő csomópontban ennél kisebb értéket találunk, akkor azt az egész ágat levághatjuk az első szinttől kezdve. Ez azt jelenti, hogy az ábrán a középső oszlopot és a többi oszlopból egy-egy csomópontot leszámítva mindent be kéne karikázni. Igazam van?
15	0.185185	0	A szűrésen és az előrejelzésen túl, felhasználhatjuk az előrehaladó rekurziót egy bizonyítéksorozat P(e[1:t]) valószínűségének a kiszámítására is. Ez egy hasznos mennyiség, ha különböző időbeli modelleket szeretnénk összehasonlítani, amelyek ugyanazt a bizonyítéksorozatot állíthatták elő; például a  alfejezetben különböző szavakat hasonlítunk össze, amelyek ugyanazt a hangsort állíthatták elő. Ehhez a rekurzióhoz felhasználjuk az ℓ[1:t] = P(X[t], e[1:t]) valószínűségi (likelihood) üzenetet. Egyszerű feladat azt megmutatni, hogy
14	0.826087	0	Mind a hibrid Bayes-hálós megközelítés, mind a valószínűségi halmaz megközelítés úgy tűnik, hogy modellezi a meghatározatlanság egyes vetületeit bizonyosságok felhasználása nélkül. Mindazonáltal számos megválaszolatlan kérdés van a nyelvi megfigyelések és folytonos mennyiségek helyes reprezentációjával kapcsolatban, amely kérdésekkel a fuzzy kutatói közösségen kívül a többség nem foglalkozik.
26	0.714286	0	A bekövetkező szingularitásról író Vinge-et rémíti ez a lehetőség, de más számítógéptudósok és futuristák örömmel várják. Hans Moravec a Robot: Mere Machine to Transcendent Mind c. írásában azt jósolja, hogy a robotok ötven éven belül elérik az emberi intelligenciát, majd pedig meghaladják azt. Ezt írja:
5	0.818182	0	Az alapvető visszaugró módszer John Gaschnigtől (Gaschnig, 1977; 1979) származik. Kondrak és van Beek (Kondrak és Van Beek, 1997) megmutatták, hogy ezt az algoritmust lényegében magában foglalja az előrenéző ellenőrzés. A konfliktusvezérelt visszaugrást Prosser (Prosser, 1993) alakította ki. Az intelligens visszalépés legáltalánosabb és legerősebb formáját tulajdonképpen már nagyon korán kifejlesztette Stallman és Sussman (Stallman és Sussman, 1977). Technikájuk, a függőségvezérelt visszalépés (dependency-directed backtracking) az igazság-karbantartó rendszerek (truth maintenance systems) kifejlesztéséhez vezetett (Doyle, 1979), amelyekkel a  alfejezetben foglalkozunk. A két terület közti kapcsolatot De Kleer (De Kleer, 1989) vizsgálta.
4	0.958333	0	 Megjegyzés Az utazó ügynök problémát (TSP) meg lehet oldani a minimális feszítő fa (MFF) heurisztika alkalmazásával, ami feltételezve, hogy már egy részútvonalat megterveztünk, megbecsüli az útvonal befejezésének költségét. A városok egy halmazának MFF-költsége az összes várost összekötő fák minimális élköltségösszege. a. Mutassa meg, hogy ez a heurisztikus függvény hogyan származtatható a TSP relaxált változatából! b. Mutassa meg, hogy az MFF-heurisztika dominálja a légvonalban mért távolságheurisztikát! c. Írjon egy problémagenerátort a TSP-problémára, amely olyan problémaegyedeket generál, amelyben a városokat az egységnégyzeten belüli véletlen módon generált pontok reprezentálják! d. Keressen hatékony módszert az irodalomban az MFF megszerkesztésére, és használja azt egy elfogadható keresési algoritmussal a TSP-probléma egyedeinek a megoldására!
15	0.074074	0	Gondoljuk át a következő leegyszerűsített példát: tegyük fel, hogy egy titkos, földalatti létesítmény biztonsági őrei vagyunk. Szeretnénk tudni, hogy vajon aznap esik-e, de a külvilághoz való egyetlen hozzáférésünket az jelenti, hogy reggelenként látjuk, hogy az igazgató esernyővel vagy esernyő nélkül jön be. Minden egyes t napon az E[t] halmaz így egyetlen bizonyítékváltozót tartalmaz, az U[t]-t (van-e esernyő), és X[t] az R[t]-t, az egyetlen állapotváltozót tartalmazza (esik-e). Más problémákhoz változók nagyobb halmaza tartozhat. A cukorbetegség példájában a bizonyítékváltozók lehetnek a MértVércukor[t]és a Pulzusszám[t], és az állapotváltozók lehetnek a Vércukor[t] és a Gyomortartalom[t].^[156]
5	0.181818	1	 ábra - 6. lépés: az előbbi, SA=BLUE értékadás következményeként a BLUE érték eltávolítása a WA, NT, és V változók értékkészletéből az előretekintés miatt 6. lépés: az előbbi, SA=BLUE értékadás következményeként a BLUE érték eltávolítása a WA, NT, és V változók értékkészletéből az előretekintés miatt
27	0.4	1	… programja kellően nagy teljesítményű számítógépen futtatva a kamerája és beavatkozói, továbbá a futószalag, a raktár, a dobozok, illetve az érkező alkatrészek adottságai mellett várhatóan maximalizálja a megfelelő dobozba helyezett alkatrészek arányát.
3	0.083333	1	Lehetséges-e azoknál rövidebb megoldás? Erre igazi választ mégis a szélességi keresésnek teljes körű lefuttatása jelentene, megfigyelve, hogy milyen szinten fut rá első ízben valamelyik (nem szükségképpen kizárólagosan (0, 1)-re) célállapotra (ill. a célállapotból indítva, a kezdeti állapotra).
1	0.068966	1	Az első pont kifejtésénél Minsky a következő példát hozza: ha egy gyereknek azt mondjuk, hogy „Én most hazudok”, és elég idős ahhoz, hogy elkezdje végiggondolni az állítást, akkor nem fogja tudni eldönteni, hogy az állítás igaz, vagy hamis, és akármennyit gondolkodik rajta, nem fogja tudni, hogy mit kezdjen egy ilyen állítással. A probléma az, hogy fiatal korban még hozzá van szokva, hogy egy állításról eldönthető, hogy az igaz, vagy hamis, és a józan ész pont ezt diktálja neki. Pont az ilyen hibás előfeltevések miatt, mint ez, van probléma a józan ész használatával. Az előfeltevések eleve hibásak lehetnek, minden következtetés során lehetséges, hogy hibát követünk el, és így lehet, hogy soha nem is jutunk egy helyes következtetésre. A probléma az igazsággal van. Hogyan tudjuk valamiről eldönteni, hogy igaz? A legjobb logika eredménye is csak annyira lehet jó, mint amennyire az alapfeltevései. A matematikában ez nem probléma, mivel ott vannak egyértelmű axiómák, amiből minden mást származtatnak, de az életben ez nem ilyen egyszerű. Az életben csak nagyon kevés olyan dolog van, amire egyértelműen azt mondhatjuk, hogy igaz. A probléma akkor jelentkezik, ha kiderül valamiről, hogy nem igaz. Ha egy régi feltevésről kiderül, hogy nem igaz, akkor törölni kell minden olyan következtetést amihez ezt a feltevést felhasználtuk? Ez a kérdés a Mesterséges Intelligenciáknál is helytálló, nem mindegy, hogy ebben az esetben az összes lehetséges végkifejletet újra kell számolni, vagy csak feltételezzük, hogy azok helytállóak, és az új ismereteket csak a következő számítások során használjuk fel. Az életben az ember saját döntésén múlik, hogy ha valakit hazugságon ér, akkor abban soha többet nem bízik, és elfelejt mindent amit eddig attól az embertől hallott, vagy ezt egyedi esetnek tekinti. Ugyanez a probléma jelentkezik például nagyobb irányító logikák esetében; ha kiderül, hogy az egyik megfigyelő egység hibás eredményt szolgáltatott, akkor törölni kell minden eddigi adatot, és figyelmen kívül hagyni az összes következő jelentést, vagy egyszeri hibának kell tekinteni? Erre a kérdésre is egy megfelelően fejlett Mesterséges Intelligenciának kell megtalálnia a választ. Mindezeket a kérdéseket pedig egy olyan egyszerű vicc vetette fel, mint például az, hogy „Ez az állítás hamis”. A vicceknek tehát, azok közül is főleg a logikai következtetésekre épülőknek fontos szerepük van a megismerési folyamataink hibáinak feltárásában, és ezzel elősegítik a mesterséges rendszerekkel kapcsolatos elvárások pontosítását, az ott előfordulható hibák előrejelzését, illetve azok elhárítását.
21	0.125	1	Generatív modellek esetén megoldható, hogy a verziótér elemeit mintavételezzük a P(M|L) eloszlás szerint, ahol M a modellt, míg L az eddig címkézett mintákat jelöli. Nem generatív modellek esetén alkalmazható a boosting, vagy a bootstrap (bagging) eljárás. Boosting során minden egyes lépésben egy újraszámított eloszlás alapján mintavételezünk a minták közül, ahol a lépésenként újraszámított eloszlást úgy alakítja az algoritmus, hogy a félrecímkézett mintákat nagyobb valószínűséggel rendelkezzenek. A bootstrap eljárás során minden lépésben egy új, az eredeti adathalmaznál kisebb adathalmazt generálunk úgy, hogy minden mintát azonos valószínűséggel választunk be az új adathalmazba, akár ismétléssel. Az új adathalmazokon aztán lehetséges modellek tanulása és a tanult modelleket felhasználhatjuk a kettes pontban említett mértékhez [4].
5	0.181818	1	A FOR-cikluson belül elhelyezett IF feltétel-vizsgálat azonban jelzi, hogy az így létrejött {NSW=RED, WA=RED, NT=RED} behelyettesítés ellentmond a KKP probléma korlátainak, nevezetesen az 1-es számú korlátnak, amely szerint WA és NT különböző színű kell, hogy legyen.
19	0.5	0	A   típusú mondatok szigorú relevanciát fejeznek ki: a nemzetiség teljesen meghatározza a nyelvet. Másképpen fogalmazva: a nyelv a nemzetiség függvénye. Az ilyen mondatokat funkcionális függőségeknek (functional dependencies) vagy meghatározásoknak (determinations) nevezzük. Bizonyosfajta alkalmazásoknál (például az adatbázisrendszer-tervek specifikálásánál) ezek annyira általánosan fordulnak elő, hogy a felírásukhoz speciális szintaxist használnak. Davies (Davies, 1985) jelölésével élve:
10	0.606061	0	E boltok termékeit termékkategóriákba sorolják, és a fő kategóriákhoz linkeket biztosítanak a honlaptól kiindulva. Kisebb kategóriákat a releváns linkek láncának követésével lehet elérni, és végül az ajánlatokhoz is eljutunk. Más szóval, egy lap a lekérdezés szempontjából releváns, ha a bolt honlapjától a releváns kategóriakapcsolat láncán át elérhető, és egy további link követésével a termékajánlathoz is eljutunk:
14	0.869565	1	Vizsgált paraméterek: * Az ún. Böcking- algoritmus szerinti 2c deviációs index (2cDI) * 5c feletti sejtarány (5cER) * Az átlag DNS tartalom * A G[1 ]fázisú sejtek aránya * Az S fázisú sejtek aránya * A G[2 ]fázisú sejtek aránya * A kenetenkénti átlagos sejtmagterület * A sejtmag forma faktora
12	0.571429	0	A Mozgat(C, D) újra készen áll a végrehajtásra. Ez alkalommal működik, ami a célállapotot eredményezi, melyet a  ábra (d) része mutat. Miután egy lépést elhagyunk a tervből, a Rajta(C, D) célfeltétel újra nyitottá válik. Mivel az Indít lépést frissítettük, hogy tükrözze az új állapotot, a célfeltétel azonnal kielégíthető egy kapcsolattal az Indít lépésből. Ez az események normális folyása, ha egy cselekvés sikeres. A végleges tervállapotot a  ábra mutatja. Mivel az Indít lépés az összes célfeltételt kielégíti, és nincsenek hátralevő cselekvések, az ágens szabadon eltávolíthatja a Befejez állapot céljait, és új célokat fogalmazhat meg.  ábra - A Mozgat(C, D) végrehajtása és tervből eltávolítása után a Rajta(C, D) megmaradt nyitott feltételt az Indít lépésből induló okozati kapcsolat hozzáadásával oldjuk fel. A terv most teljes. A Mozgat(C, D) végrehajtása és tervből eltávolítása után a Rajta(C, D) megmaradt nyitott feltételt az Indít lépésből induló okozati kapcsolat hozzáadásával oldjuk fel. A terv most teljes.
14	0.086957	1	A fogalomalkotás (kategorizáció) mellett az oksági kapcsolatok felfedezése számít a megismerési folyamatok másik alapkövének. Fontosságát az mutatja, hogy míg például egy predikciós modell egy adott kontextusban érvényes és passzív megfigyelések alapján előrejelzésre szolgálhat, addig egy oksági kapcsolat (mechanizmus, törvényszerűség) egyrészt autonóm, azaz más kontextusban is előfordulhat mint stabil, moduláris elem, másrészt beavatkozások modellezésére is szolgálhat.
10	0.848485	0	Egy alapértelmezett szabály jelentésének interpretálásához az alapértelmezett elmélet kiterjesztését (extension) kell definiálnunk, az elmélet konklúzióinak maximális halmazaként. Egy S kiterjesztés tehát az eredetileg ismert tényekből és az alapértelmezett szabályokból levont konklúzióhalmazból áll úgy, hogy S-ből semmilyen más konklúziót levonni már nem lehet, és S-beli alapértelmezett konklúzió minden igazolása S-sel konzisztens. A körülírásban tárgyalt preferált modellekhez hasonlóan a Nixon-gyémántra két lehetséges kiterjesztésünk van: egy, amelyben pacifista és egy, amelyben nem az. Léteznek prioritásos sémák, ahol egyes alapértelmezett szabályoknak precedenciát lehet biztosítani más szabályokkal szemben, és ezzel a nem egyértelmű helyzeteket valamelyest fel lehet oldani.
6	0.1	1	A később ismeretett Sprague–Grundy-tétel segítségével egy állásról el tudjuk dönteni, hogy az jó-e vagy sem, ám ebben az esetben a nyerő lépések megtalálása egyáltalán nem triviális feladat. A probléma mélyebb vizsgálata túl messzire vezetne, így megelégszem a játék megemlítésével. Bővebb ismertetés a fent említett Diszkrét matematikai játékok című könyvben, valamint a [13] könyvben található.
25	0.333333	0	Azzal kell kezdenünk, hogy keresünk egy megfelelő reprezentációt, amely alkalmas a mozgástervezési problémák leírására és megoldására. Kiderül, hogy a konfigurációs tér (configuration space) – a robotállapotok tere, amelyet a pozíció, az orientáció és a csuklószögek definiálnak – alkalmasabb a feladatra, mint a 3D tér. A pályatervezés (path planning) azt jelenti, hogy meg kell találni az egyik konfigurációtól egy másikig vezető utat. A korábbi fejezetekben már számos úttervezési módszert vázoltunk fel. A robotikában az úttervezés legfőbb jellemvonása az, hogy folytonos terekkel dolgozik. A szakirodalom számos különböző technikát tart számon, amelyek kifejezetten olyan esetekre alkalmazhatók, ahol a cél útvonalak keresése sokdimenziós folytonos terekben. Két fő megközelítés létezik: a celladekompozíció (cell decompisition) és a szkeletonizáció (skeletonisation). Mindkettő diszkrét gráf keresési feladatra vezeti vissza és egyszerűsíti le a folytonos útkeresési problémát azáltal, hogy kanonikus állapotokat és pályákat ír le a folytonos térben. Ebben a fejezetben végig feltételezzük, hogy a mozgás determinisztikus, és a robot helybéli azonosítása egzakt. A későbbi fejezetek gyengíteni fogják ezeket a feltételezéseket.
23	0.333333	1	A ROC ábra egyszerű, grafikus módon becslést ad a diagnosztikai teszt hatékonyságára. Az elemzéshez rendelkezésre álló adatok gyakoriságától független, nem szükséges, hogy a beteg és az egészséges csoport egyedeinek száma azonos legyen. Nem kell megadni egy speciális döntési szintet, mivel a ROC ábra magában foglalja a döntési szintek teljes spektrumát. Több teszt szemléletes összehasonlítására is alkalmazható egy ábra, míg ha a hagyományos hisztogramokkal vagy vonaldiagramokkal történik a teszt eredmények prezentálása, akkor több ábrát is kell készíteni, ha a mértékegységek eltérőek. A ROC görbe készítésekor az adatok csoportosítása elmarad, szemben a hisztogramok alkalmazásával. A ROC ábra előállításakor kapunk információt a diagnosztikai teszt szenzitivitásáról (érzékenységéről) és specificitásáról (specifikusságáról), ami nem mondható el a teszt eredmények hagyományos szemléltetési módjai esetében.
2	0.473684	0	Nyilvánvalóan a kiválasztott programunknak olyannak kell lennie, ami megfelelő az architektúra számára. Ha a program például Sétál jellegű akciókat fog javasolni, akkor jobb, ha az architektúrának vannak lábai. Az architektúra lehet egyszerű számítógép, vagy lehet egy robotautó számos fedélzeti számítógéppel, kamerával és más érzékelőkkel. Általánosságban az architektúra a szenzoroktól érkező észleléseket elérhetővé teszi a program számára, futtatja a programot, és cselekvéseit létrejöttük pillanatában a beavatkozók felé továbbítja. E könyv túlnyomó része az ágensprogramok tervezéséről szól, bár a 24. és  fejezet kifejezetten az érzékelőkkel és a beavatkozókkal foglalkozik.
6	0.75	0	A GIB program (Ginsberg, 1999) meggyőző fölénnyel nyerte meg a 2000. évi bajnokságot. A GIB a „jövőbe látás szerinti átlagolás” módszerét használja, két lényegi módosítással. Először, ahelyett hogy megvizsgálná, hogy egy adott választás mennyire bizonyul jónak a rejtett kártyák minden lehetséges kombinációja mellett (amiből 10 millió is lehet), a program egy véletlenszerűen választott 100 kombinációból álló mintát vizsgál. Másodszor, a GIB magyarázatalapú általánosítást (explanation-based generalization) használ arra, hogy különféle standard helyzetekre az optimális játékvezetés általános szabályait kiszámítsa és eltárolja. Ez lehetővé teszi minden leosztás egzakt megoldását. A GIB taktikai pontossága ellensúlyozza azt, hogy az információra következtetni nem tud. Az 1998-as emberi világbajnokságon az egyenlő rangú mérkőzésen (egy leosztás lejátszásában) 35-ből 12-ikként végzett, az emberi szakértők elvárásait messze túlszárnyalva.
5	0.181818	1	Mivel az így előálló {NSW=RED, WA=GREEN, NT=RED} behelyettesítés sem mond ellent a KKP korlátainak, ezért újabb rekurzív hívás után az eddigiekhez hasonlóan a Q változóra kerül a sor, és azon belül elsőként a RED értéket társítja hozzá az algoritmus (Q=RED).
2	0.210526	1	A versengéses tanulás a neurális hálózatok önszerveződő működésének tipikus formája, ezért az előadás ismerteti a klasszikus „győztes visz mindent” és „oldalirányú gátlás” algoritmusait, valamint a klasszikus „Kohonen” hálózat jellemzőit és alkalmazási tanulságai.
11	0.461538	0	Most nézzük meg, hogy az RRT hogyan oldja meg a  alfejezetben szereplő pótkerék problémát. A probléma a leírását a  ábrán megismételjük.  ábra - Az egyszerű kerékcsere probléma Az egyszerű kerékcsere probléma
8	0.387097	0	azt mondja ki, hogy az Apja(János) által hivatkozott objektum és a Henrik által hivatkozott objektum azonos. Mivel az interpretáció rögzíti bármely term referenciáit, egy egyenlőségi állítás igazságának megállapításához elegendő azt látni, hogy a két term referenciái ugyanazok az objektumok.
12	0.47619	0	Most arról kell döntenünk, hogy az érzékelés hogyan működik. Itt két választásunk van. Használhatunk automatikus érzékelést (automatic sensing), ami annyit tesz, hogy az ágens minden időlépésben az összes elérhető érzetet megkapja. A  ábrán látható példa a helyzet és a helyi tisztaság meghatározására automatikus érzékelést feltételez. Használhatunk ellenben aktív érzékelést (active sensing), ami annyit jelent, hogy az érzékelt információk csak megadott érzékelési cselekvések (sensory actions), (mint TisztaságEllenőrzés és PozícióEllenőrzés) végrehajtásával nyerhetők. Az érzékelési típusokat sorban tárgyalni fogjuk.
7	0.36	0	Az első fogalom a logikai ekvivalencia (logical equivalence): két mondat, az α és a β mondatok logikailag ekvivalensek, ha ezek a mondatok a modellek ugyanazon halmazán igazak. Ezt úgy jelöljük, hogy α ⇔ β. Például (igazságtáblákat használva) könnyen megmutathatjuk, hogy P ∧ Q és Q ∧ P logikailag ekvivalensek; további ekvivalenciák láthatók a  ábrán. Az ekvivalenciák nagyon hasonló szerepet játszanak a logikában, mint az aritmetikai identitások a közönséges matematikában. Az ekvivalencia alternatív definíciója a következő: bármely két α, β mondatra,
18	0.736842	1	Azaz w 1 (f) =−2   és  w 2 (f) =1  . Ez az x[1]-x[2] síkon egy egyenesnek felel meg: x 2 −2 x 1 =0  ⇒   x 2 =2 x 1  , az egyenes egyik oldalán lévő félsíkra eső pontokat az egyik, a másik félsíkra eső pontokat a másik osztályba kell sorolnunk. A hipotézisterünk álljon összesen 6 hipotézisből (az első az igazi, hibátlan hipotézis h[1]=f):
19	0.545455	1	Tekintsünk példáként a következő esetet: adott egy eset-kontroll vizsgálat adathalmaza, melyben minden minta egy-egy pácienstől származik. A minták fel lettek címkézve (C – címke vagy más néven osztályváltozó) aszerint, hogy az adott páciens szenved-e a vizsgált betegségben (C=1) vagy sem (C=0). A mintákon lemértek számos klinikai (pl.: fehérvérsejtszám) és genomikai paramétert (pl.: rendelkezik-e egy bizonyos mutációval), ezek lesznek a bemeneti jegyek (jelen esetben változók). A modellépítés egyik leggyakoribb célja a bemeneti jegyek összefüggésrendszerének olyan módon történő megragadása, amely a leginkább lehetővé teszi a minták címkék mentén történő csoportra bontását, azaz osztályozását. (A másik gyakori célja, különösen a bioinformatikai alkalmazásokban, a tárgyterületi exploráció, azaz hangsúly nem egy osztályozó építésén, hanem a bementi jegyek egymás közötti és az osztályváltozóval való kapcsolatainak feltárásán van.) Az említett példa esetében ez azt jelenti, hogy a klinikai és genomikai paraméterekből építünk valamilyen technikával egy modellt, melynek célja a minták megfelelő osztályozása. Ennek kapcsán két alapvető szempontot kell megemlíteni: a modell jóságát, melynek objektív mérésére számos módszer áll rendelkezésre [4]; másfelől a modellkomplexitást. Egyfelől két közel azonos teljesítményű modell közül célszerű az egyszerűbbet választani, másfelől egyes esetekben egy szerényebb teljesítményű, de egyszerűbb modell lehet, hogy használhatóbb, mint egy kiváló teljesítményű, de túl komplex modell.
1	0.482759	0	A modern nyelvészet és az MI nagyjából ugyanabban az időben „született meg” és együtt fejlődött, a nyelv használatára összpontosító számítógépes nyelvészetnek (computational linguistics) vagy természetes nyelvfeldolgozásnak (natural language processing) nevezett hibrid területen találkozva egymással. A nyelv megértésének problémája rövidesen sokkal bonyolultabbnak bizonyult, mint ahogy ez 1957-ben látszott. A nyelv megértéséhez meg kell érteni a témát és a kontextust is, nem elegendő ehhez a mondat struktúrájának a megértése. Ez persze triviálisnak tűnhet, azonban az 1960-as évekig mégsem volt általánosan elfogadott. A tudásreprezentációhoz (knowledge representation) – amely annak a kutatása, hogy a tudást hogyan fejezzük ki a számítógép által feldolgozható formában – tartozó kezdeti kutatások zöme a nyelvhez kötődött és a nyelvészeti kutatásokból táplálkozott, azok viszont a nyelv évtizedes filozófiai elemzéseivel voltak kapcsolatban.
9	0.931034	1	 A rezolúció változókkal való lekérdezésekre létrehozhat nem konstruktív bizonyításokat, ezért egy speciális eljárást kell bevezetnünk a definit válaszok kinyerésére. Magyarázza meg, hogy ez a probléma miért nem merül fel csak definit klózokat tartalmazó tudásbázisokkal!
6	0.9	0	Az alfa-béta keresés alapötletét John McCarthy dolgozta ki 1956-ban, habár nem publikálta. Az NSS-sakkprogram az alfa-béta algoritmus egy leegyszerűsített változatát használta, ez volt az első sakkprogram, ami ezt alkalmazta (Newell és társai, 1958). Nilsson szerint Arthur Samuel dámaprogramja (Samuel, 1959; 1967) szintén alfa-béta algoritmust használt, habár maga Samuel ezt nem említi a rendszerről publikált beszámolóiban (Nilsson, 1971). Az 1960-as évek elején jelentek meg az alfa-béta algoritmust ismertető cikkek (Hart és Edwards, 1961; Brudno, 1963; Slagle, 1963b). Az alfa-béta algoritmus egy teljes implementációját Slagle írta le egy cikkben (Slagle és Dixon, 1969), ami a kalah^[59] játékot játszó játékprogram működését ismertette. A John McCarthy egyik diákja által írt „Kotok–McCarthy” sakkprogram (Kotok, 1962) is az alfa-béta algoritmust használta. Knuth ismerteti az alfa-béta algoritmus történetét (Knuth és Moore, 1975), megadja az algoritmus teljességének a bizonyítását és elvégzi az időigény elemzését. Knuth és Moore elemzése az alfa-béta keresésnek a követők véletlen sorba rendezésével O((b/logb)^d) aszimptotikus komplexitást mutatott ki, ami lehangoló eredmény, mert a b/logb effektív elágazási tényező magánál a b-nél nem sokkal jobb. Később jöttek rá, hogy az aszimptotikus képlet csak a b > 1000 igaz, és az aktuális játékokra található elágazási tényezőkre a gyakran idézett O(b^3d/4) érvényes. Pearl megmutatta (Pearl, 1982b), hogy az alfa-béta algoritmus aszimptotikusan optimális az összes rögzített mélységű játékfa-keresési algoritmus között.
10	0.757576	0	Az előbbi alfejezetben láttunk egy egyszerű példát egy alapértelmezett státussal rendelkező állításra: „az embereknek két lába van”. Ezt az alapértelmezett értéket specifikusabb információval, mint például „a Kékszakállúnak egy lába van”, felülírhatjuk. Láttuk, hogy a szemantikus háló öröklődési mechanizmusa az alapértelmezett értékek felülírását egyszerű és természetes módon oldja meg. Ebben a részben az alapértelmezett értékeket mélyebben tanulmányozzuk annak érdekében, hogy az alapértelmezett értékek szemantikáját alaposabban megértsük, és ne szorítkozzunk csupán a procedurális mechanizmus megadására.
4	0.916667	1	A legjobbat-először keresés elve igen egyszerű: az aktuális csúcs esetén megvizsgálunk minden legális cselekvéssel elérhető csúcsot, és kiválasztjuk ezek közül azt, amely várhatóan a legközelebb visz a célhoz. Az, hogy létezik összehasonlítási módszer, gyakorlatilag azt jelenti, hogy az egy csúcsból elérhető csúcsok halmaza rendezett, tehát létezik egy rajtuk értelmezett rendezési reláció, amely reflexív (A≤A), antiszimmetrikus (ha A≤B és B≤A, akkor A=B) és tranzitív (ha A≤B és B≤C, akkor A≤C). Az, hogy az összehasonlítás „jó”, azt jelenti, hogy a rendezés teljes, azaz bármely két csúcs esetén vagy A≤B vagy B≤A igaz (esetleg mindkettő). Viszont ha egy halmaz teljesen rendezett, akkor szükségképpen van maximuma, vagyis olyan X halmazbeli elem, amelyre igaz, hogy bármely halmazbeli A-ra A≤X. Ez az X lesz az, amelyet a best-first algoritmusnak ki kell választania.
5	0.181818	1	* Először is a lokális keresés (MC) még 1001 lépésben sem találta meg a megoldást. Látszik, hogy nagyságrendileg 1-1 lépés időigénye nagyjából a többi módszeréhez hasonlítható, viszont még 1001 lépés sem volt elég ebben a nagy keresési térben, ahol csak egyetlen megoldás van ahhoz, hogy az algoritmus e megoldást meglelje. Olyankor használható tehát jól ez az algoritmus, amikor sűrűn, és lehetőleg egyenletesen oszlanak el a megoldások a keresési térben. * Az MC utáni 8 sor mind AC3/MAC alapú következtetéssel ellátott visszalépéses mélységi keresések futására vonatkozik, ahol csak a heurisztikák típusát variáltuk. Ezekből látszik, hogy egyrészt az MRV heurisztikával együtt használva a DEG lassította a futást, viszont a DEG és az LCV heurisztikák együttes használatának hiánya számottevően növelte a lépésszámot (nagyjából a másfélszeresére). Egyébként ettől eltekintve mindegyik AC3/MAC alapú módszer igen hamar (kb. 10-15ms alatt) megtalálta a megoldást. Ebből az látszik, hogy az AC3/MAC alapú következtetés nem a jelenlegi probléma esetén nem volt érzékeny a heurisztikák megválasztására (nagyjából mindegy, hogy mit használunk, vagy hogy használunk-e egyáltalán valamit). * Az AC3/MAC-es sorok után következő 8 sor az előretekintéssel kiegészített visszalépéses mélységi keresés különböző futtatásait foglalja össze a bemutatott Zebra feladványon. Itt lényegében az látszik, hogy az előretekintés MRV heurisztika nélkül nem tudta kivárható időn belül (azaz pár órán belül) megoldani a problémát. Ezen felül az is látható, hogy az MRV heurisztikán túli további heurisztikák használata csak a futási időt, és a lépésszámot növelte (és ezek közül az LCV heurisztika tűnik a legkevésbé hasznosnak). Nem meglepő, hiszen az előretekintéshez leginkább az MRV heurisztika illeszkedik, ahogyan ezt már az MRV heurisztikát bemutató szakaszban is ecseteltük. * A táblázat utolsó sorában a következtetési módszerek nélkül, ámde heurisztikákkal, vagy akár heurisztikák nélkül futtatott visszalépéses mélységi keresés eredményeit összegeztük: a lényeg, hogy teljesen mindegy, hogy milyen heurisztikával próbálkozunk (a fentebbi készletből), vagy hogy miként kombináljuk őket, a visszalépéses mélységi keresés valamiféle következtetés nélkül kivárható időn belül nem tudja megoldani az előzőekben ismertetett Zebra feladványt. Ezek persze lehetne javítani az implementáció, vagy a futtató környezet optimalizálásával, illetve esetleg még a korlátok leíró nyelv kifejező erejének növelésével, és így a korlátok számának drasztikus csökkentésével, de a többi módszerhez viszonyítva a teljesítményben megmutatkozó arányok várhatóan változatlanok lennének, azaz a visszalépéses keresés önmagában a legrosszabb választás, ami végülis nem meglepő.
19	0.954545	1	A mérőműszerek pontosságát, vagyis a véletlen hiba mértékét vizsgálhatjuk a pontosságkontroll – anyagokkal. Hosszabb időintervallumban (legalább 20-30 nap) ugyanazt a kontrollanyagot a rutinminták között napi több párhuzamosban elhelyezik és a vizsgált mintakomponens(ek) koncentrációértékét lemérik, a mért értékeket viszonyítják az előkísérletben megállapított koncentráció értékéhez (x) és szórásához (s). Ha a kontrollmérések értékei az x± 2s határokon belül vannak, a mérési sorozat pontossága megfelelő, ha az x± 2s határokon kívül esnek, de az x± 3s határokon belül vannak, az figyelmeztető jellegű, az eltérés okát ki kell deríteni, a hibát el kell hárítani, a mérési sorozatot meg kell ismételni. Ha egyetlen kontrollmérés értéke az x± 3s határokon kívül esik, a módszer kontrollálatlannak tekinthető.
26	0.571429	0	Másodszor pedig nézzük meg, mi történik akkor, ha a kísérlet alanyát az alatt az idő alatt kérdezzük tudatos tapasztalatairól, amikor egyetlen igazi neuron sincs jelen az agyában. A kísérlet feltétele szerint olyasféle válaszokat kell kapnunk, mint „Jól érzem magam. Meg kell mondanom, egy kicsit meg vagyok lepődve, hiszen elhittem, amit Searle mondott”. Vagy pedig egy mutatópálcával egy kicsit megszúrhatjuk a kísérleti alanyt és megfigyelhetjük válaszát: „Juj, ez fáj.” Viszont normál körülmények között a mesterséges intelligencia programok ilyen kimeneteit a szkeptikus elutasíthatja mint egyszerű látszatválaszokat. Hiszen elég könnyű elképzelni egy olyan szabályt, mint például: „Ha a 12-es szenzoron »Magas« érték jelenik meg, adj ki »Juj!-t«. A lényeg azonban az, hogy mivel a normál emberi agy összes funkcionális tulajdonságát átmásoltuk, feltételezhetjük, hogy elektronikus agyunk nem tartalmaz ilyen látszatválasz-mechanizmusokat. Azaz az elektronikus agy által létrehozott tudati megnyilvánulásokra olyan magyarázatot kell adnunk, amely csak a neuronok funkcionális tulajdonságaira hivatkozik. Ennek a magyarázatnak azonban a valós agyra is vonatkoznia kell, amelynek ugyanazok a funkcionális tulajdonságai. Ezért, úgy tűnik, kétfajta konklúzió lehetséges. 1. A tudat kauzális mechanizmusai, amelyek ezt a kimenetet a normális agyban létrehozzák, ugyanúgy működnek az elektronikus változatban is, amely tehát tudatos. 2. A normális agy tudatos mentális eseményeinek semmilyen kapcsolata nincs a viselkedéssel, valamint nincsenek is jelen ezek az események az elektronikus agyban, amely tehát nem tudatos.
1	0.586207	1	1970 - es években fejlesztették ki Stanfordon a MYCIN szakértői rendszert. Egyes vérrel kapcsolatos fertőzések diagnosztizálására és a kezelési tanácsok adására specializált rendszer. Szabályozott körülmények között az eredményei elérték az orvos szakértőkét. Mivelhogy ilyen esetekben az orvosnak általában nincs ideje a 48órás teszt (baktériumkultúra kitenyészése) eredményének kivárására, amivel biztos diagnózist adhatna, gyakran találgatnia kell. A MYCIN fejlesztése ennek a durva, hiányos információkon alapuló találgatásnak megismerését célozta meg.
15	0.296296	0	Az előző fejezet időbeli valószínűségi következtetésre szolgáló algoritmusokat vezetett be egy általános keretben, ami független volt az állapotátmenet- és az érzékelő modellek speciális formájától. Ebben és a következő két alfejezetben, olyan konkrétabb modelleket és alkalmazásokat tárgyalunk meg, amelyek bemutatják az alapalgoritmusok erejét, és bizonyos esetekben további tökéletesítéseket tesznek lehetővé.
7	0.2	1	Buktatók: Tipikus hiba érvényességet állítani, ha nem mindenhol, hanem csak néhány sorban szerepel az 1 (az utolsó oszlopban). Az olyan állítás nem érvényes, csupán kielégíthető, mert létezik a változóinak olyan interpretációja, ami az adott sorban lévő változóértékekhez vezet, amiben a célállítás tud igaz lenni. Egy másik tipikus hiba az implikáció igazság táblájának helytelen ismerete, amitől helytelen lesz a teljes táblázat kitöltése és a végeredmény.
21	0.125	1	ahol y’ vagy maximalizálja a P(y|x) kifejezést, vagy y’-nek választhatjuk egyszerűen a leggyakoribb címkét is. Ezzel a közelítő módszerrel keressük azt a mintát, amelyre a legnagyobb annak valószínűsége, hogy a modellünk helytelenül osztályozza. 3. A harmadik módszer azt az x-et választja, melyhez tartozó két legnagyobb kimenet valószínűsége a legkisebb
3	0.125	1	Egy ügyes élő ágens azonban (ilyen az ember, de kutya, vagy méhecske már nem tud itt velünk lépést tartani) megtervezhet egy ügyes gépi ágenst, amire a keresési feladatát áthárítja. Ha a keresés absztrakt térben történik, elegendő megtervezni az gépi ágens szoftver belsejét, avagy programját, hiszen minden keresési lépés ágens tudásbázisában történik, az ágens csak „gondolkodik”, a keresés az ágens „fejében” történik. Fizikai térben való keresés esetén a helyzet annál bonyolultabb. Mivel a keresési lépések valóban, az ágenst körül vevő fizikai környezetben történnek, elvégzésükhöz valódi mechanizmusok és erőforrásokat szükségesek. Muszáj ilyenkor megtervezni az ágens fizikai küllemét, azaz architektúráját, aminek központi tervezési kérdése eldönteni, hogy az ágens milyen érzékelő és milyen végrehajtó szervekkel rendelkezzen a siker érdekében. Ha az áthárítás sikerül (képesek vagyunk a keresési tér matematikáját megalkotni, beprogramozni, architektúrát kialakítani, a számításokat kivárni, stb.), akkor majdnem optimális emberi voltunk ellenére is optimális megoldásokhoz juthatunk, amiket majd életbe léptetünk (ilyen pl. az gépkocsi útvonal kereső programok használata). Ilyen megoldásokra tanít minket a könyv.
6	0.1	1	Látható tehát, hogy a fenti következtetések hatására jelentősen le tudtuk szűkíteni a játékosok információs halmazait, azaz jóval egyértelműbb az információs partíciójuk. Hiába volt kezdetben ambivalens számukra tökéletlen percepciójukból következően, hogy melyik állapotban vannak, a kölcsönös tudásra épülő információs következtetés áthidalta ezt a nehézséget (a többiek által környezetben véghezvitt és megfigyelt cselekvésekből (magyarán a kijelentések alapján) helyesen következtetve).
22	0.555556	0	Nézzük a következő példát: „Every agent smells a wumpus.” A mondat valójában többértelmű: a javasolt értelmezés szerint az ágensek különböző wumpusokat észlelhetnek, de egy alternatív jelentés szerint csak egy wumpus van, akit mindenki érez.^[231] A két interpretációt a következő módon ábrázolhatjuk:
14	0.565217	0	mivel minden mintavételi lépés a szülő értékektől függ.  ábra - Egy mintavételező algoritmus, amely eseményeket generál egy Bayes-hálóból Egy mintavételező algoritmus, amely eseményeket generál egy Bayes-hálóból
14	0.26087	0	Az Ár változóhoz meg kell adnunk a P(Ár∣Termés, Támogatás) eloszlást. A diszkrét szülőt explicit felsorolással kezeljük – azaz megadjuk mind a P(Ár∣Termés, támogatás), mind a P(Ár∣Termés, ¬támogatás) valószínűségeket. A Termés kezeléséhez megadjuk, hogy a c ár feletti eloszlása hogyan függ a t Termés folytonos értékétől. Máshogy fogalmazva, az ár eloszlásának a paramétereit a termés t értékének függvényében adjuk meg.  ábra - Egy egyszerű háló diszkrét (Támogatás és Vásárol) és folytonos (Termés és Ár) változókkal Egy egyszerű háló diszkrét (Támogatás és Vásárol) és folytonos (Termés és Ár) változókkal
6	0.1	1	Egy mechanizmus 3 elemből áll: (1) a mechanizmuson belül lehetséges tiszta stratégiák Mi halmazainak halmazából, (2) egy g kimeneteli függvényből, amely a mechanizmuson belüli stratégiák kombinációiból képez az alternatívák feletti eloszlások halmazába, és (3) pi kifizetési függvényekből, amelyek egy-egy kifizetést rendelnek egy-egy játékoshoz egy-egy mechanizmuson belüli stratégiakombináció esetén.
22	0.925926	1	A beszélő szerepe szintén nagyon fontos a beszédmegértő rendszereknél. A beszélőfüggő rendszerek egyetlen ember hangjának felismerésére képesek. Mivel az egyik ember hangja lényegesen különbözik a másikétól, nehéz olyan számítógépes rendszert létrehozni, amely alkalmas arra, hogy tetszőleges emberi hangot felismerjen. Nemcsak egyszerűbbek az egyetlen emberi hangra támaszkodó rendszerek, de jóval megbízhatóbbak is. Itt ugyanis a rendszer „ megtanulja” a beszélő hangszínét, hangsúlyozását, hangerejét, szóhasználatát. A beszélő-független rendszereket bárki használhatja. Nincs szükség az előbb említett tanulásra, gyakorlásra. A legtöbb ilyen rendszer rendkívül komplex.
6	0.1	1	2007-ben a CHINOOK eljutott arra a szintre, hogy az összes lehetséges felállást képesek voltak feldolgozni a kutatók a program által. Ezt egyrészt a már említett számítógépes technika fejlődése idézte elő, másrészt a fejlesztők bővítették a program végjáték adatbázisát, több már kiértékelt adatot tudtak elmenteni a nagyobb tárolókapacitások miatt és az algoritmust annyiban változtatták, hogy fix paraméterekre álltak át kísérletezések helyett.
24	0.833333	1	A PCBR egy struktúra információt felhasználó, affin transzformációkra invariáns detektor. Jellegzetessége, hogy nem függ a régió intenzitásától, ami bizonyos esetekben előnyössé teszi a használatát. A célja egyszerűbb struktúrarészletek megtalálása gerincek segítségével. Struktúra alapú működésének köszönhetően robusztus az intenzitás, a színek és a pozíció megváltozására.
19	0.590909	1	A jegykiválasztás területén kiemelt szerepe van, mivel a jegykiválasztás célja a célváltozó szempontjából releváns jegyek meghatározása. Alapesetben a „jegy” elnevezés alatt egyszerűen változót értünk, de speciális esetben jelenthet komplexebb entitásokat, például egy adott tulajdonságú változók egy halmazát.
14	0.869565	1	* A pontosság és pontatlanság, a bizonyosság és bizonytalanság elemzése * A logika lapú tudáskezelés története * A logikák osztályozása * A „fuzzy” igazság-függvény értelmezése, tipikus példái (nyelvi változók, az élet görbéje,..) * A fuzzy halmazok értelmezése, logikai alapműveletek fuzzy halmazokkal * A fuzzy logikát alkalmazó szabályalapú rendszer elemei és szerkezete * Fuzzy szabályok értelmezése * Válaszkiválasztó technikák * Klasszikus fuzzy következtető rendszerek (Mamdani, Takagi-Sugeno-Kang) * A fuzzy logika alkalmazásának menete * A fuzzy logika alkalmazásának jellemzői és ígéretei és korlátai * A lágy számítási modellek és kapcsolataik értelmezése
4	0.916667	1	A probléma abból adódik, hogy Iasiról Neamt felé indulva sokkal közelebb kerülünk Fogarashoz, mint Vaslui felé indulva, de Neamtból nem tudunk tovább menni. Az ellenkező irányban nincs ilyen probléma, de ez teljesen esetleges, ott is egészen könnyen előfordulhatna hasonló.
24	0.166667	1	Szemünkben a kép jelekből és a jelek hiányából áll össze. Az ultrahang például fizikailag „nem látja” a vizet, mégis éppen ez által válik erősségévé a folyadékok kimutatása. Fehér papíron a fekete számít jelnek, a képalkotó diagnosztikában többnyire sötét alapon világos a jel.
5	0.909091	0	Az AC-3 visszarak a sorba minden (X[k], X[i]) élet, amikor X[i] tartományából bármely értéket töröltek, akkor is, ha X[k] minden értéke konzisztens X[i] több fennmaradó értékével. Tegyük fel, hogy minden egyes (X[k], X[i]) élhez nyilvántartjuk a fennmaradó X[i] értékek számát, amelyek az X[k] minden egyes értékével konzisztensek. Magyarázza el, hogyan lehet hatékonyan frissíteni ezeket az értékeket, és hogyan lehet ennek segítségével az élkonzisztenciát O(n^2d^2) lépésben elérni.
13	0.727273	0	A  alfejezetben bemutattunk egy eljárást, amely segítségével elkerülhető a tény valószínűségének (példánkban P(s)) megbecsülése, úgy, hogy a lekérdezett változó minden egyes értékéhez (itt m és ¬m) egy utólagos valószínűséget számítunk ki, majd az eredményeket normalizáljuk. Hasonló eljárás alkalmazható, ha a Bayes-tételt használjuk. Ismert, hogy
24	0.833333	1	A gerincek némileg leegyszerűsítve definiálhatók N dimenzióban az N-1 dimenzió menti szélsőértékekként. Ezen alakzatok metszéspontjai fontos információt hordoznak. Egy völgy és egy gerinc találkozásánál nyeregpontot, két völgy vagy két gerinc találkozásánál pedig szélsőértéket találunk. Megkeresésük használható a kép szegmentálására, csontváz készítésére, hosszúkás alakzatok, középvonalak vagy kontúrok felismerésére. Kereső algoritmusaikat általában skálafüggő módon alkalmazzák. A probléma sok részletében hasonlít az élkereséshez, de más módszereket igényel.
21	0.0625	0	A 18. és  fejezetben olyan tanuló módszereket mutattunk be, amelyek példák alapján függvényeket vagy valószínűségi modelleket sajátítanak el. Ebben a fejezetben azzal foglalkozunk, hogy az ágens mi módon tanulhatja meg azt, hogy mit tegyen, különösen akkor, amikor nincs tanár, aki minden előforduló körülmény esetére elárulná a helyes cselekvést. Fontos Vegyük példaként a sakkot. Tudjuk, hogy az ágens képes megtanulni sakkozni felügyelt tanulással, vagyis ha példaként sakkállásokat mutatunk neki, megnevezve az adott állásban a legjobb lépést. De mit tud csinálni az ágens akkor, ha nincs kéznél egy barátságos tanító, aki példákat mutatna? Véletlen lépések kipróbálásával végül is az ágens felépítheti környezetének prediktív modelljét: milyen lesz az állás, ha meglép egy adott lépést, esetleg még azt is modellezheti, hogy az ellenfél várhatóan mit fog válaszul lépni. A következő azonban a probléma: visszacsatolás nélkül – tehát anélkül, hogy tudná, mi a jó és mi a rossz – az ágensnek semmilyen alapja sem lesz eldönteni azt, hogy melyik lépést húzza meg. Az ágensnek tudnia kell, hogy valami jó történt, amikor nyert, illetve valami rossz történt, amikor vesztett. Az ilyen típusú visszacsatolást nevezzük jutalomnak (reward) vagy megerősítésnek (reinforcement). A sakkhoz hasonló játékokban a megerősítés csak a játék végén jelenik meg. Más környezetben a jutalom gyakrabban jön, például a pingpongban mindegyik pont jutalomnak tekinthető éppúgy, mint a mászás tanulásakor bármely előrefelé haladás. Az általunk használt tárgyalásmódban az ágens a jutalmat is az észlelés részeként kezeli, de valahogy bele kell lennie „huzalozva”, hogy ez a rész jutalom, és nem csupán egy észlelésfajta. Úgy tűnik, hogy az állatokba be van építve, hogy a fájdalom és az éhség negatív „jutalom”, míg a gyönyör és az élelem pozitív jutalom. A megerősítéses tanulást az állatok pszichológiáját kutatók 60 éve intenzíven tanulmányozzák.
24	0.75	1	A Canny algoritmus az egyik legrégebbi, a leggyakrabban alkalmazott és a mai napig az egyik leghatékonyabb éldetektor. A háttere matematikailag jól megalapozott, elméletben optimális eredményt ad. A valóságban az eredménye pontos, kevés élet vét el, és kevés hamis találatot ad. Egy valódi él csak egy választ ad, ami nem mindig teljesül más éldetektoroknál. A matematikailag optimális változatát ritkán használják, ehelyett egy egyszerűbb közelítést alkalmaznak, mely a következő lépésekből áll: az algoritmus kezdetben egy Gauss simítást hajt végre a képen, majd közelíti az iránymenti deriváltakat. Utóbbi történhet például egy Sobel operátorral. A következő lépésben az iránymenti deriváltakból kiszámítja a gradiensvektor nagyságát. Az így kialakult kép nagy intenzitású nyergein lesz az él. Ehhez először a nyergeket választja ki: csak azon pontokat tartja meg, melyeknél a gradiensre merőleges irányokban a szomszédok mindegyike kisebb intenzitású a vizsgált pontnál, a többi pontot pedig eldobja. A megmaradt pontokat hiszterézises küszöbözéssel válogatja meg, melyhez két, a konkrét feladathoz illeszkedő küszöb szükséges. Egy tetszőleges a magasabbik küszöbnél nagyobb intenzitású pontból indul ki, majd végigköveti az élet az alacsonyabbik küszöböt használva. Ha véget ér az él, akkor újrakezdi a követést egy másik pontból, amíg van a nagyobb küszöbnél magasabb intenzitású pont. Ilyen módon megszabadul a néhány pixeles zajoktól, de a szakaszonként elhalványuló éleket végig tudja követni. Az így kialakult bináris kép fogja tartalmazni a minden esetben 1 pixel széles éleket. Az algoritmus kellően hatékony, de további gyorsítás érető el a Canny-Deriche algoritmus használatával, mely egy rekurzív változata az eredeti Canny detektornak.
20	0.571429	0	A kernelmodellben (kernel model) úgy tekintünk minden tanító példányra, mintha egy kis saját sűrűségfüggvényt – kernelfüggvényt (kernel function) – generálna. Az eredő sűrűségfüggvény becslés nem más, mint a kis kernelfüggvények súlyozott összege. Egy x[i] tanító példány egy K(x, x[i]) kernelfüggvényt generál, amely a tér minden x pontjához egy valószínűséget rendel. Így a sűrűségbecslés:
12	0.47619	0	Aktív érzékelés (mint az automatikus érzékelés ellentettje) esetén, az ágens csak kérésre kap új megfigyeléseket. Így a Balra lépés után az ágens nem tudja, hogy a bal oldali négyzet piszkos-e, ezért a   cselekvésleíró egyenletben az utolsó két feltételes következmény már nem jelenik meg. Az ágens a TisztaságEllenőrzés cselekvéssel derítheti ki, hogy a négyzet piszkos-e:
24	0.291667	0	A simítás egyik módszere az, ha minden képponthoz az őt környező szomszédok értékeinek átlagát rendeljük. Ez az extrém értékek kihagyása felé mutató megoldás. De hány szomszédot kell figyelembe vennünk – az egy képpontnyi távolságra vagy a kettő esetleg több pont távolságra lévőket? Erre egy válasz, amely jól működik Gauss-zajok kiszűrésére, a Gauss-szűrőt (Gaussian filter) használó súlyozott átlag. Emlékezzünk a standard δ[ ]szórással rendelkező Gauss-függvényre:
6	0.1	1	A statikus, normál formájú játékok vizsgálatát követően térjünk át a szekvenciális (dinamikus) játékok megismerésére. Ezek annyiban különböznek az eddigi játékoktól, hogy immár a játszmák lefolyásának, a döntések meghozásának temporális vonatkozásait is modellezik. Nézzük például a következő, egyszerű, 2-szereplős szekvenciális játékot.
27	0.4	1	Napjainkban már az is nagy szó, ha valaki be tudja bizonyítani ágenséről (rendszeréről), hogy számítható racionális. E mellett még jobb, ha azt is be tudja látni, hogy a rendszer idővel egyre jobb megoldásokat ad (pl. monoton konvergál a globális optimumhoz). Ilyenek például az anytime rendszerek. Végtelen idő alatt általában garantáltan megtalálják a tökéletesen racionális megoldást, véges időben pedig idővel egyre jobb megoldásokat adnak vissza (természetesen itt a konvergencia sebessége sem mindegy - minél gyorsabban konvergál a rendszer a globális optimumhoz, annál jobb). Ilyen rendszerre példa a klasszikus genetikus algoritmus (ami egy természetes evolúció ihlette egyszerűbb számítógépes modell), amely úgynevezett elitizmust is használ (azaz generációról-generációra továbbörökíti a legjobb megoldást, és így idővel a legjobb megoldás minősége nem csökken, sőt, elvben a végtelenben az algoritmus a lehető legjobbat is megtalálja).
5	0.181818	1	Az üres értékkészlet, mint ahogy már előbb is jeleztük, inkonzisztenciát takar. Ekkor az AC3/MAC következtetés leáll, és HAMIS értékkel tér vissza a keresés felé. Ilyenkor vissza kell csinálni az összes, legutóbbi értékadást követő változtatást mind a behelyettesítésre, mind pedig az értékkészletekre vonatkozóan, és további értéket kell keresni a vizsgált változó számára.
5	0.181818	1	13. lépés: ebben a lépésben LCV nélkül a WA=GREEN értékadás történt. Ugyanez a választás történik akkor is, ha LCV heurisztika szerint választunk értéket, mivel egyrészt ugyanúgy vissza kell lépnünk, másrészt az itt szereplő 3. lépésben bemutatott, WA{RED(1), GREEN(2), BLUE(2)} heurisztikus értékek szerint az előbbi RED érték után következő értéket, a GREEN-t választjuk most is. Megjegyzés: milyen jó lett volna, ha a 3. lépésben használt érték-választási heurisztika jobb tanácsot adott volna, nem úgy, mint az LCV. Ekkor most nem kellett volna ekkorát visszalépnünk. Ebből is látszik, hogy az LCV heurisztika (ahogy egyébként szinte bármely heurisztika) bizonyos esetekben igencsak szub-optimális lehet.
16	0.826087	0	Az 1950-es és az 1960-as években kifejlődött döntéselemzés (decision analysis) a döntéselmélet alkalmazását tanulmányozza konkrét döntési problémákon. Fő alkalmazási területe a kiemelt fontosságú területeken meghozandó döntések segítése, ahol a tétek igen nagyok, ilyen területek például az üzleti élet, a kormányzati munka, a törvényhozás, a katonai stratégia, az orvosi diagnosztika és a közegészségügy, a mérnöki tervezés és az erőforrás-gazdálkodás. A folyamat magában foglalja a lehetséges cselekvések és kimenetelek gondos tanulmányozását csakúgy, mint a kimenetelek közötti preferenciákét. A döntéselemzésben hagyományosan két szerepet tételeznek fel: a döntéshozó (decision maker) a kimenetelek közötti preferenciákat határozza meg, a döntéselemző (decision analyst) pedig a lehetséges cselekvéseket, kimeneteleket veszi számba, és kikérdezi a preferenciákat a döntéshozótól, hogy meghatározza a legjobb cselekvést. Az 1980-as évek elejéig a döntéselemzés célját abban látták, hogy az embereket segítsék olyan döntések meghozatalában, amik a tényleges preferenciáiknak felelnek meg. Manapság egyre több és több döntési folyamat automatizált, és a döntéselemzést annak biztosítására használják, hogy az automatizált folyamatok megfelelően alakuljanak.
26	0.357143	0	Ezt nevezi Turing tudatossági (consciousness) érvnek: a gépnek saját mentális állapotainak és cselekvéseinek tudatában kell lennie. Ugyan a tudatosság fontos témakör, Jefferson megállapítása azonban lényegileg a fenomenológiához (phenomenology), a közvetlen tapasztalat tudományához kötődik: a gépnek ténylegesen éreznie kell az érzéseit. Más szerzők az intencionalitásra (intentionality) koncentrálnak, ami azt kérdezi, hogy a gép feltételezett hiedelmei, vágyai és más reprezentációi ténylegesen valamilyen valósvilág-beli dologra „vonatkoznak”-e.
6	0.1	1	* Tábla reprezentáció: egy állást hogyan ábrázolnak az adatstruktúrában. * Kereső algoritmusok: milyen keresési heurisztikákat, optimalizálásokat alkalmaznak. * Kiértékelés: milyen módon értékelik a kapott eredményeket (keresés után). [5]
14	0.869565	1	A táblázat alapján a következőképpen írhatók fel az alkalmazott szabályok: 1. If (e is NB) and (de is NB) then (output1 is NB) (1) 2. If (e is NB) and (de is NM) then (output1 is NB) (1) 3. If (e is NB) and (de is NS) then (output1 is NB) (1) 4. If (e is NB) and (de is Z) then (output1 is NM) (1) 5. If (e is NB) and (de is PS) then (output1 is NM) (1) 6. If (e is NB) and (de is PM) then (output1 is NS) (1) 7. If (e is NB) and (de is PB) then (output1 is Z) (1) 8. If (e is NM) and (de is NB) then (output1 is NB) (1) 9. If (e is NM) and (de is NM) then (output1 is NB) (1) 10. If (e is NM) and (de is NS) then (output1 is NM) (1) 11. If (e is NM) and (de is Z) then (output1 is NM) (1) 12. If (e is NM) and (de is PS) then (output1 is NS) (1) 13. If (e is NM) and (de is PM) then (output1 is Z) (1) 14. If (e is NM) and (de is PB) then (output1 is PS) (1) 15. If (e is NS) and (de is NB) then (output1 is NB) (1) 16. If (e is NS) and (de is NM) then (output1 is NM) (1) 17. If (e is NS) and (de is NS) then (output1 is NM) (1) 18. If (e is NS) and (de is Z) then (output1 is NS) (1) 19. If (e is NS) and (de is PS) then (output1 is Z) (1) 20. If (e is NS) and (de is PM) then (output1 is PS) (1) 21. If (e is NS) and (de is PB) then (output1 is PM) (1) 22. If (e is Z) and (de is NB) then (output1 is NM) (1) 23. If (e is Z) and (de is NM) then (output1 is NM) (1) 24. If (e is Z) and (de is NS) then (output1 is NS) (1) 25. If (e is Z) and (de is Z) then (output1 is Z) (1) 26. If (e is Z) and (de is PS) then (output1 is PS) (1) 27. If (e is Z) and (de is PM) then (output1 is PM) (1) 28. If (e is Z) and (de is PB) then (output1 is PM) (1) 29. If (e is PS) and (de is NB) then (output1 is NM) (1) 30. If (e is PS) and (de is NM) then (output1 is NS) (1) 31. If (e is PS) and (de is NS) then (output1 is Z) (1) 32. If (e is PS) and (de is Z) then (output1 is PS) (1) 33. If (e is PS) and (de is PS) then (output1 is PM) (1) 34. If (e is PS) and (de is PM) then (output1 is PM) (1) 35. If (e is PS) and (de is PB) then (output1 is PB) (1) 36. If (e is PM) and (de is NB) then (output1 is NS) (1) 37. If (e is PM) and (de is NM) then (output1 is Z) (1) 38. If (e is PM) and (de is NS) then (output1 is PS) (1) 39. If (e is PM) and (de is Z) then (output1 is PM) (1) 40. If (e is PM) and (de is PS) then (output1 is PM) (1) 41. If (e is PM) and (de is PM) then (output1 is PB) (1) 42. If (e is PM) and (de is PB) then (output1 is PB) (1) 43. If (e is PB) and (de is NB) then (output1 is Z) (1) 44. If (e is PB) and (de is NM) then (output1 is PS) (1) 45. If (e is PB) and (de is NS) then (output1 is PM) (1) 46. If (e is PB) and (de is Z) then (output1 is PM) (1) 47. If (e is PB) and (de is PS) then (output1 is PB) (1) 48. If (e is PB) and (de is PM) then (output1 is PB) (1) 49. If (e is PB) and (de is PB) then (output1 is PB) (1)
18	0.894737	0	Az EPAM (Elementary Perceiver And Memorizer, Elemi észlelő és megjegyző) volt az első rendszerek egyike, amely döntési fákat (diszkriminációs hálókat, discrimination nets) használt (Feigenbaum, 1961). Az EPAM létrehozásának célja az emberi fogalom-tanulás kognitív-szimulációs modelljének megalkotása volt. A CLS-rendszer (Hunt és társai, 1979) heurisztikus előretekintő eljárást használt a döntési fák konstrukciójára. Az ID3 (Quinlan, 1979) hozta azt a kulcsfontosságú ötletet, hogy a heurisztikus függvény használja az információtartalmat. Az információelméletet Claude Shannon fejlesztette ki a kommunikáció tanulmányozására (Shannon és Weaver, 1949). (Shannon hozzájárult a gépi tanulás területéhez is, az egyik legkorábbi példát szolgáltatva mechanikus egerével, amely egy útvesztőben navigált a kísérlet-kudarc elvet használva.) A döntési fák χ^2 metszését Quinlan írta le először (Quinlan, 1986). Az ipari felhasználásra alkalmas C4.5 döntési fa programcsomag is Quinlan munkáiban található meg (Quinlan, 1993). A döntési fa tanulásnak egy, az előzőktől független hagyománya alakult ki a statisztikusok körében. A Classification and Regression Trees (Breiman és társai, 1984), amelyet röviden „CART könyv”-nek neveznek, az alapvető irodalom e tekintetben.
20	0.678571	0	A neurális hálót osztályozásra vagy regresszióra használhatjuk. Ha folytonos kimenete van a hálónak (pl. szigmoid egységekkel), akkor logikai osztályozás esetén hagyományosan egy kimeneti egységet használunk, és ha ennek aktivációs értéke 0,5 feletti, azt az egyik, ha 0,5 alatti, akkor a másik osztályba tartozásként interpretáljuk. Egy k osztályos osztályozási feladatnál feloszthatjuk az egyetlen kimeneti egység értéktartományát k részre, de megszokottabb, hogy ehelyett k elkülönült kimeneti egységet használjunk, ahol mindegyiknek az aktivációs értéke a bemenet adott osztályba tartozásának valószínűségét reprezentálja.
14	0.043478	0	Most vizsgáljuk meg a közvetkező példát, ami csak egy árnyalatnyival öszetettebb. Otthonunkban egy új betörésjelzőt szereltek fel. Ez megbízhatóan észleli a betöréseket, de időnként kisebb földrengések esetén is jelez. (Ez a példa Judea Pearltől származik, aki Los Angeles-i lakos; innen ered a földrengések iránti különös érdeklődése.)^[144] Két szomszédunk is van, János és Mária, akik megígérték, hogy felhívnak a munkahelyünkön, ha meghallják a riasztónkat. János mindig felhív minket, ha meghallja a riasztást, de néha összekeveri a telefoncsörgést a riasztó csengésével, és ekkor is telefonál. Mária viszont, mivel szereti hangosan hallgatni a zenét, néha meg sem hallja a riasztót. Mi tehát a hívások bekövetkezte vagy hiánya alapján szeretnénk megbecsülni a betörés valószínűségét. Ezt az egyszerű problémát a  ábrán látható Bayes-háló írja le.  ábra - Egy tipikus Bayes-háló, amely a topológiát és a feltételes valószínűségi táblákat (FVT) is mutatja. Az FVT-kben B, F, R, J és M szerepel Betörés, Földrengés, Riasztás, JánosTelefonál és MáriaTelefonál helyett. Egy tipikus Bayes-háló, amely a topológiát és a feltételes valószínűségi táblákat (FVT) is mutatja. Az FVT-kben B, F, R, J és M szerepel Betörés, Földrengés, Riasztás, JánosTelefonál és MáriaTelefonál helyett.
19	0.545455	1	Legyen F i  egy jegy F halmazban, és legyen M⊆F  a jegyek halmazának egy olyan részhalmaza, mely nem tartalmazza F i  -t. Ekkor M Markov–takarója F i  -nek, ha F i  feltételesen független F−M− {F i }  -től feltéve M, azaz I( F i ,F−M−{ F i }|M)  .
24	0.75	0	Precízebben fogalmazva: tekintsük a p[i ]pontot az első, a q[j] pontot a második alakzaton. Jelölje a C[ij] = C(p[i],q[i]) a két pont illesztésének költségét. Minthogy az alakzatkontextusok hisztogramokkal reprezentált eloszlások, így természetes a χ^2 távolság használata:
15	0.814815	0	Ha előállítottuk az egyesített RMM-modellt, akkor a felhasználásával elemezhetjük a folytonos beszédjelet. Különösen a   egyenletben megadott Viterbi-algoritmusnak vehetjük hasznát a legvalószínűbb állapotsorozat megtalálásában. Ebből az állapotsorozatból már kinyerhető a szósorozat egyszerűen az állapotok szócímkéinek kigyűjtésével. Így a Viterbi-algoritmus a szószegmentálás problémáját úgy oldja meg, hogy dinamikus programozást felhasználva (valójában) egyszerre figyelembe veszi az összes lehetséges szósorozatot és szóhatárt.
25	0.925926	0	A robotok mint dinamikus rendszerek irányítása, legyen szó manipulátorról vagy mobil robotról, hatalmas irodalommal rendelkezik, amelynek anyagáról ebben a fejezetben alig-alig esett szó. A fontos művek közé tartozik Hogan trilógiája (Hogan, 1985) az impedancia szabályozásáról és egy általános tanulmány a robotok dinamikájáról Featherstone-tól (Featherstone, 1987). Dean és Wellman az elsők között voltak, akik megpróbálták összekötni az irányításelméletet és az MI-tervezőrendszereket (Dean és Wellman, 1991). Három klasszikus tankönyv a robotkarok matematikájáról Paultól (Paul, 1981), Craigtól (Craig, 1989) és Yoshikawától (Yoshikawa, 1990) származik. A megfogás (grasping) tárgyköre szintén nagyon fontos a robotikában: egy stabil megfogás meghatározásának problémája meglehetősen nehéz (Mason és Salisbury, 1985). A megfelelő megfogás érintkezésérzékelőket vagy heptikus visszacsatolást (haptic feedback) kíván a fellépő erők és az esetleges csúszás meghatározására (Fearing és Hollerbach, 1985).
5	0.181818	1	Célunk az algoritmus menetének megértetése volt a kezdetektől egészen a megoldás (amennyiben létezik) fellelésééig, és visszaadásáig. Ennek során látható volt, hogy az algoritmus a végrehajtás során mintha csak egy keresési fát járt volna be balról jobbra haladva, visszalépéses mélységi keresés szerint. A fa egyes szintjei rendre az NSW, WA, NT, Q, SA, V, és T változóknak feleltek meg, és az egyes csúcsokból rendre 3-3 él ágazott tovább: RED, GREEN, és BLUE. Végső soron tehát ebben a keresési fában hajtottunk végre egy visszalépéses mélységi keresést, amelynek során azon csúcsokat tekinthetjük célnak, amikhez a gyökérből vezető útnak megfelelő behelyettesítés nem mond ellent a KKP-ban megfogalmazott korlátoknak.
4	0.916667	1	Mivel csak egy elemű a populáció, nincs mód kiválasztásra és keresztezésre, csak a mutáció fázis változtatja meg a populáció egyetlen elemét, új 'generációt' létrehozva. Így tehát a sztochasztikus hegymászó kereséshez hasonlóan működik.
5	0.181818	1	 ábra - 18. lépés: az előbbi, SA=BLUE értékadás következményeként a BLUE érték eltávolítása a V változó értékkészletéből az előretekintés miatt 18. lépés: az előbbi, SA=BLUE értékadás következményeként a BLUE érték eltávolítása a V változó értékkészletéből az előretekintés miatt
25	0.037037	0	A legtöbb mai robot három nagy kategória egyikébe sorolható. A manipulátorok (manipulators), vagy más néven robotkarok fizikailag a munka helyszínéhez rögzítettek, például egy ipari szerelősoron egy gyárban vagy a Nemzetközi Űrállomáson. A manipulátorok mozgását általában irányítható csuklók sora biztosítja, lehetővé téve, hogy a végbeavatkozó szerv a munkatér bármely pontjára eljuthasson. Az ipari robotok messze leggyakoribb fajtája a manipulátor, világszerte több mint egymillió működik belőlük. Bizonyos mobil robotkarokat kórházakban, műtéteknél használnak. Kevés autógyártó tudna ma már meglenni ipari robotok nélkül, és egyes robotkarok még műalkotások készítésére is képesek.
11	0.923077	1	Egy nem összefésülő tervkészítő a következő két részcélt állítaná fel: G[1]) legyen B a C tetején, G[2]) legyen A a B tetején. G[1] megvalósítása egyszerű, tegyük a B kockát a másik kettő tetejére. Azonban ha ezután G[2]-et akarjuk megvalósítani, ahhoz „el kell rontani” a G[1] célt. Ugyanígy a kiinduló állapotból G[2]-t is könnyű elérni, tegyük a C kockát félre, majd rakjuk A-t B-re. Ekkor megint az előző problémával kerülünk szembe: G[1] megvalósításához G[2]-t „el kell rontani”.
8	0.258065	0	A ∀-t általában „Minden …re”-nek olvassuk ki. A mondat tehát azt jelenti: „Minden x-re, ha x egy király, akkor x egy személy.” Az x szimbólum neve változó (variable). A konvenció alapján a változókat kisbetűvel írjuk. Egy változó önmagában egy term, és mint olyan, szerepelhet egy függvény argumentumaként – például: BalLáb(x). Egy változó nélküli termet alaptermnek (ground term) nevezünk.
6	0.95	0	Írja le, hogy a minimax és az alfa-béta hogyan változik kétszemélyes, nem zérusösszegű játékok esetén, ahol minden játékosnak külön kiértékelő függvénye van. Feltételezheti, hogy mindegyik játékos mások kiértékelő függvényeit ismeri. Ha a két véghasznosság értékére nincs korlát, lehetséges-e valamelyik csomópont számára, hogy az alfa-béta lenyesi?
17	0.4	0	Ez a leállási feltétel szerepel az Értékiteráció algoritmusában a  ábrán. Fontos Eddig az értékiteráció algoritmusa által visszaadott hasznosságfüggvény hibáját elemeztük. Az ágenst azonban igazán az érdekli, hogyan fog boldogulni, ha egy ilyen döntésfüggvény alapján hoz döntéseket. Tegyük fel, hogy az értékiteráció i-edik iterációja után az ágens a valódi U hasznosságra egy U[i] becslést kap, és az U[i]-n alapuló egylépéses előrenézés felhasználásával (ahogy a   egyenletben) megkapja a π[i ]MVH-eljárásmódot. Vajon a kiadódó viselkedés megközelítőleg lesz-e olyan jó, mint az optimális viselkedés? Ez döntő kérdés minden valós ágens számára, és bizonyítható, hogy a válasz igen. Jelölje  azt a hasznosságot, ami a π[ i] végrehajtásakor adódik s-ből kiindulva. Ekkor az  az eljárásmód vesztesége (policy loss) annak a maximális értéke, amit az ágens veszíthet π[ i]-t végrehajtva az optimális π^ * eljárásmód helyett. A π[ i] eljárásmód veszteségét az U[i]-beli hibához a következő egyenlőtlenség kapcsolja:
26	0.285714	0	A mesterséges intelligencia vállalkozásának legnagyobb hatású és legmakacsabb kritikáját Turing úgy mutatta be, mint „a viselkedés meghatározatlanságából származó érvet”. Az állítás lényege az, hogy az emberi viselkedés túl komplex ahhoz, hogy egy szabálykészlettel le lehessen írni, és mivel a számítógépek semmi másra nem képesek, csak szabályok követésére, ezért nem tudnak az emberekhez hasonló intelligens viselkedést létrehozni. Azt, hogy logikai szabályok egy halmazával képtelenség mindent leírni, a mesterséges intelligenciában kvalifikációs problémának (qualification problem) nevezik (lásd  fejezet).
21	0.0625	0	Bizonyos értelemben a megerősítéses tanulás az egész MI-problémát átfogja. Egy ágenst belehelyezünk valamilyen környezetbe, és meg kell tanulnia ott sikeresen viselkedni. Ahhoz, hogy ezt a fejezetet áttekinthető bonyolultsági szinten tartsuk, csak egyszerű helyzetekre és egyszerű ágensekre fogunk koncentrálni. A fejezet legnagyobb részében teljesen megfigyelhető környezetet feltételezünk, tehát a megfigyelések informálnak az aktuális állapotról. Másrészt viszont azt feltételezzük, hogy az ágens sem azt nem tudja, hogyan működik a környezet, sem azt, hogy cselekedeteinek mi a hatása, továbbá megengedjük a cselekedetek valószínűségi (nemdeterminisztikusan meghatározott) kimenetelét. Három olyan ágensfelépítést fogunk áttekinteni, amelyeket először a  fejezetben vezettünk be: * A hasznosságalapú ágens (utility-based agent) az állapotokra alapozott hasznosságfüggvényt tanul, és ennek alapján választja ki azokat a cselekvéseit, amelyekkel maximálja az elérhető hasznosság várható értékét. * A Q-tanuló (Q-learning) ágens egy cselekvésérték (action-value) függvényt – vagy más néven Q-függvényt – tanul, valamilyen várható hasznot tulajdonítva egy adott helyzetben egy adott cselekvésnek. * Egy reflexszerű ágens (reflex agent) olyan stratégiát tanul, amely közvetlenül képezi le az állapotokat cselekvésekre.
23	0.5	0	Az invertált index^[248] (inverted index), a könyvünk végén található szójegyzékhez hasonlóan, találati listák (hit lists) halmazából – az egyes szavak előfordulási helyeiből – áll. A Boole-kulcsszó modell esetén a találati lista nem más, mint a dokumentumok listája. Az unigram modell esetén egy (dokumentum, gyakoriság) párokat tartalmazó lista. A kifejezéslekérdezés támogatásához a találati listának az adott szó minden egyes dokumentumon belüli előfordulási helyeit is tartalmaznia kell.
5	0.363636	0	Ezt a módszert használhatjuk arra, hogy az  ábra {NyA = vörös, ÚDW = vörös} részleges hozzárendelésében észrevegyük az inkonzisztenciát. Figyeljünk fel arra, hogy a DA, az ÚT és a Q változók lényegében egy MindKül kényszerrel vannak összekötve, mert mindegyik párnak különböző színűnek kell lennie. Miután alkalmaztuk az AC-3-at a részleges hozzárendelésre, az egyes változók tartománya a {zöld, kék} tartományra szűkült le. Azaz három változónk van és csupán két színünk, tehát megszegtük a MindKül kényszert. Tehát a magasabb szintű kényszerekre alkalmazott egyszerű konzisztencia-ellenőrzések néha hatékonyabbak, mintha az ekvivalens bináris kényszerek halmazára vizsgáltuk volna az élkonzisztenciát.
12	0.285714	0	Egy érdekes példa a részfeladat-megosztás költségeire és előnyeire a fordítók optimalizálásánál fordul elő. Vegyük a tan(x) – sin(x) kifejezés fordításának problémáját. A legtöbb fordító ezt két külön szubrutin triviális összeolvasztásával éri el: a tan lépések a sin lépések előtt következnek. Vegyük azonban a sin és tan alábbi Taylor soros közelítéseit:
2	0.263158	1	Látható, hogy általánosságban a teljesítménymérték nem csak egy, vagy több környezeti állapotot értékel, hanem egy egész állapot-sorozatot. Magyarán a teljesítménymérték azt is figyelembe veheti, hogy milyen állapotokon keresztül, milyen állapot-történeten át jutott el a környezet a végállapotba. Természetesen konstruálhatunk olyan egyszerűbb, saját teljesítménymértéket, amely ennek speciális eseteként például csak az utolsó, ágens leállásakor adódó környezeti állapotot értékeli, de olyat is, amely minden állapot-történetbeli állapotot mérlegel.
3	0.125	1	Fizikai térben való keresés valódi cselekvéseket igényel, ami valódi veszélyeket is jelenthet, netán katasztrofális kimenetellel, ha ágens döntéseihez hiányos, vagy hibás információt használ (vajon mi történik, ha egy robot hibásan úgy ítéli, hogy egy híd el fogja bírni a súlyát és utat rövidítve megkísérel rajta átkelni?) Gépi ágens, nem fizikai térben keresve a keresési tér matematikai leírásában képes feltérképezni a lehetőségeket, képes büntetlenül visszalépni, rendelkezik végül elegendő számítási kapacitással a nyers erő alkalmazásához. Így akár ideálisan optimális megoldásokra is törekedhet.
3	0.583333	0	Az iteratívan mélyülő keresés a szélességi kereséssel abban rokon, hogy minden iterációban a csomópontok teljes rétegét megvizsgálja, mielőtt a következő rétegre térne rá. Hasznosnak látszik az egyenletes költségű keresés iteratív változatának kifejlesztése, amely örökölné ez utóbbi optimalitását, mellőzve annak a tárkövetelményeit. Az ötlet a növekvő útköltségkorlát használata a növekvő mélységkorlát helyett. Az eredményül kapott algoritmussal, amelynek neve iteratívan megnyúló keresés (iterative lengthening search) a  feladat foglalkozik. Sajnos az derül ki, hogy az iteratívan megnyúló keresés overheadje tekintélyes az egyenletes költségű kereséshez képest.
8	0.354839	0	A két kvantor valójában szoros kapcsolatban áll egymással a negáción keresztül. Ha valaki azt mondja, hogy mindenki utálja a paszternákot, akkor egyúttal azt is mondja, hogy nem létezik olyan valaki, aki szereti azt, és fordítva:
4	0.416667	0	Az eddig látott keresési algoritmusokat arra tervezték, hogy a keresési tereket szisztematikusan tárják fel. A szisztematikusságot úgy érik el, hogy egy vagy több utat tartanak a memóriában, és azt is feljegyzik, hogy minden pontban az út mentén melyik alternatívát vizsgálták már meg, és melyiket nem. Amikor megtalálják a célt, a célhoz vezető út egyben a probléma megoldását is jelenti.
21	0.1875	0	Nyilvánvaló, hogy a közvetlen hasznosságbecslés nem más, mint egy példánya a felügyelt tanításnak. A tanító példapárok bemeneti része az állapot, kimeneti része pedig a megfigyelt hátralevő jutalom. Tehát a megerősítéses tanulást standard induktív tanulási problémára redukáltuk, a  fejezetben tárgyaltaknak megfelelően. A  alfejezetben áttekintjük a hasznosságfüggvények hatékonyabb reprezentálására szolgáló eszközök használatát, például a neurális hálókét. Ezeknek a reprezentációknak a használata esetén a tanulási technika közvetlenül a megfigyelt adatokra alkalmazható. Fontos A közvetlen hasznosságbecsléssel sikerült a megerősítéses tanulást standard induktív tanulási problémára redukálnunk, amelyről már nagyon sok mindent tudunk. Sajnálatos módon egy nagyon fontos információforrás hiányzik, nevezetesen az, hogy az állapotok hasznossága nem független egymástól! Minden egyes állapot hasznossága egyenlő az ebben az állapotban elnyerhető jutalom és az őt követő állapotok várható hasznosságának összegével. Tehát a hasznosságértékek kielégítik a rögzített stratégiára vonatkozó Bellman-egyenletet (lásd még   egyenlet):
18	0.684211	0	Előzetesen feltesszük, hogy a keresett f függvény eleme H-nak. Most már definiálhatjuk azt a hibát (error), ami egy h hipotézisnek a keresett f függvénytől való eltérését jellemzi a mintákra vonatkozó adott eloszlás mellett, mint annak valószínűségét, hogy h az f-től eltérő választ ad egy példára:
6	0.9	0	Az első két sakkprogram, ami egymás ellen játszott, a Kotok–McCarthy-program és a Moszkvai Elméleti és Kísérleti Fizika Intézet által megírt „ITEP” program (Adelson-Velsky és társai, 1970) volt az 1960-as évek közepén. Ezt az interkontinentális mérkőzést távírón játszották le. A küzdelem 1967-ben az ITEP-program 3:1 arányú győzelmével ért véget. A MacHack 6 volt az első olyan sakkprogram, ami sikeresen játszott emberek ellen (Greenblatt és társai, 1967). 1400-as Élő-pontszáma jóval több volt, mint a kezdők 1000-es Élő-pontja, azonban így is igen messze volt a 2800 vagy több Élő-ponttól, ami szükséges lett volna, hogy Herb Simon 1957-es jóslata teljesüljön, miszerint 10 éven belül a számítógépes sakkprogramok lesznek a sakkvilágbajnokok (Simon és Newell, 1958).
9	0.689655	0	Az elsőrendű klózokra vonatkozó következtetési szabály egyszerűen a 7. szakasz - Rezolúció részben megadott propozíciós rezolúciós szabály kiterjesztett változata. Két klóz, amelyek standardizálva vannak, tehát nem tartalmaznak azonos változókat, akkor rezolválható, ha tartalmaznak komplememens literálokat. Az ítéletlogikai literálok akkor komplemensek, ha az egyik a negációja a másiknak; míg az elsőrendű literálok akkor komplemensek, ha az egyik egyesül a másik negációjával. Így ezt kapjuk:
23	0.5	0	A vektortér modell ennél sokkal többre képes. A gyakorlatban számos jellemzővel, finomítással, javítással és kiegészítéssel lett kibővítve. Az az alapötlet, miszerint a dokumentumokat a vektortérbeli hasonlóságuk alapján lehet rangsorolni, lehetővé teszi, hogy új ötleteket építsünk be a numerikus sorrendező rendszerbe. Egyesek azt állítják, hogy a valószínűségi modell ezeket a módosításokat sokkal tisztább elvi alapokon állva tenné lehetővé, azonban az IR-kutatók nem fognak váltani, amíg nem látnak egyértelmű teljesítményjavulást a másik modellhez képest.
11	0.076923	0	Végezetül definiálhatjuk a tervkészítési probléma megoldását (solution). Legegyszerűbb formájában ez csak egy cselekvéssorozat, melyet a kiindulási állapotból végrehajtva a célállapotot eredményezi. A fejezet további részeiben a megoldások cselekvések részben rendezett sorozatai is lehetnek, amennyiben minden cselekvéssorozat, ami megfelel ennek a részben rendezésnek, megoldás.
25	0.925926	0	A robotokhoz tartozó szoftverarchitektúra témája sok heves vitát váltott ki. Az MI jó öreg zászlóshajója – a háromrétegű architektúra – Shakey tervezésének eredménye, később Gat újította fel (Gat, 1998). Az alárendelt architektúra Brooks munkája (Brooks, 1986), bár tőlük függetlenül Braitenberg (Braitenberg, 1984) is fejlesztett hasonlót, akinek könyve, a Járművek, egy sor egyszerű viselkedésalapú robotot mutat be. Brooks hatlábú lépegető robotjának sikerét sok más projekt követte. Connell PhD-munkája keretében (Connell, 1989) olyan teljesen reaktív mobil robotot fejlesztett, amely képes volt tárgyakért elmenni és azokat elhozni. A viselkedésalapú paradigma többrobotos rendszerekre való kiterjesztését megtalálhatjuk Mataric (Mataric, 1997) és Parker (Parker, 1996) munkáiban. A GLR (Horswill, 2000) és a Colbert (Konolige, 1997) robotok megvalósították a párhuzamosított viselkedésalapú irányítást általános robotprogramozási nyelveken. Arkin átfogó képet nyújtott a téma aktuális helyzetéről (Arkin, 1998).
25	0.851852	0	Szállítás. A robotizált szállításnak sok oldala van. Az autonóm helikopterektől kezdve, amelyek nehezen megközelíthető helyekre juttathatnak el szállítmányokat, az automata kerekes székeken át (amik olyan embereket szállítanak, akik nem tudnák irányítani a hagyományos kerekes széket), egészen az autonóm rakodógépekig, amelyek felülmúlják a dokkokban a szakképzett humán sofőrt is a konténerek hajókra és teherautókra való bepakolásánál. Jó példa a beltéri szállító robotokra a  (a) ábrán látható Helpmate nevű robot. Ezt a robotot kórházak tucatjaiban használják étel és egyéb orvosi felszerelés szállítására. A kutatók olyan autószerű robotot is kifejlesztettek, amely képes önállóan navigálni az autópályán, és terepen is megállja a helyét. Üzemi körülmények között a szállítórobotok ma már rutinszerűen látják el a szállítási feladatokat raktárakban és a gyártósorok között.
25	0.444444	1	Kézenfekvőnek tűnhet két megközelítési mód. Akár izületi, akár külső koordinátákban adottak a sarokpontok, az első elképzelés szerint polinomokat illeszthetünk ezekre a pontokra. A pontok számának növekedésével azonban ilyenkor egyre magasabb fokszámú polinomot kellene választani. A gyakorlati megoldás során azért kell elvetni ezt a megoldási ötletet, mert a magas fokszámú polinomok oszcillálnak és így nem kívánatos mozgásokat, rezgéseket eredményeznének. Ha rendre lineáris szakaszokkal kötjük össze az adott pontokat, a sarokpontoknál végtelen rövid idő alatt kellene megváltoztatni a mozgásjellemzőket, amit szintén nem lehet megvalósítani. A tervezést ezért alacsony fokszámú polinomok, spline-ok alkalmazásával vagy lineáris szakaszokkal szokás végezni úgy, hogy a sarokpontoknál folyamatos, parabolikus átmenetet biztosítunk (Siegler).
8	0.419355	0	Az elsőrendű tudásbázisokra definiálható Kijelent/Kérdez eljárások rövid leírásával fogunk kezdeni. Ezután megvizsgáljuk a családi kapcsolatok, a számok, a halmazok és a listák tárgyterületét, valamint a wumpus világot. A következő alfejezet egy még alapvetőbb példát (elektronikus áramkörök) tartalmaz, míg a  fejezet mindent áttekint az univerzumban.
13	0.545455	0	Azt gondolhatjuk, hogy ez a fogadósdi nagyon körmönfont. Mi van például, ha valaki megtagadja, hogy fogadjon? Elrontja-e ez az egész érvelést? Minderre az a válasz, hogy a fogadásos játék elvont modellje annak a döntési helyzetnek, amelyben minden ágens minden pillanatban elkerülhetetlenül részt vesz. Minden cselekvés (beleértve a tétlenséget is) egyfajta fogadás, és a következmény tekinthető a fogadás nyereményének. Épp úgy nem utasíthatjuk vissza a fogadást, mint ahogy nem állíthatjuk meg az idő múlását.
24	0.458333	0	Eddig egy időpontban csak egy képpel foglalkoztunk. A videokamerák azonban másodpercenként 30 képkockát rögzítenek, és a kockák közötti különbségek fontos információk forrásai lehetnek. Abban az esetben, ha a kamera a háromdimenziós jelenethez képest mozog, a képen keletkező látszólagos mozgást optikai folyamnak (optical flow) nevezzük. A folyam a képbeli jellegzetességek mozgásirányát és mozgási sebességét írja le, amit a jelenet és a megfigyelő egymáshoz viszonyított relatív mozgásának következtében kapunk. A  (a) és (b) ábrán egy forgó Rubik-kockát ábrázoló videofelvételből látunk két filmkockát. A (c) képen az előbbi képekből számított optikai folyam vektorai láthatók. Az optikai folyam a jelenet struktúrájára nézve tartalmaz hasznos információt. Például egy mozgó kocsiból kinézve a távoli tárgyaknak sokkal lassúbb a látszólagos mozgása, mint a közelieknek, így a látszólagos mozgás üteme a távolságról is hordoz valamiféle információt.
5	0.181818	1	Az MRV heurisztika az összes változót egyenrangúnak találja, hiszen a táblázatból is látható, hogy most még mindegyik változónak ugyanakkora az értékkészlete (nincs kiemelt minimum). Tehát a DEG heurisztikára hárul a döntés. Szerencsére láthatjuk, hogy fokszám szerint az SA változó kiemelkedik a többi közül - az MRV által elő-szelektált változók közül ez a legközpontibb, legmeghatározóbb. Tehát első lépésben az SA változót választjuk.
6	0.1	1	Ez a megoldás sajnos már ránézésre sem tűnik túl ésszerűnek, de számos emberi közreműködéssel végzett kísérlet is azt állapította meg, hogy a résztvevők legtöbbször végigjátsszák a játékot, és szinte nem is fordul elő, hogy valaki az első lépésben lefelé lépne. Az összhasznot tekintve nyilvánvalóan a 100 jobbra lépés lenne ésszerű, ami a (100,100) kimenetelt eredményezné. Ez a játék tehát egy ellenpélda a hátráló indukció „ésszerűségére”.
19	0.545455	1	A burkoló módszerek összevonják a modelltanulás keresési lépését a megfelelő jegyhalmaz keresésével. Tehát a lehetséges jegyrészhalmazok terében folytatnak keresést, majd a kiválasztott halmazra végeznek modellkiértékelést. Végeredményként pedig a legjobb megtalált halmazt adják vissza. Legnagyobb hátránya e módszereknek, hogy erőforrás-igényesek, továbbá osztályozófüggő a jegyrészhalmaz kiválasztása. Ugyanakkor képesek a jegyek közötti interakciók modellezésére, és nem függetlenek az adott problémától.
5	0.181818	1	Természetesen, mint látjuk, az így kapott {NSW=RED, WA=RED, NT=GREEN} behelyettesítés már nem mond ellent a változók felett “démonként lebegő” korlátoknak, így az algoritmus újra meghívja önmagát rekurzíve ezzel a behelyettesítéssel. Tegyük fel, hogy ezúttal a Q változó kerül kiválasztásra, mint ami még nincs behelyettesítve, és ehhez rendeli az algoritmus először a RED értéket (Q=RED).
19	0.136364	0	H[3]: ∀x VárjunkE(x) ⇔ Vendégek(x, Néhány) * A negyedik példa – X[4] – pozitív. H[3] alapján negatív lenne, így hamis negatív. Így általánosítanunk kell H[3]-at. Nem törölhetjük Vendégek feltételt, mert ez egy mindent tartalmazó hipotézishez vezetne, ami ellentmondásban van X[2]-vel. Egyik lehetőség a következő diszjunkció bevezetése:
4	0.958333	0	 Megjegyzés Ebben a feladatban a  feladatban leírt típusú TSP-probléma megoldására lokális keresési módszerekkel kísérletezünk. a. Tervezze meg a TSP megoldására a hegymászó keresést. Az eredményeket az MFF-heurisztikával ( feladat) dolgozó A^* algoritmus optimális megoldásaival hasonlítsa össze. b. Tervezzen meg a TSP megoldására egy genetikus algoritmust. Az eredményeket más megközelítésekkel hasonlítsa össze. Esetleg szüksége lehet a (Larrañaga és társai, 1999) cikk egyes reprezentációs javaslataira.
11	0.076923	0	Vegyük észre, hogy a már szereplő pozitív következményeket nem szúrjuk be még egyszer, illetve ha egy negatív literál nem szerepel az állapotleírásban, akkor a következmény ezen része figyelmen kívül hagyható. Ez a definíció testesíti meg az úgynevezett Strips feltételezést (assumption): minden a következményben nem szereplő literál változatlan marad. Így a Strips elkerüli a  fejezetben bemutatott reprezentációs keret problémát (representional frame problem).
25	0.962963	0	Vegyük a  ábrán látható robotkart. Tegyük fel, hogy a robot alapja 60 cm hosszú, a felkarja és az alkarja pedig egyaránt 40-40 cm. Ahogy a  alfejezetben beláttuk, az inverz kinematikai feladat megoldása sokszor nem egyértelmű. Állítson fel egy explicit, zárt alakú megoldást az inverz kinematikára erre a robotkarra. Pontosan milyen feltételek mellett egyértelmű a megoldás?
9	0.931034	1	 Abból a mondatból, hogy „a lovak állatok” következik-e, hogy „egy ló feje egy állat feje”. Demonstrálja, hogy ez a következtetés érvényes, ha végrehajtjuk a következő lépéseket: a. Fordítsa le a premisszát és a következményt az elsőrendű logika nyelvére. Használjon három predikátumot: Feje(h, x), Ló(x) és Állat(x)! b. Negálja a következményt, és konvertálja a premisszát és a negált következményt konjunktív normál formára! c. Mutassa meg a rezolúció felhasználásával, hogy a következmény valóban következik a premisszából!
24	0.791667	0	Ez a  ábrán látható Illesztés algoritmus alapja. Az algoritmus megtalálja egy adott modell elhelyezkedését, vagy hibával tér vissza. Az algoritmus időbeli komplexitása a legrosszabb esetben arányos a modell- és képponthármasok kombinációinak számával, vagyis  -mal, megszorozva minden egyes kombináció ellenőrzésének költségével. Az ellenőrzés költsége M logN, mivel az M modellpont mindegyikére elő kell állítanunk a képbeli pozíciót, és meg kell találnunk a legközelebbi képponttól mért távolságot, ami egy log N művelet, ha a kép pontjai egy megfelelő adatstruktúrában helyezkednek el. Így legrosszabb esetben az algoritmus időbeli komplexitása O(M^4N^3 logN), ahol M és N a modell és a kép pontjainak száma. Az elhelyezkedésklaszterezésen alapuló technikák randomizálással lecsökkentik a komplexitást O(MN^3)-re. Ezen algoritmus alkalmazásának eredményei a tűzőgépre a  ábrán láthatók.  ábra - (a) A tűzőgép fényképén talált sarkok. (b) Az eredeti képre ráhelyezett hipotetikus rekonstrukció (Clark Olson hozzájárulásával). (a) A tűzőgép fényképén talált sarkok. (b) Az eredeti képre ráhelyezett hipotetikus rekonstrukció (Clark Olson hozzájárulásával).
12	0.904762	0	A korai, feltételeket és ciklusokat nem tartalmazó tervkészítők nem tükrözték pontosan a feltételes tervkészítés megközelítésmódját, de ennek ellenére néha kényszerítően reagáltak a környezet bizonytalanságára. Sacerdoti Noah rendszere kényszerítést használt a „kulcsok és dobozok” (keys and boxes) probléma megoldásában, egy olyan tervkészítési kihívásban, ahol a tervkészítő keveset tud a kiinduló állapotról. Mason (Mason, 1993) kijelentette, hogy a robotikai tervkészítés nélkülözni tudja és nélkülöznie is kell az érzékelést, és bemutatott egy érzékelőmentes tervet, ami a kiindulási pozíciótól függetlenül képes egy eszközt csuklómozdulatok sorozatával az asztal egy megadott pozíciójába mozgatni. Ezt az ötletet a robotika kontextusában tárgyaljuk (lásd  ábra).
24	0.166667	1	A nukleáris módszerekkel kimutatható anyagcsere eltérések helyét általában csak néhány cm-es pontossággal tudjuk megkapni, miközben a CT vagy MR milliméteres felbontású. A metabolikus rendellenességek tényleges helyzetét megnyugtató módon lehet úgy megállapítani, hogy a PET nyújtotta digitális adatokat számítógépes eljárásokkal rávetítjük ugyanazon beteg CT- vagy MR-felvételeire. Így hitelesebben tudjuk összevetni a funkcionális adatokat a finomabb morfológiai elváltozásokkal. A más készülékben, esetleg eltérő beállításban nyert adatok közötti eltéréseket úgy lehet kiküszöbölni, hogy kép-fúzió minél pontosabb megvalósítása érdekében mindkét vizsgálatot egy munkafolyamatban végezzük el. Ennek érdekében a PET-kamerákkal egybeépített CT- vagy MR-készülék segítségével, egy munkafolyamatban és pontosan azonos beállításban hozzuk létre a kétféle metszeti képet.
25	0.074074	1	Az I. generációs robotokat a 60-as években alkalmazták felemelés–lerakás típusú feladatokra. Ezek nem rendelkeztek a környezet változásait vizsgáló külső érzékelőkkel, vagy ha igen, akkor azok csak védelmet, reteszelését biztosítottak. A programozhatóság alacsony szintű volt, a robot mozdulatait a program egyértelműen meghatározta.
12	0.52381	0	A végrehajtás-monitorozás és újratervezés együttesen egy általános stratégia, ami mind a teljesen, mind pedig a részben megfigyelhető környezetekre alkalmazható a tervkészítési reprezentációk széles körén, beleértve az állapottér-, a részben rendezett és a feltételes terveket. A  ábra az állapottér-tervkészítésre mutat be egy egyszerű megközelítést. A tervkészítő ágens egy céllal indít, és kiinduló tervet készít ennek eléréséhez. Ellentétben más tervkészítő ágensekkel, az újratervező ágens követi mind a hátralevő, még végrehajtatlan terv részletet, valamint a teljes eredeti tervet teljes_terv-et. Cselekvésmonitorozást (action monitoring) használ: a terv következő cselekvésének végrehajtása előtt az ágens megvizsgálja az érzékelőit, hogy megbizonyosodjon arról, hogy a terv előfeltételei nem váltak-e váratlanul kielégítetlenné. Ha igen, akkor az ágens egy cselekvéssorozat újratervezésével megpróbál a teljes_terv egy pontjára visszajutni.  ábra - Egy cselekvésmonitorozó és -újratervező ágens. Ez szubrutinként a Tervkészítő teljes állapottér tervkészítő algoritmust használja. Ha a következő cselekvés előfeltételei nem teljesülnek, az ágens a teljes_terv lehetséges p pontjain iterál olyat keresve, amelyhez a Tervkészítő útvonalat tud tervezni. Ezt az útvonalat hívjuk javításnak. Ha a Tervkészítő sikeres a javításban, az új terv készítéséhez összefűzi a javítást és a terv p utáni részét. Az ágens ezután a terv első lépését adja vissza. Egy cselekvésmonitorozó és -újratervező ágens. Ez szubrutinként a Tervkészítő teljes állapottér tervkészítő algoritmust használja. Ha a következő cselekvés előfeltételei nem teljesülnek, az ágens a teljes_terv lehetséges p pontjain iterál olyat keresve, amelyhez a Tervkészítő útvonalat tud tervezni. Ezt az útvonalat hívjuk javításnak. Ha a Tervkészítő sikeres a javításban, az új terv készítéséhez összefűzi a javítást és a terv p utáni részét. Az ágens ezután a terv első lépését adja vissza.
22	0.259259	0	A másodiknak hét származtatottja lesz, minden NP átírási szabályhoz egy. * A célteszt (goal test) ellenőrzi, hogy a levezetési fa levelei pontosan megfelelnek-e a bemeneti füzérnek, nincsenek-e ismeretlenek és lefedetlen bemenetek.
22	0.925926	0	1758-ban David Hume Enquiry Concerning the Human Understanding c. műve amellett érvelt, hogy a nyelvi szövegeket „három, az elgondolások közötti kapcsolatokat leíró elv köti/fogja össze, nevezetesen a Hasonlóság, az idő- vagy térbeli Összefüggés és az Ok vagy Okozat”. Így kezdődött a koherenciarelációk meghatározásának hosszú története. Hobbs (Hobbs, 1990) adja meg nekünk a fejezetben használt halmazt; Mann és Thompson (Mann és Thompson, 1983) egy jobban kifejtett halmazt nyújt, amely magában foglalja a következőket: megoldás-összetartozás, bizonyíték, igazolás, motiváció, következtetés, sorozat, engedélyezés, kidolgozás, újrafogalmazás, feltétel, körülmény, ok, engedmény, háttér, valamint tézis-antitézis. Ez a modell fejlődött a retorikai struktúra elméletté (rhetorical structure theory, RST), amely valószínűleg napjaink legkiemelkedőbb elmélete (Mann és Thompson, 1988). Ez a fejezet átvesz egyes példákat (Jurafsky és Martin, 2000) Andrew Kehler által írt fejezetéből.
2	0.894737	1	c) Mutasson lehetséges ágensterveket olyan esetekre, amikor tiszta négyzetek piszkossá válhatnak, és a környezet geográfiája ismeretlen! Értelmes dolog-e, hogy ezekben az esetekben az ágens saját tapasztalataiból tanuljon? Ha igen, akkor mit kellene megtanulnia?
6	0.1	1	A fentebbi fólián a „Nemek harca” nevezetű másik alapvető 2-szereplős játékot láthatjuk. Itt a szereplők akkor kooperálnak, ha a másik kedvében szeretnének járni (tehát ha a Férj operába menne, míg a Feleség focimeccsre). A nem-kooperatív stratégia nyilván az önérdek érvényesítése.
3	0.916667	1	3-as mélységkorlátos mélységi bejárás: Ebben az esetben az eljárás követi az utakat ameddig lehet, legfeljebb 3 mélységben, majd visszalép, ezzel gyakorlatilag mindig a fa legbaloldaliabb, még ki nem fejtett csúcsát fogja megtalálni. A sorrend 1, 2, 4, 8, 9, 5, 10, 11. Itt már csak 8 csúcsot kellett kifejteni. Látható, hogy ez a keresési módszer kevesebb csúcsot fejtett ki, mire megtalálta a megoldást, és ez általában is igaz. Ugyanakkor (rossz mélységi korlát választása esetén) nem garantált, hogy talál megoldást, és ha talál is, nem biztos, hogy az optimális lesz.
14	0.826087	1	A megfelelő előrelátáshoz olyan számítógépes betegségmodellekre van szükség, melyek egy adott T időpontban elvégzett állapotfelmérésből, továbbá a beteg genetikai, demográfiai, klinikai és életmódbeli jellemzőiből következtetni tudnak a t idő elteltével várható fejleményekre.
8	0.935484	1	Ez az axiómahalmaz elég ahhoz is, hogy a kérdést ("Hallott Napóleon Wellington haláláról?") megválaszolhassuk, ugyanis ha a 'létezik t ( HallottAHaláláról(Napóleon, Wellington, t) ) mondatot hozzávesszük az axiómahalmazhoz, ellentmondásra jutunk! Ez pedig azt jelenti, hogy az adott axiómahalmaz mellett az állítás hamis.
2	0.526316	1	Keressünk meg minden telepített JDK verziót a számítógépen (tipikusan a c:\Program Files\java\*jdk* könyvtárakat), és ezeken belül helyezzük el a kicsomagolt .dll fájlokat a \bin, a kicsomaolt jogl.jar fájlt pedig a \lib könyvtárakban.
11	0.807692	0	Az ítéletlogikai megközelítés legnagyobb hátránya az eredeti problémából generált tudásbázis mérete. A Repül(p, a[1], a[2]) cselekvésséma például T × ∣Repülők∣ × ∣Repülőterek∣^2 számú különböző állításlogikai szimbólumot eredményez. Általánosságban a cselekvésszimbólumok számának korlátja a T × ∣Act∣ × ∣O∣^P, ahol az ∣Act∣ a cselekvéssémák száma, ∣O∣ a problémakör objektumainak száma, valamint P a cselekvés sémák maximális aritása (paramétereinek száma). A klózok száma még nagyobb. 10 időlépés, 12 repülőgép és 30 repülőtér esetén a teljes cselekvéskizárási axiómában 583 millió klóz van.
12	0.571429	0	A példánk a kockavilág problémakörből származik (lásd  alfejezet). A kiinduló állapot a  (a) ábrán látható. A Mozgat(x, y) cselekvésre van szükségünk, ami az x kockát az y kockára mozgatja, amennyiben mindketten szabadok. A cselekvés sémája:
8	0.935484	1	A Szomszédos predikátumtól elvárnánk, hogy szimmetrikus legyen, azaz Szomszédos(a,b) esetén Szomszédos(b,a) is igaz legyen. Ebben az egyszerű definícióban azonban minden mezőnek csak jobboldali és felső szomszédja lehet (a bal alsó sarokból számozva a négyzeteket).
4	0.125	0	Intuitíven nyilvánvaló, hogy az első megtalált megoldásnak optimális megoldásnak kell lennie, hiszen a következő határvonalakon az összes csomóponthoz nagyobb f költség, ebből adódóan nagyobb g költség tartozik (mivel minden célállapotra h(n) = 0). Intuitíven az is nyilvánvaló, hogy az A^* keresési algoritmus teljes. Ahogy egyre növekvő f értékű sávokat adunk a kereséshez, előbb-utóbb elérünk egy sávot, amelyhez tartozó f érték megegyezik egy célállapothoz vezető út költségével.^[36]  ábra - Románia térképe. Az ábra Arad mint kiinduló állapot esetén az f = 380, f = 400 és f = 420 értékekhez tartozó határvonalat mutatja. Egy adott határvonalon belüli csomópontokhoz a határvonal értékénél kisebb f költség tartozik. Románia térképe. Az ábra Arad mint kiinduló állapot esetén az f = 380, f = 400 és f = 420 értékekhez tartozó határvonalat mutatja. Egy adott határvonalon belüli csomópontokhoz a határvonal értékénél kisebb f költség tartozik.
14	0.608696	0	A   egyenlet úgy tekinthető, mint ami azt állítja, hogy az egyes állapotokból a „kilépések” várható értéke (azaz a jelenlegi „populáció”) egyenlő az összes állapotbóli „belépések” várható értékével. Ez a kapcsolat nyilvánvalóan teljesíthető, ha a várható átlépések mindkét irányban ugyanakkorák bármely állapotpár esetén. Ez a tulajdonság a teljes egyensúly (detailed balance):
22	0.925926	0	A nyelv mint cselekvés ötlete a 20. századi nyelvészeti beállítottságú filozófiából ered (Wittgenstein, 1953; Grice, 1957; Austin, 1962), leginkább a Speech Acts c. könyvből (Searle, 1969). A szólásaktus ötletének előfutára Protagorasz négyféle mondatkategóriája volt: ima, kérdés, válasz és ítélet (kb. i. e. 430-ból). A szólásaktusok tervalapú modelljét először Cohen és Perrault (Cohen és Perrault, 1979) javasolta. A nyelv cselekvéshez kapcsolását tervfelismerés segítségével történetek megértéséhez Wilensky tanulmányozta (Wilensky, 1983). Cohen, Morgan és Pollack (Cohen, Morgan és Pollack, 1990) gyűjt össze újabb munkákat e területen.
15	0.518519	0	Azonban mit is jelent, hogy egy rendszer „nem sima” vagy „rossz magaviseletű”? Technikailag ez azt jelenti, hogy jelentős nemlinearitás van jelen a rendszer viselkedésében abban a régióban, ami „közel” van a jelenlegi μ[t] átlaghoz (a Σ[t ]kovarianciamátrix szerint). Ennek a tulajdonságnak a nem technikai megértéséhez gondoljunk arra a példára, amikor egy dzsungelben szálló madár követésével próbálkoztunk. A madár nagy sebességgel egyenesen egy fatörzs felé tart. A Kalman-szűrő, akár reguláris, akár kiterjesztett a madár pozíciójára, csak Gauss-előrejelzést adhat, és ennek a Gaussnak az átlaga a fatörzs közepére esik, ahogyan a  (a) ábrán látható. A madár egy elfogadható modellje azonban egy elkerülő műveletet jelezne előre egyik vagy másik oldalra, ahogy az a  (b) ábrán látható. Egy ilyen modell erősen nemlineáris, mivel a madár döntése nagyon eltérő a fatörzshöz vett pontos pozíciójának függvényében.  ábra - Egy fa felé repülő madár (felülnézetben). (a) Egy Kalman-szűrő előrejelzése a madár helyzetére, ami egyetlen Gauss-eloszlás az akadály közepére illesztve. (b) Egy valósághűbb modell számításba veszi a madár elkerülő manővereit, és azt jelzi előre, hogy az egyik vagy a másik oldalon fog elszállni. Egy fa felé repülő madár (felülnézetben). (a) Egy Kalman-szűrő előrejelzése a madár helyzetére, ami egyetlen Gauss-eloszlás az akadály közepére illesztve. (b) Egy valósághűbb modell számításba veszi a madár elkerülő manővereit, és azt jelzi előre, hogy az egyik vagy a másik oldalon fog elszállni.
15	0.259259	0	Lineáris idejű algoritmus azonban létezik a legvalószínűbb sorozat megtalálására, de kicsit több gondolkozást igényel. Ugyanazon a Markov-tulajdonságon alapul, mint ami hatékony algoritmusokat eredményezett a szűrésre és a simításra. A problémáról való gondolkodás legkönnyebb módja, hogy ha minden sorozatot egy útvonalnak tekintünk egy gráfban, aminek a csomópontjai az egyes időpillanatokban a lehetséges állapotok. Egy ilyen gráf látható az esernyős problémára a  (a) ábrán. Most gondoljuk meg a gráfon keresztül vezető legvalószínűbb út megkeresésének a problémáját, ahol egy út valószínűsége (a likelihood érték) az útvonal menti átmenetek valószínűségeinek és az egyes állapotokban adott megfigyelések valószínűségeinek a szorzata. Koncentráljunk most azokra az útvonalakra, amelyek elérik az Eső[5 ]= igaz állapotot. A Markov-tulajdonság miatt fennáll, hogy az Eső[5 ]= igaz állapotba vezető legvalószínűbb útvonal tartalmazza azt a legvalószínűbb útvonalat, amely valamelyik 4. időpontbeli állapotba vezet, és amit egy átmenet követ az Eső[5 ]= igaz-ba; a 4. időpontbeli állapot pedig, ami része lesz az Eső[5 ]= igaz-ba vezető útnak, az az állapot, amelyik maximalizálja ennek az útvonalnak a valószínűségét. Fontos Másképpen fogalmazva, van egy rekurzív kapcsolat az x[t+1] állapotokba vezető legvalószínűbb útvonalak és az x[t ]állapotokba vezető legvalószínűbb útvonalak között. Ez a kapcsolat olyan egyenletként írható fel, amely az útvonalak valószínűségeit kapcsolja össze:
5	0.181818	1	Az előbbi, V=RED értékadás eredményeképpen az {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=BLUE, V=RED} behelyettesítés adódik, amely sajnos egyelőre még ellentmondásban van a 9-es korláttal (miszerint az NSW és V változók értékének különböznie kell).
12	0.428571	0	Ennek a környezetnek a „játékfáját” a  ábrán mutatjuk be. A cselekvéseket a robot a fa „állapot” csomópontjaiban hajtja végre, majd a körrel jelölt „valószínűségi” csomópontokban a természet dönt a cselekvés kimeneteléről. A megoldás egy részfa, mely (1) minden levelében egy cél csomópontot tartalmaz, (2) minden „állapot” csomóponthoz egy cselekvést specifikál, és (3) minden „valószínűségi” csomópontban tartalmazza az összes kimenetelhez tartozó ágat. Az ábrán a megoldást vastag vonallal jelöltük, ami a [Balra, if OttBal ∧ TisztaBal ∧ TisztaJobb then [] else Szív] tervnek felel meg. (Mivel állapottér-tervkészítőt használunk, a feltételes lépésekben használt tesztek egyelőre teljes állapot leírások.)  ábra - A „dupla-Murphy” porszívóvilág keresési fájának első két szintje. Az állapotcsomópontokban és a vagy csomópontokban cselekvéseket kell választani. A valószínűségi csomópontok, amelyeket körökkel jelöltünk és csomópontok, ahol, ahogy azt a kimenő ágakon szereplő ív is jelöli, minden kimenetelt kezelni kell. A megoldást vastag vonallal jelöltük. A „dupla-Murphy” porszívóvilág keresési fájának első két szintje. Az állapotcsomópontokban és a vagy csomópontokban cselekvéseket kell választani. A valószínűségi csomópontok, amelyeket körökkel jelöltünk és csomópontok, ahol, ahogy azt a kimenő ágakon szereplő ív is jelöli, minden kimenetelt kezelni kell. A megoldást vastag vonallal jelöltük.
11	0.807692	0	A kielégíthetőségen alapuló tervkészítők nagyon nagy tervkészítési problémákat képesek kezelni – például a többtucatnyi dobozból álló kockavilág probléma 30 lépéses tervét. A propozíciós kódolás mérete, valamint a megoldás költsége nagymértékben problémafüggő, de a legtöbb esetben az ítéletlogikai axiómák t árolásához szükséges memóriaméret a szűk keresztmetszet. Ennek a kutatásnak egy érdekes eredménye, hogy a visszalépéses algoritmusok (mint a DPLL) gyakran hatékonyabbak voltak a tervkészítési problémák megoldásában, mint a lokális keresési algoritmusok (például a WalkSAT). Ennek oka, hogy az állításlogikai axiómák többsége Horn-klóz, ami egység terjesztéstechnikákkal kezelhető hatékonyan. Ez a megfigyelés hibrid algoritmusok kifejlesztéséhez vezetett, melyek a véletlen keresési, a hiba-visszaterjesztési és az egységterjesztési módszereket kombinálják.
4	0.916667	1	Itt a visszatartott állapot az, amelyet megtartunk a memóriában. Most tehát csak egy pontból indulunk el, és tetszőleges pontot tartunk észben, így ez a változat megegyezik egy véletlen csúcsból indított szélességi kereséssel.
11	0.115385	0	Napjainkra, nyilvánvalóvá vált, hogy a Strips nem eléggé kifejező néhány valós problémakörhöz. Ennek eredményeképpen számos nyelvváltozatot dolgoztak ki. A  ábra röviden összefoglalja az egyik legfontosabbat, a cselekvésleíró nyelvet (Action Description Language – ADL) úgy, hogy összehasonlítja azt a Strips alapverziójával. ADL nyelven a Repülés leírása az alábbi:
5	0.181818	1	Az AC3/MAC algoritmus első körben az előbbi NSW=RED értékadásnak megfelelően először is {RED}-re redukálja az NSW változó értékkészletét, majd létrehozza azoknak az irányított éleknek a listáját, amikkel - mint kiindulással - a tankönyv  ábráján szereplő AC3 algoritmust meghívja. Ez a lista a következő:
1	0.068966	0	Ez a hat terület nagyjából lefedi az MI-t. Turing becsületére válik, hogy egy olyan tesztet talált ki, amely 50 év múltával is releváns maradt. Az MI-n belül a kutatók sok erőfeszítést mégsem fejtettek ki a Turing-teszt teljesítése érdekében, abban a hiedelemben, hogy a mögötte sorakozó elvek tanulmányozása fontosabb, mint egy példány duplikálása. A „mesterséges repülés” kutatása akkor járt sikerrel, amikor a Wright testvérek abbahagyták a madarak utánzását, és az aerodinamikát kezdték tanulmányozni. A repüléssel foglalkozó könyvek nem azt a célt fogalmazzák meg, hogy olyan „gépeket kellene építeni, amelyek annyira hasonlóan repülnek a galambokhoz, hogy ezzel akár más galambokat is képesek megtéveszteni”.
5	0.181818	1	A következtetés tehát gond nélkül lezajlott, így a visszalépéses keresési algoritmus újra meghívja önmagát az aktuális behelyettesítéssel, és csak ennek során „veszi észre”, hogy a kapott behelyettesítés már teljes, azaz mivel konzisztens is, így megoldás, amivel ekkor nyomban vissza is tér, szintről-szintre, feljebb és feljebb a rekurzióban, míg végül a felhasználó vissza nem kapja a megoldást.
2	0.947368	0	Ez a gyakorlat felfedi az ágensfüggvények és a programok közötti különbségeket. a. Lehetséges több mint egy ágensprogram, amely egy adott ágensfüggvényt valósít meg? Adjon meg egy példát vagy mutassa meg, miért nem lehetséges! b. Vannak olyan ágensfüggvények, amelyeket nem lehet programmal megvalósítani? c. Rögzítve egy géparchitektúrát, igaz-e, hogy minden egyes ágensprogram pontosan egy ágensfüggvényt valósít meg? d. Lehetséges több mint egy ágensprogram, amely egy adott ágensfüggvényt valósít meg?
3	0.958333	0	a. Implementálja ezt a környezetet és egy erre a környezetre vonatkozó problémamegoldó ágenst. Minden teleportálás után az ágensnek új célt kell megfogalmaznia, beleértve a saját pozíció felfedezését. b. Dokumentálja az ágens teljesítményét (kommentálja az ágens mozgását), és írjon egy jelentést az ágens 100 epizódra vonatkozó teljesítményéről. c. Módosítsa a környezetet úgy, hogy az ágens az esetek 30%-ban ne a szándékolt helyen találja magát (a helyet a látható sokszögcsúcsokból sorsoljuk, ha van ilyen egyáltalán, különben nincs mozgás). Ez a valós robot hibás mozgásának egy durva modellje. Módosítsa ágensét úgy, hogyha az ilyen hibát detektál, derítse ki, hol van, és készítsen tervet, hogy az eredeti pozícióba visszakerülhessen, ahonnan az eredeti tervét folytatja. Emlékezzen arra, hogy néha az eredeti pozícióba való visszatérés is kudarccal végződhet! Mutasson egy olyan ágenst, amely két egymás utáni hibás mozgással is sikeresen megbirkózik, és eléri a célt. d. Most két különböző visszaállítási sémával kísérletezzen egy hiba megtörténte után: (1) induljon az eredeti út legközelebb eső csúcsa felé, és (2) tervezze át az utat a cél felé az új pozícióból kiindulva. Hasonlítsa össze a három visszaállítási séma teljesítményét. Meg fogja-e változtatni az összehasonlítás eredményét a keresési költségek figyelembevétele? e. Most tételezze fel, hogy vannak lokációk azonos „panorámával” (tételezzük fel például, hogy a világ egy négyzetrács négyzetes akadályokkal). Milyen problémákkal kell most az ágensnek szembenéznie? Milyenek most a megoldások?
7	0.08	0	Az ágens detektálja a szellőt a [2, 1]-ben, tehát egy csapdának kell lennie valamelyik szomszédos négyzetben. A csapda nem lehet az [1, 1]-ben a játék szabályai szerint, így csapdának kell lennie a [2, 2]-ben vagy a [3, 1]-ben vagy mindkettőben. A Cs? jelölés egy lehetséges csapdát jelez a mezőkben a  (b) ábrán. Ezen a ponton csak egy olyan ismert négyzet van, ami OK, és amit még nem látogatott meg. Így a megfontolt ágens visszafordul, visszamegy az [1, 1]-be és az [1, 2]-be halad tovább.  ábra - Az ágens első lépése a wumpus világban. (a) A kezdeti helyzet a [Nincs, Nincs, Nincs, Nincs, Nincs] érzékelése után. (b) Az első lépés után, érzékelve a [Nincs, Szellő, Nincs, Nincs, Nincs]-et. Az ágens első lépése a wumpus világban. (a) A kezdeti helyzet a [Nincs, Nincs, Nincs, Nincs, Nincs] érzékelése után. (b) Az első lépés után, érzékelve a [Nincs, Szellő, Nincs, Nincs, Nincs]-et.
5	0.636364	0	Most tehát hogy mind DA-t, mind a rá vonatkozó kényszereket eltávolítottuk, a kényszerkielégítési probléma bármely megoldása konzisztens lesz a DA számára választott értékkel. (Ez bináris kényszerkielégítési problémák esetén működik; a helyzet jóval bonyolultabb magasabb rendű kényszerek esetén.) Tehát a keletkező fa a fenti algoritmussal megoldható, és így az egész problémát is megoldottuk. Általános esetben persze (nem úgy, mint a térképszínezésnél) a DA számára választott érték lehet rossz is, és ekkor egyesével végig kell próbálgatni őket. Az általános algoritmus az alábbi: 1. Válasszunk ki egy S részhalmazt a Változók[csp]-ből úgy, hogy a kényszergráf S eltávolítása után fa legyen. S-et ciklikusság-vágóhalmaznak (cycle cutset) nevezzük. 2. S minden egyes változójának minden egyes, az S-re vonatkozó összes kényszert kielégítő lehetséges hozzárendelésére: a. vegyük ki a fennmaradó változók tartományaiból az S számára választott hozzárendeléssel inkonzisztens értékeket, és b. ha a fennmaradó kényszerkielégítési problémának van megoldása, akkor adjuk vissza ezt az S hozzárendelésével együtt.
12	0.47619	0	Az általános logikai mondatok egyik hátulütője, hogy mivel sok ekvivalens, de különböző logikai mondat írhatja le ugyanazt a hiedelmi állapotot, az ismétlődő állapotok ellenőrzése általános tételbizonyító képességeket vár el a gráfkereső algoritmustól. Ezért a mondatok egy kanonikus reprezentációját szeretnénk, amelyben minden hiedelmi állapot pontosan ugyanannak a mondatnak felel meg.^[128] Egy ilyen reprezentáció, azaz ítéletállítások nevei alapján rendezett literálok konjukcióját használja, melynek egy példája a ¬OttJobb ∧ TisztaJobb. Ez a  fejezet nyílt világ feltételezésében (open-world assumption) egy egyszerű állapotleírás. Nem minden logikai mondat írható fel ilyen alakban (például nincs mód az OttBal ∨ TisztaJobb felírására), de számos probléma kezelhető. 3. Tudás ítéletállítások (knowledge propositions), amelyek az ágens ismereteit írják le. (Ugyanezt lásd a  alfejezetben.) A kiinduló állapotunk:
24	0.166667	1	Az országban jelenleg négy helyen végeznek PET vizsgálatokat: * Budapesten az Országos Idegsebészeti Tudományos Intézetben * Budapesten a Pozitron-Diagnosztika Központban * Debrecenben a PET Centrumban és * Kecskeméten a Megyei Kórház Onkológiai Központjában
7	0.8	0	Az áramköröket az adatfolyamok (dataflow) mintájára értékeljük ki, minden időlépésben beállítjuk a bemenetet, és a jeleket végigterjesztjük a hálózaton. Ha egy kapunak minden bemenete rendelkezésre áll, létrehoz egy kimenetet. Ez a folyamat közeli kapcsolatban van az előrefelé láncolással és az ÉS-VAGY gráfokkal, mint amilyen a  (b) ábrán látható.
15	0.259259	0	Az egyik megközelítés, amit kipróbálhatunk a következő lineáris idejű algoritmus: használjuk a simító algoritmust, hogy megtaláljuk az időjárás a posteriori eloszlását minden időpillanatban; majd állítsuk elő a sorozatot minden egyes lépésnél az a posteriori szerinti legvalószínűbb időjárást felhasználva. Egy ilyen megközelítést kötelező gyanakvással kell fogadnia az olvasónak, mivel a szűrés által kiszámított a posteriori eloszlások az egyes időpontok feletti eloszlások, ezzel szemben a legvalószínűbb sorozat megtalálásához az összes időpont feletti együttes valószínűségeket kell figyelembe venni. Az eredmények valójában nagyon különbözők lehetnek (lásd  feladat).
17	0.533333	0	ahol a egy normalizációs konstans, ami a hiedelmi állapot 1-re összegzését biztosítja. Ezt az egyenletet úgy rövidíthetjük, hogy b′ = Előre(b, a, o). Fontos A RMMDF-ek megértéséhez szükséges lényegi meglátás pedig ez: az optimális cselekvés csak az ágens aktuális hiedelmi állapotától függ. Így az optimális eljárásmód leírható a hiedelmi állapotok cselekvésekre történő π^*(b) leképzésével. Ez nem függ az ágens aktuális állapotától, amiben tartózkodik. Ez hasznos tulajdonság, mivel az ágens nem ismeri az aktuális állapotát; csupán a hiedelmi állapotát. Ekkor egy RMMDF ágens döntési ciklusa a következő: 1. Adott jelenlegi b hiedelmi állapot esetén hajtsuk végre az a = π^* (b) cselekvést. 2. Fogadjuk az o megfigyelést. 3. Állítsuk a jelenlegi állapothiedelmet Előre(b, a, o)-ra, és ismételjük meg a ciklust.
8	0.935484	1	Bármely x pontosan akkor eleme egy s listának, ha ez az első eleme, vagy létezik olyan s' lista, aminek eleme, és ebből az s' listából valamely a elemet az elejére hozzávéve s megkapható. (Megjegyezzük, hogy ez az axióma felírható lenne a Rest és Append függvényekkel is, ekkor a listát hátulról göngyölnénk fel rekurzívan.)
14	0.869565	1	A fenti ábra a teljes rendszer egy részletét ábrázolja. Az ábrán a referencia rendszer látható, továbbá a kívánt vízszint van a kijelzőjét mutató blokk.  ábra - A megépített rendszerben a tartály szimulációja A megépített rendszerben a tartály szimulációja
23	0.388889	0	A következő lépés a szinonimák (synonyms) felismerése, mint amilyen a „dívány” és a „kanapé”. A szótövesítéshez hasonlóan ez is a felidézés kismértékű növekedését eredményezheti, azonban a pontosságot veszélyezteti, ha túl agresszíven alkalmazzuk. Akik Tim Couch futballistára kíváncsiak, nem szeretnének átvergődni a kanapékról (couch – kanapé) szóló dokumentumokon. Az a probléma, hogy „a nyelv ugyanúgy irtózik az abszolút szinonimáktól, mint ahogy a természet retteg a vákuumtól” (Cruse, 1986). Azaz, amennyiben két szó azonos dolgot jelent, a nyelv beszélői törekednek a jelentés módosítására, hogy megszüntessék a zűrzavart.
5	0.181818	1	2. lépés: ebben a lépésben előretekintés történik, és mivel eddig ugyanaz az állapot adódott a keresés során, ezért az előretekintés eredménye is megegyezik azzal, ami az  szakasz -  Visszalépéses keresés előretekintéssel volt.
6	0.95	0	 ábra - Egy egyszerű játék kiinduló állása. Az A játékos indul elsőnek. Mindkét játékos felváltva lép és a zsetonját a szomszédos szabad helyre helyezheti, mindkét irányban. Ha a szomszédos mező foglalt, akkor a játékos az ellenfél felett átugorhat a következő szabad helyre, ha van ilyen. (Például ha A a 3-n és B a 2-n van, akkor A visszaléphet 1-re.) A játéknak vége, ha az egyik játékos eléri a tábla ellentétes végét. Ha az A játékos elsőnek éri el a 4-et, a játék értéke +1, ha B játékos éri el elsőnek az 1-et, a játék értéke az A számára –1. Egy egyszerű játék kiinduló állása. Az A játékos indul elsőnek. Mindkét játékos felváltva lép és a zsetonját a szomszédos szabad helyre helyezheti, mindkét irányban. Ha a szomszédos mező foglalt, akkor a játékos az ellenfél felett átugorhat a következő szabad helyre, ha van ilyen. (Például ha A a 3-n és B a 2-n van, akkor A visszaléphet 1-re.) A játéknak vége, ha az egyik játékos eléri a tábla ellentétes végét. Ha az A játékos elsőnek éri el a 4-et, a játék értéke +1, ha B játékos éri el elsőnek az 1-et, a játék értéke az A számára –1.
25	0.962963	0	Vegyük a  ábra egyszerűsített robotját. Tegyük fel, hogy a robot derékszögű koordinátái ismertek minden időpillanatban, mint ahogy a célhelyzet is. Ugyanakkor van egy akadály, amelynek a helyzete nem ismert. A robot csak a közvetlen környezetében képes érzékelni az akadályt, mint ahogy azt az ábra is illusztrálja. Az egyszerűség kedvéért tételezzük fel, hogy a robot mozgása zajjal nem terhelt, és az állapottér diszkrét. A  ábra csak egy példa. Ebben a feladatban azt kérjük, hogy minden lehetséges rácsvilágra gondoljon, ahol van érvényes út a start pozíciótól a célig.  ábra - Egyszerűsített robot egy labirintusban. Lásd  feladat. Egyszerűsített robot egy labirintusban. Lásd  feladat. a. Tervezzen egy modellalapú vezérlőt, amely garantálja, hogy a robot mindig eléri a célt, amennyiben ez lehetséges. A modellalapú vezérlő egy, a mozgás során fokozatosan kialakított térkép formájában képes tárolni a terep jellemzőit. A robot az egyes mozdulatok között tetszőleges időt tölthet gondolkodással. b. Most pedig tervezzen egy reaktív vezérlőt ugyanerre a feladatra. Ez a vezérlő nem tárolhatja a korábbi érzékelések eredményeit. (Azaz nem készíthet térképet!) Ehelyett minden döntését az aktuális érzékelő adatai alapján hozza meg, amely magában foglalja a saját helyének és a cél pontos helyzetének ismeretét. A döntéshozási időnek függetlennek kell lennie a környezet méretétől, valamint a már megtett lépések számától. Maximum hány lépés kell a robotnak ahhoz, hogy elérje célját? c. Hogy fog viselkedni az (a) és (b) pontban megtervezett vezérlő, ha az alábbi hat feltétel valamelyike fennáll: folytonos állapottér; zajjal terhelt érzékelés; zaj a mozgásban; zaj mind a mozgásban, mind az érzékelésben; a cél helyzete ismeretlen (csak akkor ismeri fel a célt, ha az az érzékelő hatótávolságán belülre kerül); vagy mozgó akadályok vannak. Minden egyes feltételre és mindkét vezérlőre adjon egy-egy példát, amikor is a robot elbukik (vagy magyarázza el, miért nem tud).
10	0.787879	0	A példa mutatja, hogy az adatbázisok és az emberi kommunikáció konvenciója az elsőrendű logikától legalább két aspektusban különbözik. Először, az adatbázisok (és az emberek) feltételezik, hogy a megadott információ teljes, vagyis hogy az igazként ki nem jelentett rögzített atomi formulákról feltételezhetjük, hogy hamisak. Ez az ún. zárt világ feltételezés (closed-world assumption, CWA). Másodszor, elfogadjuk általában, hogy különböző nevek különböző objektumokat jelentenek. Ez az ún. egyedi elnevezések feltételezés (unique names assumption, UNA), amit a cselekvés-nevek kontextusában először a  alfejezetben vezettünk be.
15	0.222222	0	A figyelmes olvasó észrevehette, hogy a  ábrán látható Bayes-hálóstruktúra egy polifa (polytree) a  fejezet szóhasználatában. Ez azt jelenti, hogy a csoportosító algoritmus egy nyilvánvaló alkalmazása szintén lineáris idejű algoritmust eredményez, ami a teljes sorozatra kiszámítja a simított becslést. Mára már világossá vált, hogy az előre-hátra algoritmus valójában a csoportosító eljárásokban használt polifa terjesztési algoritmusnak egy speciális esete (bár a kettőt egymástól függetlenül fejlesztették ki).
5	0.181818	1	A táblázat szerint látható, hogy a választás egyértelmű: az MRV már csak a V-t javasolja, és ezt már a DEG (fokszám) sem befolyásolja. Mivel V-nek egyetlen értéke van már csak (a BLUE, amihez az LCV heurisztika szokás szerint a zérus értéket rendeli), ezért V-nek a BLUE-t adjuk most értékül (V=BLUE).
13	0.818182	0	A célunk az lesz, hogy mindhárom négyzetre kiszámítsuk a csapda valószínűségét. (A példa erejéig elfelejtjük a wumpust és az aranyat.) A wumpus világ idevágó tulajdonságai a következők: (1) egy csapda szellőt okoz a szomszédos négyzetekben, és (2) az [1,1]-en kívül minden négyzet 0,2 valószínűséggel tartalmaz csapdát. Első lépésként a számításhoz szükséges véletlen változókat kell meghatároznunk: * Az ítéletlogikához hasonlóan, itt is minden négyzethez egy (C[i,j]) logikai változóra van szükségünk, amelynek értéke akkor és csak akkor igaz, ha az [i,j] négyzet tartalmaz csapdát. * Vannak továbbá S[i,j] logikai változóink is, amelyek igaz értéke egyértelműen az [i,j] négyzetben tapasztalható szellőre utal; példánkban csak a megfigyelt – esetünkben az [1, 3], [2, 2] és [3, 1] négyzetekre – vonatkozó változókat használjuk.
7	0.48	0	A visszafelé láncolás algoritmus, ahogy azt a neve is sugallja, visszafelé működik a lekérdezésből indulva. Ha a q lekérdezésről tudjuk, hogy igaz, akkor nem szükséges további munka. Egyébként az algoritmus megtalál minden olyan implikációt a tudásbázisban, amelynek a következménye q. Ha valamelyik ilyen implikációnak az összes premisszáját be lehet bizonyítani (visszafelé láncolással), akkor q igaz. Amikor a  ábrán a Q lekérdezésre alkalmazzuk a módszert, akkor ez az ábrán követve vissza, lefelé működik, addig, amíg el nem éri az ismert tények halmazát, ami a bizonyítás alapja. A részletes algoritmust meghagyjuk feladatnak, és mint az előrefelé láncolásnál, egy hatékony implementáció itt is lineáris időben működik.
1	0.137931	0	Ennek a megközelítésnek két alapvető baja van. Először is a logikai jelölésrendszer által igényelt formális elemekkel informális tudást kifejezni nem ilyen egyszerű, különösen ha a tudás nem 100%-osan biztos. A másik az, hogy nagy a különbség egy probléma „elvi”, illetve gyakorlati megoldása között. Már a néhány tíz tényt kitevő problémák megoldása is kimerítheti egy tetszőleges számítógépes rendszer számítási erőforrásait, hacsak valamilyen módon nincs vezérelve, hogy melyik következtetési lépésekkel próbálkozzék először. Annak ellenére, hogy ez a két probléma a számítógépes következtető rendszer bármilyen elven történő fejlesztésénél felbukkan, először a logicista hagyományban jelent meg.
9	0.931034	1	Ha viszont úgy végezzük az átnevezést, hogy minden mondaton belül egy adott változó minden előfordulását ugyanarra nevezzük át, viszont két mondat között nincs átfedés a változók nevében, úgy nem látom, mi okozhat problémát.
26	0.142857	0	Kedvesnek, találékonynak, szépnek és barátságosnak lenni, kezdeményezni, humorérzéket mutatni, megkülönböztetni a helyest a helytelentől, hibákat követni el, szerelmesnek lenni, élvezni a tejszínes epret, elérni, hogy valaki szerelmes legyen belé, tapasztalatból tanulni, helyesen használni a szavakat, saját gondolatai alanyának lenni, annyira változatosan viselkedni, mint az ember, valami igazán újat tenni.
4	0.625	0	képlettel frissítve, ahol α egy kis konstans. Más esetekben nem biztos, hogy a célfüggvény differenciálható formában áll a rendelkezésünkre – például a repülőterek helyeit egy konkrét esetben esetleg egy nagyméretű gazdasági szimulációs szoftvercsomag futtatásával határozhatjuk meg. Az ilyen esetekben az ún. empirikus gradiens (empirical gradient) meghatározásához folyamodhatunk, minden koordináta mentén egy kis pozitív és negatív változáshoz kiszámítva a választ. Az empirikus gradiens keresés ugyanaz, mint a legmeredekebb emelkedő hegymászás az állapottér diszkretizált változatában.
10	0.030303	0	A világról mindent reprezentálni ijesztő perspektíva. Valójában természetesen nem fogjuk mindennek a komplex leírását megadni – ez még egy 1000 oldalas könyvnek is sok lenne –, de megjelöljük világosan annak a helyét, ahova egy tetszőleges területről szóló új tudás beilleszthető. Így például definiálni fogjuk, hogy mit is jelent fizikai objektumnak lenni, és a különböző objektumok részletei – robotok, tv-készülékek, könyvek vagy bármi más – később illeszthetők ebbe a keretbe. A fogalmak egy általános keretét felső ontológiának (upper ontology) nevezzük, mert az az általános konvenció, hogy a gráfszerű ábrázolásnál az általánosabb fogalmak felül helyezkednek el, a konkrétabb fogalmak pedig alul (lásd  ábra).
5	0.272727	0	Miután az algoritmus már kiválasztott egy változót, el kell döntenie, hogy milyen sorrendben vizsgálja meg ennek értékeit. Erre néha a legkevésbé-korlátozó-érték (least-constraining-value) heurisztika lehet hasznos. Ez a heurisztika előnyben részesíti azt az értéket, amely a legkevesebb választást zárja ki a kényszergráfban a szomszédos változóknál. Például tegyük fel, hogy az  ábra esetében már létrehoztuk az NyA = vörös és az ÉT = zöld parciális hozzárendelést, és most Q számára akarunk értéket találni. A kék rossz választás volna, mert ez kizárja Q szomszédjának, DA-nak utolsó megengedett értékét. A legkevésbé korlátozó heurisztika ezért a kékkel szemben a vöröset részesíti előnyben. Általában véve a heurisztika megpróbálja a későbbi változó-hozzárendelések számára a lehető legnagyobb szabadságot meghagyni. Természetesen ha egy probléma összes megoldását meg szeretnénk találni, és nem elégszünk meg csupán eggyel, akkor a sorrend közömbös, hiszen úgyis minden értéknek sorra kell kerülnie. Ugyanez igaz akkor is, ha a problémának nincsen megoldása.
22	0.074074	1	Jelenleg nem rendelkezünk olyan matematikai modellel, amely hatékonyan egyesítené a logikai következtető képességet (pl predikátum kalkulus) a példák alapján való tanulás képességével és robosztusságával (neurális hálók). Egy ilyen modell felfedezése nagyban előrelendítené a természetes nyelv feldolgozás területét, és valószínűleg közelebb hozná a tudás alapú és empirikus megközelítés eltérő megoldásait is.
14	0.26087	0	Ezt a probit eloszlást (probit distribution) a  (a) ábra illusztrálja. Alakja azzal az érveléssel igazolható, hogy az alapul szolgáló döntési folyamatnál létezik egy pontos küszöb, de ennek pontos helyét egy véletlen normális eloszlású zaj befolyásolja. A probit modell egy alternatívája a logit eloszlás (logit distribution), amely a szigmoid függvényt (sigmoid function) használja egy elmosódott küszöb előállításához:
23	0.944444	0	Készítsen öt lekérdezésből álló teszthalmazt, majd küldje el három nagy webkeresőnek. Értékelje mindegyik pontosságát az első 1, 3 és 10 dokumentumra és az átlagos reciprok rangra. Próbálja megmagyarázni az eltéréseket.
1	0.068966	1	A sejtautomaták az elméletből a gyakorlati alkalmazásokba is átkerültek, nem csak szoftveres, hanem hardveres implementálásokban is, amelyek közül több kereskedelmi forgalomban is kapható vagy kapható volt. 1987-ben jelent meg Tommaso Toffoli és Norman Margolus „Cellular Automata Machines” című könyve, amelyben egy ilyen hardveres megoldás részletezve van [HTM]. Ez a CAM-6 nevet viseli.
21	0.125	0	Az egyszerűség kedvéért egy ismert, teljes mértékben hozzáférhető környezet állapot-reprezentációját használó passzív ágens esetét tárgyaljuk először. Passzív tanulás esetén az ágens π stratégiája rögzített, az s állapotban mindig a π(s) cselekvést hajtja végre. A cél egyszerűen a stratégia jóságának – tehát az U^π (s) hasznosságfüggvénynek – a megtanulása. Példaként a  fejezetben bevezetett 4 × 3-as világot fogjuk használni. A  ábra mutatja ezt a világot, és a megfelelő hasznosságokat. Nyilvánvaló, hogy a passzív tanulás hasonló a stratégiakiértékelési (policy evaluation) feladathoz, amely része a  alfejezetben ismertetett stratégiaiterációs (policy iteration) algoritmusnak. A legfontosabb különbség, hogy a passzív ágens nem ismeri az állapotátmenet-modellt (transition model), a T(s, a, s')-t, amely annak a valószínűséget adja meg, hogy az a cselekvés hatására az s állapotból az s' állapotba jutunk, továbbá nem ismeri a jutalomfüggvényt (reward function), R(s)-et, amely minden állapothoz megadja az ott elnyerhető jutalmat.  ábra - (a) A 4 × 3-as világban alkalmazott π stratégia. Ez optimális stratégia, ha nem alkalmazunk leértékelést, és minden állapotban, amely nem végállapot, R(s)= −0,04. (b) A 4 × 3-as világ állapotainak hasznossága a π stratégia esetén. (a) A 4 × 3-as világban alkalmazott π stratégia. Ez optimális stratégia, ha nem alkalmazunk leértékelést, és minden állapotban, amely nem végállapot, R(s)= −0,04. (b) A 4 × 3-as világ állapotainak hasznossága a π stratégia esetén.
18	0.736842	1	Eltérően az előző példától, a hipotézistér – amely ugyanolyan méretű, mint az előbb: 6 hipotézisből áll – most olyan hipotéziseket tartalmaz, amelyeknek nem nagy a hibájuk, még az általunk rossznak tekintetteknek sem.
25	0.37037	0	A robotmozgási feladatok megoldásának első lépéseként a problémához ki kell találni egy megfelelő reprezentációt. Kezdjük egy egyszerű probléma egyszerű ábrázolásával. Vegyük a  (a) ábrán látható robotkart. Két csuklóval rendelkezik, amelyek egymástól függetlenül mozoghatnak. Ha a csuklókat mozgatjuk, megváltozik a könyök és a megfogó (x, y) koordinátája. (A kar z irányban nem képes elmozdulni.) Mindez azt sugallja, hogy a robot konfigurációi leírhatók egy négydimenziós koordináta-rendszerben, ahol: (x[könyök], y[könyök]) jelenti a könyök relatív helyzetét a környezethez képest, míg (x[megfogó], y[megfogó]) a megfogó helyzetét. Világos, hogy ez a négy koordináta leírja a robot összes lehetséges állapotát. Ezt a leírást munkatér-reprezentációnak (workspace representaion) is nevezik, mivel a robot helyzetét ugyanabban a koordináta-rendszerben írjuk le, mint a mozgatni (vagy éppen elkerülni) kívánt tárgyakét. A munkatér-reprezentáció jól használható ütközés elkerülésre, különösen akkor, ha a tárgyakat egyszerű poligonokként modellezzük.
7	0	0	A természetes nyelv megértése szintén igényli, hogy rejtett állapotokra következtessünk, nevezetesen, hogy a beszélő szándékát megismerjük. Amikor azt halljuk, hogy „János egy gyémántot látott az ablakon keresztül, és szeretné (azt) megkapni”, akkor tudjuk, hogy az „azt” a gyémántra vonatkozik, és nem az ablakra. Ilyenkor, talán nem is tudatosan, a relatív értékekről meglévő ismereteink segítségével következtetünk. Hasonlóan, amikor azt halljuk, hogy „János kidobott egy követ az ablakon keresztül, és betörte (azt)”, akkor tudjuk, hogy az „azt” az ablakra vonatkozik. A következtetés lehetővé teszi számunkra, hogy megbirkózzunk a kijelentések virtuálisan végtelen változatosságával, hétköznapi tudásunk egy véges halmazát felhasználva.
27	0.4	1	A korlátozottan optimalitás tehát már nem az ágens-függvényekre tesz megkötést, hanem adott ágens-architektúra mellett az ágens-programokra, s így definíciójából következően megvalósítható elvárás. Azon ágenst tekintjük korlátozottan optimálisnak, amelynek a programja a lehető leghasznosabb működést eredményezi az adott környezetben és architektúrán.
20	0.821429	0	Az ezen egyenlettel definiált optimális szeparátor utolsó fontos tulajdonsága az, hogy az egyes adatpontokkal asszociált α[i] súlyok mind nullák, kivéve a szeparátorhoz legközelebb eső pontokat – ezeket nevezzük szupport vektoroknak (support vector). (Azért nevezzük így őket, mert ők „tartják” a szeparáló síkot.) Mivel rendszerint jóval kevesebb szupport vektor van, mint adatpont, ezért az optimális szeparátort meghatározó tényleges paraméterszám rendszerint jóval kisebb N-nél.
10	0.515152	1	Legyen a kérdéses varázsló C, és a két ellensége A és B. Mivel a feladatunk rájönni, hogy mi volt a C kalapszíne és ő maga hogyan jutott annak felismeréséhez, a továbbiakban C varázsló hiedelmeivel foglalkozunk.
5	0.181818	1	Az előálló {SA=RED, NSW=GREEN, WA=BLUE, NT=GREEN, Q=BLUE, V=BLUE} behelyettesítés konzisztens, így jöhet az AC3/MAC, ámde ez hatástalan, mivel V értékkészlete is egy-elemű, így az algoritmus rátér a rekurzív hívásra, és ennek során újfent egy még behelyettesítetlen változó kiválasztásához érkezik. Egyetlen ilyen változónk van már csak, a T, így ezt választjuk. Az LCV heurisztika a következő értékeket rendeli T értékkészletének elemeihez: {RED(0), GREEN(0), BLUE(0)}. Ez azt jelenti, hogy - mivel T nem áll kapcsolatban egyetlen másik változóval sem - T egyetlen eleme sem okozna ütközést T nem létező szomszédainál. Az LCV heurisztika szerint tehát T lehetséges értékei mind egyenrangúak, bármelyiket választhatjuk. Ekkor az eddigieknek megfelelően az értékek fix sorrendje alapján választunk, azaz T-nek a RED értéket adjuk (T=RED).
24	0.083333	1	ahol μ a p környezetébe eső pixelek intenzitásának középértéke, w és h a környezet szélességét, ill. magasságát jelölik. Ha a számított d érték meghalad egy küszöbértéket, az élpontot megtartjuk, ellenkező esetben töröljük. Végül csak azok az élpontok maradnak meg, melyek kontúrpontok közelében helyezkednek el. Az optimális küszöbérték meghatározásához további vizsgálatok szükségesek.  ábra - 2.a ábra: Az eredti kép élkeresés után 2.a ábra: Az eredti kép élkeresés után  ábra - 2.b ábra: Az eredetei kép deformálás után 2.b ábra: Az eredetei kép deformálás után
22	0.333333	0	Sajnos az ℰ[1] még mindig túlgenerál. Az angol és sok más nyelv megköveteli az alany és a mondat fő igéjének egyeztetését (agreement). Például ha „I” az alany, akkor az „I smell” nyelvtanilag helyes, míg az „I smells” nem. Ha „it” az alany, akkor fordítva igaz. Az angolban az egyeztetésből származó különbségek minimálisak: a legtöbb igének egy alakja van egyes szám harmadik személyű alanyokra (he, she vagy it), és egy másik alakja az egyes és többes szám és a személyek minden más kombinációjára. Egy kivétel van: az „I am / you are / he is” három formával rendelkezik. Ha kombináljuk ezt a három különbségtételt az NP[S] és NP[O] különbségtétellel, akkor NP hat alakját kapjuk. Ahogy további különbözőségeket fedezünk fel, végül egy exponenciális sokaságot kapunk.
14	0.869565	1	 ábra - Fuzzy szabályzó e bemenete Fuzzy szabályzó e bemenete  ábra - Fuzzy szabályzó hibaváltozás bemenete Fuzzy szabályzó hibaváltozás bemenete  ábra - Fuzzy szabályzó kimenete Fuzzy szabályzó kimenete  ábra - Fuzzy szabályrendszer Fuzzy szabályrendszer
14	0.043478	0	A változók közötti függetlenségi és feltételes függetlenségi relációkkal kapcsolatban azt is láttuk, hogy ezek nagyban csökkenthetik az együttes valószínűség-eloszlás függvény megadásához szükséges valószínűségek számát. Ez a fejezet bevezet egy Bayes-hálónak (Bayesian network^[143]) nevezett adatstruktúrát a változók közötti függőség leírásához, és bármely együttes valószínűség-eloszlás függvény tömör megadásához.
25	0.074074	1	A lépegetés alapulhat mesterséges lábakon, ha a durva terepviszonyokhoz igazodni kell, illetve vákuumos-, vagy mágneses megfogós lábfejeken, amennyiben nagyon meredek, függőleges felületekre kell felmászni, esetleg födémszerű környezetben, lelógva kell dolgozni. A mászási feladatok során különleges kihívást jelent a függőleges és vízszintes falrészek közötti áthaladás.
20	0.357143	0	Az adatok log likelihood értéke a kezdeti kb. –2044-ről az első iteráció során kb. –2021-re nő, ahogy a  (b) ábrán látható. Eszerint a frissítés magát a likelihoodot kb. e^23 ≈ 10^10 szorzófaktorral növelte. A tizedik iterációra a megtanult modell jobban illeszkedik, mint a valódi (L = –1982,214). Ezek után a javulás nagyon lassúvá válik. Ez nem szokatlan az EM algoritmusnál, ezért sok gyakorlatban használt rendszer a tanulás végső fázisában gradiensalapú algoritmusokkal – mint pl. a Newton–Raphson-módszer (lásd  fejezet) – kombinálja az EM algoritmust. Fontos Az ebből a példából levonható általános tanulság az, hogy a rejtett változókkal történő Bayes-háló tanulásparamétereinek frissítése közvetlenül rendelkezésünkre áll az egyes példákon történő következtetés eredményeképpen. Ráadásul csak lokális a posteriori valószínűségekre van szükségünk az egyes paraméterekhez. Az általános esetben, amikor az egyes X[i ]változók feltételes valószínűségi paramétereit – azaz a θ[ijk] = P(X[i] = X[ij]|Pa[i] = pa[ik]) értékeket – tanuljuk, adott szülőcsomópontok esetén, a frissítést a normalizált várható számértékek adják:
6	0.1	1	A jobb érthetőség kedvéért vegyük példa gyanánt a fenti játékot. A 2-es játékosnak két döntési csúcsa van. A baloldaliban nyilván balra lépne, hiszen akkor 1 helyett 2 lenne a haszna, és így ahhoz a döntési csúcshoz emiatt végső soron a megfelelő (5,2) kimenetelt társíthatjuk. A 2-es játékos a jobboldali döntési csomópontban viszont jobbra menne, hiszen akkor 6-ot kapna 4 helyett. Tehát ehhez a csomóponthoz (0,6) kifizetési vektor tartozik. Mindezt tudva, az 1-es játékos balra fog lépni (a gyökérből kiindulóan), hiszen akkor 5-öt kap 0 helyett.
5	0.181818	1	Q értékei az előbbiek szerint a következő ütközés-számokkal rendelkeznek: {RED(2), GREEN(1), BLUE(3)}. A RED érték ütközés-száma azért 2, mert a Q=RED értékadás nyomán előálló behelyettesítés ellentmondana az SA-Q, és WA-SA közti korlátnak. A GREEN érték ütközés-száma azért 1, mert a megfelelő értékadás után a behelyettesítés már csak a WA-SA közti korlátnak mondana ellent. A BLUE érték ütközés-száma pedig azért 3, mert a Q=BLUE értékadással az előbbi behelyettesítés 3 korlátot is sért, nevezetesen a WA-SA, NT-Q, és Q-NSW köztieket.
25	0.074074	1	Az állvány és az első öt nagy csukló passzív, azaz a végükre szerelt robotkar pozicionálást végezhetik el velük a műtét előtt, utána nem mozdulnak. A robot aktívan vezérelt egysége három szabadságfokú, és mechanikai tervezéséből kifolyólag ez biztosítja, hogy a laparoszkópos eszközök mindig csak a hasfalon lévő trokár körül forogjanak (pivotáljanak). Ezáltal elkerülhető a belépési pont menti szövetek további károsítása. Az utolsó rész maga a cserélhető sebészeti eszközök, amely általános esetben nem tartalmaz elektronikát, a mozgatásához szükséges erőt acélhuzalok továbbítják az üreges belső részében.
20	0.535714	0	A legközelebbi-szomszéd (nearest-neighbor) modellek alapötlete az, hogy bármely egyedi x bemeneti pont tulajdonságai valószínűleg hasonlók az x pont környezetébe eső pontok tulajdonságaihoz. Például ha sűrűségbecslést (density estimation) kívánunk végezni – azaz meg akarjuk becsülni egy ismeretlen valószínűség sűrűségfüggvény-értékét x-ben –, akkor egyszerűen mérhetjük azt, hogy x környezete milyen sűrűn van beszórva pontokkal. Ez nagyon egyszerűen hangzik, amíg rá nem jövünk, hogy meg kell határoznunk, mit is értünk „szomszédság” alatt. Ha a szomszédság túl kicsi, akkor egyáltalán nem fog pontokat tartalmazni. Ha túl nagy, akkor esetleg az összes adatpontot tartalmazni fogja, és olyan sűrűséget eredményez, ami mindenütt ugyanakkora. Egy megoldási lehetőség, ha a szomszédságot úgy definiáljuk, hogy legyen éppen elég tág ahhoz, hogy k pontot tartalmazzon, ahol k elég nagy ahhoz, hogy ésszerű becslést végezhessünk. Rögzített k esetén a szomszédság mérete változó, ahol ritkán vannak az adatok, ott a szomszédság tág térrész, ahol az adatok sűrűn helyezkednek el, ott a szomszédság szűk. A  (a) ábra egy példát mutat: két dimenzióban szétszórt adatpontokat. A  ábra mutatja az ezen adatokra elvégzett k-legközelebbi-szomszéd sűrűségbecslést k = 3, 10 és 40 esetére. k = 3 esetében a sűrűségbecslést minden egyes pontban csak 3 szomszédos pontra alapozzuk, és ezért erősen változó eredményt kapunk. k = 10 esetén a  (b) ábrán látható valódi sűrűség jó becslését kapjuk. k = 40 esetén a szomszédság túl tággá válik, és az adatok struktúráját mindenestől elvesztjük. Gyakorlatban – kis dimenziószám esetén – egy 5 és 10 közé eső k a legtöbb esetben jó eredményt ad. Keresztvalidáció alkalmazásával is jó értéket kaphatunk a k-ra.  ábra - (a) A  (a) ábra adatainak 128 pontos részhalmaza, két kiválasztott ponttal, és 10 legközelebbi szomszédjukkal. (b) Az adatok előállításánál használt kevert Gauss-eloszlás 3D ábrája. (a) A  (a) ábra adatainak 128 pontos részhalmaza, két kiválasztott ponttal, és 10 legközelebbi szomszédjukkal. (b) Az adatok előállításánál használt kevert Gauss-eloszlás 3D ábrája.  ábra - A  (a) ábrán látható adatokra végzett sűrűségbecslés, k = 3 (a); k = 10 (b) és k = 40 (c) esetén A  (a) ábrán látható adatokra végzett sűrűségbecslés, k = 3 (a); k = 10 (b) és k = 40 (c) esetén
4	0.125	0	Az A^* optimalitását könnyű elemezni, ha az algoritmust a Fa-Keresés-sel együtt alkalmazzuk. Ilyenkor A^* optimális lesz, ha h(n) egy elfogadható heurisztika (admissible heuristic), azaz ha h(n) soha nem becsüli felül a cél eléréséhez szükséges költséget. Az elfogadható heurisztikák természetükből adódóan optimisták, mivel úgy gondolják, hogy a probléma megoldása kisebb költséggel jár, mint amekkora költséget a megoldás valójában igényel. Mivel g(n) az n csomópont elérésének pontos költsége, azonnali következményként adódik, hogy f(n) soha sem becsüli túl az n csomóponton keresztül vezető legjobb megoldás valódi költségét.
9	0.655172	0	amelynek teljesen téves a jelentése: azt mondja ki, hogy mindenki vagy nem tud szeretni egy bizonyos A állatot, vagy egy bizonyos B entitás szereti őt. Valójában, az eredeti mondatunk lehetővé teszi minden egyes személy számára, hogy ne szeressen egy másik állatot, vagy egy másik személy szeresse őt. Így tehát, azt szeretnénk, hogy a Skolem entitások az x-től függjenek:
2	0.210526	0	Négy dolgon múlik az, hogy egy adott pillanatban mi racionális. Ezek: * A siker fokát mérő teljesítménymérték. * Az ágens eddigi tudása a környezetről. * A cselekvések, amiket az ágens képes végrehajtani. * Az ágens érzékelési sorozata az adott pillanatig. Fontos Ez elvezet a racionális ágens (rational agent) definíciójához:
9	0.931034	1	 Egy népszerű találós kérdés gyerekeknek a következő: „Nincs se bátyám, se nővérem, mégis annak az embernek az apja az én apám fia.” Használja fel a család tárgykör szabályait (lásd  fejezet), és mutassa meg, hogy ki is az említett ember. Használhatja bármelyik, a fejezetben bemutatott következtetési módszert.
1	0.448276	1	A távgyógyászat robbanásszerű fejlődése az utóbbi 15-20 év eredménye, azonban a kezdetek régebbre nyúlnak vissza. Már 1924-ben egy Radio Magazin az Amerikai Egyesült Államokban közölt egy rajzot egy orvosról, aki a rádiója „képernyőjén” figyelte betegét. Az első igazi, gyakorlati alkalmazás bemutatására az 1951-es New York-i Világkiállításon került sor. 1957- ben Albert Juras Montrealban megkezdte a teleradiológia gyakorlati alkalmazását.1967-ben már mikrohullámú, fekete- fehér képi kapcsolat létezett a Bostoni repülőtér és a Massachusetts-i Központi Kórház között, a sürgősségi ellátás segítésére.
24	0.916667	0	Az 1990-es években megjelent koncepcionális újítás a mozgásból származtatott struktúra tanulmányozása volt. Egy ilyen beállításban a kamera kalibrációja nem szükséges, ahogy azt Faugeras megmutatta (Faugeras, 1992). Ez a felfedezés összefügg az objektumfelismerésben alkalmazott geometriai invariánsokkal, ahogy azt Mundy és Zisserman áttekintették (Mundy és Zisserman, 1992), és a mozgásból származtatott rokon struktúrával (Koenderink és Van Doorn, 1991). Az 1990-es években a számítógépek sebességének és tárolási kapacitásának növekedésével a digitális videofelvételekből történő mozgási szekvenciaelemzést sok új területen alkalmazták. Valósvilág-beli jelenetek geometriai modelljeinek felépítése a számítógépes grafikai technikákkal történő előállítás céljából különösen népszerűnek bizonyult, amelyet olyan rekonstrukciós algoritmusok vezettek, mint amelyet például Debevec, Taylor és Malik fejlesztettek ki (Debevec, Taylor és Malik, 1996). Hartley és Zisserman, valamint Faugeras és társainak könyvei átfogóan tárgyalják a többszörös nézetek geometriáját (Hartley és Zisserman, 2000; Faugeras és társai, 2001).
20	0.928571	0	A San Diegóban, 1979-ben tartott konferencia publikációira alapozott kiadvány (Hinton és Anderson, 1981) tekinthető a konnekcionizmus újjáéledése jelének. Nagy figyelmet keltett a kétrészes „PDP” (Párhuzamos elosztott feldolgozás – Parallel Distributed Processing) antológia (Rumelhart és társai, 1986a), illetve a Nature-ben megjelent rövid cikk (Rumelhart és társai, 1986b). A neurális hálókkal foglalkozó cikkek száma az 1980–1984 közötti publikációk számáról 200-szorosára nőtt 1990–1994-re. A mágneses spin üvegek fizikai elméletének felhasználásával elvégzett neurális háló analízis (Amit és társai, 1985) nem csupán szorosabb kapcsolatot hozott a statisztikus mechanika és neurális hálók elmélete közt, hanem tekintélyt is adott a területnek. A hiba-visszaterjesztés (back-propagation) technikáját viszonylag hamar kitalálták (Bryson és Ho, 1969), de több alkalommal újra felfedezték (Werbos, 1974; Parker, 1985).
10	0.151515	0	Az objektumok olyan osztálya, amelyek definíciójában csakis belső tulajdonságok szerepelnek, a szubsztanciák, illetve a nem megszámlálható főnevek osztálya. Az az osztály, amelynek definíciójában bármilyen külső tulajdonság is szerepel, a megszámlálható főnevek osztálya. Az anyag kategória a legáltalánosabb szubsztanciakategória, egyetlen belső tulajdonsága sincs. A dolog a diszkrét objektumok legáltalánosabb kategóriája, egyetlen külső tulajdonsága sincs. Minden fizikai objektum mindkét kategóriába tartozik, így a kategóriák együtt léteznek – ugyanazokra az entitásokra utalnak.
5	0.818182	1	Tekintsük az órarendi órák listáját úgy, hogy az már eleve tartalmazza egy-egy óráról, hogy mely professzor tartja. A változók legyenek órarendi órák, lehetséges értékeik pedig a lehetséges órarendi időablakokból és a tantermekből álló rendezett párok. Kényszerként kell megfogalmazni azt, hogy egy professzor egyszerre csak egy órát tarthat, továbbá hogy egy teremben egyszerre csak egy óra lehet.
20	0.107143	1	A hiányzó adatok megfelelő kezelése nélkül az eredmények torzulhatnak, a levont következtetések pontatlanok vagy akár teljesen helytelenek lehetnek. Számos megoldás született ezen nem kívánt hatások kiküszöbölésére, melyek alkalmazhatósága leginkább a hiányzás jellegétől függ.
10	0.333333	0	A szituációkalkulus akkor működik jól, ha egy ágens diszkrét, azonnal lezajló cselekvéseket hajt végre. Ha cselekvéseknek időtartamuk is van, és egymással át is lapolódhatnak, a szituációkalkulus nehézkessé kezd válni. Emiatt e kérdésekkel egy más megközelítésen belül próbálkozunk, amit eseménykalkulusnak (event calculus) fogunk nevezni és amely inkább az időpontokon, mint a szituációkon alapul. (Az „esemény” és a „cselekvés” fogalmakat felváltva is használhatjuk. Egy „esemény” informálisan a cselekvések tágabb osztályát jelenti, az explicit ágenst nélkülöző cselekvéseket beleértve. Az eseményeket az eseménykalkulusban könnyebben kezelhetjük, mint a szituációkalkulusban.)
25	0.222222	0	A  ábrán bemutatott távolságszenzorokhoz kicsit másféle érzékelő modell is megfelelő lehet. Az ilyen érzékelők egy z[t] = (z[1],…, z[M])^⊤^ vektort adnak vissza távolságadatokkal, amelyek a robothoz képest rögzített irányokban lévő tárgyakról hordoznak információt. Adott x[t ]pozícióban legyen  a j-edik sugár irányába lévő legközelebbi akadály pontos távolsága. Csakúgy, mint korábban, most is Gauss-zajt tételezünk fel. Általánosan vehetjük úgy, hogy a különböző sugárirányokbeli hibák függetlenek és azonos eloszlásúak, így:
9	0.241379	0	Ezek a lekérdezések egy bennfoglalási hálót (subsumption lattice) alkotnak, amint az a  (a) ábrán látható. A hálónak van néhány érdekes tulajdonsága. Például a háló bármely csomópontjának a gyereke a szülőjéből egy egyszerű behelyettesítéssel megkapható, és a „legmagasabb” közös leszármazottja bármely két csomópontnak a legáltalánosabb egyesítőjük használatával érhető el. A háló részeiből bármely alaptény szisztematikusan létrehozható ( feladat). Egy ismétlődő konstansokkal rendelkező mondatnak egy kissé más hálója van, ezt a  (b) ábrán láthatjuk. A függvényszimbólumok és a változók az eltárolandó mondatokban még érdekesebb hálófelépítéseket tesznek szükségessé.  ábra - (a) A bennfoglalási háló, amelynek a legalacsonyabb csomópontja ez a mondat: Alkalmaz(AIMA.org, Richárd). (b) A bennfoglalási háló arra a mondatra, hogy: Alkalmaz(János, János). (a) A bennfoglalási háló, amelynek a legalacsonyabb csomópontja ez a mondat: Alkalmaz(AIMA.org, Richárd). (b) A bennfoglalási háló arra a mondatra, hogy: Alkalmaz(János, János).
3	0.916667	0	A részben megfigyelhető és a nemdeterminisztikus környezeteket a problémamegoldási megközelítésen belül nem tanulmányozták behatóan. A hiedelmi állapotok terében történő keresés bizonyos hatékonysági problémáival Genesereth és Nourbakhsh foglalkoztak (Genesereth és Nourbakhsh, 1993). Koenig és Simmons (Koenig és Simmons, 1998) az ismeretlen kezdeti pozícióból induló robotnavigálást tanulmányozták. Erdmann és Mason (Erdmann és Mason, 1988) pedig a szenzorok nélküli robot manipuláció problémáját vizsgálták a hiedelem állapottérbeli keresés folytonos változatát használva. Eshetőségi kereséssel a tervkészítés területen belül foglalkoztak (lásd  fejezet). A bizonytalan információt felhasználó tervkészítést és cselekvést a valószínűség-elmélet és döntéselmélet eszköztárával oldották meg (lásd  fejezet).
6	0.8	0	Először tekintsük a minimax algoritmust. A minimax optimális módszert ad egy lépés kiválasztásához egy adott keresési fából, feltéve, hogy a levélcsomópontok kiértékelései tökéletesen pontosak. A valóságban azonban a kiértékelések az állás értékének durva becslői, és úgy vehetjük, hogy nagy hibával rendelkeznek. A  ábra egy olyan egylépésváltásos játékfát mutat, amire a minimax alkalmatlannak tűnik. A minimax a jobb oldali ágat javasolja, holott nagyon valószínű, hogy a bal oldali ág valódi értékei nagyobbak. A minimax azon a feltételezésen alapul, hogy a 100-as, a 101-es, a 102-es és a 100-as címkét viselő csomópontok mindegyike valóban jobb, mint a 99-es címkét viselő csomópont. Az a tény azonban, hogy a 99-es címkéjű csomópontnak 1000-es címkéjű testvérei vannak, azt sugallja, hogy a csomópont valódi értéke valójában magasabb. Ezen probléma kezelésének egyik lehetséges módja, ha a kiértékelés egy, a lehetséges értékek feletti valószínűség-elosztást ad vissza. Ekkor standard statisztikai módszerekkel ki lehet számítani a szülő értékének valószínűség-eloszlását. Sajnos a testvércsomópontok értékei általában erősen korreláltak, ezért ez költséges számítás lehet, mert olyan részletes ismeretre van szükség, amit általában nehéz beszerezni.  ábra - Egy olyan egylépésváltásos játékfa, amire a minimax alkalmatlannak tűnik Egy olyan egylépésváltásos játékfa, amire a minimax alkalmatlannak tűnik
7	0.92	0	Az első mechanikai eszközt, amely logikai következtetést végzett, Stanhope harmadik grófja (1753–1816) készítette. A Stanhope Demonstrator képes volt szillogizmusokat kezelni és bizonyos valószínűségi következtetéseket végezni. Wiliam Stanley Jevons – egyike azoknak, akik továbbfejlesztették és kiegészítették Boole munkáját – 1869-ben a Boole-logikán alapuló következtetések végrehajtására megépítette a „logical pianó”-ját. Ezeknek és más korai következtetésre készített mechanikus eszközöknek szórakoztató és tanulságos története Martin Gardner (Gardner, 1968) munkájában olvasható. Az első logikai következtetést végző, publikált számítógépes program a „Logic Theorist” volt, amelyet Newell, Shaw és Simon (Newell, Shaw és Simon, 1957) készítettek. Ezt a programot az emberi gondolkodás modellezésére szánták a szerzők. Bár Martin Davis (Davis, 1957) tervezett egy programot, ami bizonyíthatóan 1954-ben készült, de a Logic Theorist eredményeit korábban publikálták. Mind Davis 1954-es programja, mind a Logic Theorist részben ad hoc módszerekre épült, amelyek nem voltak jelentős hatással a későbbi automatikus dedukciós rendszerekre.
7	0.44	0	Tehát, ha van egy csapda az [1, 1]-ben vagy a [3, 1]-ben, és ez a csapda nem az [1, 1]-ben van, akkor ez a [3, 1]-ben van. Ez az utolsó két következtetési lépés példa az egységrezolúció (unit resolution) következtetési szabályra,
3	0.208333	0	Ebben a megfogalmazásban 64 × 63 × … 57 ≈ 1,8 × 10^14 lehetséges vizsgálandó sorozatunk van. Sokkal ésszerűbb választás lenne, ha figyelembe vennénk azt a tényt, hogy egy már eleve támadt mezőre nincs értelme letenni egy királynőt: * Állapotok:n (0 ≤ n ≤ 8) királynő olyan elrendezése a táblán, hogy az n bal oldali oszlopban oszloponként egy található úgy, hogy nem támadják egymást. * Állapotátmenet-függvény: helyezz egy királynőt a bal szélső, még üres oszlopba úgy, hogy azt ne támadja egyetlen királynő sem.
7	0	0	Ez a fejezet tudásbázisú ágenseket mutat be. A fogalmak, amelyeket itt tárgyalunk – a tudás reprezentációja és a tudás alkalmazását lehetővé tevő következtetési folyamatok – központi témái a mesterséges intelligencia minden területének.
17	0.666667	0	A hasznosság E számára ebben a pontban U[E,O] = –1/12. * Ha O lép először, a helyzet a  (d) ábrán látható. O a gyökérnél [q: egy; (1 – q): kettő] szerint játszik, és E a q értéke alapján választ egy lépést. A jutalmak 2q – 3(1 –q) = 5q – 3 és –3q + 4(1 – q) = 4 – 7q.^[178] Ismét látható a  (f) ábrán, hogy a legjobb, amit O a gyökérnél tehet, hogy a metszéspontot választja:
16	0.26087	0	Azaz az ilyen alakú görbével rendelkező ágens kockázatkerülő (risk-averse): előnyben részesít egy biztos eseményt egy szerencsejátékkal szemben, még akkor is, ha a biztos összeg kisebb, mint a szerencsejáték várható pénzügyi értéke. Másfelől, a  (b) ábrán a nagy adóságokhoz tartozó „elkeseredett” régióban a viselkedés kockázatkereső (risk-seeking). Azt az értéket, amit az ágens a szerencsejáték helyett elfogad, a játék determinisztikus ekvivalensének (certainty equivalent) nevezzük. A tanulmányok azt mutatják, hogy a legtöbb ember elfogad körülbelül 400 dollárt egy olyan szerencsejátékért cserébe, ami  valószínűséggel eredményez 1000 dollárt és 0 dollárt – azaz ennek a szerencsejátéknak a determinisztikus ekvivalense 400 dollár. A szerencsejáték várható pénzügyi értéke és a determinisztikus ekvivalense közötti értéket biztosítási prémiumnak (insurance premium) hívjuk. A kockázatkerülés az alapja a biztosítási üzletágnak, mivel ez azt jelenti, hogy a biztosítási prémium pozitív. Az emberek inkább fizetnek egy alacsonyabb biztosítási díjat, mintsem hogy kockára tegyék a házuk teljes árát egy lehetséges tűzeset miatt. Viszont a biztosítási társaságok szemszögéből a ház teljes ára igen kicsi a cég összes vagyonához képest. Emiatt a biztosító hasznossági görbéje megközelítően lineáris ebben a kicsiny régióban, és a biztosítás a társaságnak alig kerül valamibe.
1	0.931034	0	Herb Simon a The Science of the Artificial c. műben tárgyalja az MI módszertani státusát (Simon, 1981). A mű azokat a kutatási területeket tárgyalja, amelyek bonyolult műtermékekkel kapcsolatosak. Azt is bemutatja, hogy hogyan lehet az MI-t mind matematikának, mind tudománynak látni. Cohen (Cohen, 1995) áttekinti az MI kísérleti technológiáját. Ford és Hayes (Ford és Hayes, 1995) pedig a Turing-teszt hasznosságáról fejtik ki a véleményüket.
1	0.62069	0	Az első néhány MI-programot az IBM-nél Nathaniel Rochester és kollégái fejlesztették ki. Herbert Gelernter egy olyan geometriai tételbizonyító programot (Geometry Theorem Prover, Gelernter, 1959) írt, mely sok matematikus hallgató által trükkösnek talált tételt tudott bebizonyítani. 1952-től kezdve Arthur Samuel dámajátékot játszó programokat írt, amelyek végül megtanultak egy erős amatőr versenyzői szinten játszani. Eközben sikerült megcáfolnia, hogy a számítógép csak arra képes, amire utasítják, hiszen programja gyorsan megtanult nála is jobban játszani. A program tv-bemutatása 1956 februárjában igen nagy hatást keltett. Turinghoz hasonlóan Samuelnek is csak nehezen sikerült gépidőt szereznie. Éjszaka dolgozott, az IBM számítógépes üzemében végtesztelésre váró gépeket használva. A kétszemélyes játékokkal a  fejezet, a Samuel által használt tanuló technikával és annak továbbfejlesztésével a  fejezet foglalkozik.
9	0.931034	1	Mivel egy mondat érvényességét más mondatok nem befolyásolják, a tudásbázist üresnek tekinthetjük, a bizonyítandó mondatot alakítjuk klóz halmazzá. A rezolúciós algoritmus erre alkalmazva pontosan akkor vezet az üres mondatra, ha a kiinduló mondat érvényes.
23	0.277778	0	értéket, amelyben D a dokumentum, Q a lekérdezés, R pedig egy véletlen logikai változó, amely a relevanciát fejezi ki. Ha meghatároztuk ezt az értéket, alkalmazhatjuk a valószínűségi rendezési elvet, amely szerint amennyiben be kell mutatnunk az eredményhalmazt, akkor azt csökkenő valószínűségű relevancia szerint kell tennünk.
24	0.916667	0	A számítógépes látásban az alaknak az árnyékolásból való kinyerését Berthold Horn tanulmányozta (Horn, 1970). E terület fő cikkeit a (Horn és Brooks, 1989) tekinti át. Ez a megközelítés számos egyszerűsítő feltétellel élt, amelyekből a legkényesebb a kölcsönös megvilágítás hatásának figyelmen kívüli hagyása volt. A kölcsönös megvilágítás fontosságát kellően értékelték a számítógépes grafika területén, ahol éppen ezen hatás figyelembevételére fejlesztették ki a fénysugárkövetést és a radiozitást. Egy elméleti és gyakorlati kritika a (Forsyth és Zisserman, 1991)-ben található.
18	0.736842	1	Gondoljuk végig, hogy a könyvben ismertetett levezetés melyik pontján közelítettünk úgy, hogy az ilyen nagy eltérést eredményezett! A következő dolog tűnhet fel: rögtön a levezetés elején azt mondtuk, hogy előírásunk szerint a jó hipotézis hibája kisebb, mint ε, a rossz hipotézisé nagyobb, tehát pontossága kisebb, mint (1-ε). A konkrét példánkban az ε=0,01 előírt értékkel számoltunk, de láttuk, hogy a rossz hipotéziseink tényleges hibája 0,63 … 0,75, azaz másfél nagyságrenddel nagyobb, mint az általunk felállított korlát. Mi azt mondtuk, hogy – pl. 57 hiba esetén – annak valószínűsége, hogy 57 ponttal mind konzisztens lesz a hipotézis, kisebb, mint (1-0,01)^57=0,564, ami természetesen igaz, ha a megengedett hiba 0,01 megfelel a valóságnak. A probléma az, hogy még a „legjobb rossz hipotézisünk” hibája is 0,63, ebből a tényleges értékből számítva (1-0,63)^57 ≅ 10^-25 ! Tehát ha az általunk előírt hibával számolunk, de a tényleges hipotézishiba ennél jóval nagyobb, akkor az hatványozottan érvényre jut a hibaszámításnál. Meg kell jegyeznünk, hogy még 5%-os tényleges hipotézishiba esetén is jelentős az eltérés: (1-0,05)^57=0,053, ami egy nagyságrenddel (de már csak egy nagyságrenddel!) kisebb annál, mint amivel számoltunk.
4	0.333333	0	Az új heurisztikus függvények előállításának egyik problémája, hogy felettébb nehéz felismerni a „nyilvánvalóan legjobb” heurisztikus függvényt. Ha egy problémához adottak a h[1], ..., h[m] elfogadható heurisztikus függvények, és egyik sem dominálja a többit, melyiket kell választanunk? Mint az majd kiderül, nem kell választanunk. Az alábbi formulával a lehető legjobbat kaphatjuk meg:
15	0.111111	0	A P(E[t]|X[t]) feltételes eloszlást érzékelő modellnek (sensor model) nevezik (vagy néha megfigyelési modellnek [observational model]), mivel leírja, hogy az „érzékelőket” – azaz a bizonyítékváltozókat – hogyan befolyásolja a világ aktuális állapota. Vegyük észre a függés irányát: a „nyíl” az állapottól az érzékelő értékére mutat, mivel a világ állapota okozza azt, hogy az érzékelők bizonyos értékeket vegyenek fel. Az esernyős világban például az eső okozza az esernyő feltűnését. (A következtetési folyamat természetesen a másik irányban halad; a modellezett függések iránya és a következtetés iránya közötti különbségtétel a Bayes-hálók egyik fő előnye.)
8	0.548387	0	Azokat a rendszereket, amelyek ok-okozati szabályokat alkalmaznak modellalapú következtető (modell-based reasoning) rendszereknek nevezzük, mivel az ok-okozati szabályok a környezet működésének modelljét alkotják. A modellalapú és a diagnosztikus következtetés közötti megkülönböztetés a mesterséges intelligencia számos területén fontos. Az orvosi diagnosztika egy különösen aktív területe a kutatásnak, amelyben a tünetek és a betegségek közötti közvetlen asszociációkon alapuló (diagnosztikai megközelítések) megközelítéseket fokozatosan felváltották az olyan módszerek, amelyek a betegség kialakulásának és a betegségtünetek manifesztálódásának egy explicit modelljét használják. Ez a téma a  fejezetben újra előkerül. Fontos Bármelyik reprezentációs formát is használja az ágens, ha az axiómák pontosan és teljesen leírják a világ működésének a módját és azt a módot, ahogyan az érzetek létrejönnek, akkor bármely teljes logikai következtetési eljárás az elérhető érzetek megadása után ki fogja következtetni a világ állapotának legvalószínűbb lehetséges leírását. Így tehát az ágenstervező arra koncentrálhat, hogy a tudást helyesen adja meg, anélkül hogy sokat kellene töprengenie a következtetések folyamatain. Láttuk továbbá azt is, hogy az elsőrendű logika hasonlóan tömören tudja reprezentálni a wumpus világot, mint a  fejezetben megadott eredeti magyar nyelvű leírás.
12	0.714286	0	Végrehajthatnánk a tervkészítést a hagyományos részben rendezett tervkészítő algoritmussal, azt az összes lehetséges együttes cselekvés halmazára futtatva. Az egyetlen probléma a halmaz mérete: 10 cselekvéssel és 5 ágenssel 10^5 együttes cselekvést kapunk. Elég unalmas lenne az összes cselekvés előfeltételét és következményét helyesen definiálni, és nem lenne hatékony egy ilyen nagy halmazzal tervezni.
19	0.909091	1	A laboratórium működtetéséhez mérésvezérlő, adatgyűjtő és feldolgozó információs rendszert használnak, amely kétirányú kommunikációt folytat a kórházi, vagy más egészségügyi intézmények információs rendszerével.
10	0.212121	1	A PLTL-ben az alábbi temporális operátorok használatosak: * F p: egy jövőbeli állapotban igaz lesz p * G p: az összes jövőbeli állapotban igaz lesz p * X p: a következő állapotban igaz lesz p * p U q: egy jövőbeli állapotban igaz lesz q, addig pedig igaz lesz p
16	0.26087	0	Vegyük észre, hogy a kis vagyoni változások az aktuális vagyoni helyzethez képest közel lineárisak a görbe bármely szakaszán. A lineáris görbével rendelkező ágenst kockázatsemlegesnek (risk-neutral) nevezzük. Ezért kis összegű hazárdjátékok esetén kockázatsemlegességet várhatunk el. Egy bizonyos értelemben ez igazolja azt az egyszerűsített eljárást, ami kis összegű szerencsejátékokkal segítette valószínűségek megbecsülését, és igazolta a valószínűség-számítás axiómáit a  fejezetben.
14	0.869565	1	Megtekinthető az is, hogy a bemenetektől függően hogyan változnak a kimenetek a szabályok eredményeképpen. (View/Surface) Egy bemenet és egy kimenet esetében ez nem más mint egy egyváltozós valós függvény.
22	0.074074	1	A fuzzy logika a hagyományos, két értékű logikákhoz képest a nehezen megkülönböztethető értékeket felvenni képes objektumokat is le tudja írni. Mivel egy természetes nyelvű szövegben számos dolognak lehet ilyen értékkészlete, ésszerűnek tűnik a fuzzy logika alkalmazása a hagyományos logikákkal szemben. A fuzzy elméletet (fuzzy logika, fuzzy relációk, fuzzy halmazok) bevezetése óta részletesen kidolgozták és sikerrel alkalmazták, például szavak és jelentésük kapcsolatának leírására. [8]
25	0.407407	1	Mindhárom alapesetben a legbonyolultabb összefüggés is csak négyzetes kifejezést tartalmazott. Ebből következik, hogy bármilyen bonyolult konfiguráció esetén sem kapunk a másodiknál magasabb fokszámú GVD-t. A három alapeset kombinációjaként megalkotható az általános esetre vonatkozó összefüggés. Példaként tekintsük a két, független helyzetű élszakasz által meghatározott GVD-t.
25	0.444444	0	Alternatívát jelent a Voronoi-diagramokkal szemben a valószínűségi úthálózat (probabilistic roadmap) módszere. Ez a szkeletonizációs technika több lehetséges útvonallal dolgozik, így jobb megoldást jelent nagy, nyitott terek esetén. A valószínűségi úthálózatra látható példa a  (b) ábrán. A gráfot véletlenszerűen generált, a szabad térbe eső, nagyszámú konfiguráció alkotja. Ezek után két csomópontot összekötünk egy éllel, amennyiben „könnyű” eljutni egyikből a másikba. Alapvetően egyenes élekkel dolgozunk, és azok természetesen csakis a szabad térben futhatnak. Eredményül egy véletlenszerű gráfot kapunk a robot szabad terében. Ha ehhez még hozzávesszük a kezdeti és a célkonfigurációt, az útkeresés diszkrét gráfkeresési problémává válik. Elméletileg a módszer nem teljes, mivel rosszul felvett ponthalmazzal lehet, hogy soha nem találunk megoldást. A felvett pontok száma és a konfigurációs tér alakja alapján korlátozhatjuk a kudarc valószínűségét. Azt is megtehetjük, hogy főként azon a területen generálunk pontokat, ahol egy előzetes, mindkét végpontból lefuttatott részleges keresés alapján sejtjük, hogy a helyes út visz majd. Ezekkel a kiegészítésekkel a valószínűségi úthálózat módszere jobban használható más technikáknál magasabb dimenziójú konfigurációs terek esetében is.
18	0.684211	0	Egy h hipotézist közelítőleg helyesnek (approximately correct) nevezünk, ha error(h) ≤ ε, ahol ε egy kis konstans. A bizonyítás megközelítése az, hogy megmutatjuk: N példa vizsgálata után az összes konzisztens hipotézis nagy valószínűséggel közelítőleg helyes lesz. Úgy gondolhatunk egy közelítőleg helyes hipotézisre, mint amely közel van a keresett függvényhez a hipotézistérben: egy – a keresett f körül felvett – ε-gömbön (ε-ball) belül van. A  ábrán bemutatjuk az összes hipotézis H terét, amelyet két részre osztottunk, egyik az ε-gömb f körül, a másik a H[rossz]-szal jelölt maradék.
16	0.956522	1	A POCT alkalmazása: * POCT alkalmazás sürgősségi cardiológiai marker vizsgálatokra * POCT alkalmazás sürgősségi klinikai kémiai vizsgálatokra + pl: vércukor, vérgázok, ionok, vesefunkció, laktát, cooximetriai vizsgálatok elvégzése közvetlen a betegágynál. * POCT alkalmazás hormon-meghatározásokra + vizelet hCG (=és a sárgatest kellő ideig történő életben tartásáért felelős és progeszteron termeléséért, hormon), Műtét közbeni parathormon (PTH) meghatározás * POCT alkalmazás sürgősségi véralvadás vizsgálatokra * POCT alkalmazás sürgősségi toxikológiai vizsgálatokra
4	0.916667	1	Szimulált lehűtés esetén T = 0 azt jelenti, hogy annak esélye, hogy egy olyan cselekvést válasszunk ki kifejtésre, amely a kiértékelő függvényt rontja, 0, azaz csak olyan lépéseket tesz meg, amelyek javítják a kiértékelő függvényt. Ez az eset tehát megegyezik a hegymászó módszerrel.
11	0.653846	0	Ez alkalommal visszamegyünk a ciklus kezdetére. A cél minden literálja jelen van S[2]-ben, és egyik sem áll kölcsönös kizárásban egyetlen másikkal sem. Ez azt jelenti, hogy egy megoldás létezhet, és a Megoldás-Kinyerésmegtalálhatja. Lényegében a Megoldás-Kinyerés egy kétértékű kényszerkielégítési problémát old meg, melynek változói a szintek cselekvései, és az értékeik pedig azt jelzik, hogy benne vannak-e vagy nincsenek benne a tervben. Ehhez egy egyszerű kényszerkielégítési algoritmust használhatunk, vagy definiálhatjuk a Megoldás-Kinyerés-t mint egy keresési problémát. Itt a keresés minden állapota a kielégítetlen célok egy halmazát tartalmazza, valamint egy mutatót a tervkészítési gráf egy szintjére. Ezt a keresési problémát a következőképpen definiáljuk: * A kiindulási állapot a tervkészítési gráf utolsó szintje (S[n]) a tervkészítési probléma céljaival egyetemben. * Az S[i]szint állapotában rendelkezésre álló cselekvések összessége, az A[i–1] cselekvéseinek azon konfliktusmentes részhalmaza, melyek következményei elérik az állapotban lévő célokat. Az eredményként előálló állapot szintje S[i–1], céljai pedig a kiválasztott cselekvések előfeltételei. A „konfliktusmentességen” olyan cselekvések halmazát értjük, amelyek között nincs kettő, amelyek kölcsönösen kizárnák egymást, és az előfeltételeik között sem szerepelnek kölcsönösen kizáró párok. * A cél, hogy elérjünk az S[0] szinten egy állapotot úgy, hogy minden cél teljesüljön. * Minden cselekvés költsége 1.
19	0.136364	0	A pillanatnyilag legjobb hipotézis (current-best-hypothesis) keresési eljárás alapgondolata az, hogy egyetlen hipotézist vegyünk figyelembe, és ha új példa érkezik, akkor ennek figyelembevételével alakítsuk át a hipotézist annak érdekében, hogy az ellentmondás-mentességet fenntartsuk. Az algoritmus alapját John Stuart Mill írta le (Mill, 1843), de könnyen lehet, hogy már korábban megalkották.
14	0.043478	0	A Bayes-háló egy irányított gráf, amelyben minden csomóponthoz számszerű valószínűségi információk vannak csatolva. A teljes megadás a következő: 1. A háló csomópontjait valószínűségi változók egy halmaza alkotja. A változók lehetnek diszkrétek vagy folytonosak. 2. Irányított élek (nyilak) egy halmaza összeköt bizonyos csomópontpárokat. Ha létezik nyíl az X csomóponttól az Y csomópontig, azt mondjuk, hogy az X a szülője az Y-nak. 3. Minden X[i] csomóponthoz tartozik egy P(X[i]∣Szülők(X[i])) feltételes valószínűség-eloszlás, ami számszerűen megadja a szülők hatását a csomóponti változóra. 4. A gráf nem tartalmaz irányított kört (azaz irányított, körmentes gráf – Directed, Acyclic Graph, DAG).
5	0.181818	1	Mit tehetünk? Ismeretes, hogy bármely magasabb rendű korlátot alkalmas további segédváltozók bevezetésével bináris formára hozhatunk (erről is szó esik a tankönyvben nem sokkal az 5.2-es ábra előtt). Próbáljuk meg tehát a fentebbi, illetve az ahhoz hasonló ternáris korlátainkat most binárissá konvertálni. Hogyan is kezdjünk ennek neki?
14	0.086957	1	Az elterjedtebb ad hoc módszerekben azt vizsgáljuk meg, hogy egy vagy több változó kihagyása mennyivel rontja a predikciós teljesítményt, amit adott hasznosság függvény és optimalizációs eljárás mellett el lehet érni.
9	0.931034	0	A korai munkák a teljességre koncentráltak. Robinson korszakalkotó tanulmányát követően a demodulációs és a paramodulációs szabályokat az egyenlőségi következtetésekre Wos (Wos és társai, 1967), valamint Wos és Robinson (Wos és Robinson, 1968) vezették be, ebben a sorrendben. Ezeket a szabályokat a term átírási rendszerek kontextusában is kifejlesztették (Knuth és Bendix, 1970). Az egyenlőségi következtetés beépítése az egyesítési algoritmusba Gordon Plotkinnak köszönhető (Plotkin, 1972); ez fontos vonása volt a QLISP-nek is (Sacerdoti és társai, 1976). Jouannaud és Kirchner (Jouannaud és Kirchner, 1991) az egyenlőségi egyesítést a termek átírásának szempontjából vizsgálják. Hatékony algoritmusokat a standard egyesítésre Martelli és Montanari (Martelli és Montanari, 1976), valamint Paterson és Wegman (Paterson és Wegman, 1978) fejlesztettek ki.
4	0.125	0	Így amennyiben a legolcsóbb megoldást keressük, ésszerű először a legkisebb g(n) + h(n) értékkel rendelkező csomópontot kifejteni. Ezen stratégia kellemes tulajdonsága, hogy ez a stratégia több mint ésszerű: amennyiben a h függvény eleget tesz bizonyos feltételeknek, az A^* keresés teljes és optimális.
14	0.782609	0	Dempster–Shafer-elmélet egyik értelmezése, hogy egy valószínűségi intervallumot definiál – az intervallum a Fej esetén a szakértő tanúságtétele előtt [0, 1], míg utána [0,45, 0,55]. Az intervallum nagysága hasznos segítséget adhat annak megítélésében, hogy mikor van szükségünk további tényekre: elárulhatja, hogy a szakértő tanúságtétele akkor fog segíteni, ha nem tudjuk, hogy szabályos-e az érme, de nem fog segíteni, ha már tudjuk, hogy az érme szabályos. Azonban nincsenek világos irányelvek ennek megtételére vonatkozóan, mivel nincs világos értelmezés arra, hogy mit is jelent az intervallum szélessége. A Bayes-megközelítésben ez a fajta következtetés könnyen elvégezhető, ha megvizsgáljuk azt, hogy újabb tények begyűjtésével hogyan változna egy bizonyosság. Például a fejek megjelenésével kapcsolatos bizonyosságunkat jelentősen befolyásolná, ha tudjuk, hogy az érme szabályos, és aszimmetrikus súly észrevétele jelentősen befolyásolná azon bizonyosságunkat, hogy az érme szabályos. Egy teljes Bayes-modell magában foglalna ehhez hasonló tényezőkre vonatkozó valószínűségi becsléseket is, megengedve, hogy a „tudatlanságunkat” bizonyosságaink azon megváltozásának mértékével fejezzük ki, amelyek jövőbeli megfigyelések esetén következnének be.
7	0.92	1	Annyi féle bináris összekötőjel létezhet, amennyiféle különböző képpen ki lehet tölteni a kétoszlopos igazságtáblát. Ez 2^2^2 = 16. (Ebbe beleértve az olyan különbségeket is, hogy pl. a → jel nem egyezik meg a <= jellel!)
5	0.181818	1	A {NSW=RED, WA=GREEN} behelyettesítés nem mond ellent egyetlen korlátnak sem, így az algoritmus meghívja magát rekurzíve, és ott az NT változóval folytatja. Tegyük fel, hogy az eddigieknek megfelelően a RED értéket adja az NT változónak (NT=RED).
24	0.833333	1	A Hough transzformációnak számos javító módosítása ismert. Létezik gradiens vektorokat felhasználó változata. Egy egyenes keresése esetén például csak azok az egyenesek jöhetnek szóba a paramétertérben, melyek merőlegesek az adott pontbeli gradiens vektorra, így jelentősen csökkenthető az akkumulátor mérete. Létezik egy ún. kernel alapú változat is, amely pixelcsoportokon dolgozik, és elmosott alakzatokra képez a paraméter térben. Ezzel a megoldással gyorsítani lehet a futást és csökkenthető a zajérzékenység.
13	0.363636	0	Olyan kifejezéseket is használni fogunk, mint a P(Időjárás, Lyuk), hogy egy véletlen változóhalmaz összes lehetséges kombinációjának valószínűségeit jelölni tudjuk.^[136] Ekkor a P(Időjárás, Lyuk) egy 4 × 2-es valószínűségi táblázatot jelent. Ez az Időjárás és Lyuk együttes valószínűség-eloszlása (joint probability distribution).
19	0.954545	1	A CLIA, CLSI (NCCLS) QC ajánlásai alapján a kontrolmérése szükséges gyakorisága függ: * A rendszer stabilitásától, azaz az időtartamtól, melyen belül a mérési bizonytalanság és pontosság állandónak tekinthető. * A rendszer hibaérzékenységétől * A CLIA általános ajánlása szerint a kontrolmérés történjen:
21	0.5	0	Most, hogy már van egy aktív ADP-ágensünk, nézzük meg, hogy mi módon tudunk egy aktív időbeli különbség tanuló ágenst létrehozni. A legszembetűnőbb eltérés a passzív esethez képest, hogy az ágensnek többé nem áll rendelkezésére egy rögzített stratégia, tehát ha megtanul valamilyen U hasznosságfüggvényt, akkor meg kell tanulnia egy modellt is, hogy egy U-n alapuló egylépéses előretekintő keretben cselekvést tudjon választani. A modellkialakítás problémája ugyanaz az IK-ágensnél, mint az ADP-ágensnél. Mi a helyzet magával az IK frissítési szabállyal? Talán meglepő, de a   IK frissítési szabály változatlan marad. Ez furcsának tűnhet a következő okból: tegyük fel, hogy az ágens olyan lépést választ, ami normál esetben jó célhoz vezet, de a környezet nemdeterminisztikus volta miatt az ágens valamilyen katasztrofális állapotban végzi. Az IK frissítési szabály ezt éppoly komolyan veszi, mintha ez a kimenetel a cselekvés normál következménye lenne, pedig csak egy pech volt, és nem kellene sokat aggódnia miatta. Valójában az ilyen valószínűtlen kimenetel csak ritkán fordul elő egy nagy tanítósorozat-halmazban, így reményeink szerint hosszú távon a valószínűségével arányosan kap súlyt a hatása. Ismét azt mondhatjuk, hogy az IK-ágens ugyanazokhoz az értékekhez fog tartani, mint az ADP-ágens, ahogy a tanítósorozatok száma tart a végtelenhez.
20	0.107143	1	Ebben a csoportba sorolhatók azok az eljárások, melyek a változó értékein végeznek változtatásokat. Egyik legkézenfekvőbb megoldás, ha egy változó értékei közül számos hiányzik, hogy magát a változót zárjuk ki az elemzésből. Ez azonban értékes információ elvesztését eredményezheti, mely az elemzés szempontjából káros lehet, bias-hoz vagy az egész elemzés helytelen voltához vezethet.
18	0.736842	1	Végezzünk szimulációkat 571 véletlenszerűen választott mintapont halmazzal, megintcsak 10.000-szer: tehát 10.000-szer kiválasztunk véletlenszerűen 571 pontot, és megvizsgáljuk, hogy bármelyik rossz hipotézisünk jól osztályozta-e mind az 571-et. Összefüggésünk szerint elvileg 1% alatt van annak valószínűsége, hogy bármelyik rossz hipotézis konzisztens lesz az 571 mintával, tehát a 10.000-ből körülbelül 100-szor fordulhat elő a rossz hipotézissel való konzisztencia. Ezzel szemben egyetlen egyszer sem fordul elő, ami arra utal, hogy esetleg túlbecsültük a szükséges mintaszámot. Nézzük meg jóval kisebb mintaszámmal, mondjuk N= 57-el, és futtassuk le a tesztünket 100.000-szer! Azt tapasztaljuk, hogy a százezerből még mindig egyetlen egy esetben sem volt konzisztens az 57-elemű mintahalmazzal egyik rossz hipotézisünk sem, tehát a tapasztalati valószínűség (gyakoriság) 10^-5-nél is kisebb.
6	0.1	1	Az 1940-es években megjelenő első primitív elektromos számítógépek alapvetően háborús célokra készültek, azonban a tudósok felfedezték a számítógépek nyújtotta lehetőségeket és hamar hétköznapi emberi feladatok megoldását akarták gépesíteni. A gondolkodó gép nagyon népszerű elképzelés volt már ebben az időben is, és a tudósok úgy gondolták, hogy a sakkozás problematikája megfelelő kihívás az intelligens számítógépek számára. Egy angol tudós, Alan Turing 1947-ben megírta az első sakkozni képes programot, de számítógép híján toll és papír segítségével tesztelte. ’49-ben Claude Shannon leírta a máig használt alapvető algoritmusokat.
1	0.068966	0	A Turing-teszt a kérdező és a számítógép közötti fizikai kölcsönhatást szándékosan kerülte, mert egy személy fizikai szimulációja az intelligenciához nem szükséges. Az ún. teljes Turing-teszt (total Turing-test) azonban videojelet is fel kell dolgozzon, hogy a kérdező tesztelni tudja az illető érzékelési képességeit, valamint tartalmazza annak a lehetőségét is, hogy a kérdező az objektumokat átadhassa „egy nyíláson keresztül”. A teljes Turing-teszt teljesítéséhez a számítógépnek szüksége lesz: * gépi látásra (computer vision), az objektumok érzékeléséhez és * robotikára (robotics) az objektumok mozgatásához.
15	0.962963	0	A  ábra „tomato” modellje megengedi a koartikulációt az első magánhangzón két lehetséges beszédhangot kínálva fel. Egy alternatív megközelítés a háromállapotú modell használata, amelyben az [ow(t,m)] beszédhang automatikusan magában foglalja a magánhangzó változását. Rajzoljon egy teljes háromállapotú modellt a „tomato”-ra, ideértve a tájszólásos változatokat.
3	0.25	1	Az első ábra bal oldalán kérdőjellel jelölt mezők aknaszáma lényegtelen, a lényeg csak az, hogy biztonságos mezők. (Az is előfordulhat, hogy a tábla szélén találjuk meg a mintát, így a ?-es mezők hiányoznak.) Ha valahol meglátjuk a fenti mintát, levonhatjuk a következtetést, hogy a bal oldali 1-es miatt a sárga hátterű mezők közül pontosan egyen van akna. Bármelyik mezőn is van az akna, az telítetté teszi a jobb oldali 1-est, így a minta alapján levonható a következtetés, hogy az ábra jobb oldalán (újonnan) kérdőjellel jelölt mező biztonságos. (Sőt, a jobb oldali 1-es összes eddig üres szomszédja is biztonságosnak minősíthető. Azért épp a kérdőjellel jelöltet emeltem ki, mert a mintát legtöbbször felfedett mezők összefüggő tartományainak egyenes határán szoktuk alkalmazni.)
3	0.25	1	Előfordulhat, hogy felesleges vezetékvégek vannak az ábrán, amiket le kell zárni. A  ábrán látható összeállítás pirossal jelölt bemenetén mindegy, hogy van-e akna, mindkét esetben érvényes, ellentmondásmentes állapotot kapunk, így használható a szabad vezetékvégek  ábra - Vezetékek lezárása Vezetékek lezárása
15	0.777778	0	P(szó|e[1:t]) = αP(e[1:t]|szó)P(szó)  ábra - A „tomato” szó két kiejtési modellje. Mindegyik modellt egy átmenetdiagramként ábrázoljuk, amiben az állapotokat körrel jelöljük, a megengedett átmeneteket pedig nyilakkal, rajtuk a kapcsolódó valószínűségekkel. (a) Egy nyelvjárásbeli különbségeket is tekintetbe vevő modell. A 0,5-ös értékek a két szerző preferált kiejtésein alapuló becslések. (b) Egy olyan modell, ami az első magánhangzón egy koartikulációs hatást is figyelembe vesz, megengedve az [ow] vagy az [ah] beszédhangokat. A „tomato” szó két kiejtési modellje. Mindegyik modellt egy átmenetdiagramként ábrázoljuk, amiben az állapotokat körrel jelöljük, a megengedett átmeneteket pedig nyilakkal, rajtuk a kapcsolódó valószínűségekkel. (a) Egy nyelvjárásbeli különbségeket is tekintetbe vevő modell. A 0,5-ös értékek a két szerző preferált kiejtésein alapuló becslések. (b) Egy olyan modell, ami az első magánhangzón egy koartikulációs hatást is figyelembe vesz, megengedve az [ow] vagy az [ah] beszédhangokat.  ábra - Az [m] háromállapotú beszédhang egy RMM-je. Mindegyik állapotnak számos lehetséges kimenetele lehet, különálló valószínűségekkel. A C[1], …, C[7] VK-címkék önkényesen lettek megválasztva. Az [m] háromállapotú beszédhang egy RMM-je. Mindegyik állapotnak számos lehetséges kimenetele lehet, különálló valószínűségekkel. A C1, …, C7 VK-címkék önkényesen lettek megválasztva.
22	0.296296	0	Bár az első 10 szavuk közös, teljesen különböző levezetésük van, mivel az első egy felszólítás, a második egy kérdés. Egy balról jobbra elemző algoritmusnak tippelnie kellene, hogy az első szó egy felszólítás vagy egy kérdés része-e, és nem tudná megmondani, hogy a tipp helyes-e egészen a tizenegyedik szóig: take vagy taken. Ha az algoritmus rosszul tippelt, egészen az első szóig kellene visszalépnie. Az ilyen típusú visszalépés elkerülhetetlen, de ha azt szeretnénk, hogy az algoritmusunk hatékony legyen, akkor el kell kerülnie a „the students in section 2 of Computer Science 101” NP-ként történő újraelemzését minden alkalommal, amikor visszalép. Fontos Ebben a részben egy olyan algoritmust alakítunk ki, amely ezt a hatékonysági problémát kezelni tudja. Az alapötlet a dinamikus programozás (dynamic programming) egy példája: minden alkalommal, amikor egy részfüzért elemzünk, tárold az eredményt, így később majd nem kell újraelemeznünk. Például ha egyszer rájöttünk, hogy a „the students in section 2 of Computer Science 101” egy NP, ezt eltárolhatjuk egy diagramnak (chart) nevezett adatstruktúrában. Az így működő algoritmusokat diagramelemzőknek (chart parsers) nevezik. Mivel környezetfüggetlen nyelvtanokkal foglalkozunk, a keresési tér egy ágának kontextusában talált tetszőleges kifejezés éppúgy szerepelhet a keresési tér bármilyen más ágában is.
25	0.259259	0	Az irodalomban a robottérképezés problémáját gyakran mint szimultán helymeghatározást és térképezést (SZLT; simultaneous localization and mapping, SLAM) említik. A robotnak nem csupán egy térképet kell konstruálnia, hanem ezt anélkül kell tennie, hogy ismerné, ő maga hol tartózkodik. Az SZLT az egyik alapvető robotikai probléma. Azt a változatot fogjuk tekinteni, amikor a környezet állandó. A feladat így is meglehetősen bonyolult; és még nehezebbé válik, ha megengedjük, hogy a környezet változzon, ahogyan a robot mozog benne.
8	0.451613	0	igazat ad vissza. A Kérdez-zel feltett kérdéseket lekérdezéseknek (queries) vagy céloknak (goals) nevezzük (ne tévesszük össze azokkal a célokkal, amelyek az ágensek kívánt állapotát írják le). Általánosságban, bármely lekérdezésre, ami logikusan következik a tudásbázisból, igenlő választ kell adni. Például ha adott a két kijelentés az előző bekezdésben, akkor a
5	0.181818	1	Tegyük fel, hogy a konfliktusban lévő változók halmazából véletlenszerűen a V változót választjuk. Ennek ugyebár, ahogy az összes többi változónak is, 3 lehetséges értéke van: RED, GREEN, és BLUE. Ezen értékek ütközés száma a V esetében most következő {RED(4), GREEN(3), BLUE(4)}. A zárójelben szereplő ütközés-számok a következőképpen jönnek ki: ha V-nek a fenti behelyettesítésben RED-re változtatnánk az értékét, akkor a kapott behelyettesítésben sérülne az SA-V közti, a WA-SA, az NT-Q, és a Q-NSW közti korlát (azaz összesen 4 korlát).
10	0.969697	0	A fejezetben kifejlesztett reprezentációt felhasználva és kiterjesztve adja meg az alábbi hat állítás reprezentációját. a. 0 °C és 100 °C között cseppfolyós a víz. b. A víz 100 °C-nál forr fel. c. János palackjában megfagyott a víz. d. Az ásványvíz egyfajta víz. e. János palackjában ásványvíz van. f. Minden folyadéknak van fagyási pontja. g. Egy liter víz súlya több, mint egy liter alkohol súlya.
5	0.181818	1	 szakasz -  Visszalépéses keresés előretekintéssel, és legkevésbé korlátozó érték (LCV) heurisztikával: egy-egy lépésben az éppen aktuálisan kiválasztott változó minden egyes értékére kiszámolja, hogy mennyi ütközést eredményezne ez az értékválasztás a szomszédai körében (a behelyettesítetlen és a behelyettesített változókat is beleértve), és ezen ütközés-számok szerinti növekvő sorrendben adja vissza az aktuálisan kiválasztott változó értékkészletét.
14	0.869565	1	Építsük meg a fuzzy típusú PI szabályzót, amely az elvárt és a mért állapot közötti különbséget megpróbálja nullához közelíteni. A szabályzó integrál része a hibát a nullához közelíti. Használjunk kezdetben csak két tagsági függvényt és építsük fel a szabályrendszert.
13	0.272727	0	A hiedelmi mértékeket mindig állításokhoz (propositions) rendeljük – amelyek ez és ez a helyzet típusú kijelentések. Az állítások leírására eddig két formális nyelvet – az ítéletlogikát és az elsőrendű logikát – használtuk. Ez az alfejezet egy olyan nyelvet ír le, amelyet a valószínűség-elmélet jellegzetesen használ, és amely valamelyest kifejezőbb az ítéletlogikánál. (A  alfejezet azokat a módszereket taglalja, amelyek megadják, hogy milyen hiedelmi mértékek tulajdoníthatók az elsőrendű logika egyes kijelentéseinek.)
2	0.421053	1	Egyre nagyobb az, az igény hogy, bonyolultabb multi-ágens rendszerek (multi-agent system, MAS) – által kivitelezhető célok is megvalósíthatóvá váljanak (például társadalmi, természeti jelenségek modellezését, stb.).Egy multi-ágens rendszer tagjai folyamatos interaktív kapcsolatban állnak, kommunikálnak egymással, megosztják az információikat. A multiágens rendszerben egy-egy tag csak részfeladatokat tud végezni, mivel a feladat egészéhez szükséges összes adat és módszer nem áll egyetlen adott tag rendelkezésére. Így a közös tudásukat felhasználva, cselekedeteiket összehangolva oldanak meg összetett feladatokat. Kommunikációjuk és koordinációjuk azért létfontosságú, mert a teljes rendszerre vonatkozó ismeretek, és célok hiányában tevékenységük kaotikussá válna. Ezek legtöbbször dinamikusan változó környezetben működnek. Az ágenstechnológia jelenét az ágensek egyéni és rendszerszintű interaktív képességeinek és a multi-ágens rendszerek hatékonyságának növelése határozzák meg. A hálózatok, és a nyílt, elosztott rendszerek terjedése megváltoztatják a számítógépes feladatok megoldásának módjait. Egymástól független viszonylag egyszerű egyedek tömegesen dolgoznak együtt: Az alkalmazások részletes újraírása nélkül, módosítható és újjáépíthető (flexibilis) rendszert alkotva kooperálnak és ,ha ellenérdekeltek versengenek.
20	0.642857	1	* A természetes idegi (neurális) hálózatok alapfogalmai: az ingerület keletkezése, az idegsejtek kapcsolódása, információ továbbítás jellemzői, az agyi információ-feldolgozás specializáltsága, a tanulás értelmezése * A természetes idegi hálózatok működésének tanulságai * A McCulloch és Pitts formális neuron jellemzői * Logikai műveletek formális neuronokkal * A neurális hálózatok gyakori elnevezései, gyökerei * A mesterséges neurális hálózatok általános jellemzői * A neurális hálózatok meghatározó elemei (processzor és átviteli függvények, összeköttetési módok (topológiák), tanítás) * A neurális hálózatok összeköttetéseinek típusai (előrecsatolt, visszacsatolt, rétegelt), ábrázolása (grafikus, súlymátrixos), jellemzői (Kolmogorov, Cybenko) * A tanító adatok szerkezete * Alapvető tanítási szabályok (Hebb, Delta) * A felügyelt tanítás lényege, algoritmusa * Mikor célszerű neurális hálózatot alkalmazni? * Tipikus alkalmazási példák
5	0.181818	1	Amennyiben sikerült kiválasztanunk a következő vizsgálni kívánt változót, úgy a  szakasz -  Visszalépéses keresés előretekintéssel, és legkevésbé korlátozó érték (LCV) heurisztikával heurisztika szerint rendezhetjük értékkészletének értékeit, és ezeken haladhatunk végig (a tankönyv  ábráján látható pszeudokód FOR-ciklusa során).
1	0.103448	1	Tíz kategóriát állapított meg: 1. szubsztancia (létező: ember, növény, állat, tárgy) Két alcsoport található ezen belül: + elsődleges: individuum (Isten, egyedi létező) + másodlagos: fajok, nemek (ember, állat, tárgy) 2. mennyiség (liternyi, négyzetméternyi) 3. minőség (fehér, kategóriákkal foglalkozó) 4. viszony (kétszerese, fele, kisebb) 5. hely (vízben, híd mellett) 6. idő (tegnap, délben) 7. helyzet (fejjel lefelé, vízszintesen) 8. birtoklás vagy ellátottság (fel van öltözve, ruhát hord) 9. cselekvés (megy, mozgat, fordul) 10. elszenvedés (tétettetik, égettetik)
10	0.939394	0	Arisztotelész Kategóriák c. művéhez kommentárt fűzve Porfiriusz görög filozófus (kb. i. e. 234–305) rajzolt fel valamit, amit első szemantikus hálónak lehetne minősíteni. Charles S. Peirce korszerű logikára alapozva egzisztenciális gráfokat fejlesztett ki, mintegy kifejlesztve az első modern logikát használó szemantikus háló formalizmusát (Peirce, 1909). Az MI-n belül a szemantikus hálók kutatását Ross Quillian kezdeményezte (Quillian, 1961), a nyelvfeldolgozás és az emberi memória iránti érdeklődéséből kiindulva. Marvin Minsky nagy hatású cikkében a szemantikus hálók kereteknek (frames) nevezett változatát mutatta be (Minsky, 1975). A keret egy objektum vagy egy kategória reprezentációja más objektumokkal vagy kategóriákkal képzett relációival. Bár a cikk érdeklődést keltett magának a tudásreprezentációnak a területe iránt, mégis kritizálták, hogy a Minsky cikkét megelőző objektumorientált programozás eszközeit, illetve az öröklödés és az alapértelmezett értékek használatát újból felkínálja (Dahl és társai, 1970; Birtwistle és társai, 1973). Nem világos, hogy az objektumorientált programozásról szóló későbbi cikkeket – viszonzásképpen – mennyire befolyásolta a szemantikus hálókkal kapcsolatos korai MI-munka.
11	0.769231	0	A Strips problémák ítéletlogikai leírásra való fordítását a tudásreprezentációs ciklus egy iskolapéldáján mutatjuk be: egy megfelelő axiómakészlettel indulunk, és úgy találjuk, hogy ezek az axiómák hamis, nem várt modelleket tesznek lehetővé, ezért további axiómákat adunk hozzájuk.
3	0.083333	1	Az állapotér jobb, manuális feltérképezése végett készítsük az alábbi táblázatot, ahol egy-egy sor annak felel meg, hogy az első oszlopban feltüntetett cselekvés a többi oszlopot megcímkéző állapotból milyen hiedelmi állapotot eredményez. A táblázat alapján képet kaphatunk arról, hogy egy cselekvés adott hiedelmi állapotból milyen hiedelmi állapotba vezet át. Ehhez a cselekvés sorában össze kell másolni azoknak az oszlopoknak a tartalmát, amelyek együtt a kiinduló hiedelmi állapotot adják ki. A (NOP, QLL) cselekvés pl. a kezdeti (A, B, C, D) állapotból a (0, A, B) állapotba vezet, amely – ha a kamra mégsem nyílik meg és a pörgés megtörténik – egy (A, B) állapottal lesz ekvivalens. A táblázat ily módon, implicite, a keresési tér állapotgráfját ábrázolja.
12	0.428571	0	Formálisan az eddig definiált keresési tér egy és-vagy gráf. Az és-vagy gráfok korábban a  fejezetben az ítéletlogikai Horn-klóz következtetésben jelentek meg. Itt az ágak logikai következtető lépések helyett cselekvések, de az algoritmus azonos. A  ábra az és-vagy gráfok keresésére egy rekurzív, mélységi kereső algoritmust ad meg.
5	0.181818	1	Az előbbi ternáris-bináris korlát-konverziót leíró részben azt mondtuk, hogy miután megvan a ternáris értékkorlát, azaz a ternáris korlátban szereplő 3 változó összes lehetséges értékkombinációját felsoroltuk, hogy adjunk nekik egy-egy egyedi azonosítót, és ezeket az azonosítókat egy értékkészletbe gyűjtve rendeljük hozzá egy újabb segédváltozóhoz. Legyen most ez a segédváltozó a ZCF. Ez lesz tehát eddig az 52. változónk.
10	0.333333	0	Az eseménykalkulus számos továbbfejlesztését dolgozták ki, hogy a közvetett hatásokkal, a nem zérus időtartalmú eseményekkel, a folyamatosan változó eseményekkel, a nemdeterminisztikus hatásokkal, a kauzális korlátozásokkal és más bonyodalmakkal is tudjanak dolgozni. Egyes kérdésekkel a következő alfejezetben fogunk találkozni. A tisztesség kedvéért megjegyezzük, hogy teljesen elfogadható megoldások máig sem születtek, azonban legyőzhetetlen akadályok sem merültek fel.
17	0.666667	0	Gondoljuk át a következő történetet: két állítólagos betörőt, Alizt és Bendegúzt tetten érik egy betörés helyszínéhez közel, és a rendőrség külön-külön kihallgatja őket. Mindketten tudják, hogy ha mindketten beismerik a bűncselekményt, akkor 5 év börtönt kapnak betörésért, de ha mindketten tagadnak, akkor csak 1 évet kapnak lopott holmik birtoklásának enyhébb vádjával. Azonban a rendőrség külön-külön alkut ajánl mindkettőnek: ha a partneredről tanúsítod, hogy egy betörőbanda vezetője, akkor szabadon engednek, míg a partnered 10 évet kap. Ekkor Aliz és Bendegúz az úgynevezett fogolydilemmával (prisoner’s dilemma) szembesülnek: tanúskodniuk kell vagy tagadniuk? Racionális ágensként Aliz és Bendegúz is a saját várható hasznosságát akarja maximálni. Tegyük fel, hogy Alizt teljességgel hidegen hagyja partnerének a sorsa, így az ő hasznossága a saját börtönben töltött éveinek számával arányosan csökken, függetlenül attól, hogy mi történik Bendegúzzal. Bendegúz teljesen hasonlóan érez. A racionális döntés meghozatalához mindketten megalkotják a következő jutalommátrixot:
24	0.166667	1	Kép csak akkor keletkezhet, ha a beható energia és a szervezet között kölcsönhatás jön létre, ennek azonban az az előfeltétele, hogy a használt energiaféleség adagjai, kvantumai a vizsgálandó anyaggal közölhetők legyenek. Ez nem mindig lehetséges, hiszen ugyanaz az anyag, különböző energiasugárzásokkal szemben eltérően viselkedik. A napsugár akár 10 m vastag vízrétegen is áthatol, a γ-sugarakat viszont ugyanez a vízréteg elnyeli, vagyis a fénynél jóval nagyobb energiájú sugarak számára a víz „átlátszatlan”.
19	0.954545	0	 Megjegyzés Tegyük fel, hogy egy rezolúciós lépést végrehajtó logikai programot írunk. Legyen tehát a Rezolválás(c[1], c[2], c) sikeres, ha a c a c[1] és a c[2] rezolválásának az eredménye. Rendes körülmények között a Rezolválás-t a tételbizonyítás részeként fogjuk használni úgy, hogy meghívjuk a c rezolvens generálására, miközben a c[1] és a c[2] változóba konkrét klózértékeket helyettesítünk be. Tegyük most fel, hogy az eljárást a behelyettesített c-vel és a szabad c[1]-gyel, valamint c[2]-vel hívjuk meg. Megszületik-e az inverz rezolúciós lépés helyes eredménye? Szükséges-e a logikai program valamilyen speciális átalakítása, hogy az inverz lépés helyesen működjön?
3	0.75	0	Példaként a porszívóvilág környezetét vesszük. Emlékezzünk vissza, hogy az állapottér nyolc állapotból áll (lásd  ábra). Három cselekvés van – Jobbra, Balra és Szív –, és a cél az összes kosz felszedése (a 7. és 8. állapot). Ha a környezet megfigyelhető, determinisztikus és teljesen ismert, akkor a problémát triviálisan bármelyik ismertetett algoritmussal meg lehet oldani. Így például ha a kezdeti állapot az 5. állapot, akkor a [Jobbra, Szív] cselekvésszekvencia a 8. célállapotot éri el. A fejezet további részében e probléma szenzor nélküli és eshetőségi változatával foglalkozunk. A felfedezéses problémákat a  alfejezet, az ellenfélproblémákat a  fejezet tárgyalja.
5	0.181818	1	1. EnglishmanHouse: az angol személy által lakott ház. 2. SpaniardHouse: a spanyol személy által lakott ház. 3. NorwegianHouse: a norvég személy által lakott ház. 4. UkrainianHouse: az ukrán személy által lakott ház. 5. JapaneseHouse: a japán személy által lakott ház. 6. RedHouse: a piros színű ház. 7. YellowHouse: a sárga színű ház. 8. BlueHouse: a kék színű ház. 9. GreenHouse: a zöld színű ház. 10. IvoryHouse: az elefántcsont színű ház. 11. ZebraHouse: a zebrát tartó személy háza. 12. DogHouse: a kutyát tartó személy háza. 13. FoxHouse: a rókát tartó személy háza. 14. SnailsHouse: a csigákat tartó háza. 15. HorseHouse: a lovat tartó háza. 16. MilkHouse: a tejet fogyasztó személy háza. 17. CoffeeHouse: a kávét fogyasztó személy háza. 18. TeaHouse: a teát fogyasztó személy háza. 19. OrangeJuiceHouse: a narancslevet fogyasztó személy háza. 20. WaterHouse: a vizet fogyasztó személy háza. 21. KoolsHouse: a Kools márkájú cigarettát szívó személy háza. 22. ChesterfieldsHouse: a Chesterfields márkájú cigarettát szívó személy háza. 23. WinstonHouse: a Winston márkájú cigarettát szívó személy háza. 24. LuckyStrikeHouse: a Lucky Strike márkájú cigarettát szívó személy háza. 25. ParliamentsHouse: a Parliaments márkájú cigarettát szívó személy háza.
8	0.129032	0	Az elsőrendű logika alapvető szintaktikai elemei az objektumokat, relációkat és függvényeket megjelenítő szimbólumok. A szimbólumoknak tehát három típusa létezik: konstansszimbólumok (constant symbols), amelyek az objektumokat jelölik; predikátumszimbólumok (predicate symbols), amelyek a relációkat jelenítik meg; és a függvényszimbólumok (function symbols), amelyekkel függvényekre hivatkozhatunk. Azt a konvenciót fogjuk követni, hogy a szimbólumok mind nagybetűvel kezdődnek. Például használhatjuk a Richárd és János konstansszimbólumokat; a Testvér, Fején, Személy, Király és Korona predikátumszimbólumokat, valamint a BalLáb függvényszimbólumot. Úgy, mint az ítéletszimbólumoknál, a nevek megválasztása itt is teljes mértékben a felhasználóra van bízva. Minden egyes predikátum- és függvényszimbólum együtt jár egy számossággal (arity), ami behatárolja a paraméterek számát.  ábra - Az elsőrendű logika (egyenlőséggel kiegészített) szintaxisa Backus–Naur-forma jelöléseivel. (Lásd az B.1. szakasz - B1. Nyelvek definiálása Backus–Naur-Formában (BNF) részben, ha ez a jelölés ismeretlen.) A szintaxis szigorú a zárójelezés tekintetében; a zárójelekről és az operátori elsőbbségről a 7. szakasz - Szintaxis részben szereplő megjegyzések ugyanúgy vonatkoznak az elsőrendű logikára is. Az elsőrendű logika (egyenlőséggel kiegészített) szintaxisa Backus–Naur-forma jelöléseivel. (Lásd az B.1. szakasz - B1. Nyelvek definiálása Backus–Naur-Formában (BNF) részben, ha ez a jelölés ismeretlen.) A szintaxis szigorú a zárójelezés tekintetében; a zárójelekről és az operátori elsőbbségről a 7. szakasz - Szintaxis részben szereplő megjegyzések ugyanúgy vonatkoznak az elsőrendű logikára is.
14	0.869565	1	A könnyebb áttekinthetőség kedvéért a szabályok grafikusan is megjeleníthetők (bármelyik ablakban View/Rules). A rendszer bemeneti értéke változtatható a piros vonal mozgatásával, vagy konkrét érték adható meg az Input mezőben. A kimenet mindig ennek megfelelően változik, ugyanis Mamdani típusú fuzzy szabályozási rendszerekben a szabálypremissza és a szabálybemenet egybeesésének mértéke (a tüzelési szint) határozza meg az adott szabály kimenetének jelentőségét, nagyságrendjét a teljes t szabálykimenetben. Mindez jól megfigyelhető a bemenet változtatásakor.
20	0.75	0	A többrétegű háló tanuló algoritmusa hasonló a  ábrán bemutatott perceptrontanulási algoritmushoz. Egy kisebb különbség, hogy több kimenet is lehet, így nem egy skalár kimeneti értékünk, hanem egy h[W](x) kimeneti vektorunk van, és minden egyes példához is egy y kívánt kimeneti vektor tartozik. Fontosabb különbség, hogy míg a kimeneti rétegben a hiba nyilvánvalóan y – h[W], addig a rejtett rétegben a hiba misztikusnak tűnik, hiszen a tanító minták nem mutatják, hogy mimnek kellene lennie a rejtett csomópontok értékének. Kiderül, hogy a hibát viszszaterjeszthetjük (back-propagate) a kimeneti rétegről a rejtett rétegekre. A hiba-visszaterjesztési eljárás (back-propagation) közvetlenül kiadódik a teljes hibagradiens levezetéséből. Először egy intuitív bizonyítással mutatjuk be az eljárást, majd megmutatjuk a levezetést is.  ábra - Többrétegű neurális háló egy rejtett réteggel és 10 bemeneti egységgel, alkalmas az étterem problémához Többrétegű neurális háló egy rejtett réteggel és 10 bemeneti egységgel, alkalmas az étterem problémához
2	0.210526	1	Az elméletet és a gyakorlatot összekötő híd keresésében végül eljutunk a racionalitás negyedik formájához, a korlátozott racionalitáshoz (korlátozott optimalitás, bounded optimality). A Russel-Norvig könyv  fejezete a következő definíciót adja rá: „Egy korlátozottan optimális ágens a lehető legjobban cselekszik a számítási erőforrásaitól függően” [2]. Lényegét tekintve azért beszélünk korlátozottságról, mert az ágensünkben működő racionalitás nem minden inputra ad optimális választ, az optimumot is gyakran csak bizonyos korlátok között közelíti, továbbá ágens-specifikus (nem minden gépen racionális, vagy csak ágensek egy korlátozott osztályán). Ez az a racionalitás, amely a mesterséges intelligencia gyakorlati oldalát jellemzi. Számunkra legfontosabb vonása, hogy csakis korlátozott, bizonyos szabályok szerint működő környezetben tud sikeresen viselkedni, hiszen erre lett tervezve. Éppen emiatt kiértékelő függvényeit gyakran heurisztikák jellemzik. Az aszimptotikusan korlátozott optimalitás fogalma még annyiban több, hogy az azt megvalósító program nem csak egy meghatározott gépekből álló halmazon működik, hanem az azoknál erősebb (gyorsabb) gépeken is fut, méghozzá mindenképp jobb teljesítménnyel [2].
27	0.4	1	Tökéletesen racionális robotot konstruálni azonban nem biztos, hogy tudunk. Végső soron ideális esetben csak a fizika törvényszerűségei kellene, hogy határt szabjanak annak, hogy milyen hatékonysággal tudja házi robotunk elvégezni a teendőit. Ha például fénysebességgel porszívózna, mosogatna, és ágyazna meg, akkor – Einstein relativitás elméletéből tudjuk – ahhoz végtelen sok energiára volna szüksége, arról nem is beszélve, hogy a fénysebességet mind a mai napig még csak megközelíteni sem tudtuk …
15	0.259259	0	Az előzőleg leírt algoritmust Viterbi-algoritmusnak nevezik a megalkotója után. Hasonlóan a szűrési algoritmushoz, ennek a komplexitása is lineáris t-ben, a sorozat hosszában. Azonban eltérően a szűréstől, a tárigénye szintén lineáris t-ben. Ez azért van így, mert a Viterbi-algoritmusban mutatókkal kell nyilvántartani az egyes állapotokhoz vezető legjobb sorozatot.
8	0.935484	1	Az első állítás azt jelenti, hogy egy s halmazhoz bármely x-et hozzávéve az x eleme lesz az s halmaznak, a második pedig azt, hogy ha egy x-et tartalmazó s halmazhoz hozzáveszünk tetszőleges y-t, az x továbbra is eleme lesz az s halmaznak. És ezek valóban igazak is, de ez inkább az elem halmazhoz való hozzávételének definíciója lehetne. A halmaz eleme definíciójára jobban használható a halmazokra vonatkozó 3. és 4. axióma.
26	0.928571	0	Szükségszerűen bizonyítja-e a kínai szoba érv cáfolata, hogy a megfelelően programozott számítógépek mentális állapotokkal rendelkeznek? Szükségszerűen együtt jár-e az érv elfogadása azzal, hogy a számítógépeknek nem lehetnek mentális állapotaik?
6	0.1	1	Ha viszont a 2-es játékos bedől az 1-es blöffjének (vagy úgy tesz, mintha bedőlne), azaz ha a 2-es játékos passzol (Pass), miután az 1-es játékos Black-kel a kezében emeli a tétet (Raise), akkor nyilván elveszti a közösbe addig betett 1 dollárját, amit az 1-es játékos nyer el. A kifizetési vektor ekkor tehát (1, -1).
7	0.8	0	A nehézség nem az, hogy a   egyenlet nem helyes. A probléma inkább az, hogy az egyenletek által reprezentált függőségek összekapcsolása nem oldható fel az igazságértékek propagálásának egyszerű mechanizmusával a vizsgált logikai áramkörökben. A   egyenletet alkalmazó hurokmentes verzió, amely a szellősséget a közvetlen megfigyelésekből határozza meg, nem teljes abban az értelemben, hogy bizonyos pontokon az áramköralapú ágens kevesebbet tud, mint a teljes következtetési eljárást alkalmazó következtetésalapú ágens. Például ha van szellő az [1, 1]-ben, a következtetésalapú ágens képes arra a megállapításra jutni, hogy van egy szellő a [2, 2]-ben, míg a   egyenletet használó, hurokmentes áramkörre alapuló ágens erre nem képes. Lehetséges építeni egy teljes áramkört – végül is, szekvenciális áramkörök képesek emulálni bármilyen digitális számítógépet –, de ez jelentősen bonyolultabb volna.
12	0.761905	0	Konvenciók szintén adódhatnak a folyamatok evolúciós fejlődésével. Például a közösségben élő rovarok nagyon kidolgozott összetett terveket hajtanak végre, melyeket a kolónia egyedeinek közös genetikus összeállítása biztosít. Az azonosságot szintén nyomatékosítja a tény, hogy a konvencióktól való eltérés csökkenti az evolúciós alkalmasságot, így bármely alkalmazható összetett terv stabil egyensúlyi helyzetet eredményezhet. Hasonló megfontolások alkalmazhatók az emberi nyelv fejlődésére, ahol nem az a fontos, hogy egyes személyek milyen nyelvet beszélnek, hanem az a tény, hogy minden személy ugyanazt a nyelvet beszéli.
24	0.916667	0	Bár a perspektívát a görögök is ismerték, furcsamód a felfogásuk a szemnek a látásban betöltött szerepéről zavaros volt. Arisztotelész azt gondolta, hogy a szem – a mai lézeres távolságmérők mintájára – fénysugarakat bocsát ki. Ezt a téves elképzelést a világnak az arab tudósok közvetítették, többek közt Alhazen a 10. században. Ezután különféle kamerák fejlesztése következett. Ezek egy szobából (latinul a camera szobát jelent) álltak, ahova a fényt a falon egy kis nyíláson át engedjük be, hogy az átellenes falon a kinti jelenet képét kivetítse. Ezen kamerák mindegyikében a kép természetesen fordított volt, ami vég nélküli zavart okozott. Ha a szem ilyen elvű berendezés lenne, akkor hogyan lehetséges, hogy a képet helyesen látjuk? A probléma a korszak legnagyobb elméit foglalkoztatta (Leonardót is beleértve). A kérdés megválaszolásához Kepler és Descartes munkássága kellett. Descartes az ablakzsalu nyílásába egy olyan szemet helyezett be, amelynek nem átlátszó felhámrétegét eltávolították. A retinára kiterített papíron így egy fordított képet kapott. Bár a retinás kép valóban fordított, ez nem okoz problémát, mert az agy helyesen interpretálja a képet. Mai szaknyelven azt mondhatnánk, hogy megfelelő módon kezelni kell az adatstruktúrákat.
5	0.181818	1	Az {SA=RED, NSW=GREEN, NT=GREEN, WA=BLUE, Q=GREEN} behelyettesítéshez jutottunk, ami sajnos továbbra is ellentmondásban van a korlátokkal (egész pontosan a 4-es és 8-as korlátokkal). Lépjünk tehát tovább a Q változó következő értékére (Q=BLUE).
11	0.461538	0	 ábra - A nem teljes részben rendezett terv a kerékcsere problémához, miután megválasztottuk a cselekvéseket az első két nyitott előfeltételhez. A dobozok cselekvéseket testesítenek meg, a bal oldalon az előfeltételekkel, a jobb oldalon pedig a következményekkel. (Az Indít cselekvést kivéve a következményeket elhagytuk.) A fekete nyilak az okozati kapcsolatokat mutatják, melyek a nyíl fejénél szereplő állítást védik. A nem teljes részben rendezett terv a kerékcsere problémához, miután megválasztottuk a cselekvéseket az első két nyitott előfeltételhez. A dobozok cselekvéseket testesítenek meg, a bal oldalon az előfeltételekkel, a jobb oldalon pedig a következményekkel. (Az Indít cselekvést kivéve a következményeket elhagytuk.) A fekete nyilak az okozati kapcsolatokat mutatják, melyek a nyíl fejénél szereplő állítást védik. 3. Vegyük a Felszerel(Pótkerék, Tengely) cselekvés ¬Ott(LaposKerék, Tengely) előfeltételét. Hogy ellenkezzünk egy kicsit, válasszuk az OtthagyÉjszakára cselekvést, a kézenfekvő Eltávolít(LaposKerék, Tengely) helyett. Vegyük észre, hogy az OtthagyÉjszakára cselekvésnek szintén következménye a ¬Ott(Pótkerék, Föld), ami ütközik az
8	0.612903	0	A wumpus világban, amelyet mesterségesen létrehozott szabályrendszer határoz meg, könnyű az idevonatkozó tudásbázist azonosítani. (Vegyük észre azonban, hogy a szomszédosság definíciója nem volt explicit megadva a wumpus világ szabályaiban.) A valódi tárgyterületekben a relevancia problémája meglehetősen bonyolult lehet – például egy VLSI tervező szimulációs rendszernek figyelembe kell vennie a szórt kapacitásokat és a felületi hatásokat. 3. Meg kell határozni a predikátumok, függvények és konstansok szótárát. Ez azt jelenti, hogy a fontos tárgyterület szintű koncepciókat le kell fordítani logikai szintű nevekre. Ez számos, a megközelítés jellegét tárgyaló kérdést érint. Hasonlóan, mint a programozási stílusnak, ennek is jelentős hatása lehet a projekt végső sikerére. Például ilyen kérdés, hogy a csapdákat vajon objektumok jelenítsék-e meg vagy egy a négyzetekre vonatkozó unáris predikátum? Az ágens iránya függvény legyen-e vagy predikátum? A wumpus helyzete az időtől függjön-e? Mihelyt a választás megtörtént, az eredmény egy szótár, amit a tárgyterület ontológiájának (ontology) nevezzünk. Az ontológia fogalma egy olyan elméletet takar, ami a létezés természetét írja le. Meghatározza, hogy milyen dolgok léteznek, de nem határozza meg a rájuk jellemző tulajdonságokat, sem a köztük fennálló kapcsolatokat. 4. A tárgyterületről szóló általános tudás kódolása. A tudásmérnök leírja a szótár öszszes termjéhez tartozó axiómákat. Ez lerögzíti (amennyire lehetséges) a termek jelentését, és lehetővé teszi a szakértő számára a tartalom ellenőrzését. Ez a lépés gyakran feltárja a félreértelmezéseket vagy a hiányosságokat a szótárban, amelyeket a 3. lépéshez újra és újra visszatérve, iteratív eljárással javíthatunk. 5. Az adott probléma példány leírásának kódolása. Ha az ontológia jól átgondolt, ez a lépés már könnyű lesz. Egyszerű atomi mondatokat kell az ontológiában már leírt fogalmak példányaira megfogalmazni. Egy logikai ágens számára a problémapéldányokat az érzékelők biztosítják, amikor a „különálló” tudásbázist kiegészítik mondatokkal ugyanúgy, ahogy a hagyományos programoknak bemeneti adatokat adunk meg. 6. Lekérdezéseket fogalmazunk meg a következtetési folyamat számára és válaszokat vezetünk le. Itt kapjuk meg az eddigi munkánk jutalmát: működtethetjük a következtetési folyamatot az axiómákon és a problémaspecifikus tényeken, hogy megkapjuk a minket érdeklő tényeket. 7. Szűrjük ki a hibákat a tudásbázisból. Sajnos az első próbálkozásra a kérdésekre kapott válaszok nagyon ritkán lesznek helyesek. Pontosabban, a válaszok helyesek lesznek a megadott tudásbázis szempontjából, feltételezve, hogy a következtetési folyamat megfelelő, de a válaszok nem azok lesznek, amiket a felhasználó vár. Például ha hiányzik egy axióma, akkor bizonyos kérdések megválaszolhatatlanok lesznek a tudásbázis alapján. Ilyenkor egy hibajavítási folyamatra van szükség. A hiányzó vagy túl gyenge axiómák könnyen megtalálhatók úgy, hogy felfedezzük azokat a helyeket, ahol a következtetés lánca váratlanul megszakad. Például ha a tudásbázis tartalmazza az egyik, csapdákra vonatkozó diagnosztikus axiómát,
14	0.73913	1	Egy szabály egyediségét a bemeneti változókhoz tartozó fuzzy halmazok adják. Amikor egy létrehozott szabályt szeretnénk a szabálybázisba helyezni, akkor előfordulhat az az eset, hogy csak egy másik szabály felülírásával tehetjük ezt meg.
18	0.157895	0	A döntési fa tanulás egyike a legegyszerűbb, mégis az eddigiekben az egyik legsikeresebbnek bizonyult tanulási algoritmusnak. Jó bevezetésként szolgál az induktív tanulás területén, és ráadásul könnyen implementálható. Először bemutatjuk a cselekvő alrendszert, majd megmutatjuk, hogy miképpen lehet tanítani. Mindeközben olyan elveket mutatunk be, amelyek az induktív tanulás minden területére jellemzők.
13	0.272727	1	Viszont előfordulhat olyan eset is, hogy A, B függ egymástól, de egy adott C esemény ismeretében B már nem szolgáltat több információt A-ról, mint amit már tudunk, tehát P(A|B,C)= P(A |C). Ekkor azt mondhatjuk, hogy A-tól B feltételesen független, feltéve C-t, amit a következőképpen jelölünk: I(A, B |C) .
11	0.961538	0	Vizsgálja meg a  fejezetben szereplő kétirányú keresés (bidirectional search) definícióját. a. A kétirányú állapottér-keresés használata jó ötlet lenne tervkészítéshez? b. És a részben rendezett tervek terében történő kétirányú keresés? c. Tervezze meg a részben rendezett tervkészítő azon verzióját, melyben egy cselekvés akkor adható hozzá a tervhez, ha az előfeltételei elérhetők a tervben már szereplő cselekvések következményein keresztül. Magyarázza meg, hogyan kezeljük a konfliktusokat és a rendezési megkötéseket. Szükségszerűen azonos ez az algoritmus az állapottérben történő előrefelé kereséssel? d. Vegyünk egy részben rendezett tervkészítőt, ami kombinálja a c) részfeladat módszerét azzal az általános módszerrel, ahol a nyitott feltételek eléréséhez cselekvéseket adunk a tervhez. Azonos lesz az így előálló algoritmus a b) részfeladattal?
2	0.210526	0	Könnyen belátható, hogy ugyanez az ágens más körülmények között irracionális lenne. Például ha minden koszt feltakarított, akkor szükségtelenül oszcillálni fog ide-oda; ha a teljesítménymérték tartalmaz egy büntetőpontot minden balra vagy jobbra történő mozgásért, akkor az ágens egészen gyengén teljesít. Egy jobb ágens abban az esetben, ha meggyőződött arról, hogy az összes négyzet tiszta, nem csinálna semmit. Ha a tiszta négyzetek ismét koszossá válhatnak, az ágensnek időnként ellenőriznie kellene őket, és kitakarítania, ha szükséges. Ha a környezet geográfiája ismeretlen, az ágensnek fel kell térképeznie ahelyett, hogy az A és B négyzetekhez köti magát. A  feladatban azt kérjük majd, hogy tervezzen ezekre az esetekre ágenseket.
16	0.956522	1	A POCT eredmények a betegdokumentáció részét képezzék azonos módon a laboratóriumi vizsgálatokkal. A dokumentációban szerepelnie kell: - beteg azonosító, - vizsgálatot kérő személy, - vizsgálatot végző személy, - a mért paraméter értéke, mértékegysége, referencia tartománya, - használt eszköz azonosítása
25	0.074074	1	Magas beruházási költsége ellenére jelenleg 1600 rendszer található szeret a világon, és évente nagyjából 50%-kal nő a sikeresen végrehajtott beavatkozások száma. Az orvosok is egyre inkább megkedvelték a da Vincit könnyű irányíthatósága, ergonómiai funkciói és rendkívül fejlett 3D vizualizációs rendszere miatt. Sajnálatos módon hazánkban még nincs ilyen rendszer szolgálatban, de remélhető, hogy hamarosan a hazai orvosi ellátás részéve válhat.
6	0.1	1	A hátráló indukciót alkalmazva a fa levelei felől indulunk el: itt a B játékosnak van két választása. Ha jobbra lép, akkor 100-at kap a (100,100) kimenetel miatt, míg ha lefelé lép, akkor 101-et kap a (98,101) kimenetelből kifolyólag. Ebben a csúcsban tehát nyilván lefelé lépne a hátráló indukció szerint, így A-nak egyel balrább már effektíve a (99, 99) és (98, 101) kimenetelek közül kellene választania. Mivel 99 nagyobb, mint 98, ezért A is nyilván lefelé menne, azaz a (99,99)-et választaná... Mindezt tovább folytatva hátráló indukcióval arra jutunk, hogy A már az első lépésben lefelé lép, és így a játék egy lépésben véget is ér, a kifizetések pedig (1,1) szerint alakulnak.
9	0.689655	0	A bemutatott szabály neve bináris rezolúciós (binary resolution) szabály, mert pontosan két literált old fel. A bináris rezolúciós szabály önmagában nem eredményez egy teljes következtetési folyamatot. A teljes rezolúciós szabály literálok részhalmazait rezolválja minden egyes egyesíthető klózban. Egy alternatív megközelítés a faktorálásnak (factoring), a felesleges literálok eltávolításának a kiterjesztése az elsőrendű logikára. A propozíciós faktorálás két literált eggyé redukál, ha azok azonosak. Az elsőrendű faktorálás két literált eggyé redukál, ha azok egyesíthetők. Az egyesítőt a teljes klózra kell alkalmazni. A bináris rezolúció és a faktorálás kombinációja már teljes eljárást eredményez.
16	0.304348	0	Történtek próbálkozások arra nézve, hogy kiderítsék, mennyi értéket tulajdonítanak az emberek az életüknek. Az orvosi és biztonsági elemzésekben két elterjedt „pénznemet” használnak, a mikrohalált (micromort) (az egymilliomod esélyét az elhalálozásnak) és a QALY-t, vagy szabványos minőségű életévet (ami ekvivalens egy évvel, jó vagyoni helyzetben, betegségektől mentesen). Számos, személyek igen széles körét vizsgáló tanulmány azt mutatta, hogy a mikrohalál 20 dollárt ér (1980-ban). Azt már láttuk, hogy a hasznosságfüggvény nemlineáris, ezért ez nem jelenti azt, hogy a döntéshozó megölné magát 20 millió dollárért. Újra hangsúlyozandó, hogy a hasznossággörbe lokális linearitása azt jelenti, hogy a mikrohalál és a QALY értékei kis relatív kockázatok és jutalmak esetén hasznosak.
4	0.291667	1	Mi a helyzet az euklideszi távolsággal? A bal oldali ábrán az euklideszi távolság értéke √(4^2+4^2) = √(2 x 4^2) = 4 x √2 > 4. Tehát ez is nagyobb, mint a tényleges távolság (2 lépés). Azaz a 2. kérdésre a válasz szintén: nem!
10	0.848485	0	A körülírást a modellpreferencia-logika (model preference logic) egy példájának is tekinthetjük. Az ilyen logikákban egy állítás vonzatrelációban van (alapeseti státuson), ha igaz a tudásbázis minden preferált modelljében, ellentétben a klasszikus logika igazságkövetelményével, hogy minden modellben legyen igaz. Körülírás esetében egy modell egy másiknál preferáltabb, ha kevesebb abnormális objektuma van.^[107] Nézzük meg, hogy ez az ötlet hogyan működik szemantikus hálóban fellépő többszörös öröklődés esetén. A többszörös öröklődés standard példája az ún. „Nixon-gyémánt”.^[108] Az eredete az a megfigyelés, hogy Richard Nixon egy kvéker vallási szektához tartozott (és így alapesetben pacifista) és republikánus is volt (és így alapesetben éppen nem pacifista). Ezt az alábbi módon írhatjuk fel:
26	0.642857	0	Az első három axiómából arra a következtetésre jut, hogy a programok nem elégségesek az elméhez. Másként megfogalmazva: ugyan lehet elme egy programot futtató ágens, de nem lesz szükségszerűen elme csupán a program futtatása miatt. A negyedik axiómából pedig arra a következtetésre jut, hogy „bármely más rendszernek, amely képes elmét okozni, az aggyal (legalább) megegyező kauzális erőkkel kell rendelkeznie”. Ebből pedig arra jut, hogy bármely mesterséges agynak nem elég csupán egy adott programot futtatni, hanem duplikálnia kell az agy kauzális erőit, valamint hogy az emberi agy a mentális jelenségeket nem csupán egy program futtatása révén hozza létre.
5	0.181818	1	Most pedig, miután kellőképpen jellemeztük és körülírtuk az AC3/MAC következtetési algoritmust, próbáljuk meg a segítségével a visszalépéses mélységi algoritmus-keretbe ágyazottan megoldani az  ábrán látható kiindulási problémánkat.
14	0.73913	1	A fuzzy rendszerek célja, hogy a bemeneti paraméterek értékének ismeretében becslést adjon a kimeneti paraméterek értékére. A hiányzó szabályokat azzal a trükkel töltjük ki, hogy a meglévő szabályok segítségével becslést adunk az adott állapot esetén elképzelhető kimeneti értékre.
11	0.461538	0	A megoldás keresése egy kezdeti tervből indul, ami egy Indít cselekvést tartalmaz az Ott(Pótkerék, Csomagtartó) ∧ Ott(LaposKerék, Tengely) következménnyel és egy Befejez cselekvést az Ott(Pótkerék, Tengely) előfeltétellel. Ezután követő állapotokat állítunk elő úgy, hogy egy nyitott előfeltételt választunk a munkához (visszavonhatatlanul), majd választunk az ehhez vezető lehetséges cselekvések közül. Most nem foglalkozunk a heurisztikákkal, amik segíthetik ezt a döntést; látszólag véletlenszerű döntést hozunk. Az események sorrendje a következő: 1. Vegyük az egyetlen nyitott előfeltételt, a Befejez cselekvés Ott(Pótkerék, Tengely) feltételét. Válasszuk ki az egyetlen alkalmazható cselekvést, a Felszerel(Pótkerék, Tengely)-t. 2. Vegyük a Felszerel(Pótkerék, Tengely) cselekvés Ott(Pótkerék, Föld) előfeltételét. Válasszuk az Eltávolít(Pótkerék, Csomagtartó) cselekvést, ami az egyetlen alkalmazható cselekvés az előfeltétel biztosításához. A végső terv a  ábrán látható.
7	0.92	1	Tulajdonképpen akkor optimális egy viselkedés, ha garantáltan a lehetséges legmagasabb pontot éri el. Emlékeztetőül a kincs megszerzése 1000 pont, -1000 pont az elhalálozás bármilyen okból, -10 pont a nyíl kilövése és -1 pont bármely egyéb cselekedet. Ebből könnyen belátható, hogy az optimális viselkedés, ha a lehető legkevesebb lépésben, lehetőleg a nyíl kilövése nélkül eljutni a kincshez, amennyiben ez lehetséges elhalálozás nélkül. Amennyiben ez nem lehetséges, az optimális viselkedés nem csinálni semmit.
20	0.107143	0	Most kibontunk N cukorkát, amelyek közül c meggyízű és ℓ citromízű. A csomagolásfajták számai a következők: r[c] meggyízű volt pirosba csomagolva és g[c] zöldbe, míg r[ℓ] citromízű volt pirosba csomagolva, míg g[ℓ] zöldbe. Ezen adatok együttes valószínűsége:
4	0.458333	0	A hegymászó keresési algoritmust (hill-climbing) a  ábra mutatja. A keresés egyszerűen csak egy ciklus, ami mindig javuló értékek felé – azaz felfelé – lép. Az algoritmus megáll, amikor felér a csúcsra, ahol nincsenek már magasabb értékű szomszédjai. Az algoritmus nem tart nyilván keresési fát, ezért a csomópontot leíró adatszerkezetnek csak az állapotot és a célfüggvény értékét kell nyilvántartania. A hegymászó keresés nem néz előre az aktuális állapotot közvetlenül követő szomszédokon túl. Egy kicsit arra hasonlít, mintha a Mount Everest csúcsát szeretnénk megtalálni sűrű ködben és emlékezetkihagyásban szenvedve.  ábra - A hegymászó keresési algoritmus (a legmeredekebb emelkedő (steepest ascent) változat) a lokális keresés alapvető módszere. Minden lépésben az aktuális csomópontot a legjobb szomszédjával cseréli le, ami ebben a változatban a legmagasabb Érték-ű szomszédot jelenti. Ha azonban egy h heurisztikus költségbecslést alkalmazunk, ez akkor a legalacsonyabb h-jú szomszéd lenne. A hegymászó keresési algoritmus (a legmeredekebb emelkedő (steepest ascent) változat) a lokális keresés alapvető módszere. Minden lépésben az aktuális csomópontot a legjobb szomszédjával cseréli le, ami ebben a változatban a legmagasabb Érték-ű szomszédot jelenti. Ha azonban egy h heurisztikus költségbecslést alkalmazunk, ez akkor a legalacsonyabb h-jú szomszéd lenne.
6	0.3	0	A minimax keresés problémája, hogy a játékban a megvizsgálandó állapotok száma exponenciális a lépések számában. A kitevőtől sajnos megszabadulni nem tudunk, ám lényegében megfelezhetjük. A trükk az, hogy lehetséges a korrekt minimax döntés kiszámítása anélkül, hogy a játékfában minden csomópontra rá kelljen nézni. Ehhez kölcsönözhetjük a  fejezetben megismert nyesés (prunning) gondolatát, és a játékfa nagyobb részét a megfontolásokból kihagyhatjuk. A konkrét vizsgált technika az alfa-béta nyesés (alpha-beta prunning). Ha ezt egy standard minimax fára alkalmazzuk, ugyanazt az eredményt adja vissza, mint a minimax, a döntésre hatással nem lévő ágakat azonban lenyesi.
6	0.1	1	Ez az eset nagyon hasonló az elsőhöz. Az ábrázolás ugyanúgy hatszög alapú. Viszont a megjelenítés abban különbözik, hogy a lerakott figurák nem töltik ki a teljes mezőket. Általában kitöltött körökkel jelölik a figurákat.
4	0.916667	0	Mivel az 1950-es évek végén, az 1960-as évek elején a számítógépek még csak legfeljebb pár száz szónyi memóriával rendelkeztek, így a memóriakorlátozott keresés már a kezdeti időkben is intenzíven kutatott terület volt. Doran és Michie Graph Traverser programja (Doran és Michie, 1966) az egyik legkorábbi keresőprogram, a memóriakorlát által megengedett mértékben legjobbat-először keresést hajt végre, majd kiválaszt egy operátort. Az IMA^* algoritmus (Korf, 1985a, 1985b) volt az első széles körben alkalmazott optimális, memóriakorlátozott heurisztikus keresési algoritmus; ennek számos változatát ki is dolgozták. Az IMA^* algoritmus hatékonyságának részletes elemzése és az algoritmus valós értékű heurisztikákkal kapcsolatos nehézségeinek tárgyalása a (Patrick és társai, 1992)-ben jelent meg.
6	0.25	0	Hogyan is kellene értelmezni egy ilyen viselkedést? Természetes következménye-e a szövetség az egyes játékosok optimális stratégiáinak egy többjátékos játékban? Úgy tűnik, hogy ez igaz lehet. Tegyük fel például, hogy A és B gyengén, míg C erősebben áll. Akkor néha optimális mind A, mind B számára, ha nem egymást, hanem C-t támadják meg, hogy az egyenként ne végezzen velük. Ily módon az együttműködés tisztán egoista viselkedésből is kialakulhat. Persze ahogy az együttes támadásnak kitett C gyengül, a szövetség értéke csökken, és vagy A, vagy B a megegyezést megszegheti. Egyes esetekben az explicit szövetségek az úgyis bekövetkezendő eseményeket rögzítik konkrét módon. Más esetekben szociális megbélyegzés jár a szövetség megszegéséért, így a játékosnak mérlegelnie kell a szövetség megszegésének rövid idejű előnyét és a szavahihetetlenként való megbélyegzés hosszú távú hátrányát. (Az ilyen bonyodalmakról többet a  alfejezetben.)
3	0.083333	1	Az élő és a gépi kereső ágens között talán az a legfontosabb különbség, hogy egy élő ágens nem szívesen vállalkozik a keresésben a nyers erő alkalmazására (azaz minden eshetőség megvizsgálására), akármennyire ez elvi garanciát biztosít a megoldás megtalálására. Egyszerűen kevés az idő, vagy szűkében van más fontos un. erőforrás, amit a nyers erő túlságosan felemésztene. Élő ágens keresési döntései feltétlenül támaszkodnak valamilyen irányt súgó információra, legyen ez egy színes folt a méhecskének, érdekes illatok a szimatoló kutyának, vagy utcanevek a házak sarkán turisták számára (egy ilyen irányt jelző információt heurisztikának és az azt felhasználó kereséseket informáltnak, vagy heurisztikusnak fogjuk nevezni, a nyers erőre támaszkodó un. vak, gyenge, vagy nem informált keresésekkel szemben). Irányt jelző információ elképzelhető absztrakt keresési terekben is. Gondoljuk itt pl. arra, hogy néhány példából általánosítva szeretnénk ágensünket a példák tömör definíciójára megtanítani, és abban az irányban folytatjuk (tanulási) térben a keresést, amerre a definíció tömörebben kezd alakulni (Ockham borotva elve).
9	0.931034	1	 Kövesse nyomon a  ábrán látható hátrafelé láncolási algoritmus végrehajtását, amikor azt a bűntény probléma megoldására alkalmazzuk. Mutassa be azt az érték-szekvenciát, amelyet a célok változó vesz fel, és rendezze egy fa formába.
5	0.181818	1	Az előretekintés során, a 6. lépésben az SA és Q változók értékkészletéből vettük ki a GREEN értéket az 5. lépésben tett NT=GREEN értékadás miatt. Tehát most ezt a következtetést kell visszacsinálni. Magyarán az SA és Q változók értékkészletét a jelenlegi {BLUE}-ról rendre visszanöveljük {BLUE, GREEN}-re.
3	0.916667	1	Most figyeljük meg a négy féle lehetséges lépést: 1. Mozgatás balra, ami ekvivalens az üres mező mozgatásával jobbra. Ez a C tömböt nem fogja megváltoztatni (hisz ebben az üres mező nem szerepel), így az inverziók számát sem. 2. Mozgatás jobbra, ami ekvivalens az üres mező mozgatásával balra. Ez a C tömböt nem fogja megváltoztatni (hisz ebben az üres mező nem szerepel), így az inverziók számát sem. 3. Mozgatás fel. Ez már megváltoztatja a C tömböt, mégpedig úgy, hogy egy mező két másik elé kerül, amelyek korábban előtte voltak. Ez mindenképp páros számmal módosítja az inverziók számát. 4. Mozgatás Le. Hasonlóan a fentihez, ez is mindenképp páros számmal módosítja az inverziók számát.
11	0.115385	0	A sokféle megkötés, korlátozás amit a Strips nyelv tartalmaz, abban a reményben került beépítésre, hogy a tervkészítő algoritmusok egyszerűbbek és hatékonyabbak lehessenek, anélkül hogy a valós problémák leírását megnehezítenék. Egyike a legfontosabb megkötéseknek, hogy a literáloknak függvénymenteseknek kell lenniük. Ezzel a megkötéssel biztosíthatjuk, hogy egy adott problémához tartozó bármely akció séma ítéletkalkulus formára, azaz változómentes ítéletlogikai cselekvés reprezentációk véges halmazára hozható. (A téma bővebb leírását lásd a  fejezetben.) Például a légi szállítási problémakörben 10 repülő és 5 repülőtér esetén a Repül(p, honnan, hova) séma 10 × 5 × 5 = 250 ítéletlogikai cselekvésre fordítható. A  és  alfejezet tervkészítői közvetlenül az ítéletkalkulusra hozott leírással dolgoznak. Ha függvényszimbólumokat is megengedünk, akkor végtelen sok állapot és cselekvés határozható meg.  ábra - A Strips és az ADL nyelv összehasonlítása a tervkészítési feladatok reprezentációjának szempontjából. Mindkét esetben a célok úgy viselkednek, mint egy paraméterek nélküli cselekvés előfeltételei. A Strips és az ADL nyelv összehasonlítása a tervkészítési feladatok reprezentációjának szempontjából. Mindkét esetben a célok úgy viselkednek, mint egy paraméterek nélküli cselekvés előfeltételei.
11	0.730769	0	Az ebben a fejezetben tárgyalt megközelítés a tételbizonyítás helyett egy cselekvéssor kielégíthetőségének (satisfiability) vizsgálatán alapul. Ítéletlogikai mondatok modelljét fogjuk megtalálni, melyek a következőképpen néznek ki:
3	0.208333	1	Általánosításának, az n-királynő problémának egy lehetséges alkalmazási területe az „iparban” a számos videó képkódoló (tömörítő) szabványban (például az MPEG-1/2/4-ben is) alkalmazott, úgynevezett blokk mozgásbecslés (Block Motion Estimation) algoritmusának gyorsítása, az algoritmus során a blokkon végzett műveletek számának redukálása.
24	0.875	0	Bár az ember számára az érzékelés könnyed cselekvésnek tűnik, igen nagy mennyiségű komplex számítást igényel. A látás célja információ kiemelése olyan feladatokhoz, mint a manipulálás, a navigálás és az objektumfelismerés. * A képalkotás (image formation) folyamata, a geometriai és fizikai aspektusokat tekintve, jól feltárt terület. Ha adott egy háromdimenziós jelenet leírása, ennek valamilyen tetszőleges kamerapozíciónak megfelelő képét könnyűszerrel előállíthatjuk (grafikai probléma). E folyamat megfordítása és a jelenet leírásának a kép alapján történő előállítása nehéz. * Ahhoz, hogy a manipulálási, navigálási és objektumfelismerési feladatokhoz szükséges vizuális információt kiemelhessük, szükség van valamilyen közbülső reprezentáció megkonstruálására. A képekből az olyan primitív elemeket, mint az élek és a régiók, a képfeldolgozási algoritmusok (image-processings) emelik ki. * Egy képben többféle segítség rejlik, amely lehetővé teszi, hogy a jelenetről háromdimenziós információt kapjunk. Idetartozik a mozgás, a sztereolátás, a textúra, az árnyalás és a kontúrelemzés. Ezek mindegyike a fizikai jelenetre vonatkozó háttér- feltételezéseken alapul, hogy az interpretációt közel egyértelművé tegye. * A teljes körű objektumfelismerés nagyon nehéz probléma. A fényesség- és a jellemzőalapú megközelítéseket tárgyaltuk. Más lehetőségek is vannak.
20	0.214286	0	Tehát egy meggyízű cukrot észlelve egyszerűen inkrementáljuk az a paramétert, hasonlóképpen, ha egy citromízűt észlelünk, akkor inkrementáljuk a b paramétert – ezzel megkapjuk az a posteriori eloszlást. Ezek szerint úgy tekinthetünk a-ra és b-re, mint virtuális számlálókra (virtual counts), abban az értelemben, hogy a béta[a, b] prior pontosan úgy viselkedik, mintha egyenletes eloszlású priorral indultunk volna, és a – 1 meggycukorkát és b – 1 citromízű cukorkát láttunk volna.
17	0.666667	0	U[E,O] ≤ U ≤ U[O,E] vagy ebben az esetben –3 ≤ U ≤ 2 Fontos Az U értékének pontos megállapításához az elemzésünkben át kell térni a kevert stratégiákra. Elsőként vegyük észre a következőt: ha az első játékos felfedte a stratégiáját, a második nem veszthet azzal, hogy tiszta stratégiát követ. Az ok egyszerű: ha a második játékos egy [p: egy; (1 – p): kettő] kevert stratégiát játszik, akkor a várható hasznossága a tiszta stratégiák hasznosságainak, u[egy]-nek és u[kettő]-nek egy lineáris kombinációja, (p u[egy] + (1 – p) · u[kettő]). Ez a lineáris kombináció nem haladhatja meg az u[egy] és az u[kettő] közül a nagyobbat, így a második játékos is játszhat egy tiszta stratégiát.
3	0.083333	1	Olyan ismeretforrásokat fejlesztett ki, amelyeket a felhasználói programok széles köre tud alkalmazni, leküzdve azokat a nehézségeket, amelyeket a terminológiát érintő különbségek, és az adatbázisokban szétszórtan elhelyezkedő releváns információk miatt a keresést érinti.
11	0.576923	0	Az S[1] az összes olyan literált tartalmazza, ami az A[0] szint akcióinak bármely részhalmazát választva elérhető. Szintén tartalmaz mutex kapcsolatokat (szürke vonalakat) jelölve az olyan literálokat, melyek nem teljesülhetnek egyszerre, a választott cselekvésektől függetlenül. Például a Van(Süti) és a Megevett(Süti) kölcsönösen kizárják egymást. Az A[0] kiválasztott cselekvéseitől függően az eredmény vagy az egyik vagy a másik lehet, de a kettő egyszerre nem. Más szavakkal az S[1], csakúgy, mint a regressziós állapottér-keresés, több állapotot reprezentál, a kizárási kapcsolatok pedig kényszerek, melyek a lehetséges állapotok halmazát definiálják.
4	0.916667	1	Emlékeztetőül: elfogadható egy h(n) heurisztika, ha soha nem becsüli túl a cél elérésének költségét; konzisztens pedig akkor, ha bármely n csúcsból a cselekvéssel elérhető n' utódcsúcs esetén h(n) =< h(n') + c(n,a,n'), azaz a heurisztika nem becsüli túl a következő csúcs elérésének költségét.
3	0.208333	1	A következő ábrákon az előbb ismertetett megoldás egy-egy lépése látható. Az első ábrán látható egy olyan esetre példa, amikor az utolsó bábu lerakásakor minden sorban ütésbe kerülünk valamelyik másik bábuval/bábukkal. A második ábrán látható példa az ütésben lévő bábu megfelelő sorban történő elhelyezésére. A harmadik ábrán az előbbi lépéssel kialakuló helytelen lerakás javítása látható a megfelelő bábumozgatással. A negyedik ábrán pedig az eljárás egy lehetséges és egyben helyes megoldása látható.
6	0.1	1	Mivel a magyar szakirodalomban nem találkoztam a játékkal, így az angol megnevezését használom. A kavicskupacok ez esetben sorba vannak rendezve, és a játékosok csak a sor két végén levő kupacból vehetnek el kavicsokat a Nim szabályainak megfelelően. Az nyer, aki az utolsó kavicsot elveszi.
15	0.111111	0	Az ábrán lévő struktúra elsőrendű Markov-folyamat feltételezésen alapul, mivel feltesszük, hogy az eső valószínűsége csak attól függ, hogy az előző nap esett-e. Egy ilyen feltevésnek a helyénvalósága magától a tárgyterülettől függ. Az elsőrendű Markov-feltétel kimondja, hogy az állapotváltozók az összes olyan információt tartalmazzák, amely a következő időpontbeli valószínűség-eloszlások megadásához szükséges. Néha ez a feltevés pontosan teljesül – például ha egy részecske véletlen bolyongást (random walk) végez az x tengelyen, ±1-gyel változtatva meg a pozícióját minden időpontban, ekkor az x koordinátát használva állapotként, egy Markov-lánc adódik. Gyakran a feltevés csak közelítő, mint amikor az eső jóslása csak az alapján történik, hogy esett-e az előző napon. Két lehetséges javítás létezik, ha a közelítés túlságosan pontatlannak bizonyul: 1. A Markov-folyamat rendjének a megnövelése. Például létrehozhatnánk egy másodrendű modellt, felvéve egy Eső[t–2]-t mint az Eső[t] szülőjét, ami lehet, hogy valamivel pontosabb predikciót adna (például Palo Altóban nagyon ritkán esik több mint két napig egyfolytában). 2. Az állapotváltozók halmazának megnövelése. Például felvehetnénk az Évszak[t][ ]változót, hogy ez lehetővé tegye számunkra az esős évszakok történeti feljegyzéseinek beépítését, vagy hozzáadhatnánk a Hőmérséklet[t], a Páratartalom[t][ ]és a Légnyomás[t][ ]változókat, hogy az eső feltételeinek fizikai modelljeit felhasználhassuk.
14	0.086957	1	Vegyük észre, hogy a feltételes modellezésnél (osztályozásnál és regressziónál) megszokott függő és független elnevézése a naív Bayes hálós terminológiában éppen fordítva használtak, azaz Y  itt a priori független, míg az X i  -k függőek.
25	0.148148	0	Mobil robotoknál a szabadságfokok száma nem feltétlenül egyezik meg a mozgatott részek számával. Vegyünk például egy átlagos autót: tud mozogni előre-hátra és tud fordulni. Ez így két szabadságfok. Ennek ellenére a kocsi kinematikája háromdimenziós: egy szabad lapos felületen könnyedén el tud jutni bármilyen (x, y) pontba, tetszőleges orientációval (lásd  (b) ábra). Azaz a kocsinak 3 effektív szabadságfoka (effective DOF) van, de 2 irányítható szabadságfoka (controllable DOF). A robotra azt mondjuk, hogy nemholonomikus (nonholonomic), ha az effektív szabadságfoka nagyobb, mint az irányítható szabadságfoka, míg holonomikus (holonomic), ha ez a kettő megegyezik. A holonomikus robotokat könnyebb irányítani. Mennyivel egyszerűbb lenne olyan kocsival parkolni, amely képes oldal irányban is mozogni, nem csak előre-hátra! Viszont a holonomikus robotok jellemző módon mechanikailag sokkal bonyolultabbak. A legtöbb robotkar holonomikus, míg a mobil robotok általában nemholonomikusak.
3	0	0	Ebben a fejezetben a célorientált ágensek egyik típusát, a problémamegoldó ágenst (problem-solving agent) ismertetjük. A problémamegoldó ágensek úgy határozzák meg, mit is kell tenniük, hogy olyan cselekvéssorozatokat keresnek, amelyek a kívánt állapotokba vezetnek. Azzal kezdjük, hogy pontosan megfogalmazzuk a „problémát” és a „megoldását” felépítő alkotóelemeket, és számos példával illusztráljuk ezen definíciókat. Ezek után néhány általános rendeltetésű keresési algoritmust mutatunk be, amelyek e problémák megoldására alkalmasak, majd az egyes algoritmusok előnyeit összehasonlítjuk. Az algoritmusok nem informáltak (uninformed) abban az értelemben, hogy a probléma definícióján túlmenően más információval a problémáról nem rendelkeznek. A  fejezet informált (informed) keresési stratégiákat tárgyal, amelyek rendelkeznek valamilyen elképzeléssel arról, hogy a megoldást merrefelé is kell keresni.
22	0.296296	0	A lényeg az, hogy minden csomópont lehet egy hagyományos elemzési fa csomópont, illetve csomópontok egy halmaza is. Ez lehetővé teszi számunkra, hogy exponenciális számú elemzést reprezentáljunk polinomiális időben és tárhelyen. Természetesen n = 2 esetén nincs sok különbség 2^n és 2n között, de nagy n-ekre egy ilyen reprezentáció jelentős megtakarítást eredményez. Sajnálatos módon ez az egyszerű tömörített erdő megközelítés nem kezeli az összes O(n!) lehetőséget a kapcsolódások összerendelésére. Maxwell és Kaplan (1995) megmutatja, hogy egy, az igazság-karbantartó rendszerek alapelveire épülő, összetettebb reprezentáció ezeket a fákat még jobban összetömörítheti.
14	0.869565	1	A felhasználók által írt függvényeket van mód a Scilab fő ablakában definiálni, de ha később is akarjuk használni, akkor lehetséges *.sci fájlokban tárolni őket(egy fájlban akár többet is). Ezeket a fájlokat minden Scilab indítás után lefuttatva, a bennük lévő tartalom használható lesz. Bármilyen szövegszerkesztővel meg lehet őket írni, de a Scilabnak van egy saját szerkesztője, ami kiemeli a szintaktikailag fontos parancsszavakat, így kezdetben azzal könnyebb dolgozni. A függvénydeklaráció módja:
21	0.4375	0	Itt f (u, n) az úgynevezett felfedezési függvény (exploration function). Ez határozza meg a mohóság (a magas u értékek preferenciája) és a kíváncsiság (az alacsony n értékek preferenciája – cselekvések, amelyeket még nem alkalmaztunk nagyon gyakran) közötti kompromisszumot. Az f (u, n) függvénynek u-ban növekvőnek, n-ben csökkenőnek kell lennie. Nyilvánvalóan sok lehetséges függvény megfelel ennek a feltételnek. Egy különösen egyszerű függvénydefiníció:
26	0.714286	0	Az emberek elveszíthetik a személyiségi jogaik egy részét. Weizenbaum arra is rámutatott, hogy a beszédfelismerési technológia a lehallgatás elterjedéséhez, és így a polgári jogok veszteségéhez vezethet. Nem láthatta előre azt a világot, ahol a terrorista fenyegetettség megváltoztatja, hogy az emberek mennyi megfigyelést hajlandók elfogadni, azt azonban helyesen ismerte fel, hogy a mesterséges intelligencia a tömeges megfigyelés eszközévé válhat. Jóslata talán már valóra is vált: az Egyesült Államok kormányának titkos Echelon-rendszere „felvevőállomások, antennamezők és radarállomások hálózatából áll, a rendszert nyelvek közti fordítást, beszédfelismerést és kulcsszavas keresést használó számítógépek támogatják, amelyek a telefon-, az e-mail, a fax- és a telexforgalmat vizsgálják végig.”^[284] Néhányan elfogadják, hogy a számítógépesítés a magánszféra veszteségéhez vezet. Scott McNealy, a Sun Microsystems vezetője azt mondta: „Amúgy is nulla a magánszférád. Felejtsd el.” Mások nem értenek ezzel egyet: Louis Brandeis bíró^[285] ezt írta 1890-ben: „A magánszférához való jog minden jogok legalapvetőbbike (…) a jog az ember saját személyiségéhez.”
10	0.181818	0	A cselekvések eredményeiről következtetni kulcsfontosságú egy tudásalapú ágens számára. A  fejezetben példákat láttuk olyan ítéletállításokra, amelyek leírják, hogy a cselekvések hogyan hatnak a wumpus világra. A 7. szakasz - A hely és az irány nyomkövetése részben lévő   egyenlet azt állítja például, hogy az ágens lokációja hogyan változik az ágens mozgásával. Az ítéletkalkulus egyik hátránya, hogy cselekvés leírásáról külön másolatokkal kell rendelkeznünk azokra az időpontokra, amikor a cselekvést végre fogják hajtani. Ebben az alfejezetben leírt, az elsőrendű logikára alapozó reprezentációs módszer ezt a problémát elkerüli.
1	0.448276	1	Az orvosi információk a beteg állapotát leíró adatok, az orvos által küldött üzenetek. A rádió, vagy telefon útján történő konzultációk, vagy akár a lelkisegély-szolgálat is a telemedicina fogalomkörébe tartoznak.
14	0.086957	1	Igaz pozitív (True Positive, TP) Hamis pozitív (False Positive, FP) Igaz negatív (True Negative, TN) Hamis negatív (False Negative, TN)  ábra - Hibatípusok bináris döntés esetén Hibatípusok bináris döntés esetén
1	0.068966	1	Az 1940-es évektől kezdve egyre több tudományos kutatással kapcsolatban kerül elő a sejtautomaták fogalma. Ebben a pár oldalas esszében megpróbálom összeszedni, hogy pontosan mit is takar ez a fogalom, hogyan és mire használhatóak a sejtautomaták. Bemutatom ennek a kutatási területnek a fejlődését kezdeteitől napjainkig, külön kiemelve néhány megvalósítását és alkalmazását.
9	0.448276	1	1971-re mindenki visszatért Marseilles-be. Colmerauer ekkor a helyi egyetemen tanított, ahova a doktorandusz hallgatója, Trudel is vele tartott. Négyőjük közös projektjének a célja egy olyan program elkészítése volt, ami franciául írt szöveg alapján von le következtetéseket. Mivel, hogy Colmerauer az egyetem tanáraként dolgozott ekkor, így lehetőségük volt hozzáférni az egyetem egy igen fejlett számítógépéhez: Az IBM 360-44 számítógép megközelítőleg 900 Kb memóriával rendelkezett. Éjszakánként megkapták a teljes memóriát, így akkor tudtak vele érdemben dolgozni. Kialakítottak egy 67 Q-Systems parancsból álló programot, ami már képes volt helyesen működni.
1	0.172414	1	A fizikai szimbólumrendszer hipotézis forrása annak a ténynek a felismerése, hogy a számítógépes tudományok valóban (a formális módszerekbe és a formális verifikálásba fektetett minden bizalmunk ellenére) empirikus tudományok, ahol minden számítógépes fejlesztés, programkészítés, implementáció, üzembe helyezés, egy tudományos kísérlet is egyben. Ritkán bízhatunk abban, hogy a rendszerspecifikáció képes magába foglalni a rendszer működésének és használatának minden, legapróbb mozzanatát, főleg akkor, amikor a rendszer alkalmazási környezetéről eleve hiányos és elavult információval rendelkezünk. Ha viszont empirikus tudománnyal van dolgunk, szükséges valami átfogó paradigma, hipotézis, amely az empirikus kutatásoknak rendszerességet, gerincet kölcsönöz.
5	0.181818	1	1. Az Angol a piros házban lakik. 2. A Spanyol kutyát tart. 3. A Norvég balról az első házban lakik. 4. A sárga házban Kools-t szívnak. 5. Aki Chesterfields-et szív amellett lakik, aki rókát tart. 6. A Norvég a kék ház mellett lakik. 7. Aki Winston-t szív, csigákat tart. 8. Aki Lucky Strike-ot szív, narancslevet iszik. 9. Az Ukrán teát iszik. 10. A Japán Parliaments-et szív. 11. A lovat tartó melletti házban Kools-t szívnak. 12. Kávét a zöld házban isznak. 13. A zöld ház közvetlen jobbra (Önnek jobbra) van az elefántcsont háztól. 14. Tejet a középső házban isznak.
1	0.310345	1	Az MR-technika mozgásérzékenységét kihasználva, kis térfogatról, sok egymást követő méréssel, gyors képváltású cine-MR segítségével a mozgásjelenségeket is követni lehet, elsősorban a szív, izületek és inak mozgásainak tanulmányozására.
18	0.526316	0	Egy sor problémát meg kell oldanunk ahhoz, hogy a döntési fa indukciót a problémák szélesebb körére kiterjeszthessük. Nagyjából felvázoljuk mindegyiket, azt javasolva, hogy a teljesebb megértés érdekében a kapcsolódó feladatokat oldja meg az olvasó. * Hiányzó adatok (missing data): Számos területen nem ismerhető meg minden példa összes attribútuma. Lehet, hogy az értékek nem kerültek tárolásra, vagy túl drága lenne a mérésük. Ez két problémát vet fel: először, ha van is egy teljes döntési fánk, akkor hogyan tudunk egy olyan mintát osztályozni, amelynek egy tesztelendő attribútuma hiányzik? Másodszor, hogyan módosítsuk az információnyereségre vonatkozó formulát, ha néhány példa ezen attribútumának értéke nem ismert? Ezeket a kérdéseket a  feladatban vizsgáljuk. * Sokértékű attribútumok (multivalued attributes): Ha egy attribútum nagyszámú értéket vehet fel, akkor az információnyereség nagysága nem megfelelő mértéke az attribútum hasznosságának. Szélsőséges esetben egy olyan attribútumot használnánk, mint például az ÉtteremNév attribútum, amely minden példára más és más értéket ad. Ez esetben példák minden részhalmaza egyelemű lesz, egyedi osztálybasorolással, így az információnyereség erre az attribútumra veszi fel maximális értékét. Mindamellett ez az attribútum irreleváns, értéktelen. Egy lehetséges megoldás a nyereségarány (gain ratio) használata (lásd  feladat). * Folytonos és egész értékű bemeneti attribútumok (continuous and integer-valued input attributes): A folytonos vagy az egész értékű bemeneti attribútumok – mint például a Magasság és a Súly – által felvehető értékek halmaza végtelen. A döntési fa tanuló algoritmusok az ilyen esetekre nem generálnak végtelen elágazású csomópontokat, inkább megkeresik azt a küszöbpontot (split point), amely a legnagyobb információnyereséget eredményezi. Például egy adott csomópontnál az lehet a helyzet, hogy a Súly > 160 teszt adja a legnagyobb információnyereséget. Léteznek hatékony dinamikus programozási módszerek jó küszöbpontok megtalálására, de még mindig messze ez a legtöbb erőforrást igénylő része a döntési fa tanulási eljárások valós problémákra való alkalmazásának. * Folytonos értékkészletű kimeneti attribútumok (continuous-valued output attributes): Ha egy numerikus értéket akarunk megjósolni, például egy műtárgy árát, akkor nem osztályozásra van szükségünk, hanem egy regressziós fára (regression tree). Egy ilyen fa nem egyetlen értéket (osztályt) ad vissza az egyes levél csomópontjaiban, hanem egy attribútumhalmaz lineáris függvényét. Például a műtárgyak regreszsziós fájának kézzel festett metszetekre vonatkozó ága a területnek, a kornak és a színek számának lineáris függvényéhez vezethet. A tanuló algoritmusnak kell azt megoldania, hogy mikor álljon le a minták csomópontokban történő szétosztásával, áttérve a maradék attribútumokat (vagy azok bizonyos részhalmazát) felhasználó lineáris regresszió megalkotására.
10	0.969697	0	Adjon szabályokat a Név(s, c) predikátum definíciójának olyan esetekre történő kiterjesztéséhez, hogy az olyan füzérek, mint például a „laptop számítógép” több bolthoz tartozó idevágó kategórianévre illeszkedjen. Kíséreljen meg általános érvényű definíciót alkotni. A definíciót tesztelje tíz online boltra és az általuk három kategóriára használt elnevezésekre. A laptop kategória esetén például a „Notebooks”, „Laptops”, Notebook számítógépek”, „Notebook”, „Notebooks és Laptops” és „Notebook PC” neveket találtuk. Az egyes elnevezéseket explicit Név tényekkel, mások a többes számot, a konjunkciót stb. kezelő szabályokkal lefedhetők.
14	0.173913	1	1. Ha a változókat pl. egy orvos által megszerzett diagnosztikai tudásnak tudjuk be, ill. annak, hogy a tudás egyes elemei hogyan hatnak egymásra, akkor a (II) fejezi ki a diagnózis tudományát. Ha viszont interpretáció az, hogy ezek a változók az emberi szervezet állapotait jellemzik, akkor helyes az (I) háló. A (III) hálóhoz nem tartozik konzisztens (és az orvostudománynak megfelelő) interpretáció, igy ez a háló nem jöhet szóba. 2. (I) Háló esetén a FVT-beli valószínűségek száma: 1 + 4 + 2 + 2 = 9 (II) ..... : 1 + 1 + 1 + 8 = 11 (III) ...: 1 + 1 + 4 +4 = 10 A válasz tehát az (I) háló. 3. P(S | DK) = P(SDK) / P(DK) P(SDK) = P(SDKT) + P(SDK~T) = P(T | SDK) P(S)P(D)P(K) + P(~T | SDK) P(S)P(D)P(K) = P(S)P(D)P(K) P(DK) = P(DKST) + P(DK~ST) + P(DKS~T) + P(DK~S~T) = P(T | SDK) P(S)P(D)P(K) + P(T | ~SDK) P(~S)P(D)P(K) + P(~T | SDK) P(S)P(D)P(K) + P(~T | ~SDK) P(~S)P(D)P(K) = = P(T | SDK) P(S)P(D)P(K) + P(~T | SDK) P(S)P(D)P(K) + P(T | ~SDK) P(~S)P(D)P(K) + P(~T | ~SDK) P(~S)P(D)P(K) = P(S)P(D)P(K) + P(~S)P(D)P(K) = P(D)P(K) P(S⎮DK) = P(SDK) / P(DK) = P(S)
1	0.586207	0	A dartmouthi munkatalálkozó új áttöréshez ugyan nem vezetett, de a fontos személyiségek bemutatkoztak egymásnak. A következő húsz évben ők, továbbá hallgatóik és kollégáik az MIT-n, a CMU-n, a Stanfordon és az IBM-nél lesznek azok, akik meghatározó szerepet töltenek be az MI területén. A munkatalálkozó talán legtartósabb eredménye az volt, hogy elfogadták a terület McCarthy által kreált új nevét, azaz a mesterséges intelligenciát (artificial intelligence). A „számítási racionalitás” talán jobb név lett volna, de az „MI” név azóta is megmaradt.
14	0.826087	1	Fontos kérdés az „éles skála” meghatározása. Ha csak szakértői becslésekre támaszkodunk a tagsági függvény felvételekor, akkor 0 – 10 vagy 1 – 10 skálát célszerű választani. Ebben az intervallumban könnyebben tudunk kezelni megítéléskor, összehasonlításkor. A módszert akkor célszerű alkalmazni, ha a kockázatbecslő szakértők alapfokú Fuzzy Logika ismeretekkel rendelkeznek, mert a szemlélet szerint, az IGEN és a NEM döntések mellett, részigazságok is léteznek, mellyel számolnunk érdemes szükséges a módszer alkalmazásához.
5	0.181818	1	Ezek után az algoritmus újra meghívja önmagát a jelenlegi behelyettesítéssel, és még egyel mélyebb szintre kerül a rekurzióban. Tegyük fel, hogy most ezen a szinten az algoritmus az NT változót választja, és ezt próbálja meg behelyettesíteni. Belép tehát a FOR-ciklusba, és elsőként a RED értéket rendeli az NT változóhoz (NT=RED).
10	0.424242	0	Az idő fontos minden cselekvő ágens számára, és az időintervallumok reprezentálására számos erőfeszítés történt. Az időintervallumok két fajtájával foglalkozunk: az időpillanatokkal és a kiterjesztett intervallumokkal. A különbség köztük az, hogy csak az időpillanatnak lehet zérus időtartama:
18	0.736842	1	Az AIMA könyv 18.5 fejezetében egy érdekes becslést látunk arra, hogy ha vannak hipotéziseink (feltételezéseink, elméleteink), akkor mi a valószínűsége, hogy egy helytelen hipotézis összhangban van a példákkal. Helytelen (más néven rossz) hipotézis alatt itt azt értjük, hogy az esetek valamilyen százalékában nem teljesül a hipotézis. Itt a mi döntésünkön múlik, hogy milyen hibaszázalékot engedünk meg, mit tekintünk rossz vagy jó hipotézisnek. Tehát pl. feltételezzük, hogy a napi legalább 3 órai TV-nézés hajhullást okoz, és nagyon nagyszámú vizsgálattal az derül ki, hogy ez a TV-nézési intenzitás az emberek több mint 13%-nál nem okozott hajhullást. Ha azt mondjuk, hogy mi elvárjuk a hipotéziseinktől, hogy az esetek legalább 95%-ban jól írják le a jelenséget (hibájuk legyen kisebb 5%-nál), akkor ez egy rossz hipotézis. Ha csak azt várjuk el, hogy legalább 80% pontosságuk (20%-nál nem nagyobb hibájuk) legyen, akkor ez egy jó hipotézis.
26	0.857143	0	Az elméről, az agyról és a kapcsolódó témákról szóló filozófiai irodalom kiterjedt, és a megfelelő szaknyelv és érvelési módozatokra vonatkozó megalapozott képzés hiányában gyakran nehezen olvasható. Ehhez a folyamathoz az Encyclopedia of Philosophy (Edwards, 1967) felettébb hasznos segítséget nyújthat meggyőzően informatív szócikkeivel. A The Cambridge Dictionary of Philosophy (Audi, 1999) rövidebb, de közérthetőbb mű, noha a fő szócikkek (mint például az „elmefilozófia”) még így is akár több mint tíz oldal hosszúak is lehetnek. A MIT Encyclopedia of Cognitive Science (Wilson és Keil, 1999) egyaránt foglalkozik az elme filozófiájával, biológiájával és pszichológiájával. Az elmefilozófiáról (beleértve ebbe a funkcionalizmust és más, a mesterséges intelligenciához kötődő álláspontokat) szóló cikkek általános gyűjteménye található a Materialism and the Mind-Body Problem-ben (Rosenthal, 1971) és a Readings in the Philosophy of Psychology (Block, 1980) első kötetében. Biro és Shanan (Biro és Shanan, 1980) a funkcionalizmus ellen és mellett érvelő cikkekből állított össze antológiát. Más cikkgyűjtemények kifejezetten a filozófia és a mesterséges intelligencia kapcsolatával foglalkoznak: Minds and Machines (Anderson, 1964); Philosophical Perspectives in Artificial Intelligence (Ringle, 1979); Mind Design (Haugeland, 1981) és a The Philosophy of Artificial Intelligence (Boden 1990). Számtalan bevezető létezik a filozófiai „MI-kérdés”-hez (Boden, 1977; 1990; Haugeland, 1985; Copeland, 1993). A The Behavioral and Brain Sciences, rövidítve BBS, fontos folyóirat, amelyet a mesterséges intelligenciával és az idegtudományokkal kapcsolatos vitáknak szentelnek. Több újság foglalkozik a mesterséges intelligencia etikai és felelősségi kérdéseivel: AI and Society, Law, Computers and Artificial Intelligence, valamint az Artificial Intelligence and Law.^[288]
10	0.969697	0	Javasoljon módszereket a rendszer tökéletesítésére, felhasználva például a hallgatói preferenciákra, a terhelésre, a jó/rossz előadókra vonatkozó információkat. Minden egyes tudásfajta esetén magyarázza meg, hogy hogyan lehetne azt logikailag kifejezni. Könnyen be tudná-e a rendszere fogadni ezt az információt úgy, hogy egy hallgató részére a legjobb képzési programot ajánlja fel?
11	0.653846	0	Ehhez a problémához az S[2 ]szintről indulunk, az Ott(Pótkerék, Tengely) céllal. Az egyetlen választásunk, hogy elérjük ezt a célt, a Felszerel(Pótkerék, Tengely) cselekvés. Ez az S[1] keresési állapothoz visz minket, melynek céljai az Ott(Pótkerék, Föld) és az ¬Ott(Laposkerék, Tengely). Az előbbit az Eltávolít(Pótkerék, Csomagtartó) cselekvéssel érhetjük el, míg a későbbit az Eltávolít(Laposkerék, Tengely) vagy az OtthagyÉjszakára cselekvések egyikével. Az OtthagyÉjszakára kölcsönösen kizáró kapcsolatban van a Eltávolít(Pótkerék, Csomagtartó)-val, ezért az egyetlen megoldás, hogy az Eltávolít(Pótkerék, Csomagtartó) és az Eltávolít(Laposkerék, Tengely) cselekvéseket választjuk. Ez az S[0] keresési állapotra vezet, az Ott(Pótkerék, Csomagtartó) és az Ott(Laposkerék, Tengely) célokkal. Mindkettő jelen van az állapotban, így megvan a megoldásunk: az Eltávolít(Pótkerék, Csomagtartó) cselekvés és az Eltávolít(Laposkerék, Tengely) az A[0] szinten, melyet az A[1]-ben a Felszerel(Pótkerék, Tengely) követ.
27	0.4	1	Mégis, hogy lehet a cselekedetek helyességét, jóságát mérni? – merülhet fel a kérdés. A legegyszerűbb, ha megmondjuk pontosan, hogy mely környezeti állapotokat tartjuk kívánatosnak (pl. a szoba legyen kiporszívózva, az ágy legyen megágyazva, és a mosatlan legyen elmosva). Egy racionális házirobot-ágens ezek szerint ezt a környezeti állapotot állítaná elő. Ekkor viszont még nem tudjuk megmondani, hogy melyik állapot mennyire jó. Például mi van akkor, ha ágensünk csak felületesen porszívózza végig a lakást, rendetlenül ágyaz meg, és a mosogatás során is számos edénnyel tesz minket szegényebbé?
15	0.333333	0	Az érzékelő modellt szintén mátrixalakra hozzuk. Ebben az esetben mivel az E[t] bizonyítékváltozó értéke ismert, mondjuk e[t], így a modellnek csak azt a részét használjuk, ami az e[t] megjelenésének valószínűségét meghatározza. Minden t időpontra konstruálunk egy O[t] diagonális mátrixot, aminek az átlóbeli elemeit a P(e[t]|X[t ]= i) értékek adják, a többi értéke pedig 0. Például az esernyős világban az 1. napon az U[1 ]= igaz, így a  ábra szerint azt kapjuk, hogy
5	0.181818	1	Ezzel gyakorlatilag összefoglaltuk, hogy milyen legális érték-párokat vehet fel az említett két változó, és ezzel el is készültünk a 13-as állítás korláttá alakításával, sőt, mivel a 14-es állítást még a szakasz eleje felé formalizáltuk, ezért most már nincs több dolgunk a feladványban szereplő 14 állítás korláttá alakításával. Mindez azonban még nem elegendő ahhoz, hogy a „gép”, pontosabban a KKP-megoldó algoritmus meg tudja oldani a problémát.
6	0.1	1	A játékot Albert W. Tucker publikálta 1950-ben. Számos értékes bepillantást enged a Játékelmélet által vizsgált jelenségekbe. A leírást a fentebbi ábrán láthatjuk. Lényegében 2 játékosunk van, amelyek között nem teszünk lényegi különbséget, azaz a játék ilyen értelemben szimmetrikus (bármelyik bőrébe is bújnánk, ugyanazzal a szituációval szembesülnénk). A játékosoknak 2 választása, pontosabban stratégiája van: vagy vallanak, vagy tagadnak. Egyszerre, egymás döntésének ismerete nélkül kell dönteniük. Mi mit tennénk ebben a helyzetben? Mit tennék, ha egy ismeretlen ülne a másik cellában, akivel nem tudunk kommunikálni, akiben nem bízunk, akivel nem kötöttünk előzetes megállapodást arról, hogy mit tegyünk (pl. hogy betyárbecsületből hallgassunk)?
18	0.105263	0	Észben kell tartanunk, hogy egy egyszerű, konzisztens hipotézis megtalálásának esélye erősen függ a választott hipotézistértől. A  (d) ábra bemutatja, hogy a (c) alatti adatokra pontosan illeszthető egy egyszerű ax + b + c sin(x) alakú függvény. Ez a példa jól mutatja a hipotézistér jó megválasztásának fontosságát. Ha olyan hipotézisteret választunk, amely véges fokszámú polinomokat tartalmaz, akkor szinuszos függvényeket nem tudunk pontosan reprezentálni. Így egy olyan tanuló, amelyik ezt a hipotézisteret használja, nem fog tudni szinuszos adatokból tanulni. Egy tanulási problémát realizálhatónak (realizable) nevezünk, ha a hipotézistérnek eleme az igazi függvény, különben a problémát nem realizálhatónak (unrealizable) nevezzük. Sajnos nem mindig tudjuk megmondani, hogy egy tanulási probléma realizálható-e, mivel nem ismerjük a valódi függvényt. Egy lehetőség e korlát túllépésére az a priori tudás felhasználása. Ennek segítségével olyan hipotézisteret alkotunk, amelyről tudjuk, hogy tartalmazza az igazi függvényt. Ezt a témát a  fejezetben tárgyaljuk. Fontos Egy másik lehetséges megközelítés, hogy a lehető legnagyobb hipotézisteret használjuk. Például miért ne legyen a H hipotézisterünk az összes Turing-gépek osztálya? Végül is minden kiszámítható függvény reprezentálható valamilyen Turing-géppel, tehát ez a legjobb, amit tehetünk. Ennek a megközelítésnek az a problémája, hogy nem veszi figyelembe a tanulás számítási komplexitását. Kompromisszumot kell kötnünk a hipotézistér kifejezőképessége és egyszerű konzisztens hipotézisek megtalálásának komplexitása között. Például: egyenesek illesztése az adatokra könnyen megoldható, nagy fokszámú polinomok illesztése nehezebb, Turing-gépek illesztése pedig nagyon nehéz. Ugyanis annak eldöntése, hogy egy adott Turing-gép konzisztens-e az adatokkal, általánosságban még csak nem is lehetséges. Egy másik ok, ami miatt előnyben részesítjük az egyszerű hipotézistereket, hogy az eredményképp kapott hipotézisek használata is egyszerűbb lehet – könnyebb kiszámítani h(x)-et, ha h egy lineáris függvény, mint ha egy tetszőleges Turing-gép programja lenne.
17	0.666667	0	Most nézzünk meg egy játékot, aminek nincs domináns stratégiája. Az Acme nevű videojáték-hardver gyártójának döntenie kell, hogy a következő játékgép DVD-ket vagy CD-ket használjon. Eközben a videojáték-szoftver gyártójának, Bestnek is döntenie kell, hogy DVD-n vagy CD-n adja ki a következő játékát. A nyereség mindkettőjüknek pozitív, ha egyetértenek, és negatív, ha eltérnek, ahogy a következő jutalommátrixból ez látható:
23	0.388889	0	Végső finomításként az IR-rendszerek tökéletesíthetők metaadatok (metadata) figyelembevételével, amelyek a dokumentum szövegén kívül álló adatok, mint például emberek által megadott kulcsszavak vagy dokumentumok közötti hypertext-hivatkozások.
4	0.916667	0	A heurisztikus információ alkalmazása a problémamegoldásban Simon és Newell egy korai írásában jelenik meg (Simon és Newell, 1958). A „heurisztikus keresés” frázis és a célhoz való távolságot becsülő heurisztikus függvény használata azonban valamivel későbbről származik (Newell és Ernst, 1965; Lin, 1965). Doran és Michie részletesen, kísérleti alapon tanulmányozták a heurisztikus keresési algoritmusok alkalmazását számos problémára, nagy hangsúlyt fektetve a 8-as és a 15-ös kirakójátékra (Doran és Michie, 1966). Habár Doran és Michie a heurisztikus keresésnél elméleti úthossz és „behatolás” (az úthossz és az eddig vizsgált csomópontok számának aránya) elemzéseket végzett, úgy tűnik, figyelmen kívül hagyták az aktuális úthossz nyújtotta információt. A heurisztikus keresésbe az aktuális úthosszt is beszámító A^* algoritmust Hart, Nilsson és Raphael dolgozták ki (Hart és társai, 1968), néhány későbbi korrekcióval (Hart és társai, 1972). Az A^* algoritmus optimális hatékonyságát Dechter és Pearl (Dechter és Pearl, 1985) mutatták ki.
12	0.142857	0	A „tiszta” HFH-tervkészítésben a terveket csak egymást követő cselekvésdekompozíciókkal állítjuk elő. A HFH ezért a tervkészítést a cselekvésleírások konkretizálásának tekinti, szemben az üres cselekvésből kiinduló cselekvésleírás elkészítésének folyamatával (ami az állapottér-keresésre és a részben rendezett tervkészítésre is igaz). Végezetül kiderül, hogy minden Strips cselekvésleírás egy cselekvésdekompozícióra írható át (lásd  feladat), és a részben rendezett tervkészítés a tiszta HFH-tervkészítés egy speciális esetének tekinthető. Bizonyos feladatokra azonban – különösen „szokatlan” konjunktív célokra — a tiszta HFH-nézőpont eléggé természetellenes, így egy hibrid megközelítést részesítünk előnyben, ahol a cselekvésdekompozíciókat mint a részben rendezett tervkészítés tervfinomításait használjuk fel, a nyitott előfeltételek teljesítése és az ütközés feloldásra szolgáló rendezési megkötések hozzáadása mellett. (Annak, hogy a HFH-tervkészítést a részben rendezett tervkészítés kiterjesztésének tekintjük, további előnye, hogy egy teljesen új jelölésrendszer bevezetése helyett ugyanaz használható.) Kezdésként a cselekvések dekomponálását mutatjuk be részletesebben, majd elmagyarázzuk, hogy a részben rendezett tervkészítést hogyan kell módosítani a dekompozíciók kezeléséhez. Végezetül a teljesség, a komplexitás és a használhatóság kérdéseit tárgyaljuk.
2	0.894737	0	A  ábrán bemutatott általános tanuló ágens tervezés klasszikus a gépi tanulás irodalmában (Buchanan és társai, 1978; Mitchell, 1997). Ezen felépítés programokban megtestesülő példái legalább olyan messze nyúlnak vissza, mint Arthur Samuel dámajátékot játszó tanuló programja (Samuel, 1959, 1967). A tanuló ágenseket a VI. rész tárgyalja részletesen.
7	0.44	0	Először a rezolúciós szabály egy egyszerű változatát fogjuk használni a wumpus világban. Nézzük meg a  (a) ábrához vezető lépéseket: az ágens visszafordul a [2, 1]-ből az [1, 1]-be, és innen megy az [1, 2]-be, ahol szellőt érez, de bűzt nem. A következő tényeket adjuk hozzá a tudásbázishoz:
19	0.909091	1	A fekvő beteg tájékoztatását általában a klinikus végzi és a tájékoztatásról szóló nyilatkozatot a klinikus írja alá. A vizsgálat elvégzéséhez szükséges nyilatkozatot a mintavétel helyén íratják alá és őrzik meg.  ábra - Felelősségi és szolgáltatási organogram Felelősségi és szolgáltatási organogram
15	0.62963	0	Miután felvázoltunk néhány ötletet komplex folyamatok DBH-kkal történő reprezentálásáról, most a következtetés kérdését vizsgáljuk meg. Bizonyos értelemben ezt a kérdést már megválaszoltuk: a dinamikus Bayes-hálók Bayes-hálók, és nekünk már vannak algoritmusaink Bayes-hálóban történő következtetésre. Adott megfigyeléssorozat esetén a teljes Bayes-hálós reprezentáció felépíthető a szeletek megismétlésével, ameddig a háló elég nagy nem lesz a megfigyelések befogadásához, ahogy a  ábrán látható. Ezt a technikát kibontásnak (unrolling) nevezik. (Technikailag a DBH ekvivalens egy egy irányban végtelen hálóval, amit végtelen számú kibontással kapunk. Az utolsó megfigyelés után hozzáadott szeleteknek nincs hatása a következtetésre a megfigyelési periódusban, ezért elhagyhatók.) Ha a DBH-t már kibontottuk, alkalmazhatók a következtető algoritmusok: változó eliminálás, egyesítési fa módszere stb. (lásd  fejezet).
7	0.76	0	Még akkor is, ha felső korlátot szabunk a megengedett lépések számának – 100-at talán – mondatok tízezreihez jutunk. Ugyanez a probléma merül fel, ha minden időlépéshez is hozzáadunk mondatokat, „ahogy szükséges”. A klózoknak ez az elburjánzása olvashatatlanná teszi számunkra a tudásbázist, de a gyors ítéletkalkulus megoldók még így is könnyen tudják kezelni a 4 × 4-es wumpus világot (korlátaikat a 100 × 100-as méret körül érik el). Az áramkörre alapuló ágens, amit a következő alfejezet mutat be, részleges megoldást kínál a klózok elburjánzásának problémájára, de a teljes megoldásra várnunk kell, míg nem alkalmazzuk az elsőrendű logikát majd a  fejezetben.
5	0.181818	1	A probléma most az, hogy a FOR-ciklus a végére ért, azaz az NT változónak már nincs több kipróbálható értéke, így vissza kell lépnünk a rekurzió következő szintjére HAMIS visszatérési értékkel. Ennek következtében a keresés a rekurziónak azon a fentebbi szintjén, ahol a WA változót vizsgáljuk, visszacsinálja a legutóbbi WA=RED értékadás után azon a szinten véghezvitt változtatásokat mind a behelyettesítésre, mind pedig a változók értékkészletére vonatkozóan.
18	0.736842	1	Ha 2 mintát használunk a tanításra, akkor ugyanezzel a gondolatmenettel belátható, hogy most már csak 2 ( 2 n −2 ) = | H | 4  hipotézis lesz konzisztens a – kételemű – mintahalmazzal, a többi nem. (Hiszen a logikai függvényt megadó táblázat 2 sorát rögzítettük a 2 mintával, 2 n −2  sor maradt ismeretlen.) Ezek közül a legrosszabb hipotézis (ami később a legnagyobb hibát mutatja majd) csak ezzel a két mintával konzisztens, az összes többire rossz választ ad.
5	0.181818	1	Az előálló {NSW=BLUE, WA=GREEN, NT=BLUE, Q=GREEN, SA=RED, V=GREEN, T=GREEN} behelyettesítés immár konzisztens, így mivel alapértelmezésben teljes is, megoldáshoz jutottunk: az algoritmus ezzel tér vissza.
6	0.1	1	Ez tehát már bizonyos fokig magyarázatot ad arra, hogy hogyan kaptuk a fenti fólián extenzív alak alatt található, annak megfelelő normál alaki mátrixot. A mátrix peremezését tehát az imént megmagyaráztuk. A mátrixban szereplő kifizetési vektorokról azonban még ejtsünk pár szót!
2	0.210526	1	Amikor racionalitásról beszélünk, gyakran tökéletes racionalitást értünk rajta, vagyis azt, hogy egy ágens ténylegesen minden egyes pillanatban csakis azt cselekszi, ami a várható teljesítményértéket maximalizálja [1]. A valóságban ez egy idealizáció csupán, hiszen megfelelően nagy problématér esetén a számítások nem megoldhatóak véges időben, a tökéletesen racionális ágens ellenben azonnal a megfelelő cselekvéssel kéne válaszoljon. Így a tökéletes racionalitás csupán elméleti alapját képezi a mesterséges intelligenciának, a gyakorlatban más megközelítés mérvadó [2]. Egy gyakran alkalmazott elv a számítható racionalitás implementálása. A számíthatóan racionális ágens tökéletesen racionális viselkedést mutatna, ha végtelenül gyorsan futna az őt irányító program (következtetési mechanizmus) [1]. Mivel a valóságban nem ez a helyzet, kijelenthetjük, hogy a számíthatóan racionális ágens legvégül valóban a legoptimálisabb megoldást találja meg, de ezzel gyakran „késve érkezik” [2].
8	0.548387	0	Az ágens helyzete változik az idő haladtával, amit úgy jelölünk, hogy Akkor(Ágens, s, t), ami azt jelenti, hogy az ágens az s négyzetnél van t időben. Mihelyt megadtuk az aktuális helyzetét, az ágens következtetni tud a négyzet tulajdonságaira a jelenlegi érzete tulajdonságaiból. Például, ha az ágens egy négyzetnél van, és szellőt érzékel, akkor az a négyzet szellős:
2	0.894737	1	A lényeges különbség a kettő között, hogy amíg a teljesítménymérték az ágens viselkedésének egészét vizsgálja, beleértve a korábban megtett lépéseket is, addig a hasznosságfüggvény csak egy adott állapotban segít kiválasztani a következő optimális cselekvést.
25	0.074074	1	A da Vinci rendszer rendkívül drága, túlzottan robosztus, rendkívül komplex a felépítése, és kezelésének elsajátítása hosszadalmas.A da Vinci rendszer ára meghaladja az egymillió amerikai dollárt. További kiadásokat jelent az éves fenntartási költség és az, hogy a sebészi instrumentárium csak tíz alkalommal használható.
15	0.814815	0	Ezen kifejezések többsége igen bonyolult és nehezen becsülhető vagy számítható. Szerencsére a képletet egyszerűbb kifejezéssel is közelíthetjük, miközben a nyelvi modell zömét mégis megragadjuk. Az egyik egyszerű, közkedvelt és hatékony eljárás a bigram (bigram) modell. Ez a modell a P(w[i]|w[1]... w[i–1])-et a P(w[i]|w[i–1])-gyel közelíti. Más szóval, feltételezi, hogy a szósorozatokra teljesül az elsőrendű Markov-feltétel.
19	0.909091	1	A laboratórium feladatait a szakmai vezetőtestület javaslatára a főigazgató határozza meg. Az adott laboratóriumi lehetőségek figyelembevételével, a vizsgálatok költséghatékonysági számításai, a szenzitivitás, specificitás és a prediktivitás alapján az orvos igazgató és a laboratórium főorvos együttműködésével a diagnosztikai ítéletalkotás támogatására és a vizsgálati kérések egyszerűsítésére vizsgálati csoportok alakíthatók ki. A vizsgálatokat a laboratórium által kiadott formanyomtatványokon kell kérni. A sürgősségi vizsgálatok végzésére a központi laboratórium nonstop üzemmódban mindig a betegek szolgálatában áll.
24	0.541667	0	Amit most a jelenetre vonatkozóan állítottunk, igaz. A képen a textúraelemek vagy texelek (texels) látszólagos nagysága, alakja, távolsága stb. igencsak változik, ahogy ezt a  ábra mutatja. A csempelapok a jeleneten azonosak. A lapok kivetített nagyságának és alakjának megváltozásában két fő ok játszik szerepet: 1. Az egyes texeleknek a kamerától vett változó távolsága. Emlékezzünk arra, hogy a perspektivikus vetítésben a távoli tárgyak kisebbnek tűnnek. A skálatényező 1/Z. 2. Az egyes texelek változó rövidülése. Ez a texeleknek a kamerából kiinduló rálátási irányhoz viszonyított orientációján múlik. Rövidülés nincs, ha a texel a rálátási irányra merőleges. A rövidülés mértéke cos σ-val arányos, ahol a σ a texel síkjának a lejtése.
6	0.95	0	Bizonyítsa be, hogy a levélcsomóponti értékek pozitív lineáris transzformációja (azaz egy transzformáció x-től ax + b-ig, ahol a > 0), nincs befolyással a lépések választékára a játékfában, akkor sem, ha léteznek benne véletlen csomópontok.
24	0.208333	1	Fekete-fehér képérzékelők, melyek csak a fényességet érzékelik, és minden képpontról csak egyetlen adatot tartalmaznak, mely az adott pont fényerejére utal. Ez az adat a látható tartományban érzékelt jelek integráljaként fogható fel.
11	0.961538	0	A  ábrán szereplő SATplan algoritmusban a minden kielégíthetőségi algoritmus hívás egy további g^T célt eredményez, ahol a T értékkészlete 0 … T[max]. Tegyük fel, hogy ehelyett a kielégíthetőségi algoritmust csak egyszer hívjuk meg a g^0 ∨ g^1 ∨ ... ∨ g^T^max[ ]céllal. a. Ez mindig ad vissza tervet, amennyiben létezik egy T[max] hosszúságú vagy annál rövidebb terv? b. Eredményez ez a módszer új hibás megoldásokat? c. Vizsgáljuk meg, hogy hogyan lehetne módosítani egy kielégíthetőségi algorimust, például a WalkSAT algoritmust, hogy az (amennyiben létezik) rövid megoldásokat találjon, amennyiben hasonló diszjunktív célt kap.
20	0.821429	0	Az (x[i] · x[j])^2 kifejezést kernelfüggvénynek (kernel function) nevezzük, és K(x[i], x[j])-vel jelöljük. A kernelgépek szempontjából ez egy olyan függvény, amely pontpárokra alkalmazható avégett, hogy valamilyen tulajdonságtérben kiszámítsuk a skalárszorzatukat. Ennek megfelelően újrafogalmazhatjuk állításunkat: a   egyenletben x[i] · x[j]-t egyszerűen kicserélve a K(x[i], x[j]) kernelfüggvényre, a sokdimenziós F(x) tulajdonságtérben találhatunk lineáris szeparátorokat. Így a tanulást a sokdimenziós térben végezhetjük, de csupán kernelfüggvények értékét kell kiszámítanunk, nem kell az öszszes pontra a tulajdonságok teljes készletét kiszámítani. Fontos A következő lépés – aminek most már kézenfekvőnek kell lennie – az, hogy meglássuk, a K(x[i], x[j]) = (x[i] · x[j])^2 kernelben nincs semmi különleges. Ez egy bizonyos sokdimenziós tulajdonságtérnek felel meg, de más kernelfüggvények más tulajdonságterekkel vannak kapcsolatban. A Mercer-tétel (1909) azt mondja ki, hogy bármely „ésszerű”^[209] kernelfüggény megfelel valamilyen tulajdonságtérnek. Ez a tulajdonságtér még egész ártatlannak látszó kernelek esetén is nagyon nagy lehet. Például a K(x[i], x[j]) = (1 + x[i] · x[j])^dpolinomiális kernel (polynomial kernel) egy olyan tulajdonságtérnek felel meg, amelynek dimenziója d-ben exponenciális. Ha a   egyenletben ilyen kerneleket használunk, akkor hatékonyan kereshetünk lineáris szeparátorokat sok milliárd (vagy egyes esetekben végtelen) dimenziós terekben. Az eredményként kapott lineáris szeparátorokat visszavetítve az eredeti bemeneti térbe, a pozitív és negatív példákat elválasztó tetszőlegesen tekervényes, nemlineáris határfelületeket kaphatunk.
9	0.448276	1	* 1. kép - http://alain.colmerauer.free.fr/ (a tulajdonos engedélyével) * 2. kép - Google Maps * 3. kép - Alain Colmerauer Facebook oldala (a tulajdonos engedélyével) * 4. kép - Szeredi Péter tanszéki weboldal (a tulajdonos engedélyével) * [1] http://www.facebook.com/profile.php?id=100000590719329 * [2] http://ido.nejanet.hu/~ksanyi/php3/language.operators.precedence.ht ml * [3] http://iuf.amue.fr/ * [4] http://www.sulinet.hu/termeszetvilaga/archiv/2000/0014/07.html * [5] http://alain.colmerauer.free.fr/alcol/ArchivesPublications/Histoire Prolog/19november92.pdf * [6] http://miau.gau.hu/avir/intranet/debrecen_hallgatoi/tananyagok/jegy zet/15-Szoftverfejlesztes.pdf * [7] http://www.ttk.pte.hu/ami/phare/tortenet/5GENERAC.html * [8] http://www.bibl.u-szeged.hu/~drotos/informatikai-jegyzetek/erd/erd3 8.html * [9] http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.80.756&rep =rep1&type=pdf * [10] http://www.doc.ic.ac.uk/~rak/history.html * [11] http://bitsavers.informatik.uni-stuttgart.de/pdf/ibm/360/systemSumm ary/GA22-6810-12_360sysSumJan74.pdf * [12] http://www.swi-prolog.org/pldoc/man?predicate=dif/2 * [13] http://www.sulinet.hu/inform/szakkor/jegyzet/szakkor/f9.htm * [14] http://www.jpte.hu/~uhi/kurzus/informatika/mi.html * [15] http://dp.iit.bme.hu/prolog/jegyzet/dp04s_jegyzet.pdf.gz
24	0.166667	1	Ahhoz, hogy a megváltozott energiaértékek halmazából hasznosítható adatokat tudjunk kinyerni, az eltérések mértékét helyhez, esetleg időhöz kötve kell megjelenítenünk. Az érzékszerveink számára nem hozzáférhető kép elemeinek felismerésére, detektálásra szolgáló eszközöknek számos fajtáját használjuk (detektorok-Fluoreszkáló ernyő, röntgenfilm, érzékenyített foszforlemez)
3	0.208333	1	Ahogy korábban már említettük, az n-királynő probléma azt a kérdést veti fel, hogy hányféleképpen lehet n darab vezért elhelyezni egy n x n-es sakktáblán. A probléma összes megoldását megkaphatjuk a fentebb ismertetett rekurzív eljárással.
25	0.962963	0	Ez a feladat feltárja a kapcsolatot a munkatér és a konfigurációs tér között, a  ábra példáit használva.  ábra - Diagram a  feladathoz Diagram a  feladathoz a. Vegyük a  (a)-tól (c)-ig látható robotkonfigurációkat, nem véve figyelembe a diagramokon feltüntetett akadályokat. Rajzolja fel az ezeknek megfelelő robotkar-konfigurációkat a konfigurációs térben. (Segítség: minden egyes karkonfiguráció egyetlen pontra képződik le a konfigurációs térben, ahogy ezt a  (b) ábra is mutatja.) b. Rajzolja meg a konfigurációs teret a  (a)–(c) ábrákon látható minden egyes munkatérdiagramra. (Segítség: a konfigurációs terek megegyeznek a  (a) ábrán lévővel, ami a robot önmagával való ütközését jelentő területet illeti, de különbségek adódnak a terület határát jelentő akadályok hiányából és az egyes ábrákon lévő akadályok különböző helyzetéből.) c. A  (e)–(f) ábrákon látható fekete pontok mindegyikéhez rajzolja meg a hozzá tartozó konfigurációt a munkatérben. Az árnyékolt részeket hagyja figyelmen kívül. d. A  (e)–(f) ábrákon látható konfigurációs terek mindegyikét egy-egy különálló (a munkatérben lévő) akadály generálta (ez a sötétebb terület), valamint azok a megszorítások, amelyek a robot önmagával való ütközéséből erednek (a világosabb árnyalat). Rajzolja meg mindkét diagramhoz a sötét területnek megfelelő akadályt a munkatérben. e. A  (d) ábra azt mutatja be, hogy egyetlen síkbeli (lapos) akadály két elválasztott részre tudja bontani a konfigurációs teret. Maximum hány elválasztott részre tudja bontani az egybefüggő akadálymentes teret egyetlen lapos akadály behelyezése egy 2 szabadságfokos robot esetén? Adjon példát rá, és indokolja meg, miért nem lehetséges nagyobb számú független terület kialakítása. Mi a helyzet, ha nem lapos az akadály?
7	0.44	0	és mi bizonyítani szeretnénk α-t, ami mondjuk ¬C[1,2]. Amikor konvertáljuk a (TB ∧ ¬α)-t CNF formára, akkor a  ábra felső részén látható klózokat kapjuk. Az ábra második sora mutatja az összes klózt, amit az első sor párjainak rezolválásából kaptunk. És akkor, amikor a C[1,2]-t rezolváljuk ¬C[1,2]-vel megkapjuk az üres klózt, amit egy kis négyzet jelöl. A  ábra megvizsgálása azt mutatja, hogy számos rezolúciós lépés felesleges. Például az S[1,1] ∨ ¬S[1,1] ∨ C[1,2] ekvivalens az Igaz ∨ C[1,2]-vel, ami ekvivalens az Igazzal. Levezetni, hogy az Igaz az igaz, nem igazán hasznos. Így bármely olyan klóz, amelyben két kiegészítő klóz szerepel, figyelmen kívül hagyható.  ábra - Az IK-Rezolúció algoritmus részleges alkalmazása egy egyszerű wumpus világbeli következtetésre. A felső sor első négy klóza alapján származtatjuk a ¬P[1,2]-t. Az IK-Rezolúció algoritmus részleges alkalmazása egy egyszerű wumpus világbeli következtetésre. A felső sor első négy klóza alapján származtatjuk a ¬P1,2-t.
16	0.956522	0	 Megjegyzés Írjon számítógépes programot, ami automatizálja a  feladat folyamatát. Próbálja ki a programot különböző hátterű és politikai irányultságú embereken. Elemezze eredményei konzisztenciáját az összes személy esetén és egyetlen személy esetén is.
4	0	0	A  fejezetben láttuk, hogy a nem informált keresési stratégiák oly módon képesek problémák megoldásait megtalálni, hogy szisztematikusan új állapotokat generálnak és összehasonlítják azokat a célállapottal. Sajnos ezek a stratégiák a legtöbb esetben hihetetlenül rossz hatékonysággal dolgoznak. Ezen fejezet megmutatja, hogy egy – problémaspecifikus tudást alkalmazó – informált keresési stratégia hatékonyabban képes a megoldást megtalálni. A  alfejezet bemutatja a  fejezetben tanulmányozott algoritmusok informált változatait, a  alfejezet pedig elmagyarázza, hogy a szükséges problémaspecifikus információ hogyan szerezhető meg. A  és a  alfejezet olyan algoritmusokkal foglalkozik, amelyek az állapottérben tisztán lokális keresést (local search) hajtanak végre, egy vagy több aktuális állapotot értékelve és módosítva ahelyett, hogy szisztematikusan tárnák fel az utat a kezdeti állapottól indulva. Ezek az algoritmusok olyan problémák esetén jók, ahol az útköltség közömbös, és az egyetlen, ami számít, hogy megtaláljuk-e a megoldást. A lokális keresési algoritmusok családjába a statisztikai fizika inspirálta módszerek (szimulált lehűtés, simulated annealing) és az evolúciós biológia sugallta módszerek (genetikus algoritmusok, genetic algorithms) is beletartoznak. A  alfejezet végül az online kereséssel (online search) foglalkozik, ahol az ágens egy teljesen ismeretlen állapottérrel találja magát szembe.
3	0.083333	0	Egy probléma (problem) formális megragadásához az alábbi négy komponensre van szükség: * A kiinduló állapot (initial state), amiből az ágens kezdi a cselekvéseit. A romániai ágensünk kezdeti állapotát például Benn(Arad)-ként lehetne leírni. * Az ágens rendelkezésére álló lehetséges cselekvések (actions) halmaza. A leginkább használatos leírás^[29] az állapotátmenet-függvényt (successor function) alkalmazza. Egy adott x állapot esetén az Állapotátmenet-Fv (x) visszaadja a rendezett 〈cselekvés, utódállapot〉 párok halmazát, ahol minden cselekvés az x állapotban legális cselekvések egyike, és minden utódállapotot egy cselekvésnek az x állapotra való alkalmazásával nyerünk. A Benn(Arad) állapotban az állapotátmenet-függvény a romániai problémára a
16	0.086957	0	Ránézésre az MVH-elv ésszerű módszernek látszik döntések meghozatalára, de az nem világos, hogy vajon ez-e az egyetlen lehetőség. Végül is, a hasznosság átlagának maximálása miért is lenne olyan különleges? Miért nem maximalizáljuk a lehetséges hasznosságok köbeinek összegét, vagy miért nem minimalizáljuk a lehetséges veszteségek maximumát? Hasonlóan, miért nem cselekedhet az ágens racionálisan, ha csupán az állapotok közötti preferenciáit rögzítené, és nem rendelne hozzájuk numerikus értéket? Végül, egyáltalán miért kell léteznie egy megkövetelt tulajdonságokkal rendelkező hasznosságfüggvénynek? Talán egy racionális ágensnek olyan bonyolult a preferenciarendszere, hogy azt nem lehet ilyen egyszerűen az egyes állapotokhoz rendelt valós számokkal kifejezni.
24	0.833333	1	A képjellemzők az alakzatfelismerés területén a következőképp definiálhatók: valamilyen származtatott mérőszámok, melyek önmagukban vagy együttesen utalnak egy objektum vagy objektumtípus meglétére. Számításuk általában kulcspontok, azaz valamilyen szempontból jól megfogható, tipikus pontok keresésével kezdődik. Ezek után a kapott kulcspontok környezetét jellemzik, melynek eredménye egy leíró, általában leíróvektor. Előfordulnak pozíciófüggetlen, tehát kulcspontokat nem használó jellemzők is. Jellemzőket tipikusan alakzatfelismerési, objektumkövetési és képregisztrációs feladatokhoz használnak.
20	0.178571	0	Vizsgáljunk most egy lineáris Gauss-modellt, amelyben egy X folytonos szülő és Y folytonos gyermek van. Mint az 14. szakasz - Bayes-hálók folytonos változókkal részben megmutattuk, Y Gauss-eloszlású, átlaga lineárisan függ X-től, míg varianciája rögzített. A P(X|Y) feltételes eloszlás tanulásához maximalizálhatjuk a feltételes likelihood függvényt:
5	0.818182	1	Az utolsó, immár végzetes ütközés a (DA, Q) élnél jelentkezik: mostanra mind DA-nak, mind Q-nak csak a 'zöld' érték választható, de mivel ezek szomszédosak, nem lehet azonos a színük, tehát a parciális hozzárendelés inkonzisztens!
3	0.041667	0	Célnak a világ állapotainak egy halmazát tekintjük, pontosabban azon állapotok halmazát, amelyekben a cél teljesül. Az ágens feladata megkeresni, hogy amely cselekvések sorozata juttatja el őt egy célállapotba. Mielőtt azonban ezt megtehetné, el kell döntenie, hogy milyen cselekvéseket és állapotokat vizsgáljon meg. Amennyiben olyan szintű cselekvésekkel kellene dolgoznia, mint például „a bal lábadat tedd előrébb fél méterrel” vagy „a kormánykereket hat fokkal tekerd balra”, az ágens még a parkolóból sem lenne képes kihajtani, nemhogy időben eljutni Bukarestbe, mivel az ilyen részletek szintjén a világban túl sok a bizonytalanság, és a megoldás túl sok lépésből állna. A problémamegfogalmazás (problem formulation) az a folyamat, amely során eldöntjük, hogy amely cselekvéseket és állapotokat vegyünk figyelembe, ha egy cél adott. Ezt a folyamatot részletesebben is tárgyalni fogjuk. Egyelőre tételezzük fel, hogy az ágens az egyik nagyobb városból egy másik nagyobb városba való autózás szintjén szemléli a cselekvéseket. Ebből adódóan a figyelembe vett állapotok annak felelnek meg, hogy az ágens éppen egy adott városban van.^[27]
15	0.481481	0	A kitevőben lévő tényezők összeszorzása láthatóvá teszi, hogy a kitevő is négyzetes függvénye az x-ben lévő x[i] valószínűségi változóknak. Ahogy az egyváltozós esetben, a szűrési frissítés megőrzi az állapoteloszlás gaussi voltát.
3	0.916667	1	- Gráfok esetén azonban továbbra is előfordulhat olyan eset, hogy negatív élek egy halmaza kört alkot, és ilyenkor ezen cselekvések ismételt végrehajtása tetszőlegesen lecsökkentheti egy út költségét. Erre vonatkozik a következő részfeladat.
7	0.92	0	Számos szerző próbálkozott lokális keresési algoritmusokat használni a kielégíthetőség eldöntésére a nyolcvanas években. Minden ilyen algoritmus a kielégíthetetlen klózok számának minimalizálásának elvén (Hansen és Jaumard, 1990) alapult. Különlegesen hatékony algoritmust fejlesztett ki Gu (Gu, 1989), és tőle függetlenül Selman és társai (Selman és társai, 1992), amelyet ez utóbbi szerzők GSAT-nak neveztek el, és megmutatták, hogy az algoritmus képes nehéz problémák széles körét igen gyorsan megoldani. A WalkSat algoritmust, amelyet ebben a fejezetben bemutattunk, szintén Selma és társai publikálták (1996).
5	0.181818	1	Mivel tehát az előretekintés továbbra sem vezetett (még) üres értékkészlethez, ezért következhet az algoritmus újbóli, rekurzív meghívása. Ennek során tegyük fel, hogy az NT változót választjuk, és mivel ennek értékkészlete már csak a {GREEN, BLUE}, ezért abból az első értéket, a GREEN-t rendeljük hozzá először (NT=GREEN).
6	0.1	1	Ezek közül az első, a csoportos robot-koordináció még saját világbajnoksággal (RoboCup) is büszkélkedhet, ahol évről évre újabb és újabb, gyakorta az eddigiekben ismertetett játékelméleti elveken alapuló szoftverek által vezérelt robotok versengenek egymással a foci szabályai szerint. Erről itt találhatunk további információt: http://www.robocup.org
24	0.208333	1	A tárgyakat nem képpontok halmazaként, hanem térbeli alakzatokként érzékeljük, az agyunk rekonstrukciós tevékenységének köszönhetően, így az egyes fényingerek foltok, élek rendszerévé válnak. Agyunk alakfelismerő képessége rendkívüli, a tárgyakat méretüktől, állásuktól, színüktől, stb. függetlenül képes azonosítani. Kísérletek bizonyítják, hogy az emberi agy képi adatbázissal rendelkezik, mely mintákat tárol, a felismerés pedig mintaillesztéssel történik.
5	0.181818	1	Nyilván az algoritmus most is sorban végig fogja „pörgetni” a V változó értékeit ugyanúgy, mint előbb a WA és Q változók esetében. Viszont, vegyük észre, egyszer sem történt, és - láthatjuk - nem is fog történni visszalépés. Tehát a jelenlegi probléma esetében a fokszám heurisztika használata teljes egészében kiküszöbölte a visszalépéseket, ezzel is még tovább gyorsítva az algoritmust.
15	0.037037	0	A valószínűségi következtetésre szolgáló technikáinkat változatlan (static) világok esetén fejlesztettük ki, amelyekben minden egyes valószínűségi változónak egyetlen rögzített értéke van. Például egy gépkocsi javításánál feltesszük, hogy ami meghibásodott, az a diagnosztizálás alatt is hibás marad; a feladatunk a gépkocsi állapotának kikövetkeztetése a megfigyelt bizonyítékokból, amelyek szintén változatlanok maradnak.
12	0.428571	0	Így már képesek vagyunk feltételeket és ciklusokat tartalmazó programokhoz hasonlatos összetett tervek létrehozására. Sajnos ezek a ciklusok végtelen ciklusok lehetnek. Például a tripla-Murphy világ cselekvés reprezentációjában a semmi jelentése, hogy a Balra szükségszerűen sikeres. A ciklikus tervek ezért kevésbé előnyösek, mint a ciklus nélküliek, de megoldásnak tekinthetők, amennyiben minden levél egy célállapot, és a terv minden pontjából elérhető egy levél.
5	0.181818	1	Láthattuk, hogy most az előbbi szakaszban bemutatott fokszám heurisztikás kiegészítésnél picit több lépésben, 15 helyett csak 20 lépésben sikerült megoldani a problémát, viszont a sima visszalépéses keresésnél még így is gyorsabbak voltunk (20 < 27). Természetesen, ha most is használtuk volna a fokszám heurisztikát, és így az SA változóval kezdtük volna a keresést, akkor a változók jelen sorrendezése mellett visszalépés nélkül meg tudtuk volna találni a megoldást, hiszen - vegyük észre - az előretekintésnek köszönhetően végig, egyetlen értékadás következtében adódó behelyettesítés sem volt inkonzisztens, azaz sohasem ütköztünk értékadás miatt a korlátokkal. Ez persze nem jelenti azt, hogy a korlátok figyelembevétele nélkül működtünk volna, csak annyit jelent, hogy amennyiben előretekintést használunk, úgy végső soron az értékadást követően nem is lenne feltétlen szükséges ellenőriznünk, hogy konzisztens-e a létrejött behelyettesítés - úgyis mindig az lesz az előretekintés miatt. A korlátokat pedig nyilván az előretekintés során alkalmazzuk. Tehát nem tudjuk őket megkerülni.
9	0.37931	0	Ez megfelel az  ábrán bemutatott redukált kényszerkielégítési problémának. A faszerkezetű kényszerkielégítési problémák megoldására használt algoritmusokat közvetlenül alkalmazhatjuk a szabályillesztés problémájára. * És végül dolgozhatunk azon, hogy megszüntessük a felesleges szabályillesztési kísérleteket az előrefelé láncolási algoritmusban, amely a következő alfejezet témája lesz.
6	0.1	1	Miután a CHINOOK az összes lehetséges kimenetelt tartalmazta fény derült arra is, hogy tökéletes játszma esetén a legjobb esetben is döntetlen a játék kimenetele (a játék nagy mesterei ezt már évek óta sejtették), vagyis nem lehet nyerni a CHINOOK ellen, maximum egy döntetlenben kiegyezni vele [2].
1	0.068966	1	Schultz szerint a humor egyik fő forrása pont ez az eltérés az elvárt és a kapott végszó között. A humor tehát abból származik, hogy két logikailag és/vagy értelmileg különálló ötletet, helyzetet egybegyúrunk, egy váratlan vagy meglepő helyzet előállítása érdekében. Ennek az ellentétnek a fontosságát már Arisztotelész is felismerte, a humor egy szükséges elemének tekintette azt. Ez az álláspont a 18. század során sok támogatóra talált, például Gerard(1759) szerint a humor célja a szokatlan relációk keverése és a dolgok ellentétbe állítása. Beathie(1776) szerint a nevetés fő oka két össze nem illő, vagy két nem megfelelő körülmény találkozása volt. Priestley (1777) szerint pedig a nevetés a kontraszt felismerésének jelzése. Spencer(1860) azonban már azt emelte ki, hogy nem minden ellentmondás hordoz humoros tartalmat, szerinte az ellentmondás csak akkor volt vicces, ha egy nagyobb dolgot vetítettek egy kisebbre. Schoppenhauer szerint a nevetés akkor jelentkezik, amikor a hallgató hirtelen felismeri az összeférhetetlenséget a vázolt helyzet és a valós lehetőségek között. Ennek következtében az összeférhetetlenség szükséges, de nem elégséges feltételként jelentkezik az elméletekben.[3]
6	0.1	1	Másik ötletnek felvetették, hogy mi lenne, ha már meglévő megnyitási adatbázisokból építenék fel az adatbázist. Ennek az ötletnek több hátránya is akadt. A tervezők érthető okokból egyrészt nem szerettek volna egy egyébként is tapasztalati úton szerzett információkból álló könyvet sorról sorra begépelni a programnak, és ezt az óriási adatbázist elemezni. Eleve fennáll itt a beviteli hibázás valószínűsége, vagy pedig a felhasznált adatbázisban lévő hiba átmásolása. De a legnagyobb problémát a keresés mélysége okozta. Amikor 1990-ben Tinsley legyőzte a CHINOOK-ot (Dunne’s loss: egy rossz lépés a gyors vereséghez vezethet) annak volt köszönhető, hogy a keresési mélység 15 szintben volt korlátozva, míg az esetleges szükséges mélység Tinsley ellen ebben az esetben legalább 19 szint lett volna. Nyilvánvalóvá vált, hogy ha ütőképes játékost akarnak faragni a CHINOOK-ból, akkor valamilyen új ötlettel is elő kell állniuk [3][7].
25	0.074074	1	Az orvosokat meg kell segíteni, hogy a jelenlegi munkájukba és mindennapjaikba be akarják, és hatékonyan be is tudják építeni az otthoni betegápolást és egészségmegőrzést. Az ipari szereplőknek képesnek kell lenniük szolgáltatni a szükséges technológiákat. Az esettanulmányban bemutatásra kerül egy olyan projekt, melynek célja a fenti problémák jó részét megoldó prototípus-rendszer kifejlesztése és validálása. Ez az Alpha projekt.
27	0.4	1	Hasonlóan definiálható egy adott Környezet-ben adott Architektúrá-n futtatott Program hasznossága is. Egyszerűen csak az adott architektúrán futatott program által implementált Ágens(Program, Architektúra) ágens-függvény hasznosságát kell az előbbiekhez hasonló módon megadni.
9	0.344828	0	A ERL-EL-Kérdez-t könnyű kielemezni. Először is megállapítható, hogy az eljárás helyes (sound), mivel minden következtetés csak az általánosított Modus Ponens alkalmazása, amelyről már igazoltuk, hogy helyes. Másodszor, teljes (complete) a határozott klózokat tartalmazó tudásbázisokra, ami azt jelenti, hogy képes minden olyan lekérdezést megválaszolni, amely következik bármely határozott kózokból álló tudásbázisból. A Datalog tudásbázisok esetére, amelyek nem tartalmaznak függvényszimbólumokat, a teljesség bizonyítása meglehetősen egyszerű. Először megszámoljuk a TB-hez hozzáadható tényeket, amely szám meghatározza az iterációk maximális számát. Legyen a k ez a maximális érték (argumentumok száma) az adott predikátumokra, p a predikátumok száma és n a konstansszimbólumok száma. Egyértelmű, hogy nem lehet pn^k különböző alapténynél több, tehát ennyi iteráció után az algoritmus el fog érni egy fix pontot. Ezután már az ítéletlogikai előrefelé láncolás bizonyításánál leírtakhoz nagyon hasonlóan érvelhetünk (7. szakasz - Előre- és hátrafelé láncolásrészben.) Az ítéletlogikai teljes eljárás átalakítását egy elsőrendű teljes eljárássá a  alfejezetben mutatjuk majd meg.
23	0.555556	0	Általánosságban az információkinyerés jól működik egy olyan korlátozott tárgyterület esetén, amelyben a tárgyalt témákat előre meg lehet állapítani, továbbá azt is lehet tudni, hogy hogyan írnak róluk. Számos tárgyterületen használhatónak bizonyult ez a technika, azonban nem lehet a teljes természetes nyelvi elemzés helyettesítője.
15	0.037037	0	A gépkocsijavítás esetétől eltérően, itt a probléma dinamikai vonatkozásai alapvetőek. A vércukorszintek és méréseik idővel gyorsan változhatnak, amit befolyásol a páciens aktuális élelmiszer-bevitele és inzulinadagja, az anyagcsere aktivitása, a napszak és egyéb tényezők. Ahhoz, hogy a bizonyítékok időbeli alakulásából a jelenlegi állapotot megbecsüljük, és egy kezelés kimenetelét megjósoljuk, modelleznünk kell ezeket a változásokat.
22	0.666667	0	További fogalomcserék lehetnek a szerző a munkákra (I read Shakespeare), vagy általában a létrehozó az alkotásra (I drive a Honda) és a rész az egészre (The Red Sox need a strong arm). A metonímia egyes példái, mint a „The ham sandwich on Table 4 wants another beer” újszerűbbek, és az adott szituációnak megfelelően értelmezik őket.
24	0.208333	1	Egyetlen érzékelőt és kiegészítő letapogató mechanizmust tartalmazó eszközök, mint például a professzionális forgódobos szkennerek, vagy egyes műholdas képalkotó eszközök. Itt az érzékelő paramétereinek állandósága a teljes képalkotás folyamatában biztosított, vagyis nem kell kompenzálni az esetleges eltéréseket. Érzékelőként többek közt fotoelektron-sokszorozót alkalmaznak, mely nagy sávszélességgel, nagy érzékenységgel és jó dinamikával rendelkezik.
14	0.130435	0	A  alfejezetben bemutattuk, hogy az együttes valószínűség-eloszlás függvény alapján a tárgytartománnyal kapcsolatos bármely kérdés megválaszolható. Ha egy Bayes-háló leírja az együttes valószínűség-eloszlás függvényt, akkor ez alapján bármely kérdés megválaszolható, összegezve a releváns együttes bejegyzéseket. A  alfejezet elmagyarázza, hogy ez hogyan végezhető el, azonban sokkal hatékonyabb módszereket is ismertet.
18	0.263158	0	ahol mindegyik P[i](s) feltétel azon tesztek konjunkciójának felel meg, amelyeket a gyökértől egy pozitív kimenetet jelentő levélig megtett út során végeztünk. Bár ez egy elsőrendű logikában felírt mondatnak tűnik, valójában bizonyos értelemben ítéletlogikai kifejezés, mivel csak egyetlen változót tartalmaz és az összes predikátum unáris. Valójában a döntési fa a VárjunkE és az attribútumértékek bizonyos logikai kapcsolatát írja le. A döntési fa nem használható olyan tesztek reprezentálására, amelyek kettő vagy több különböző objektumra vonatkoznak – például:
11	0.615385	0	Lévén egy pontos heurisztika készítésére szolgáló eszköz, a tervkészítési gráf tekinthető úgy, mint egy relaxált probléma, ami hatékonyan megoldható. Hogy a relaxált probléma természetét megértsük, pontosan meg kell értenünk, hogy mit jelent, ha egy g literál megjelenik a tervkészítési gráf S[i] szintjén. Ideális esetben garanciát szeretnénk arra, hogy létezik egy terv i cselekvés szinttel, ami eléri g-t, illetve ha g nem jelenik meg, akkor nincs is ilyen terv. Sajnos ezt garantálni majdnem ugyanolyan nehéz, mint megoldani az eredeti tervkészítési problémát. A tervkészítési gráf a garancia második részéről gondoskodik (ha g nem jelenik meg, akkor nincs terv), de ha g megjelenik, akkor a tervkészítési gráf csak annyit ígér, hogy van egy terv, ami várhatóan eléri g-t, nincsenek „nyilvánvaló” hibák. Egy nyilvánvaló hiba definíció szerint egy olyan hiba, ami úgy detektálható, hogy két cselekvést vagy két literált tekintünk egyszerre, vagy más szavakkal a mutex relációkat vizsgáljuk. Lehetnek összetettebb hibák, melyek három, négy vagy több cselekvést tartalmaznak, de a tapasztalatok azt mutatják, hogy nem éri meg ezekkel foglalkozni. Ez hasonló a kényszerkielégítési problémáknál tanultakkal, hogy a megoldás megkeresése előtt gyakran megéri a 2-konzisztencia számítás, de a 3- vagy a magasabb konzisztencia kiszámítása ritkábban kifizetődő (lásd  alfejezet).
6	0.65	0	Egyelőre minden jónak tűnik. Most rejtsük el min kártyáinak egyikét: max tudja, hogy min-nek vagy az egyik (♥ 4-gyel), vagy a másik (♦ 4-gyel) leosztása van, de fogalma sincs melyik. max a következőképpen érvel:
5	0.363636	0	A keresési algoritmusunk eddig csak akkor foglalkozott egy változóra vonatkozó kényszerrel, ha a változót a Hozzárendeletlen-Változó-Kiválasztás kiválasztotta. De ha néhány kényszert a keresés folyamán korábban vagy akár még a keresés megkezdése előtt megvizsgálunk, akkor drasztikusan csökkenthető a keresési tér mérete.
21	0.1875	1	Ez a feladat annyiban tér el a szabványos MAB alapproblémától, hogy minden egyes időpillanatban egy azonos eloszlású, független valószínűségi változó szerint érkezhet új folyamat, az eddig meglévők mellé. Az újonnan érkezett folyamat a következő lépésben már üzemeltethető. Megmutatható, hogy az alap MAB probléma esetében optimális algoritmus itt is alkalmazható, szemléletesen azért, mert igaz marad az optimalitáshoz szükséges négy feltétel. Az új folyamatok működtetése és üzemeltetése független a múltbeli döntésektől, így itt is igaz lesz, hogy nem lesz olyan jutalom, melyről egy előző döntés miatt maradna le az algoritmus.
21	0.8125	0	A vezérlési stratégiát biztosító program kézi kódolásának elkerülhetősége miatt a megerősítéses tanulás a gépi tanulás egyik legaktívabban művelt területe. A robotikai alkalmazások különösen értékesnek ígérkeznek, de ezek folytonos, sokdimenziós, csak részlegesen megfigyelhető környezetek kezelésére képes módszereket igényelnek, ráadásul a sikeres működéshez több ezer vagy akár millió elemi cselekvésre is szükség lehet.
14	0.695652	1	A két rendszer összevonása. Ha a két fenti rendszert össze kívánjuk vonni, az (lásd [Halpern 1990]) megtehető, úgy ha mind a tárgyterület elemeihez, mind pedig a lehetséges világok halmazához is egy-egy eloszlást rendelünk. Így ez a 3. típusú valószínűségi struktúra egy (D, S, [pi], [mu]_D, [mu]_S) ötössel írható le, ahol az egyes szimbólumok jelentése követi a már fentebb alkalmazott konvenciót.
5	0.181818	1	A kapott {SA=RED, NSW=GREEN, NT=GREEN, WA=RED} behelyettesítés sajnos ellentmond a 2-es korlátnak (miszerint a WA és SA változók értékének különböznie kell). Az algoritmus tehát tovább lép a WA változó következő értékére, a GREEN-re (WA=GREEN).
8	0.16129	0	Egy term (term) egy objektumra vonatkozó logikai kifejezés. A konstansszimbólumok tehát termek, de nem mindig kényelmes önálló szimbólumot alkalmazni minden egyes objektum megnevezésénél. Magyarul inkább a „János király bal lába” kifejezést használjuk, mintsem nevet adjunk a lábának. Ezért használunk függvényszimbólumokat: a konstansszimbólumok használata helyett inkább a BalLáb(János)-t alkalmazzuk. Általános esetben egy összetett term egy függvényszimbólumból áll, amelyet a függvényszimbólum argumentumainak zárójelezett listája követ. Fontos megjegyezni, hogy egy összetett term nem más, mint egy bonyolult formájú név, és nem egy „értéket visszaadó szubrutin hívás”. Nem egy BalLáb szubrutinról van szó, amely bemenetként megkap egy személyt, és visszaad egy lábat. Tudunk következtetni a bal lábakkal kapcsolatban (pl. kiindulva az általános szabályból, hogy mindenkinek van egy bal lába, és ebből levezethető, hogy Jánosnak is lennie kell) anélkül, hogy valaha is megadnánk a BalLáb definícióját. Ez is olyasmi, amit nem tehetünk meg a programozási nyelvek szubrutinjaival.^[77]
24	0.333333	0	A tetszőleges orientációjú él detektálásához a képet két szűrővel: az f[V] = G'[σ](x) G[σ](y) és az f[H] = G'[σ](y) G[σ](x) szűrővel kell konvolválni (az f[H] az f[V] 90°-kal elforgatott változata). A tetszőleges orientációjú éldetektáló algoritmus az alábbi: 1. Konvolváljuk az I (x, y) képet az f[V] (x, y)-nal, valamint az f[H ](x, y)-nal, hogy az R[V](x, y)-t és az R[H](x, y) -t megkaphassuk. Definiáljuk az  -t. 2. Jelöljük be azokat a csúcsokat az ||R(x, y)||-ban, amelyek egy előre definiált T küszöbnél magasabbak.
23	0.333333	1	Az ideális jó diagnosztikai teszt eredményeinek eloszlásában nincs átfedés a beteg és az egészségesek csoportjában. A diagnosztikai szenzitivitás és specificitás is 100%-os. A legtöbb diagnosztikai teszt eredményeinek eloszlásában átfedést láthatunk a beteg és az egészségesek eredményei között. Alacsonyabb döntési szintet választva a hamis negatív eredmények száma csökken, de nő a hamis pozitívak száma (nagyobb a diagnosztikai szenzitivitás). Növelve a döntési szint értékét, növekszik a hamis negatív esetek száma, és csökken a hamis pozitívaké (nagyobb a diagnosztikai specificitás). Összefoglalva: fordított irányú kapcsolat van a diagnosztikai szenzitivitás és specificitás között.
24	0.166667	1	A CT, MR, CR és egyéb DICOM 3.0 standard szerint kommunikáló röntgendiagnosztikai berendezések TCP/IP csomagokban, fizikailag pedig egy 100 Mbit-s hálózaton küldik az adatokat a DICOM archiváló szervernek. A szerveren futó program az adatokat nagy biztonságú RAID-5-ös SCI merevlemezrendszerén eltárolja, rendszerezi, majd az adatbázisban nyilvántartásba veszi. A leletezett és validált képek a vizsgálatot megrendelő munkahely, intézmény részére továbbíthatók a helyi hálózaton keresztül, vagy akár CD-re, DVD- re kiírva.
13	0.954545	0	A wumpus világ vizsgálatánál abból a tényből indultunk ki, hogy a négyzetek a többi négyzet tartalmától függetlenül 0,2 valószínűséggel tartalmaznak csapdát. Ehelyett most tegyük fel, hogy az [1, 1]-en kívüli N négyzetben pontosan N/5 csapda van egyenletes eloszlásban véletlenszerűen elhelyezve. Függetlenek-e továbbra is a C[i,j] és a C[k,l ]változók? Hogyan fog most kinézni a P(C[1,1], …, C[4,4]) együttes eloszlás? Számolja újra az [1, 3] és a [2, 2] négyzetekben található csapda valószínűségét.
3	0.916667	1	Célteszt: (0,0,0). Mindhárom hittérítő és mindhárom kannibál a jobb parton van. (Arra nem kéne feltétlenül kikötést tennünk, hogy hol van a csónak, de egészen biztos, hogy ott a csónak, ahol az utasok is, hisz nincs aki átvigye a túlpartra, tehát ez lesz az egyetlen elérhető célállapot.)
16	0.304348	0	A döntéselmélet egy normatív elmélet (normative theory): azt írja elő, hogy az ágensnek hogyan kell cselekednie. A közgazdaságtan elméletének alkalmazását nagyban javítaná, ha ez egyben egy leíró (descriptive) elmélet is volna az aktuális emberi döntéshozatalról. Azonban kísérleti bizonyítékok vannak arra, hogy az emberek szisztematikusan megsértik a hasznosságelmélet axiómáit. Egy példát a pszichológus Tversky és Kahneman adnak a közgazdász Allais példája alapján (Tversky és Kahneman, 1982; Allais, 1953). A kísérleti személyeknek kétszer kell választaniuk, az A és a B szerencsejáték, majd a C és a D szerencsejáték között.
15	0.962963	0	Mutassa meg, hogy bármely másodrendű Markov-folyamatot át lehet írni elsőrendű Markov-folyamattá az állapotváltozóknak egy megnövelt halmazát használva. Megtehető-e ez mindig takarékosan, azaz az állapotátmenet-modellt megadó paraméterek számának a növelése nélkül?
20	0.928571	0	A naiv Bayes-modell egyike a legrégebbi és legegyszerűbb Bayes-hálóknak, megjelenése egészen az 1950-es évekig követhető vissza. Eredetüket megemlítettük a  fejezet záró megjegyzéseiben. Részleges magyarázat található Domingos és Pazzani publikációjában (Domingos és Pazzani, 1997). A naiv Bayes-tanulás turbózott változata nyerte az első KDD Cup adatbányászati versenyt (Elkan, 1997). Heckerman kitűnő bevezetését adja a Bayes-háló tanulás általános problematikájának (Heckerman, 1998). Spiegelharter és társai a Bayes-hálók Bayesi paramétertanulását tárgyalták Dirichlet-priorok esetére (Spiegelharter és társai, 1993). A Bugs szoftvercsomag (Gilks és társai, 1994) számos gondolatot megtestesített ezek közül, nagyon hatékony eszközt biztosított az összetett valószínűségi modellek felállítására és tanulására. A Bayes-hálóstruktúra tanulásának első algoritmusai feltételes függetlenségi teszteket használtak (Pearl, 1988; Pearl és Verma, 1991). Spirtes és társai hasonló elvek alapján dolgozták ki átfogó megközelítésüket, valamint a Tetrad csomagot Bayes-hálóstruktúra tanulás céljaira (Spirtes és társai, 1993). Az azóta végrehajtott algoritmikus javítások a 2001-es KDD Cup adatbányászati versenyen egy Bayes-háló tanulási algoritmus (Cheng és társai, 2002) meggyőző győzelméhez vezettek. (Itt a speciális megoldandó feladat egy 139 351 tulajdonsággal leírt bioinformatikai probléma volt!) Cooper és Herskovits egy likelihood maximalizáláson alapuló struktúratanulási megközelítést fejlesztett ki (Cooper és Herskovits, 1992), ezt Heckerman és társai fejlesztették tovább (Heckerman és társai, 1994). Friedman és Goldszmidt mutatták ki a lokális feltételes eloszlások reprezentációjának a megtanult struktúrára gyakorolt hatását (Friedman és Goldszmidt, 1996).
20	0.964286	0	Tegyük fel, hogy egy lineáris aktivációs függvényeket használó neurális hálónk van. Azaz minden neuron kimenete a bemenetek súlyozott összegének c-szerese, ahol c egy konstans. a. Tegyük fel, hogy a hálónak egy rejtett rétege van. Írja fel a súlyok egy adott W értékkészletére azokat az egyenleteket, amelyek megadják a kimeneti réteg neuronjainak kimeneti értékeit W és a bemeneti réteg I értékeinek függvényében – anélkül hogy explicit módon megjelennének az egyenletekben a rejtett neuronok kimeneti értékei. Mutassa meg, hogy létezik olyan háló, amelynek nincs rejtett rétege, de ugyanezt a függvényt valósítja meg. b. Ismételje meg az (a) rész alatti feladatot, de tetszőleges számú rejtett réteg esetére. Milyen következtetést vonhat le a lineáris aktivációs függvényekre?
3	0.5	0	A mélységi keresés visszalépéses keresésnek (backtracking search) nevezett változata még kevesebb memóriát használ. A visszalépéses keresés az összes követő helyett egyidejűleg csak egy követőt generál. Minden részben kifejtett csomópont emlékszik, melyik követője jön a legközelebb. Ily módon csak O(m) memóriára van szükség, O(bm) helyett. A visszalépéses keresés még egy memória- (és idő-) spóroló trükkhöz folyamodik. Az ötlet a követő csomópont generálása az aktuális állapot módosításával, anélkül hogy az állapotot átmásolnánk. Ezzel a memóriaszükséglet egy állapotra és O(m) cselekvésre redukálódik. Ahhoz, hogy az ötlet működjön, amikor visszalépünk, hogy a következő követőt generáljuk, mindegyik módosítást vissza kell tudnunk csinálni. Nagy állapottérrel rendelkező problémák esetén, mint például robot-összeszerelés esetén, az ilyen módszerek lényegesek a sikerességhez.
5	0.181818	1	Ezek után az (NSW, SA) él következik, ami szerencsére konzisztens, hiszen NSW egyetlen RED értékével konzisztens SA egyetlen BLUE értéke. Tehát az (NSW, SA) él törlésre kerül a listából, és következik a (V, SA) él.
5	0.181818	1	Az előretekintés során nyilván a GREEN értéket kellene kivennünk az SA értékkészletéből. Viszont ez az érték nincs benne SA értékkészletében. SA értékkészletében egyetlen érték sem ütközik az előbbi, Q=GREEN értékadással, így az előbbiekhez hasonlóan most sem teszünk semmit: nincsenek következtetések, a KÖVETKEZTETÉS eljárás üres következtetésekkel tér vissza. Léphetünk tovább a következő változóra.
22	0.555556	0	Máris két nehézség támadt. Először is, a teljes mondat szemantikája, úgy tűnik, megegyezik az NP szemantikájával, melyben a VP tölti ki a P rész szemantikáját. Ez azt jelenti, hogy a mondat szemantikáját nem formálhatjuk rel(obj) segítségével. Megtehetjük obj(rel) által, ami (legalábbis első ránézésre) kicsit különösnek tűnik. A második probléma az, hogy az a változót a Smell reláció argumentumaként kell megkapnunk. Más szavakkal, a mondat szemantikája a VP szemantikájának megfelelő NP argumentumrekeszbe való illesztésével adódik, miközben az NP-ben található a változót is betesszük a VP szemantika megfelelő argumentumrekeszébe. Úgy tűnik, mintha két funkcionális kompozíciónk lenne, és ez azt sugallja, hogy meglehetősen könnyű lesz összezavarodni. A bonyolultság abból a tényből ered, hogy a szemantikai struktúra nagyon különböző a szintaktikaitól.
16	0.956522	1	A HELP egy integrált kórházi információs rendszer. Egy sokrétű szolgáltatást nyújtó kifinomult klinikai döntés-támogató rendszer, mely a klinikai területek széles skáláját képes kiszolgálni, mint a laboratóriumi, nővéri munka ápolástervezés, radiológia, gyógyszertár, stb.
8	0.096774	0	(Itt magyarul neveztük meg az objektumokat, de képzeletben be lehetne helyettesíteni a neveket például képekkel is.) A korona János király fején van, tehát a „fején” relációhoz csak egy n-es tartozik 〈a korona, János király〉.
1	0.62069	0	A McCulloch és Pitts neurális hálóin alapuló kezdeti kutatás szintén virágzott. Winograd és Cowan eredményei megmutatták, hogy a nagyszámú elem hogyan képes együttesen egy egyedi fogalmat reprezentálni, miközben növeli a párhuzamosságot és a robusztusságot (Winograd és Cowan, 1963). Hebb tanulási módszereit Bernie Widrow (Widrow és Hoff, 1960; Widrow, 1962) fejlesztette tovább, aki a hálózatait adaline-oknak nevezte, továbbá Frank Rosenblatt, aki a perceptronokat vezette be (Rosenblatt, 1962). Rosenblatt bebizonyította perceptron konvergencia tételét (perceptron convergence theorem), kimutatva ezzel, hogy tanulási algoritmusa képes a perceptron súlyait úgy módosítani, hogy az tetszőleges bemeneti adatokhoz illeszkedjen, feltéve, hogy ilyen illeszkedés egyáltalán lehetséges. Ezekről a kérdésekről a  fejezetben írunk majd.
17	0.533333	0	Az RMMDF-ek kezeléséhez először is megfelelően kell őket definiálni. Egy RMMDF-nek az elemei ugyanazok, mint egy MDF-nek – egy T(s, a, s′) állapotátmenet-modell és egy R(s) jutalomfüggvény –, de van egy O(s, o) megfigyelési modellje (observational model) is, ami az s állapotban az o megfigyelés érzékelésének a valószínűségét adja meg.^[173] Például az érzékelő nélküli ágensünknek csak egyetlen megfigyelése van (az üres megfigyelés), ami minden állapotban 1 valószínűséggel bekövetkezik.
13	0.045455	0	Ha egy logikai ágens nem tud arra a következtetésre jutni, hogy valamely cselekvéssorozat eléri a célját, akkor képtelen lesz cselekedni. A feltételes tervezés bizonyos mértékben úrrá lehet a bizonytalanságon, de csak akkor, ha az ágens érzékelési tevékenységei képesek megszerezni a szükséges információt, továbbá ha nincs túl sok különböző eshetőség. Egy másik lehetőség az lehetne, ha az ágenst egy egyszerű, de hibás elmélettel ruháznánk fel, amely biztosan lehetővé tenné valamely terv származtatását; egy ilyen terv az esetek többségében valóban működik is, ugyanakkor problémák lépnek fel, ha az események az ágens elméletének ellentmondanak. Sőt az ágens elméletének pontossága és használhatósága közötti egyensúly kezelése maga is megköveteli a bizonytalanság végiggondolását. Összegezve, egyetlen tisztán logikai ágens sem lesz képes arra a következtetésre jutni, hogy az A[90] tervet kell követnie. Fontos Mindazonáltal tegyük fel, hogy az A[90] ténylegesen a helyes és követendő terv. De mit is értünk ezen a kijelentésen? Ahogy már a  fejezetben kifejtettük, ez a kijelentés azt takarja, hogy a végrehajtható összes lehetséges terv közül az A[90] az, amelyik a környezetre vonatkozó adott információ mellett várhatóan az ágens teljesítményének legnagyobb mértékét biztosítja. A teljesítmény foka magában foglalja a járathoz időben való kiérést a repülőtérre, továbbá a repülőtéren való hosszú, értelmetlen várakozás és a gyorshajtás miatti megbírságolás elkerülését. Az ágens rendelkezésére álló információ ezen kimenetelek közül egyiket sem szavatolja az A[90 ]esetén, de bizonyos mértékű hihetőségét nyújtja annak, hogy azok be fognak következni. Más tervek, mint például az A[120], megnövelné az ágens hitét abban, hogy időben kiérnek a repülőtérre, de egyben megnövelné a hosszú várakozás valószínűségét is. A helyes cselekedet – az ésszerű döntés (rational decision) – ezért függ mind a különböző célok viszonylagos fontosságától, mind pedig a megvalósulásuk valószínűségétől és mértékétől. Az alfejezet hátralevő részében ezeket a gondolatokat szeretnénk hangsúlyozni, előkészítvén az ebben és a következő fejezetekben bemutatott bizonytalan következtetés és az ésszerű döntés általános elméleteinek a kifejlesztését.
4	0.5	0	A hegymászó keresés, amely soha nem indul „lefelé a lejtőn” a kisebb értékű (vagy nagyobb költségű) állapotok felé, garantáltan nem teljes, mert egy lokális maximumban beragadhat. Ezzel ellentétben a tisztán véletlen vándorlás – azaz a követők halmazából egyenletesen véletlen módon sorsolt követőre való átlépés – teljes, de hihetetlenül nem hatékony. Értelmes dolognak tűnik a hegymászás és a véletlen vándorlás valamiféle ötvözése, hogy mind a teljességet, mind a hatékonyságot megtarthassuk. Egy ilyen algoritmus a szimulált lehűtés (simulated annealing). A kohászatban a lehűtés (annealing) a fémeket, illetve az üveget edző, keményítő folyamat, amikor azokat magas hőmérsékletre felmelegítjük, majd fokozatosan lehűtjük, lehetővé téve, hogy az anyag alacsony energiájú kristályos állapotba kerüljön. Hogy a szimulált lehűtést megértsük, a hegymászásról térjünk át a gradiens leereszkedésre (gradient descent) (azaz a költség minimalizálására), és képzeljük el, hogy az a feladatunk, hogy egy hepehupás asztalon egy pingponglabdát a legmélyebb szakadékba juttassunk. Ha a labdát gurulni hagyjuk, egy lokális minimumba kerül. Ha a felületet megrázzuk, a labdát kiugraszthatjuk a lokális minimumból. A trükk az, hogy olyan erősen kell megrázni a felületet, hogy a labda a lokális minimumból kikerüljön, de mégsem annyira erősen, hogy a labda a globális minimumból kiugorjon. A szimulált lehűtés olyan megoldás, hogy először erősen rázunk (azaz egy magas hőmérsékleten), majd fokozatosan csökkentjük a rázás intenzitását (vagyis csökkentjük a hőmérsékletet).
15	0.666667	0	Megmutatjuk, hogy ez az algoritmus konzisztens – így helyes valószínűségeket ad, ahogy N a végtelenbe tart – meggondolva, hogy mi történik egy frissítési ciklus alatt. Feltesszük, hogy a mintapopuláció a t időpontbeli f[1:t] előre üzenet egy helyes reprezentációjaként indul. Az N(x[t]|e[1:t]) jelölést használva azon minták számára, amelyek az e[1:t] megfigyelések feldolgozása után az x[t] állapotban vannak, azt kapjuk, hogy
15	0.111111	0	 ábra - Az esernyős világot leíró Bayes-hálóstruktúra és feltételes eloszlások. Az álapotátmenet-modell a P(Eső[t]|Eső[t–1)] feltételes valószínűség-eloszlás, az érzékelő modell a P(Esernyőt[t]|Eső[t]). Az esernyős világot leíró Bayes-hálóstruktúra és feltételes eloszlások. Az álapotátmenet-modell a P(Esőt|Esőt–1) feltételes valószínűség-eloszlás, az érzékelő modell a P(Esernyőtt|Esőt).
13	0.954545	0	(A (Pearl, 1988)-ból átvéve.) Képzeljük el, hogy Ön egy éjszakai taxis cserbenhagyásos baleset tanúja Athénban. Athénban minden taxi kék vagy zöld. Ön azt vallja eskü alatt, hogy a taxi kék volt. Egy széles körű vizsgálat azt mutatja, hogy ilyen gyenge fényben a kék és zöld szín közötti tévesztés valószínűsége 75%. Kiszámítható-e, hogy milyen színű taxi volt a legvalószínűbb? (Segítség: gondosan különböztessük meg azt az állítást, hogy a taxi kék, és azt, hogy a taxi kéknek tűnik.)
17	0.733333	0	Megmutatható, hogy e mellett a működési mód mellett a domináns stratégia mindegyik játékosnak a c[i] őszinte jelentése, illetve, hogy ennek megtétele a legolcsóbb utat fogja eredményezni. E kívánatos tulajdonság ellenére az itt vázolt működésmódot a gyakorlatban nem használják a nagy kommunikációs és központi számítási költség miatt. A működési mód tervezőnek kommunikálnia kell az összes n játékossal, és aztán egy optimalizációs problémát kell megoldania. Ez megérheti, ha a költségek eloszlanának sok üzenet felett, de valós hálózatokban a c[i] költségek folyamatosan változnának a forgalom torlódása, a gépek üzemképtelenné válása és belépése miatt. Eddig teljesen kielégítő megoldást még nem fejlesztettek ki.
18	0.368421	0	Ez megerősíti azt az intuíciónkat, hogy a Vendégek jobb attribútum a tanítóhalmaz részhalmazokra szabdalására, mint a Konyha. Az a helyzet, hogy a Vendégek attribútumnak van a legnagyobb információnyeresége, ezért a döntési fa tanuló algoritmus ennek tesztjét választaná a fa gyökércsomópontjába.
22	0.925926	1	A világ számos országában a technikai fejlődés eredményeként az orvosi dokumentációban a digitalizálás folyamata, annak minősége, biztonsága és hatékonysága miatt hihetetlen gyorsasággal terjed. Új lehetőséget jelenthet az orvosi dokumentáció megújítása és hatékonyságának a növelése területén a magyar nyelvű beszédfelismerő rendszer alkalmazása is. A SpeechMagic alkalmazása többféle működési formát tesz lehetővé, melyet az orvos egyénileg választhat meg:
15	0.222222	0	Az előre-hátra algoritmus alkotja a gerincét azon számítási módszereknek, amelyeket számos zajos megfigyelések sorozatával foglalkozó alkalmazásban használnak, a beszédfelismeréstől a repülőgépek radarkövetéséig. Ahogy leírtuk, két gyakorlati hátránya van. Az első, hogy a tárigénye túl nagy lehet azoknál az alkalmazásoknál, ahol az állapottér nagy, és a sorozatok hosszúak, mivel O(|f|t) méretű tárat használ, ahol |f| az előrefelé üzenet reprezentációjának a mérete. A tárigény O(|f|log t)-re csökkenthető az időkomplexitásnak egy log t tényezővel történő egyidejű megnövelése árán, ahogy a  feladat mutatja. Bizonyos esetekben (lásd  alfejezet) egy állandó tárigényű algoritmus használható időbüntetés nélkül.
3	0.25	1	Egy lehetséges megoldás lépései: * A (2,5) és (1,5) egyenletek különbségéből következik, hogy x[36]=1, azaz (3,6) biztosan akna. * Az (5,5) és (5,4) egyenletek különbségéből következik, hogy x[46]+x[56]=0, és mivel minden változó pozitív, következik, hogy (4,6) és (5,6) biztonságos. * A (3,3) egyenletből következik, hogy (4,2) biztosan akna. * A (3,2) és (3,3) egyenletek különbségéből következik, hogy x[41]=0, azaz (4,1) biztonságos. * A (4,3) és (3,3) egyenletek különbségéből következik, hogy x[52]=0, azaz (5,2) biztonságos. * Tudjuk, hogy x[46]=0 és x[36]=1, így a (3,5) egyenlet alapján következik, hogy x[26]=1, azaz (2,6) biztosan akna. * Az előző pontból és az (1,5) egyenletből következik, hogy x[16]=0, azaz (1,6) biztonságos.
12	0.857143	0	Ez a fejezet a valódi világban alkalmazott tervkészítés és cselekvés nehézségeivel foglalkozott. Összefoglaljuk a fő megállapításokat. * A legtöbb cselekvés erőforrásokat (resources) használ, például pénzt, benzint vagy nyersanyagokat. Ezen erőforrásokat készletekre vonatkozó mérőszámokként célszerű kezelni, mintsem hogy megpróbáljunk következtetni mondjuk a világ minden egyes pénzérméjéről és papírpénzéről. A cselekvések generálhatnak és elfogyaszthatnak erőforrásokat, és rendszerint olcsó és hatékony, ha a további finomítások végrehajtása előtt a részleges terveket ellenőrizzük, hogy az erőforrásokra vonatozó korlátozásokat kielégítik-e. * Az idő az egyik legfontosabb erőforrás. Ez speciális ütemező algoritmusokkal kezelhető, vagy az ütemezést integrálhatjuk a tervkészítésbe. * A hierarchikus feladat háló (hierarchical task network) (HFH) tervkészítés lehetővé teszi az ágens számára, hogy dekompozíciós szabályok formájában tanácsokat fogadjon el a feladatkör tervezőjétől. Ez lehetővé teszi, hogy nagyon nagy terveket készítsünk, amelyekre számos valódivilág-beli alkalmazáshoz szükség van. * A hagyományos tervkészítő algoritmusok teljes és helyes információt és determinisztikus, teljesen megfigyelhető környezetet feltételeznek. A legtöbb problémakörre nem igaz ez a feltételezés. * A hiányos információ kezelhető azáltal, hogy érzékelő cselekvéseket tervezünk, amelyekkel megszerezzük a szükséges információt. A feltételes tervek (conditional plans) lehetővé teszik az ágens számára, hogy a végrehajtás során érzékelje a környezetét, hogy eldönthesse, mely ágát követi a tervnek. Néhány esetben érzékelőmentes (sensorless) vagy alkalmazkodó tervkészítés (conformant planning) használható az érzékelést nem igénylő terv elkészítéséhez. Mind az érzékelőmentes, mind pedig a feltételes tervek előállíthatók a hiedelmi állapotok (belief states) terében történő kereséssel. * A helytelen információk kielégítetlen előfeltételeket eredményeznek a cselekvések és a tervek számára. A végrehajtás-monitorozás (execution monitoring) a terv sikeres befejezése érdekében érzékeli az előfeltételek megszegéseit. * Az újratervező ágens (replanning agent) végrehajtás-monitorozást használ és szükség esetén javításokat szúr be. * A folytonos tervkészítő (continuous planning) ágens előrehaladása során új célokat alkot és valós időben reagál. * Multiágens (multiagent) tervezésre van szükség, amikor a környezetben más ágensek is találhatók, melyekkel együttműködni vagy versengeni kell, vagy amelyeket koordinálni kell. A többtestű (multibody) tervkészítés az együttes cselekvésleírások hatékony dekompozícióját felhasználva együttes terveket alkot, de ki kell egészíteni valamilyen koordinációval, amennyiben két együttműködő ágensnek egyet kell érteni abban, hogy melyik együttes tervet hajtsák végre.
3	0.291667	0	Ezen definíciók felhasználásával az általános fakeresési algoritmus egy formálisabb definícióját adhatjuk meg. Ezt a  ábra mutatja.  ábra - Az általános fakeresési algoritmus. (Vegyük észre, hogy a perem argumentumnak egy üres sornak kell lennie, és a sor típusa befolyással lesz a keresés sorrendjére.) A Megoldás függvény a szülőmutatók gyökérig való követésével kinyert cselekvéssorozatot adja vissza. Az általános fakeresési algoritmus. (Vegyük észre, hogy a perem argumentumnak egy üres sornak kell lennie, és a sor típusa befolyással lesz a keresés sorrendjére.) A Megoldás függvény a szülőmutatók gyökérig való követésével kinyert cselekvéssorozatot adja vissza.
24	0.625	0	A vonalas ábrában rejlő kvalitatív tudással fogunk foglalkozni. Korábban láttuk, hogy a rajz vonalainak különféle lehet a fontossága (lásd  ábra és kísérőszövege). Az a folyamat, ahogy a kép minden vonalának a tényleges fontosságát megállapítjuk, a vonalcímkézés (line labeling), és ez volt a számítógépes látás által elsőként tanulmányozott problémák egyike. Tegyük fel egyelőre, hogy a világ olyan leegyszerűsített modelljével dolgozunk, ahol a tárgyaknak nincsenek felületei, és ahol az olyan vonalakat, amelyek megvilágítási diszkontinuitásokból adódnak, mint amilyenek az árnyékélek és a tükrözések, valamilyen előfeldolgozó eljárással a képből kiemeltük. A figyelmünket így olyan vonalas ábrákra összpontosíthatjuk, ahol minden vonal vagy mélységi, vagy orientáció diszkontinuitáshoz tartozik.
24	0.75	1	Az élek keresése gyakran a nagy abszolútértékű gradiensük alapján történik. Alapvető elvárás, hogy a végeredményként előálló képen egy él legyen nagymértékben összefüggő. A kapott pontatlan eredményeket ennek alapján javítani lehet előzetes információ felhasználásával, például érdemes lehet összefüggővé tenni a hiányos éleket, illetve simítani az eredményt. Az élek a képen lévő információt veszteségesen tömörítik, hiszen a homogén területekről elveszítjük az információt, de egy bizonyos szemszögből kiemelik a lényeget, a struktúráról „könnyebben emészthető” információt szolgáltatnak.
27	0.6	0	A négy lehetőség közül, úgy tűnik, a „korlátozott optimalitás” választása adja a legtöbb esélyt az MI erős elméleti megalapozására. Megvan az az előnye, hogy elérhető: mindig van legalább egy legjobb program – a tökéletes racionalitásról ugyanez nem mondható el. A korlátozottan optimalitás ágensek hasznosak a mindennapi gyakorlatban is, a számítható racionalitású ágensek általában nem, míg az elfogadhatóságra törekvő ágenseknél ez a szeszélyeiken múlik.
6	0.3	0	β = az út mentén tetszőleges döntési pontban a min számára eddig megtalált legjobb (azaz a legkisebb értékű) választás értéke.  ábra - Az optimális döntés kiszámításának lépései a  ábrán látható játékfa esetén. Minden ponton a lehetséges értékek terjedelmét mutatjuk meg minden egyes csomópont számára. (a) A B csomópont alatt az első levélnek 3 az értéke. B tehát, ami egy min csomópont, legfeljebb 3 értékű. (b) A B alatti második csomópontnak 12 az értéke. min ezt a lépést elkerüli, így B értéke még mindig legfeljebb 3. (c) A B alatti harmadik levélnek 8 az értéke. B összes követőit láttuk már, B értéke tehát pontosan 3. Most azt következtethetjük ki, hogy a gyökér értéke legalább 3, mert max-nak a gyökérben 3-as értékű választása van. (d) A C alatti első levélnek 2 az értéke. C tehát, ami egy min csomópont, legfeljebb 2 értékű. De mi tudjuk már, hogy B-nek 3 az értéke, max tehát C-t soha nem fogja választani. Azért nem is érdemes C további követőit megvizsgálni. Ez az alfa-béta nyesés egy példája. (e) A D alatti első levélnek 14 az értéke, így D értéke legfeljebb 14. Ez több mint max legjobb alternatívája (azaz 3), meg kell vizsgálni ezért D követőit. Jegyezzük meg, hogy most a gyökér minden követője esetén rendelkezünk értékkorláttal, a gyökér értéke legfeljebb 14. (f) D második követőjének értéke 5, így tovább kell folytatnunk a vizsgálatot. A harmadik követő értéke 2, D értéke tehát pontosan 2. max döntése a gyökérnél, hogy B felé kell lépni, 3-as értékkel. Az optimális döntés kiszámításának lépései a  ábrán látható játékfa esetén. Minden ponton a lehetséges értékek terjedelmét mutatjuk meg minden egyes csomópont számára. (a) A B csomópont alatt az első levélnek 3 az értéke. B tehát, ami egy min csomópont, legfeljebb 3 értékű. (b) A B alatti második csomópontnak 12 az értéke. min ezt a lépést elkerüli, így B értéke még mindig legfeljebb 3. (c) A B alatti harmadik levélnek 8 az értéke. B összes követőit láttuk már, B értéke tehát pontosan 3. Most azt következtethetjük ki, hogy a gyökér értéke legalább 3, mert max-nak a gyökérben 3-as értékű választása van. (d) A C alatti első levélnek 2 az értéke. C tehát, ami egy min csomópont, legfeljebb 2 értékű. De mi tudjuk már, hogy B-nek 3 az értéke, max tehát C-t soha nem fogja választani. Azért nem is érdemes C további követőit megvizsgálni. Ez az alfa-béta nyesés egy példája. (e) A D alatti első levélnek 14 az értéke, így D értéke legfeljebb 14. Ez több mint max legjobb alternatívája (azaz 3), meg kell vizsgálni ezért D követőit. Jegyezzük meg, hogy most a gyökér minden követője esetén rendelkezünk értékkorláttal, a gyökér értéke legfeljebb 14. (f) D második követőjének értéke 5, így tovább kell folytatnunk a vizsgálatot. A harmadik követő értéke 2, D értéke tehát pontosan 2. max döntése a gyökérnél, hogy B felé kell lépni, 3-as értékkel.
1	0.103448	1	A mesterséges intelligencia kapcsán állandóan előkerül az ontológia kifejezés. Mit is jelent az ontológia? Szó szerint léttudományt jelent. Az ontológia a filozófia azon része, amely a léttel foglalkozik, annak legalapvetőbb törvényszerűségeivel. Arisztotelész mesterével ellentétben a létezőt az anyagi világban jelölte meg, nem az ideák világában. Négy létezőről beszélt, a földről, a vízről, a tűzről és a levegőről. Arisztotelész különbséget tett még a változó és az örök létezők között. Ellenállhatatlan a késztetés, hogy kijelentsük, Arisztotelész nélkül nem lenne mit leképeznünk, meghatároznunk gépeink gondolkodásához, viselkedésének szabályozásához. Alapvető fogalmainkat a logikáról ő alkotta meg. A logikában bármi fogalom, amiről állítás hozható létre. Ontológiákat az ágensek vonatkozásában a tudás és az ismeretanyagok megosztására használják a mesterséges intelligencia területén belül, elosztott tudást, információhalmazt jelölnek. Ezen információk fogalmakról készülnek. Fogalmak és viszonyok kapcsolatát vizsgálja, milyen összefüggések találhatóak közöttük. Ezek az összerendelések egy szótárban találhatóak meg. A közös szókészlet segítségével egységes fogalomkör alakulhat ki az ágensek között. Ontológia az ágensek ezen irányú kommunikációja során kialakult tartomány, modell meghatározása, relációk és objektumok definiálása. Ezek a definíciók logikai kalkulusokkal, pl. ítéletkalkulus vagy predikátumkalkulus segítségével írhatóak le attól függően, hogy ítéletlogika vagy elsőrendű logika kerül használatra. Következtetési szabályok, lépések segítségével látható be igazságtartalmuk, erre lesznek alkalmasak Arisztotelész szillogizmusai.
10	0.30303	0	Követő állapot axiómák a reprezentációs keretproblémát ugyan megoldják, de a következtetési keretproblémát nem. Tekintsünk egy olyan t-lépésű p tervet, hogy S[t] = Eredmény(p, S[0]). Hogy eldönthessük, mely folyó esemény igaz S[t]-ben, szükséges minden egyes F keretaxiómát minden t időlépésben kiértékelni. Mivel az axiómáknak átlagosan AE / F a nagyságuk, O(AEt) következtetéssel kell számolnunk. A munka zöme rá fog menni arra, hogy a folyó eseményeket az egyik szituációról a másikra változatlanul másoljuk át.
25	0.074074	1	A mai sebészeti instrumentárium a következő eszközökből áll: csipeszek, tűfogó, monopoláris és bipoláris elektrokauterek, szike és így tovább, melyek 5, illetve 8 mm-es átmérővel készülnek. Ezek használatának számát egy számítógépes program tartja nyilván, és nem engedélyez csak 10 használatot, ami tovább növeli a robotsebészet költségeit. A sebészi munkaállomásnál lábpedálok is vannak, amelyekkel lehet a kamerát fókuszálni vagy elektrokauterizálni.
15	0.740741	0	A példánkban csupán három jeggyel rendelkező keretet mutattunk. Valós rendszerek jellemzők tucatjaival vagy akár százaival dolgoznak. Például n darab jellemző esetén, amikor mindegyik 256 lehetséges értéket vehet fel, egy keret egy ponttal adható meg egy n-dimenziós térben, és 256^n lehetséges keret létezik. n > 2 esetén kivitelezhetetlen volna a P(jellemzők|beszédhang) eloszlásnak egy explicit táblázatként történő ábrázolása, így további tömörítésre van szükségünk. Két lehetséges megközelítés létezik: * A vektorkvantálás (VK) (vector quantization, VQ) módszere felosztja az n dimenziós teret mondjuk 256 partícióra, C1-től C256-ig címkézve. Ekkor az egyes kereteket inkább egy egyedi címkével, mint egy n számból álló vektorral lehet jellemezni. Így a P(VQ|beszédhang) eloszlás táblázatos formája 256 valószínűséget tartalmaz minden egyes beszédhangra. Nagy rendszerekben a vektorkvantálás már nem népszerű. * A jellemzők terének diszkretizálása helyett parametrikus folytonos eloszlásokat használhatunk a P(jellemzők|beszédhang) leírásához. Például használhatunk minden beszédhanghoz egy Gauss-eloszlást, beszédhangonként különböző átlaggal és kovarianciamátrixszal. Ez jól működik, ha az egyes beszédhangok akusztikus megvalósulása a jellemzők terében egyetlen területen csoportosul. A gyakorlatban egy hanghoz több területen való csoportosulás is tartozik, és Gauss-eloszlások keverékét (mixture of Gaussians) kell használni. Egy keverék k egyedi eloszlás súlyozott összege, így a P(jellemzők|beszédhang) eloszláshoz k súly, k n elemű átlagvektor és k n^2 méretű kovarianciamátrix tartozik, ami O(kn^2) paraméter minden beszédhangra.
5	0.454545	0	Magyarázatot kell most adnunk arra, hogy miként lehet kiszámítani ezeket az újfajta konfliktushalmazokat. A módszer valójában nagyon egyszerű. Egy keresési ág „terminálási” kudarca mindig azért következik be, mert egy változó tartománya kiürül, ennek a változónak pedig egy szokásos konfliktushalmaza van. Példánkban DA hiúsul meg, és konfliktushalmaza (mondjuk) az {NyA, ÚT, Q}. Visszaugrunk Q-ra, és Q beépíti saját közvetlen konfliktushalmazába (ami az {ÚT, ÚDW}) DA konfliktushalmazát (leszámítva persze Q-t magát), és így előáll az {NyA, ÚT, ÚDW} konfliktushalmaz. Azaz Q-tól számítva tovább már nincsen megoldás feltételezve {NyA, ÚT, ÚDW} korábbi hozzárendeléseit. Tehát visszalépünk ÚT-re, amelyik a legutóbbi ezek közül. ÚT felveszi {NyA, ÚT, ÚDW} – {ÚT}-t a saját közvetlen konfliktushalmazába, {NyA}-ba, és előáll az {NyA, ÚDW} konfliktushalmaz (ahogy az előző bekezdésben állítottuk). Foglaljuk össze az eddig mondottakat: jelölje X[j] az aktuális változót és conf(X[j]) a saját konfliktushalmazát. Ha X[j][ ]minden lehetséges értéke meghiúsul, ugorjunk vissza a conf(X[j])-beli legutolsó X[i] értékre és legyen
7	0.92	1	7.17 Kövesse a DPLL viselkedését a  ábrán leírt tudásbázison, amikor Q-t próbáljuk meg bebizonyítani, és hasonlítsa össze ezt a működést az előrefelé láncolási algoritmussal. * A szimbólumok a következők: A, B, L, M, P, Q. * Először is konjunktív normál formára hozzuk a tudásbázis állításait, hozzávéve a bizonyítandó állítást: * (¬P V Q) ^ (¬L V ¬M V P) ^ (¬B V ¬L V M) ^ (¬A V ¬P V L) ^ (¬A V ¬B V L) ^ (A) ^ (B) ^ (Q) * A modell kezdetben üres, azaz semelyik szimbólum értéke sem ismert. * Nincs hamis klóz, és nem minden klóz igaz, ezért nem áll le az algoritmus * A szimbólumok közül Q tiszta, mivel csak pozitív literálként fordul elő. Q-t hozzávesszük a modellhez, igaz értékkel. (Ez persze nem jelenti, hogy Q valóban igaz is! Azonban ha Q nem igaz, úgy ellentmondásra fogunk jutni, ami azt mutatja, hogy az eredeti állítás kielégíthetetlen.) * Egységszimbólum A és B. (Q is egységszimbólum, de már szerepel a modellben, így a szimbólumok listájáról lehúztuk!) Ezeket is felvesszük a modellbe, igaz értékkel. Ezután azonban a (¬A V ¬B V L) klózban ¬A és ¬B is hamis, tehát ez is egységklóz, így L is igaz. Felvesszük a modellbe. Ezt figyelembe véve (¬B V ¬L V M)-ben ¬B és ¬L is hamis, tehát az előzőhöz hasonlóan M igaz. Felvesszük a modellbe. Ezután (¬L V ¬M V P)-ből hasonlóan P igaz. Utolsó lépésben (¬P V Q)-ból Q igaz. Minden szimbólumnak értéket adtunk, találtunk tehát egy modellt az állításnak. Q tehát valóban következik az állításból. * Mint ahogy a  részben utalás is történt rá, Horn-klózokra a DPLL algoritmus pontosan követni fogja az előreláncolás viselkedését.
12	0.571429	0	Az ágens úgy dönt, hogy a nyitott feltételhez készít tervet. Újra a Mozgat(C, D) elégíti ki a célfeltételt. Ennek előfeltételeit az Indít lépésből induló új okozati kapcsolatok teljesítik. Az új tervet a  ábra mutatja.  ábra - A Mozgat(C, D) által létrehozott kapcsolatot helyettesítettük az Indít kapcsolatával, a most már redundáns Mozgat(D, B) lépést pedig elhagytuk A Mozgat(C, D) által létrehozott kapcsolatot helyettesítettük az Indít kapcsolatával, a most már redundáns Mozgat(D, B) lépést pedig elhagytuk  ábra - A Mozgat(C, D) végrehajtása és a tervből való eltávolítása után az Indít lépés következményei azt a tényt tükrözik, hogy a C a várt D helyett az A kockára került. A Rajta(C, D) cél előfeltétel még minding nyitott. A Mozgat(C, D) végrehajtása és a tervből való eltávolítása után az Indít lépés következményei azt a tényt tükrözik, hogy a C a várt D helyett az A kockára került. A Rajta(C, D) cél előfeltétel még minding nyitott.  ábra - A nyitott előfeltételt a Mozgat(C, D) ismételt hozzáadásával oldjuk fel. Vegyük észre az előfeltételekhez szükséges új kapcsolatokat. A nyitott előfeltételt a Mozgat(C, D) ismételt hozzáadásával oldjuk fel. Vegyük észre az előfeltételekhez szükséges új kapcsolatokat.
5	0.181818	1	Lássuk: az algoritmus az eddigi behelyettesítéssel rekurzíve meghívja önmagát, és ott kiválasztja a következő, a kapott behelyettesítés szerint még be nem helyettesített változót. Tegyük fel, hogy ez a változó most a V. Ekkor tehát a V-hez kezdünk el értékeket hozzárendelni a rekurzió jelenlegi, legmélyebb szintjén, a FOR ciklusban. Az első érték az eddigieknek megfelelően legyen a RED, azaz a V változó elsőként a RED értéket kapja (V=RED).
25	0.074074	1	A robot pontos definícióját ugyan nem határozzuk meg, de a kifejezésen olyan objektumokat (robotkarokat, mobilrobotokat, sőt, akár szoftver-robotokat) értünk majd, amelyekre jellemző az önálló tevékenység, általában a mozgás, és az, hogy tevékenységüket kisebb vagy nagyobb részben önállóan irányítják. Ha nem erre a talán többé vagy kevésbé intelligenciát tükröző minőségre, hanem – leginkább a robotkarok esetében – csak a fizikai konstrukcióra, szerkezetre fordítjuk a figyelmünket, akkor a manipulátor, vagy manipulátorkar kifejezést fogjuk használni.
5	0.818182	1	Trenáris kényszerek kiküszöbölése: Legyen tehát a trenáris kényszer három változója A, B és C. Vezessünk be annyi új változót, amennyi értéke lehet C-nek (ez véges sok) úgy, hogy egy C[i]-hez tartozó változó értékei (a,b) rendezett párok, azaz az A illetve B változó értékkészletéből választott elemek úgy, hogy bármely C[i]-hez bevezetett változó esetén (a,b,C[i]) teljesítse a fenti trenáris kényszert! A változókat jelölje S(C). Ezek után vezessünk be olyan új kényszereket, hogy A egyenlő S(C)1 (azaz A az S(C) változó első eleme) illetve B egyenlő S(C)2 (azaz B az S(C) változó második eleme). Az eredmény ekvivalens lesz a kiindulási rendszerrel, de nem tartalmaz trenáris kényszereket.
1	0.068966	1	A mesterséges intelligenciát legjobban érintő alkalmazása a sejtautomatáknak a CBM vagy CAM-Brain Machine. Ez egy hardverarchitektúra, amely képes valós időben több millió neuront tartalmazó neurális hálózatokat szimulálni [PCB].
25	0.925926	0	A mobil robotokhoz kapcsolódó kutatások szimulálásának az elmúlt évtizedben két jelentős verseny is teret adott. Az AAAI éves robotbajnokságát 1992 óta rendezik meg. Az első verseny győztese a Carmel volt (Congdon és társai, 1992). A fejlődés azóta igen jelentős és töretlen: a 2002-es verseny során például a robotoknak be kellett járniuk a konferenciaközpontot, megtalálni a regisztrációs pultot, regisztrálni a konferenciára, és végül tartani egy beszédet. Az 1995-ben, Kitano és kollégái (Kitano és társai, 1997) által elindított Robocup kezdeményezés célja, hogy 2050-re olyan teljesen autonóm humanoid robotokból álló futballcsapatot fejlesszen, „amely képes megverni az aktuális emberi világbajnokcsapatot”. Különböző bajnokságokat szerveznek kerekes, eltérő méretű, szimulált robotoknak és négylábú Sony Aibóknak. 2002-ben a világbajnokságra több mint 30 országból érkeztek csapatok, és a rendezvény legalább 100 000 nézőt vonzott.
13	0.181818	0	A  ábra egy, a cselekvései kiválasztásához döntéselméleti módszereket alkalmazó ágens felépítését mutatja. Egy absztrakt szinten az ágens megegyezik a  fejezetben leírt logikai ágens felépítésével. Az elsődleges különbség közöttük az, hogy a döntéselméleti ágens pillanatnyi állapotra vonatkozó tudása bizonytalan; az ágens meggyőződési vagy hiedelemállapota (belief state) a világ összes lehetséges aktuális állapotainak a valószínűségeit megjeleníti. Az idő előrehaladtával az ágens egyre több tényt gyűjt össze, és meggyőződési állapota is változik. Adott meggyőződési állapotra alapozva az ágens valószínűségi becsléseket tud adni az egyes cselekedetek kimeneteleire vonatkozóan, következésképpen ki tudja választani a legnagyobb várható hasznossággal bíró lépést. Ez és a következő fejezet a valószínűségi információ általános megjelenítésére és az azon alapuló számításokra összpontosít. A  fejezet a meggyőződési állapot reprezentálásának és aktualizálásának, valamint a környezet becslésének speciális módszereivel foglalkozik. A  fejezet a hasznosságelméletet taglalja mélységeiben, míg a  fejezetben a komplex döntések módszereit építjük fel.  ábra - Döntéselméleti ágens, amely racionális cselekvéseket választ ki. A lépéseket a következő öt fejezetben részletezzük. Döntéselméleti ágens, amely racionális cselekvéseket választ ki. A lépéseket a következő öt fejezetben részletezzük.
5	0.181818	0	A  fejezetben a nem informált keresési algoritmusok gyenge teljesítményét a probléma ismeretéből származó tárgyterület-specifikus heurisztika bevezetésével orvosoltuk. Az derül azonban ki, hogy a kényszerkielégítési problémák hatékonyan megoldhatók ilyen tárgyterület-specifikus tudás nélkül is. Olyan általános célú eljárások alakíthatók ki, amelyek az alábbi kérdéseket vizsgálják: 1. A következő lépésben melyik változóhoz rendeljünk értéket, és milyen sorrendben próbálkozzunk az értékekkel? 2. Milyen következményei vannak a jelenlegi változó-hozzárendeléseknek a még hozzárendeletlen változók számára? 3. Ha egy út sikertelennek bizonyul (azaz egy olyan állapothoz jutunk, ahol egy változónak nincs megengedhető értéke), a következő utak során el tudja-e kerülni a keresés ezt a hibát?
1	0.62069	0	Newell és Simon kezdeti sikerét az általános problémamegoldó program, a General Problem Solver, GPS követte. A Logic Theoristtal ellentétben ezt a programot eleve úgy tervezték, hogy az emberi problémamegoldás protokolljait imitálja. Az derült ki, hogy a program által kezelhető feladványok osztályán belül, a részcélok és a lehetséges cselekvések megfontolásának sorrendje tényleg hasonlított ahhoz, mint ahogy a hasonló problémákon dolgozó emberek cselekszenek. Így, a GPS volt talán az első, az „emberi módon gondolkodni” megközelítést megtestesítő program. A GPS és az azt követő programok sikere arra késztette Newellt és Simont (Newell és Simon, 1976), hogy megfogalmazzák híres fizikai szimbólumrendszer hipotézisüket (physical symbol system), amely azt állítja, hogy „a fizikai szimbólumrendszerek az általános intelligens cselekvés szükséges és elégséges eszközeivel rendelkeznek”. Arra gondoltak, hogy minden, intelligenciát felmutató rendszernek (legyen az ember vagy gép) képesnek kell lennie arra, hogy szimbólumokból álló adatstruktúrákat manipuláljon. Később látni fogjuk, hogy e hipotézist több irányból is megtámadták.
8	0.83871	0	Ez az utolsó lekérdezés egy teljes bemenet-kimenet táblázatot ad meg az eszközre, amelyet aztán ellenőrizhetünk, hogy valóban helyesen adja-e össze a bemeneteket. Ez egy egyszerű példa az áramkör ellenőrzésére (circuit verification). Az áramkör bemutatott definícióját nagyobb digitális rendszerek építésére is felhasználhatjuk, amelyekre aztán ugyanez a fajta ellenőrzési folyamat alkalmazható (lásd  feladat). Sok tárgyterület kezelhető egy ehhez hasonló strukturált tudásbázis-fejlesztéssel, amelyekben összetettebb koncepciókat határozunk meg egyszerűbb koncepciókra építve.
15	0.481481	0	Elsőként definiáljuk a Kalman-szűrésnél használt általános időbeli modellt. Mind az állapotátmenet-modell, mind az érzékelő modell lineáris transzformációt enged meg additív Gauss-zajjal. Így azt kapjuk, hogy
3	0.958333	0	 Megjegyzés Írjon egy olyan programot, amely bementként két weblap URL-jét kapja meg, és megoldásul megtalálja az azokat összekapcsoló hivatkozási utat (linkeket). Mi a megfelelő keresési stratégia? Jó ötlet-e a kétirányú keresés? Alkalmazható-e egy keresőgép az elődcsomópont függvény megvalósítására?
23	0.944444	0	(Knight, 1999) alapján. Az IBM Model 3 gépi fordító feltételezi, hogy miután a szóválasztási modell egy szólistát ajánl, a nyelvi modell képes kiválasztani a legjobb permutációt. Ez a feladat megvizsgálja, hogy mennyire értelmes ez a feltételezés. Próbálja meghatározni a következő mondatok szavainak helyes sorrendjét: a. have programming a seen never I language better b. loves john mary c. is the communication exchange of intentional information brought by about the production perception of and signs from drawn a of system signs conventional shared
25	0.074074	1	Az információkat vagy a szenzor és a mérendő test közötti kölcsönhatáson alapuló elv, vagy pedig a szenzorhoz kapcsolt közeg pillanatnyi jellemzői alapján kapjuk. A szenzorok struktúrája az alkalmazott mérőátalakítótól és a fizikai hatáselvtől függ.
15	0.518519	0	A Kalman-szűrés alkalmazhatóságának ténye egy rendszerre nem jelenti, hogy az eredmények érvényesek vagy hasznosak lesznek. A feltevések – lineáris Gauss-féle állapotátmenet-modell és érzékelő modell – igen erősek. A kiterjesztett Kalman-szűrő (KKSZ) (extended Kalman filter, EKF) megpróbál úrrá lenni a modellezett rendszer nemlineáris tulajdonságain. Egy rendszer nemlineáris, ha az állapotátmenet-modell nem írható le, mint az állapotvektor mátrixszorzata, ahogyan ez a   egyenletben szerepel. A KKSZ úgy működik, hogy rendszert x[t]-ben lokálisan lineárisként modellezi az x[t] = μ[t] környezetében, ahol μ[t] a jelenlegi állapoteloszlás átlaga. Ez jól működik „sima”, „jó magaviseletű” rendszereknél, és lehetővé teszi a követőnek, hogy egy olyan Gauss-állapoteloszlást tartson nyilván és frissítsen, ami elfogadható közelítése az igazi a posteriori eloszlásnak.
12	0.47619	0	ahol K jelentése „tudja” és K(P) jelentése, hogy az ágens tudja, hogy P igaz.^[129] A tudás ítéletállításokkal zárt világ feltételezést használunk, azaz ha egy állítás nem jelenik meg a listában, akkor hamisnak feltételezzük. Például a ¬K(TisztaBal) és a ¬K(¬TisztaBal) implicit szerepelnek a fenti mondatban, így az rögzíti a tényt, hogy az ágens érzéketlen a TisztaBal igazságértékére.
27	0.4	1	Az egyszerűség kedvéért tegyük fel, hogy minden esetben valamiféle számítógép áll a háttérben, és ez futtatja az adott programnyelven megírt ágens-programokat. Ekkor az előbb említett táblázatokban szereplő, adott problémával (probléma-környezettel) szembesülő ágensek akkor korlátozottan optimálisak, ha:
25	0.444444	1	Miután meghatároztuk a pályának azokat a sarokpontjait, amelyeket a manipulátor szerszámközéppontjának vagy a mobilrobotnak be kell járnia, a következő teendő, hogy a sarokpontok között megtervezzük a mozgást, ezt nevezik finom mozgástervezésnek.
11	0.461538	0	Összefoglalva, a tervkészítő bebizonyította, hogy az OtthagyÉjszakára nem használható fel kerékcserére. 5. Vegyük újra a Felszerel(Pótkerék, Tengely) cselekvés ¬Ott(LaposKerék, Tengely) előfeltételét. Ez alkalommal válasszuk az Eltávolít(LaposKerék, Tengely) cselekvést. 6. Vegyük újra az Eltávolít(Pótkerék, Csomagtartó) cselekvés Ott(Pótkerék, Csomagtartó) előfeltételét, és válasszuk az Indít cselekvést, hogy ezt elérjük. Ez alkalommal nincsenek ütközések. 7. Vegyük az Eltávolít(LaposKerék, Tengely cselekvés Ott(LaposKerék, Tengely) előfeltételét, valamint ennek eléréséhez az Indít cselekvést. Ez egy teljes és konzisztens tervet ad, vagy más szavakkal egy megoldást, amint azt a  ábra mutatja.
22	0.962963	0	Ez a gyakorlat nagyon egyszerű nyelvek nyelvtanaival foglalkozik. a. Írjon egy környezetfüggetlen nyelvtant az a^nb^n nyelv számára! b. Írjon egy környezetfüggetlen nyelvtant a tükörmondatok (palindroma) számára: az összes olyan füzérre, amelyek második fele épp az első fél tükörképe! c. Írjon egy környezetfüggő nyelvtant a duplázó nyelv számára: az összes olyan füzérre, amelyek második fele megegyezik az első felével.
20	0.178571	0	Itt a paraméterek θ[1], θ[2] és σ. Mint a  ábrán szemléltettük, az (x[j], y[j]) párok gyűjteménye adja az adatokat. A szokásos módszereket használva (lásd  feladat) megkaphatjuk a paraméterek maximum-likelihood értékeit. Itt most egy másik dolgot akarunk megmutatni. Vegyük csupán a θ[1] és θ[2] paramétereket, amelyek az x és y közti lineáris összefüggést definiálják! Nyilvánvaló, hogy a log likelihood ezen paraméterekkel történő maximalizálása azonos azzal, mintha a   kifejezésben a kitevő számlálóját minimalizálnánk:
21	0.9375	0	Induljon ki egy passzív ADP-ágensből, és módosítsa úgy, hogy a fejezetben leírt közelítő ADP-algoritmust kapja! Két lépésben oldja meg a feladatot: a. Építsen fel egy prioritássort a hasznosságbecslések módosítására! Valahányszor állapotmódosításra kerül, az őt megelőző állapotok is potenciálisan módosítandók, tehát be kell állítani őket a sorba. A sor inicializálását annak az állapotnak a felhasználásával végezzük, amelyből a legutolsó átmenet történt. Csak rögzített számú módosítást engedjen meg! b. Kísérletezzen a prioritássor rendezésének különböző heurisztikáival, vizsgálja meg a tanulás sebességére és a számítási időre gyakorolt hatásukat!
15	0.111111	0	Egy adott problémánál az állapotváltozók és a bizonyítékváltozók halmazának meghatározása után a következő lépés a változók közötti függőségek megadása. Követhetnénk a  fejezetben megállapított eljárást, valahogyan sorrendezve a változókat, és kérdéseket feltéve az elődöktől való feltételes függetlenségre, adott szülői halmaz esetén. Egy nyilvánvaló választás, hogy a változókat a természetes idősorrendjük szerint sorrendezzük, mivel az ok általában megelőzi a hatást, és a változókat lehetőleg az ok-okozati sorrendjük szerint vesszük.
17	0.4	0	 Fontos Ezzel a definícióval, a két vektor közötti „távolság” ||U – U′|| az összetartozó elemek közötti különbségek maximuma. Az alfejezet fő eredménye a következő: Legyen U[i] és két tetszőleges hasznosságvektor. Ekkor
8	0.258065	0	Egyszerűen a ∀x P mondat, ahol a P egy tetszőleges logikai kifejezés, azt mondja ki, hogy a P igaz minden x objektumra. Pontosabban, ∀x P igaz egy adott modellre az interpretáción belül, ha P igaz minden lehetséges kiterjesztett interpretációban (extended interpretations), amelyet az adott interpretáció felhasználásával hozunk létre, ahol minden egyes kiterjesztett interpretáció meghatároz egy tárgyterületelemet, amire az x vonatkozik.
2	0.210526	1	Az ideális racionális ágens (ideal rational agent) minden egyes észlelési sorozathoz a meglévő tudása alapján mindent megtesz a teljesítményérték maximalizálásáért. Ebből nem következik az, hogy az ideálisan racionális ágens úgy dönthet, hogy nem nézi meg a menetrendet, és hiányos észlelései alapján kimegy a pályaudvarra (amúgy teljesen racionálisan, hiszen tudja, hogy a vonat a pályaudvarról indul). A racionalitásba ugyanis beletartozik a hasznos információk felkutatására szánt cselekedetek megválasztása is. Könnyen belátható, hogy ez megemelheti a végül adódó teljesítményértéket, így adott esetben az informálódás maga a racionális cselekedet [2]. Mindezek mellett természetesen előfordulhat, hogy a példabeli, racionálisan informálódó ember csalódottan hazamegy, ám öt perccel a távozása után a vasúttársaság mégis indítja a járatot. Ugyanakkor nagyszámú esetet vizsgálva mégis egyértelműen adódik, hogy az egészséges mértékű informálódás emeli az elérhető teljesítményt. Eldöntendő kérdés tehát, hogy mi is az az információ, ami hasznos, és az informálódásnak mennyi az egészséges mértéke. Itt érdemes megemlíteni, hogy a racionalitásnak két nagy alkategóriáját tudjuk megkülönböztetni: a szubsztanciális illetve a procedurális racionalitást. Míg a szubsztanciális racionalitás azzal foglalkozik, hogy melyik döntést kéne meghozni, addig a procedurális racionalitás arra vonatkozik, hogy a döntést hogyan kéne meghozni, természetesen mindvégig a teljesítmény maximalizálásának célját szem előtt tartva [1].
24	0.833333	1	A sarokpont detektálásra használt Harris detektor affin transzformációra (átméretezés, forgatás, nyírás) invariáns változata. Foltokat és kulcspontokat lehet vele megkeresni. Az algoritmus a Harris corner detektor több skálás változatát, a Harris-Laplace detektort alkalmazza. A karakterisztikus skálát – a mérettartomány, ahol a folt a leghangsúlyosabb – iteratívan határozza meg egy LoG szűrő segítségével. Az affin transzformációra való invarianciát egy speciális normalizálással éri el.
6	0.1	1	A játék domináns egyensúlya tehát, amit a dominált stratégiák iterált eliminációjával megtaláltunk, a (v,y) stratégia-kombináció. Láthattuk, hogy a vázolt algoritmus nem feltétlen determinált, hiszen néhol több választásunk is van, és a különböző választások hatására nem biztos, hogy végül ugyanoda lyukadunk ki). Ebben az esetben azonban az eliminációk sorrendjétől függetlenül mindig ugyanoda jutnánk. Megállapíthatjuk továbbá, hogy - mivel a domináns egyensúly egyben Nash-egyensúly is - megtaláltuk a játék egy Nash-egyensúlyát is. Ez egyébként az egyetlen Nash-egyensúlya ennek a játéknak.
6	0.05	0	A  fejezetben többágenses környezeteket (multiagent environments) vezettünk be, ahol minden ágensnek számolnia kell más ágensek cselekvéseivel és azzal is, hogy azok hogyan befolyásolják a jólétét. Más ágensek nem megjósolható viselkedése számos lehetséges eshetőséget (contingencies) visz be az ágens problémamegoldásába, ahogy ezzel a  fejezetben foglalkoztunk. A  fejezetben bevezettük a több ágensből álló kooperatív (cooperative) és verseny- (competitive) környezeteket is. A versenykörnyezetek, ahol az ágensek céljai konfliktusban vannak, elvezetnek az ellenségek melletti kereséshez (adversarial search) – amit sokszor kétszemélyes játékoknak (games) nevezünk.
5	0.181818	1	A jelen szakaszban egyelőre tisztán, önmagában szerettük volna bemutatni az előretekintést, mint lehetséges következtetési, korlát-propagációs módszert, amellyel a sima visszalépéses keresés kiegészíthető. A következő szakaszban viszont, az eddigiekből okulva, egy hozzá még a fokszám heurisztikánál is jobban illeszkedő heurisztikával egészítjük ki: a legkevesebb megmaradó érték (MRV) heurisztikával.
24	0.416667	0	Ebben az alfejezetben azt mutatjuk meg, hogyan kell a kétdimenziós képből kiindulva a jelenet háromdimenziós reprezentációjáig eljutni. Fontos, hogy a jelenettel foglalkozzunk, hiszen végső soron az ágens a világban létezik, nem a képsíkon, a látás célja pedig annak elérése, hogy az ágens a világ objektumaival együttműködjön. Mindazonáltal az ágensek többségének csak a jelenet egyes aspektusainak korlátozott absztrakt reprezentációjára van szüksége, nem minden részletre. A könyv hátralevő részében látható, a világgal foglalkozó algoritmusok az objektumok tömör leírására építenek, nem minden háromdimenziós felületdarabka kimerítően teljes számbavételére.
6	0.1	1	A játékok struktúrájának fentebb bemutatott kiegészítése nyilván következményekkel jár: bizonyos fokig át kell értékelnünk a stratégiák, illetve hasznok, és ennek megfelelően egyensúlyok fogalmát is. Nézzük sorban!
5	0.181818	1	Az algoritmus tehát még további, a Q változót nem tartalmazó behelyettesítéssel potenciálisan konzisztens értéket keres a Q változó számára. Q-nak már csak egyetlen értéke maradt, amit még nem vizsgáltunk: a BLUE (Q=BLUE).
20	0.857143	0	Kifejlesztettek egy egy-rejtett-rétegű neurális hálót (single-hidden-layer neural network) a feladatra, 400 bemenettel (egy bemenet pixelenként) és 10 kimenettel (osztályonként egy). Keresztvalidációt használva azt találták, hogy durván 300 rejtett neuron adta a legjobb teljesítményt. A rétegek között teljes összeköttetést valósítottak meg, így összesen 123 300 súlyt használtak. Ez a háló 1,6% hibaarányt ért el.
7	0.44	0	A rezolúciós szabály helyessége egyszerűen belátható, ha megvizsgáljuk az l[i] literált. Ha l[i] igaz, akkor m[j ]hamis, és így m[1] ∨…∨ m[j–l]∨ m[j+l] ∨…∨ m[n]-nek igaznak kell lennie, mert m[1] ∨…∨ m[n] adott. Ha ℓ[i] hamis, akkor ℓ[1] ∨…∨ ℓ[i–l] ∨ ℓ[i+l] ∨…∨ ℓ[k] igaz kell, hogy legyen, mivel ℓ[i] ∨…∨ ℓ[k ]adott. Így ℓ[i] akár igaz, akár hamis, az egyik vagy a másik konklúzió áll, pontosan úgy, ahogy a szabály ezt kimondja. Fontos Ami még meglepőbb a rezolúciós szabállyal kapcsolatban, hogy a rezolúció alapjául szolgál teljes következtetési algoritmusok egy családjának. Bármely keresési algoritmus, a rezolúciós szabályt alkalmazva, az ítéletlogikában képes levezetni bármilyen konklúziót, amely vonzata a tudásbázisnak. Egy figyelmeztetés: a rezolúció csak egy speciális értelemben teljes. Ha adott, hogy A igaz, akkor nem tudjuk a rezolúciót arra használni, hogy levezessük az A ∨ B konzekvenciát. Azonban tudjuk arra használni a rezolúciót, hogy megválaszoljuk azt a kérdést, hogy A ∨ B igaz-e. Ezt megcáfolási teljességnek (refutation completeness) nevezik, ami azt jelenti, hogy a rezolúció mindig használható arra, hogy megerősítsünk vagy megcáfoljunk egy mondatot, de nem alkalmazható az igaz mondatok felsorolására. A következő két alfejezet azt magyarázza el, hogy a rezolúció hogyan oldja ezt meg.
21	0.125	1	A bizonytalansági mintavételezés alapgondolata az, hogy a rendszer olyan lekérdezést választ címkézésre, amelynek címkézésében valamilyen mérték alapján a tanulórendszer a legkevésbé biztos. Négy megoldás terjedt el: 1. Bináris osztályozás esetén a legegyszerűbb azt a mintát választani, melyhez tartozó címkék feltételes valószínűsége 0.5 közeli, ezzel meghatározva egy bizonytalan minta valódi címkéjét
6	0.1	1	Az előbbi kérdésre (is) adott választ Neumann János 1928-ban publikált, korszakalkotó elgondolása: a kevert stratégia. Tegyük fel, hogy immár stratégiánk nem csak a játék normál alakjában szereplő valamelyik „tiszta” cselekvési alternatíva lehet, hanem az alternatívák kiválasztását immár randomizálhatjuk is, azaz pl. fentebb adott valószínűséggel játszhatjuk a Fej, vagy az Írás stratégiát!
5	0.090909	0	A kényszerkielégítési problémák (angol rövidítéssel CSP) formális definícióját változók (variables), X[1], X[2], …, X[n], és kényszerek (constraints), C[1], C[2], …, C[m] halmazaival adhatjuk meg. Minden egyes X[i][ ]változó esetén adott a lehetséges értékek egy nem-üres D[i ]tartománya. Minden egyes C[i] kényszer a változók valamely részhalmazára vonatkozik, és meghatározza a részhalmaz megengedett értékkombinációit. Egy problémaállapotot az definiál, hogy vagy néhány, vagy mindegyik változóhoz értékeket rendelünk hozzá {X[i] = v[i], X[j] = v[j], ...}. Egy hozzárendelést konzisztensnek (vagy megengedettnek) nevezünk, ha egyetlen kényszert sem sért meg. Teljes az a hozzárendelés, amelyben mindegyik változó szerepel, és egy teljes hozzárendelés a kényszerkielégítési problémának megoldása, ha mindegyik kényszert kielégíti. Néhány kényszerkielégítési probléma azt is igényli, hogy a megoldás egy célfüggvényt maximalizáljon.
3	0.25	1	Az NP-beli problémák egy kitüntetett csoportját alkotják az ún. NP-teljes problémák. Ezek olyan NP problémák, amelyekre bármelyik másik NP probléma polinomiálisan visszavezethető. Emiatt, ha valakinek valaha sikerül polinomiális idejű algoritmust adni egy NP-teljes probléma megoldására, azzal egy csapásra polinomiális időben megoldhatóvá teszi az összes NP-beli problémát. Az amerikai Clay intézet 2000-ben egymillió dolláros díjat tűzött ki annak, aki megold egy NP-teljes problémát polinomiális időben, vagy bebizonyítja, hogy ez lehetetlen.
6	0.1	1	A fentebbi fólián láthatjuk, hogy az 1 millió dolláros játék végső soron egy több ágenst magába foglaló, közös erőforrásért versengő helyzet modellje (mint pl. ahogy a nagyvárosi taxisok versengenek az utasokért, mint közös erőforrásért). Ilyen esetben egy-egy ágensnek/játékosnak nyilván bizonyos fokig célszerű mérlegelnie a többi játékost, illetve azt is, hogy ők mit gondolnak róla, és a többiekről. Ha például az „1000000 dolláros játék” esetében tudnánk, hogy rajtunk kívül senki sem fog jelentkezni, mert badarságnak tartja (mert úgy gondolják, hogy rajtuk kívül mindenki más jelentkezni fog, és ezért nem jelentkeznek), akkor nekünk nyilván célszerű volna jelentkezni. De mi van akkor, ha erre valaki más fényt derít? ...akkor a nyereményünk várhatóan már csak 0.5*500000=250000 dollár. ...magyarán hamar a „mindenki pályázik” kimenetelnél kötnénk ki.
7	0.44	0	(¬ S[1,1] ∨ C[1,2] ∨ C[2,1]) ∧ ((¬C[1,2] ∧ ¬C[2,1]) ∨ S[1,1]) 4. Most van egy mondatunk, amelyben egymásba ágyazott ∧ és ∨ operátorok vannak alkalmazva a literálokra. A  ábrán bevezetett disztributivitás szabályt alkalmazzuk a ∨ operátorokra az ∧ felett mindenhol, ahol lehetséges.
24	0.958333	0	A következő állítások közül melyik igaz és melyik hamis? a. Sztereoképeken az egymásnak megfelelő pontok megtalálása a sztereomélység-megállapítás folyamatának legegyszerűbb feladata. b. Az alak-mintázatból feladat megoldható egy fénycsíkokat tartalmazó háló jelenetre történő vetítésével. c. A Huffman–Clowes címkéző rendszer mindenféle poliéderes objektumot tud kezelni. d. Görbéket tartalmazó objektumok vonalas rajzaiban a vonal címkéje változhat az egyik végétől a másikig. e. Ugyanazon jelenet sztereonézeteiben minél messzebb van a két kamera egymáshoz képest, annál pontosabban határozható meg a mélység. f. Egy jelenetben található egyforma hosszúságú vonalak mindig egyforma hosszúságra vetítődnek a képen. g. A képen egyenes vonalak szükségszerűen egyenes vonalaknak felelnek meg a jelenetben.
5	0.181818	1	 szakasz -  Visszalépéses keresés előretekintéssel, és legkevesebb megmaradó érték (MRV) heurisztikával: azokat a még be nem helyettesített változókat adja vissza, melyeknek az értékkészlete minimális elemszámú.
10	0.090909	0	Ezek az axiómák a logikai minimalizálásnak (logical minimization) nevezett általános módszer egy példáját jelentik. A logikai minimalizálás azt jelenti, hogy egy objektumot bizonyos feltételeket kielégítő legkisebb objektumnak definiálunk.
12	0.904762	1	Megoldható azonban a feladat HFH nélkül is. Készítsünk egy listát a meglátogatandó városokból és vegyük fel őket konstansoknak. Vegyünk fel továbbá egy Meglátogatva(város) predikátumot annak jelölésére, hogy az adott városban már jártunk a körút során. Ezután minden cselekvéshez, amelynek következményeként az A városban tartózkodunk, vegyük hozzá a Meglátogatva(A) literált következményként. Módosítsuk a célt úgy, hogy az összes meglátogatandó városhoz tartalmazza a megfelelő Meglátogatva(város) literált. Így a célt csak akkor teljesítjük, ha minden városban jártunk már legalább egyszer!
6	0.1	1	Látható tehát, hogy egy VCG mechanizmust konstruáltunk, amiről tudjuk, hogy igazmondó, azaz domináns egyensúly az általa indukált játékban az igazmondás, avagy az, ha mindenki a típusa szerint játszik. Ez azt jelenti, hogy minden egyes játékos/ágens a valódi típusát fogja választani a fentebbi mechanizmus által indukált játékban, és így valódi képet kaphatunk a hálózati topológiáról, és így valóban a legrövidebb utat lesz módunk meghatározni (egy alkalmas keresési algoritmussal, pl. szélességi kereséssel, vagy A* algoritmussal).
14	0.869565	1	Meg kell határoznunk, hogy az ügyfélnek mióta van munkahelye: nemrég, közepes vagy régóta (Munkahelye). Azt, hogy a bank mióta áll kapcsolatban vele: nemrég, közepes, régóta (Kapcsolatugyfellel). Valamint, hogy milyen gyakran késett a visszafizetéssel: nem, néhány, több (Kesettfizetes). Az adatokat 0-tól 1-ig terjedő skálán adhatjuk meg. Mindezek függvényében megkapjuk az ügyfél érték jellemzőjét.
6	0.1	1	Megjegyzés: az extenzív alak a szekvenciális játékokon túlmutatóan nem csak az egymásutániságot, hanem egyidejűséget is képes modellezni. Ha két játékos egyszerre lép, akkor ezt az extenzív alakban úgy ábrázolhatjuk, hogy nem tudják megfigyelni egymás megfelelő cselekvéseit. Azaz a cselekvéseik nyomán előálló különböző döntési csúcsok ugyanabba az információs halmazba kerülnek a másik játékos esetén. Magyarán annak ellenére, hogy egy információs halmazban egyszerre csak egy játékos dönthet, az extenzív alak mégis alkalmas arra, hogy leírja több játékos egyidejű cselekvéseit.
24	0.833333	1	Összefoglalásképpen egy jó jellemző, illetve az általa definiált kulcspont a következő tulajdonságoknak tesz eleget: * jól definiált, lehetőleg matematikai leírás adható rá, * a pozícióját egyértelműen és pontosan meg lehet határozni, * a kulcspont környezete a képen sok információt szolgáltat az adott objektumról, * invariáns a nézőpont és az objektum helyzetének változásaira, azaz invariáns egy tetszőleges perspektív transzformációra, * invariáns a megvilágítás megváltozására, * különböző méretekben definiálható, tehát kereshető nagyított, kicsinyített képen is, * könnyen számítható.
2	0.263158	1	Annak érdekében, hogy az előbbieket formalizálhassuk, vezessük be először a környezet lehetséges állapotainak X halmazát, továbbá az időpillanatok T (< reláció által teljesen) halmazát, amely az ágens működése kapcsán vizsgált összes időpillanatot tartalmazza kronológiai sorrendben. Az általánosság megszorítása nélkül most csak a pozitív egész számokat (beleértve a nullát is) tekintsük. Feltételezzük, hogy a környezet minden időpillanatban egy és csakis egy bizonyos állapotban lehet. Ez a mindenkori állapot pedig attól függ, hogy miként változik a környezet időpillanatról időpillanatra (az ágens cselekvéseinek hatására, vagy magától is, esetleg egyáltalán nem). Ennek részletezése túlmutat a jelen anyagon, így erre most nem térünk ki bővebben.
6	0.65	0	Nyilvánvaló, nem buta döntés, ha az első két napon a B utat választjuk. Nincs olyan épelméjű személy azonban, aki a harmadik napon is maradna B-nél. Mégis pontosan ez az, amit a jövőbe látás szerinti átlagolás sugall. A B út az 1. nap és a 2. nap helyzetekben optimális, következésképpen optimális a 3. nap szituációban is, hiszen az első két eset egyike fog előfordulni. Térjünk vissza a kártyajátékunkhoz: miután max ♣ 9-et hív, min ♣ 10-zel győz. min ♠ 2-vel indul, mint korábban, és most max ott van az elágazásnál bármiféle eligazítás nélkül. Ha max a ♥ 6-ot játszotta meg, és min-nek van még ♥ 4-e, ♥ 4 lesz a győztes, és max a játékot elveszíti. Hasonlóan, ha max a ♦ 6-ot játszotta meg, és min-nek van még ♦ 4-e, max szintén veszteni fog. A ♣ 9 első ízben való hívása tehát olyan helyzethez vezet, ahol max-nak 50%-os esélye van a vesztésre (sokkal jobb lenne, ha a ♥ 6-ot vagy a ♦ 6-ot hívná elsőnek, döntetlent biztosítva).
22	0.37037	0	Három dolgot teszünk az igei alkategóriák nyelvtanba illesztéséhez. Az első lépés a VP kategória kiterjesztése egy alkategória-argumentummal, VP(subcat), amely felsorolja azokat a komponenseket, amikkel teljes VP formálható. Például a „give” teljes VP-vé tehető [NP, PP] hozzáadásával, „give the gold” teljessé tehető [PP] hozzáadásával, és a „give the gold to me” már teljes; alkategória-listája üres, []. Ez a következő szabályokat adja VP-re:
6	0.1	1	Edward Lasker sakknagymester ajánlotta a Nim játék következő változatát. Abban különbözik az eredeti Nimtől, hogy a kupacok csökkentése mellett engedélyezett egy halom két (nem feltétlenül egyenlő) részre bontása.
16	0.956522	1	A laboratóriumi vizsgálatok száma mind összességében, mind sokféleségében állandóan növekszik. Laboratóriumi vizsgálatok alatt a klinikai kémia (glukóz koncentráció, a-amiláz aktivitás meghatározás), a haematológia-hemosztázis (fehérvérsejt-szám, véralvadási faktorok mérése) és a mikrobiológia(baktérium, vírus kimutatás) területén diagnosztikai, terápiás és prevenciós céllal humán mintákból végzett eljárásokat értjük. Egy közel kétezer ágyas egyetemi klinika járó és fekvő betegeinek laboratóriumi igénye a többszázféle vizsgálatból évente mintegy két és fél millió. Ezen feladat ellátása a laboratóriumi automatizáció, a robotizáció (vizsgálati minták fogadása, osztályozása, a mérőműszerekhez történő továbbítása) és a laboratóriumi számítógépes rendszerek révén a központi/területi laboratóriumokban gazdaságosan végezhető. Ezek a laboratóriumok a gazdaságos működtetés és a megfelelő szakmai kontroll ellenére egy problémát nehezen tudnak kezelni. Ez az azonnali mérést jelenti a szállítás nélküli, kis térfogatú vizsgálati mintából. Az egyre gyorsabb, megbízhatóbb laboreredményen alapuló klinikai döntéshozatalra való igény miatt a POCT (Point of Care) alkalmazása folyamatosan nő. A betegágy melletti azaz angolul a „Point of Care testing” (POCT) vizsgálatok segítik a gyors szakmai döntéseket, ezért fontosságuk miatt elengedhetetlenek a mérések labor – szakmai felügyelete és validálása. A POCT olyan laboratóriumi vizsgálat, melyet a hagyományos központi laboratóriumokon kívül, pl. fekvőbeteg intézményekben közvetlenül a betegágy mellett, vagy háziorvosi rendelőkben, vagy otthon a beteg által kivitelezve végeznek. A POCT különösen tért nyert a fekvőbeteg intézmények sürgős és intenzív terápiás betegellátásában, azaz olyan klinikai helyzetekben, amikor életfontos szervi diszfunkció, súlyos trauma, nagy sebészi beavatkozás, általános anesztézia, súlyos sepsis vagy más súlyos kórképben szenvedő beteg ellátása történik. Ezekben a helyzetekben igen nagy esély van a beteg klinikai állapotának olyan gyors változására, amely laborvizsgálaton alapuló azonnali diagnózist és terápiás beavatkozást indokol. A nem megfelelő minőségbiztosítással alkalmazott POCT a beteg számára veszélyes lehet, pl. a kivitelezés hibáiból adódó pontatlan laboreredmények, rossz adatrögzítés, vagy leletdokumentálás miatt.
5	0.181818	1	Szerencsére mindkét listában szereplő él konzisztens, hiszen mind NSW-nek, mind SA-nak az összes lehetséges értékére igaz, hogy van hozzájuk páronként konzisztens értéke a V-nek, és így egyiknél sincs szükség értékkészlet-csökkentésre, avagy az élek sorra kivehetők az él-listából. Ennek hatására az él-lista kiürül, és az AC3 algoritmus végrehajtása (a WHILE-ciklus) véget ér. Az előbbi következtetés hatására a következő ábrán látható állapot adódik.
18	0.736842	1	Az az elhanyagolás, hogy a | H rossz |≈| H |  közelítéssel éltünk, miközben tudjuk, hogy | H rossz |≤| H |  , esetünkben nem okoz nagy hibát. Ugyanis | H rossz |=4 és | H |=6  , tehát nem követünk el nagyságrendi hibát.
6	0.3	0	Az alfa-béta keresés az α és a β értékeit munka közben frissíti, és a csomópontnál a megmaradó ágakat lenyesi (a rekurzív hívást terminálja), amint csak biztossá válik, hogy az aktuális csomópont értéke rosszabb lesz, mint az aktuális α és β érték, max-ra, illetve min-re. A teljes algoritmust a  ábra mutatja. Bátorítjuk az olvasót, hogy a  ábrán látható fára alkalmazva, kövesse végig az algoritmus működését.
20	0.928571	0	Frank Rosenblatt (Rosenblatt, 1957) nevéhez fűződik a modern „perceptron” felfedezése, és ő bizonyította be a perceptronkonvergencia tételt (Rosenblatt, 1960), bár ezt már a neurális hálók területén kívül eső, tisztán matematikai munkák is előrevetítették (Agmon, 1954; Motzkin és Schoenberg, 1954). Volt némi, a többrétegű hálózatokra irányuló korai kutatás is, amelynek eredményei például a Gamba-perceptronok (Gamba és társai, 1961) és a madaline-ok (Widrow, 1962). A Learning Machines (Nilsson, 1965) c. könyv áttekintést ad a korai kutatás legnagyobb részéről. A korai perceptronkutatások halálát siettette – a szerzők későbbi állítása szerint csak magyarázta – a Perceptrons c. könyv (Minsky és Papert, 1969), amelyben a terület matematikai precizitásának hiányát panaszolták fel. A könyv rámutatott, hogy egyrétegű perceptronokkal csak lineárisan szeparálható helyzetek reprezentálhatók, és felhívta a figyelmet a többrétegű hálók hatékony tanuló algoritmusainak hiányára.
23	0.722222	0	A végletekig leegyszerűsített modell arról szól, hogy „a mondat fordításához egyszerűen fordítsuk le a szavakat egyesével és egymástól függetlenül, balról jobbra”. Ez egy unigram szóválasztási modell. Lehetővé teszi, hogy egyszerűen kiszámítsuk egy fordítás valószínűségét:
9	0.931034	0	Chandra és Harel (Chandra és Harel, 1980), valamint Ullman (Ullman, 1985) nagy hatású munkái a Datalognak mint egy, a deduktív adatbázisokhoz kidolgozott standard nyelvnek az elfogadásához vezettek. Az „alulról felfelé” irányú következtetés, az előrefelé láncolás szintén standard lett – részben azért, mert elkerüli a leállási problémákat és a felesleges számítások problémáját, amely a hátrafelé láncolásnál előfordul, és részben azért, mert természetesebben felhasználható az alapvető relációs adatbázis-operációkhoz. A mágikus halmazok (magic sets) technikája a szabályok átírására, amelyet Bancilhon (Bancilhon és társai, 1986) fejlesztettek ki, lehetővé tette az előrefelé láncolásnak, hogy a hátrafelé láncolástól kölcsönözze a célorientáltság előnyös tulajdonságát. A „fegyverkezési verseny” kiegyenlítése céljából, a táblázatos logikai programozási módszerek kölcsönveszik a dinamikus programozás előnyét az előrefelé láncolástól.
12	0.333333	0	A feltételes tervkészítő ágens jobb tervet készíthet: először megvizsgálja az asztal és a szék színét, majd ha ezek már eleve azonosak, a terv kész. Ha nem, megnézi a festékesdobozok címkéit, ha ezek közt talál olyan színűt, mint amilyen a színe bármelyik bútordarabnak, akkor ezt a festéket alkalmazza a másikon. Egyébként befesti mindkét darabot bármelyik színnel.
27	0.4	1	Node létezhet-e olyan valóságos ágens architektúra, amelyen f[opt] megvalósítható? Ugyanis, ha létezne ilyen architektúra, akkor a rajta futó tökéletesen racionális ágens-program, annak érdekében, hogy a következő pillanatban beérkező érzet hatására azon nyomban az optimális cselekvést tudja produkálni, vagy már az érzet beérkezése előtt ki kellene, hogy számítsa az optimális cselekvést, vagy az érzet beérkezésekor nyomban. Az utóbbi eset nyilván kizárt, hiszen a számítás a valóságban időt igényel. Az előbbi esetben viszont az ágens tervezésekor kellene úgy kialakítani programját, hogy már előre tudja a jövőben bekövetkező eseményeket (érzeteket). Ez azonban akauzális (a jövő ismeretét igénylő), nem-triviális környezetek esetén nem elvárható tervezési szempont.
24	0.791667	0	Amellett hogy meghatározzuk, mi is az objektum, a helyzetét is szeretnénk megállapítani, azaz a nézőhöz képesti pozícióját és az irányát. Például egy ipari alkalmazásban a robot karja nem tud felvenni egy objektumot, amíg nem tudja a helyzetét. Merev két-, illetve háromdimenziós objektumok esetében a problémának egy egyszerű és jól definiált megoldása van, amely az illesztési módszeren (alignment method) alapszik, amit a következőkben fejtünk ki.
20	0.964286	0	Tegyük fel, hogy egy tanító halmaz csupán egyetlen példát tartalmaz, de azt 100-szor. A 100 esetből 80-ban az egyetlen kimeneti érték 1; a másik 20-ban 0. Mit ad erre a példára egy hiba-visszaterjesztéssel tanított háló, ha tanítottuk, és elérte a globális optimumot? (Segítség: a globális optimum megtalálásához differenciálja a hibafüggvényt, és keresse a nullahelyét.)
8	0.483871	0	Egyértelmű, hogy ennek a tárgyterületnek az objektumai személyek. Két unáris predikátumunk lesz a Férfi és a Nő. A rokonsági kapcsolatokat – szülőség, testvérség, házasság és így tovább – bináris predikátumokkal fogjuk ábrázolni: Szülője, Testvére, Fivére, Nővére, Gyereke, Lánya, Fia, Házastársa, Felesége, Férje, Nagyszülője, Unokatestvére, Nagynénje és Nagybátyja. Az Anyja és Apja reprezentálására függvényeket fogunk alkalmazni, mivel minden személynek pontosan egy ilyen rokona van (legalább is a természet rendje szerint).
6	0.1	1	Szintén a Nimmel izomorf játék a Northcott-sakk. Vegyünk egy közönséges sakktáblát 8-8 gyaloggal. A világos és sötét játékosok saját térfelükön helyezik el a gyalogosokat úgy, hogy minden oszlopban legyen egy. Felrakás közben takarják saját térfelüket, tehát csak azután látják az ellenfél felállását, miután a sajátjukat már elrendezték, ezután már nem változtathatnak. Ezután a gyalogosokkal bástya módon léphetnek, de csak előre (az oszlopokon). Az azonos oszlopban levő másik színű gyalogot nem üthetik le. A játékosok felváltva lépnek, az nyer, aki az utolsót lépi.
6	0.8	0	Végezetül ismét vizsgáljuk meg magának a keresésnek a természetét. A heurisztikus keresés és a játékok algoritmusai úgy működnek, hogy a kiinduló állapotból induló konkrét állapotsorozatokat generálnak, majd alkalmaznak egy kiértékelő függvényt.
15	0.592593	0	Gondoljunk most át egy érdekesebb példát: egy akkumulátorhajtású, az X–Y síkon mozgó robot követesét, ahogyan azt a  alfejezetben bevezettük. Elsőként szükségünk van állapotváltozókra, amelyek mind az X[t ]= (X[t], Y[t]) pozíció-, mind az  sebességkomponenseket magukban foglalják. Feltételezünk valamilyen pozíciómérő módszert – akár egy rögzített kamerát vagy egy felszíni GPS-t (Global Positioning System) –, ami a Z[t] méréseket eredményezi. A pozíció a következő időpontban a jelenlegi pozíciótól és sebességtől függ, ugyanúgy, mint a standard Kalman-szűrő modellben. A sebesség a következő időpontban a jelen sebességtől és az akkumulátor állapotától függ. Felveszünk még egy Akkumulátor[t ]változót az aktuális akkumulátor töltési szintjének reprezentálására, aminek szülői az előző akkumulátorszint és a sebesség, és felveszünk még egy AMérő[t] változót, ami az akkumulátor töltési szintjét méri. Ez szolgáltatja a  (b) ábrán látható alapmodellt.
5	0.181818	1	Az értékadás eredményeképp az {NSW=RED, WA=RED, NT=GREEN, Q=RED} behelyettesítés adódik, amely sajnos újfent ellentmondást eredményez az egyik korláttal (nevezetesen a 8-as korláttal, amely a Q és az NSW változók értékének különbözőségét írja elő). Az algoritmus tehát egyelőre továbbra is konzisztens értéket próbál meg keresni a Q változónak. A Q változó következő sorra kerülő értéke legyen a GREEN (Q=GREEN).
24	0.666667	0	A vizuális objektumok felismerésének feladata általában könnyű az emberek számára, de a számítógépek számára igen nehéznek bizonyult. Fel akarjuk ismerni egy ember arcát függetlenül a megvilágítás, a kamerához képesti helyzet és az arckifejezés különböző variációitól. Ezen variációk bármelyike széles körű változásokat eredményez a képpontok fényességértékeiben, így a képpontok közvetlen összehasonlítása valószínűleg nem fog működni. Ha valaki egy kategória (például az „autó”) példányait szeretné felismerni, akkor a kategórián belüli variációkat is figyelembe kell vennie. Még a postai irányítószámoknál a kézzel írt számjegyek felismerésének igen korlátozott feladata is komoly kihívásnak bizonyult.
9	0.482759	0	A Prolog-programok végrehajtása mélységi keresést alkalmazó hátrafelé láncoláson keresztül történik, ahol a klózokat olyan sorrendben alkalmazzák, ahogyan a tudásbázisban szerepelnek. A Prolog néhány aspektusa a standard logikai következtetésen kívül esik. * Beépített aritmetikai függvényeket tartalmaz. Az ilyen függvényszimbólumokat használó literálokat a kód végrehajtásával „bizonyítja” a program, és nem végez további következtetéseket. Például az „X egyenlő 4+3” akkor sikeres, ha az X értékét a 7-hez kötjük. Ugyanakkor, az a célállítás, hogy: „5 egyenlő X+Y” sikertelen lesz, mert a beépített függvények nem képesek önállóan egy tetszőleges egyenletmegoldást elvégezni.^[91] * Vannak olyan beépített predikátumok, amelyeknek mellékhatásai vannak, ha végrehajtjuk őket. Ilyenek a bemeneti-kimeneti predikátumok és a tényeket a TB-hez hozzáadó, illetve onnan törlő kijelent/visszavon predikátumok. Ezeknek a predikátumoknak nincs megfelelőjük a logikában, és hatásukat sokszor nem egyszerű végigkövetni – például ha a tényeket egy olyan bizonyítási fa egyik ágán jelentjük ki, amely végül sikertelennek bizonyul. * A Prolog lehetővé tesz olyan egyedi formájú tagadást, amelyet sikertelenségi tagadásnak (negation as failure) nevezünk. Egy negált cél, mint a a nem P, akkor tekintető bizonyítottnak, ha a rendszernek nem sikerül bebizonyítania a P-t. Így a következő mondat:
26	0.642857	0	A rendszer egy csak angolul értő emberből áll, akinek egy angol nyelven írt szabálykönyve és többfajta papírhalmaza van, melyek közül némely papírhalmaz üres, némelyen pedig valamilyen érthetetlen jelsorozat áll. (Tehát az ember a CPU szerepét játssza, a szabálykönyv a programnak, a papírhalmazok pedig a tárolóeszköznek felelnek meg.) A rendszer egy szobában található, amelynek csak egy kis nyílása van a külvilágra. Ezen a nyíláson keresztül érthetetlen feliratú papírcetlik jelennek meg. Az ember megtalálja a szabálykönyvben ezeket a szimbólumokat, és követi az ott leírtakat. Az utasítások között szerepelhet, hogy írjon le szimbólumokat új papírcédulákra, keressen szimbólumokat a papírhalmazokban, rendezze át a halmazokat és hasonlók. Végül, az utasítások következményeként, egy vagy több szimbólumot egy papírdarabra másol, és kiadja a külvilágba. Fontos Eddig minden könnyen követhető. De kívülről nézve azt látjuk, hogy a rendszer kínai mondatokat fogad, kínai mondatokat ad vissza, és ez a párbeszéd nyilvánvalóan éppannyira intelligens, mint amit Turing elképzelt.^[282] Searle ennek alapján így érvel: a szobában lévő személy nem ért kínaiul (ez adott). A szabálykönyv és a papírcetlik, lévén ezek csak papírok, szintén nem értenek kínaiul. Ebből az következik, hogy a kínai nyelv semmiféle megértése nem zajlik le. Tehát Searle szerint a megfelelő program futtatása nem vezet szükségszerűen a megértéshez.
16	0.956522	0	A kocsi jó állapotban (q^+ minőség) vagy rossz állapotban (q– minőség) lehet, és a tesztek segíthetnek a kocsi állapotának meghatározásában. A c[1] kocsi 1500 dollárba kerül, piaci értéke azonban 2000 dollár, ha jó állapotban van; ha nem, akkor 700 dollár szükséges a jó állapotba hozásához. A vásárló úgy becsüli, hogy 70% esélye van, hogy a kocsi jó állapotban van. a. Rajzolja fel a döntési hálót, ami ezt a problémát reprezentálja. b. Számítsa ki a várható nettó nyereséget c[1] megvásárlása esetén, ha nincsenek tesztek. c. A tesztek azzal a valószínűséggel jellemezhetők, hogy a kocsi átmegy-e a teszten vagy elbukik, attól függően, hogy jó vagy rossz állapotban van. A következő információkkal rendelkezünk:
3	0.25	0	Az utóbbi időben egyre nagyobb a kereslet az interneten kereső (Internet searching) szoftverrobotok iránt, amelyek kérdésekre választ, kapcsolódó információkat, vagy kereskedelmi üzletek lehetőségét kutatják fel. A keresési technikák szempontjából ez igazán jó alkalmazás, mert eléggé nyilvánvaló, hogy az internethez egy gráfszerű kép rendelhető, ahol a csomópontok (weboldalak) linkekkel össze vannak kapcsolva. Az internetkeresés teljes leírását a  fejezetre hagyjuk.
24	0.833333	1	Az élkeresőknek a működésük szerint három alapvető változata terjedt el: léteznek derivált alapú, második derivált alapú és fázis alapú megoldások. A legelső esetben a tipikus lépések a következők: véges differencia számítás, azaz a derivált közelítése, ezután a keletkezett kép küszöbözése, majd a kialakuló élek vékonyítása. Ezen az elven működik az egyik legelterjedtebb és leghatékonyabb megoldás, a Canny éldetektor. A második derivált alapú megoldásoknál a másodrendű derivált közelítése történik, majd a közelített függvény zérushelyeinek keresése. Ezek a megoldások jellemzően kevésbé hatékonyak, a véges közelítés nem elég pontos. Megfelelő interpolációt alkalmazva azonban az élek akár szubpixel pontossággal is meghatározhatók. A harmadik csoportba tartozó, fázis alapú módszerek alapötlete a következő: a képet frekvenciatartományba transzformálva vizsgálhatók a Fourier komponensek fázisa. Ahol a legtöbb szinuszos függvény azonos fázisban van, ott él valószínűsíthető. A megoldás ígéretes, a tapasztalatok szerint az így kapott eredmény közelebb áll az emberi szem által detektált élekhez.
27	0.4	1	Ha adott az f[Ágens] ágens-függvény és a környezet (beleértve annak kezdeti állapotát is), akkor mindez egyértelműen meghatározza a környezet állapotainak – ágens által kialakított – sorozatát: az állapot-történetet. A környezetet adott állapotból indítva egyértelmű az ágens érzékelése (f[Érzékelés]), és egyértelmű, hogy ennek alapján mit cselekszik (f[Ágens](f[Érzékelés](Állapot))), ami viszont egyértelműen meghatározza, hogy mi lesz a következő környezeti állapot (a nem-determinisztikus környezetekkel itt most nem foglalkozunk). Jelölje Hatás(f[Ágens], Környezet) azt az állapot-történetet, amit az f[Ágens] függvény generál a Környezet-ben.
7	0.12	0	A TB hamis azokban a modellekben, amelyek ellentmondanak annak, amit az ágens tud. Például a TB hamis minden modellben, ahol az [1, 2] tartalmaz csapdát, mivel nincs szellő az [1, 1]-ben. Valójában csak három olyan modell van, amelyben a TB igaz, ezeket a  ábra a modellek egy részhalmazaként mutatja. Most tekintsünk két lehetséges következményt:
25	0.407407	1	Az általánosított Voronoi-diagram, vagy gráf (generalized Voronoi diagram or graph, GVD/GVG) azon pontok mértani helye a síkban, amelyek a legközelebb eső akadályoktól egyenlő távolságra fekszenek. Ez egyben azt is jelenti, hogy az általánosított Voronoi-diagram meghatározásával kiszámított pálya biztonságosan bejárható, az akadályoktól a legmesszebb vezető utat eredményezi.
14	0.826087	1	A kockázati szint becslése a kockázatelemzés kiemelten fontos része, ennek során alakítható ki objektív értékítélet az egyes kockázati tényezőkről. A veszélyeztetettség becslést több lépésben tudjuk meghatározni ilyenek: * felmérések, * vizsgálatok, * megfigyelések, * feltérképezési technikák.
13	0.090909	0	Próbálkozásaink az elsőrendű logika alkalmazására olyan területeken, mint az orvosi diagnosztika, három fő okból is kudarcot vallanak: * Lustaság (laziness): túl nagy munkát jelent az ok és okozatok teljes eseményhalmazának felsorolása, amely elengedhetetlenül szükséges annak biztosítására, hogy egy szabály mindig érvényes legyen. Ezenkívül túl körülményes az eredményül kapott hatalmas méretű szabályok használata. * Az elméleti tudatlanság (theoretical ignorance): az orvosi tudományterület elmélete nem teljes. * A gyakorlati tudatlanság (practical ignorance): még ha ismerjük is a teljes szabályrendszert, egy bizonyos beteggel kapcsolatban akkor is lehetünk bizonytalanok, mert előfordulhat, hogy még nem fejeződött be, vagy egyáltalán nem végezhető el az összes szükséges vizsgálat.
21	0.1875	1	Általános esetben a fent leírt stratégia sem vezet optimális megoldáshoz, azonban az alábbi feltételek mellett az algoritmus megtalálja az optimális a MAB problémára: 1. A kontroller folyamat egy időben csak egyetlen gépet üzemeltet; az üzemeltetett gép állapota nem befolyásolható, csak ki- és bekapcsolni lehet. 2. A nem működtetett gép nem vált állapotot. 3. A gépek függetlenek. 4. A nem működtetett gépek nem adnak jutalmat.
3	0.25	1	Vizsgáljuk meg, milyen következtetéseket vonhatunk le, ha a két bemeneten „hamis” logikai értéket adunk az áramkörre, azaz ha az A-val és B-vel jelölt mezőkön nincs akna, az a-val és b-vel jelölteken pedig van! Ahhoz, hogy a  ábrán piros háttérrel megjelölt 4-es mellett 4 akna helyezkedjen el, muszáj, hogy a P-vel, Q-val és R-el jelölt mezőkön is legyen akna. A sárga hátterű 3-asok vizsgálatával könnyen belátható, hogy ekkor az y-nal és v-vel jelölt mezőkön lesznek még aknák, az u-val és x-szel jelölteken pedig nem lesznek, és a kapott állás ellentmondásmentes. Azt kaptuk tehát, hogy ha a két bemenet egyikén sincs „igaz” jel, akkor a kimeneten „igaz” jelet kapunk, tehát ebben az esetben a kapu jól működik.
4	0.5	1	Az evolúció természetes kiválasztódáson alapuló modelljét először Charles Darwin és Alfred Russel Wallace vetette fel, részletes leírásra először Darwin A fajok eredete (1859) című könyvében került sor.
8	0.258065	0	A ∀x Király(x) ⇒ Személy(x) univerzális kvantort alkalmazó mondat igaz az eredeti interpretációban, ha a Király(x) ⇒ Személy(x) mondat igaz mind az öt kiterjesztett interpretációra. Eszerint az univerzális kvantorral ellátott mondat egyenértékű a következő öt mondattal:
4	0.916667	1	Tegyük fel, hogy a kezdőállapot a Nagy Imre tér, a célállapot pedig a Néprajzi Múzeum. Ekkor a légvonalban mért távolságheurisztika a Margit hídon felé indul el, ami azonban felújítás miatt nem használható (amit jelezhetünk például az átkelés útköltségét egy extremális elemnek választva), így vissza kell fordulnia, és a Lánchídon átkelni. A helyzet ugyanez fordítva is: a keresés előbb ellátogat a Margit híd pesti hídfőjéhez, majd visszafordul, mert átkelni már nem tud. A problémát a következő ábra szemlélteti. (Vegyük észre, hogy nem szükséges valódi zsákutcának lennie: a keresés tovább mehetett volna az Árpád-híd felé, de ez lényegesen költségesebb lett volna, mint a Lánchíd. Elég tehát egy kezdetben jónak tűnő, de végül mégis költségesnek bizonyuló útvonalat találni. Ebben rejlik az algoritmus mohósága: ha lát egy kecsegtető utat, rögtön lecsap rá.)
25	0.074074	1	A robot és a környezet közt teremtenek kapcsolatot. A robotok leggyakoribb alkalmazási területe a felmérések szerint: öntés, kovácsolás, palettázás és egyszerű alkatrész összerakás, ponthegesztés, festékszórás, ívhegesztés, sorjátlanítás, automatikus ellenőrzés, gyártócellában való alkalmazás, automatizált szerelés.
26	0.071429	0	A mesterséges intelligenciára adott definíciónk jól működik a mérnöki probléma esetében is, ahol egy adott architektúrához tartozó jó ágenst kell találni. Nagy a kísértés tehát, hogy befejezzük itt ezt a szakaszt, és igenlő választ adjunk a címben feltett kérdésre. A filozófusok azonban két architektúrát akarnak összehasonlítani: az embert és a gépet. Ráadásul a hagyományosan feltett kérdés így hangzik: „Tudnak-e a gépek gondolkodni?” Sajnos ez egy helytelenül feltett kérdés. Hogy megértsük, miért, nézzük az alábbi kérdéseket: * Tudnak a gépek repülni? * Tudnak a gépek úszni?
10	0.969697	0	Ebben a feladatban egy út megtervezésével foglalkozunk egy robot számára, két város között. A robot alapcselekvése a Megy(x, y), mely révén az x városból az y városba kerül át, ha a két város között létezik közvetlen út. A KözvetlenÚt(x, y) akkor és csak akkor igaz, ha az x és az y között létezik egy közvetlen útszakasz. Feltételezhetjük, hogy az ilyen tények a rendszer tudásbázisába már bekerültek (3. szakasz - A problémák megfogalmazása részben lévő térképet). A robot Aradnál kezd, és Bukarestet kell elérnie. a. Adja meg robot kezdő állapotának egy alkalmas logikai leírását. b. Írjon fel egy alkalmas logikai kérdést, amelynek megoldásai megadják a célhoz vezető lehetséges utakat. c. Írja fel a Megy cselekvést leíró logikai állítást. d. Tegyük most fel, hogy két város között a közvetlen út követése a közvetlen út hosszával arányos üzemanyag-fogyasztást jelent. A robot teli tankkal indul. Bővítse reprezentációját, hogy ezek a szempontok helyet kapjanak benne. A cselekvés leírásának olyannak kell lennie, hogy az előbb megfogalmazott kérdés megválaszolásának továbbra is a lehetséges terveket kell megadnia. e. Írja le a kezdeti szituációt, és adja meg a Megy cselekvést leíró új szabályt, illetve szabályokat. f. Tegyük most fel, hogy a csomópontok némelyike benzinkút is egyben, ahol a robot az üzemanyagtankját teletöltheti. Bővítse ennek megfelelően a reprezentációját, és írja fel a benzinkutak leírásához szükséges új szabályokat, a TeleTölt cselekvést is beleértve.
2	0.210526	1	Magát az implementációt rengeteg területről megközelítették már, megnevezés szintjén nem árt áttekintenünk ezeket. Elsőként érdemel említést a közgazdaságból átvett döntéselmélet, hiszen a mesterséges intelligencia mindig is szívesen nyúlt a racionalitás közgazdasági definíciójához (maximum utility, maximális haszon/hasznosság). Mind a mai napig jelentős terület a tőzsdei kereskedőrobotok fejlesztése és tanulmányozása. A másik rokon, de valamelyest eltérő forrásterület a játékelmélet, melyben a fókusz nem az egyéni döntések racionalitásán van, hanem azon, csoportok hogyan döntenek (vagy dönthetnek), és ott mennyire (nem) racionális az egyéni célok követése, illetve mi a csoport szempontjából legkedvezőbb kollektív eljárás. Egészen más megközelítés, ugyanakkor nem kevésbé jelentős tudományterület a klasszikus logika, melynek kvantorokkal kibővített változata (elsőrendű logika) vált a mesterséges intelligenciában megjelenő „tudás” egyik fő leíró nyelvévé. A temporális logika ennek időbeli állapot-információkkal való kibővítése, míg az elágazó temporális logika több lehetséges idősíkon végzi a keresést a lehetséges állapotok terében [9]. Érdekes és befolyásos továbbá a racionalitás felépítésének biológiai megközelítése, melyben külön hangsúlyt kapnak a neurális és evolúciós folyamatokból nyert ötletek (neurális hálók, genetikus programozás).
10	0.787879	0	A   egyenletet a   lezárásának^[104] (completion) nevezzük. A lezárás általában minden predikátumhoz egy definíciót, egy „akkor és csak akkor” állítást rendel hozzá. Minden definícióban mindegyik, a predikátumot a fejében tartalmazó definit klózhoz egy diszjunkció fog tartozni.^[105] A lezárást általánosságban az alábbi módon szerkesztik meg: 1. Gyűjtsük ki az ugyanolyan (P) predikátum névvel és (n) aritással rendelkező klózokat. 2. Minden klózt az ún. Clark Normál Formára (Clark Normal Form) transzformáljuk: cseréljük a:
14	0.826087	0	kapcsolatot enged meg a magasság és a súly között, ahogyan a megfigyelést okozzák. Így nagyon valószínűtlen, hogy valakit, aki két és fél méter magas és kilencven kilogramm, „magas és nehéz”-nek nevezzünk, bár a „két és fél méter” „magas”-nak és a „kilencven kilogramm” „nehéz”-nek minősül.
15	0.814815	0	A modellt ki lehet bővíteni trigrammá (trigram), amely a P(w[i]|w[i–1]w[i–2]) mennyiségeket használja. Ez egy hatékonyabb nyelvi modell, képes megadni, hogy az „ate a banana (banánt ettem)” valószínűbb, mint az „ate a bandana (kendőt ettem)”. A trigram modellben és kisebb mértékben a bigram és unigram modellekben is problémát jelentenek a nulla értékű számlálók: nem szeretnénk egy szókombinációt lehetetlennek minősíteni pusztán azért, mert nem fordulnak elő a tanító korpuszban. A simítás (smoothing) folyamata ilyen kombinációkhoz egy kis, pozitív valószínűséget rendel. Ezt a  szakasz - Valószínűségi nyelvi modellek részben tárgyaljuk.
5	0.181818	1	Az előálló {NSW=RED, WA=RED, NT=GREEN, Q=BLUE} behelyettesítés továbbra is konzisztens, is következhet az előretekintés. Most tehát a Q változó eddig még be nem helyettesített szomszédainak értékkészletéből kell eltávolítanunk a Q=BLUE értékadásnak ellentmondó értékeket. Egyetlen ilyen változónk van már csak, az SA, és ennek is csak egyetlen értéke, a BLUE. Tehát ezek szerint az SA értékkészletéből távolítjuk el a BLUE értéket.
26	0.142857	0	Turingnak az intuícióját kellett használnia, hogy megsejtse, mi válhat lehetségessé a jövőben, mi azonban abban a kényelmes helyzetben vagyunk, hogy visszanézhetünk a számítógépek eddigi teljesítményére. Senki sem tagadja, hogy a számítógépek ma sok olyan dolgot megtesznek, amely korábban kizárólag az emberekhez tartozott. A programok sakkoznak, dámát vagy más játékokat játszanak, alkatrészeket vizsgálnak gyártósorokon, a szövegszerkesztéskor ellenőrzik a helyesírást, helikoptereket és autókat irányítanak, betegségeket diagnosztizálnak és több száz más tevékenységet végeznek éppolyan jól, vagy még jobban, mint az emberek. A számítógépek kicsiny, de jelentős felfedezéseket tettek a csillagászatban, a matematikában, a kémiában, az ásványtanban, a biológiában, a számítástudományban és más területeken. Ezekhez a felfedezésekhez az emberi szakértőhöz hasonló szintű teljesítményekre volt szükség.
3	0.083333	1	Látszólagos egyszerűsége ellenére keresés (valamilyen konkrét algoritmikus formában) intelligens ágensek legfontosabb algoritmusa. Azért is olvashatunk róla mindjárt a tankönyv elején, az ágens fogalmának bevezetése után, és ha a későbbi anyagban mintha nem is esne már róla szó, ne tévesszen ez minket. Intelligens viselkedés kutatása során kereséssel mindig, mindenhol fogunk találkozni, legfeljebb sokszor burkolt, elfedett formában.
12	0.666667	0	A páros teniszt játszó ágenscsapatoknak közös céljuk van, a meccs megnyerése, ami különböző részcélokat eredményez. Tegyük fel, hogy a játék egy pontján a közös céljuk az átütött labda visszaadása úgy, hogy legalább egyikőjük a hálót védi. Ezt a gondolatot egy multiágens tervkészítési (multiagent planning) problémával írhatjuk le, amint azt a  ábra is mutatja.  ábra - A páros tenisz probléma. Két ágens együtt játszik, és négy pozíció egyikében lehetnek: [Bal, Alapvonal], [Jobb, Alapvonal], [Bal, Háló] és [Jobb, Háló]. A labda visszaadható, ha pontosan egy játékos van a megfelelő helyen. A páros tenisz probléma. Két ágens együtt játszik, és négy pozíció egyikében lehetnek: [Bal, Alapvonal], [Jobb, Alapvonal], [Bal, Háló] és [Jobb, Háló]. A labda visszaadható, ha pontosan egy játékos van a megfelelő helyen.
3	0.916667	1	Állapotátmenet-függvény: Megtölthetünk egy tetszőleges kancsót, amely tartalma ekkor maximális lesz. Ha valamelyik kancsóban van víz, kiönthetjük a földre. Ekkor a kancsó üres lesz. Ha az egyik kancsóban van valami, akkor a áttölthetünk belőle annyit egy másikba, amennyi az új kancsóban még elfér. Ekkor ha az első kancsó tartalma x, a másodiké y volt, kapacitásuk pedig rendre X és Y, akkor az áttöltés után az első kancsóban x-min(x,Y-y); a másikban pedig y+min(x,Y-y) liter víz lesz. (Azaz az elsőből kitöltünk legfeljebb annyit, amennyi a másikba fér, de nyílván nem többet, mint amennyi eleve volt benne. Ezért szükséges a 'min()' függvény.)
18	0.947368	0	A  fejezetben megmutattuk, hogy azok az attribútumok, amelyeknek nagyon sokféle lehetséges értékük van, problémát jelenthetnek az információnyereség számításánál. Ezek az attribútumok jó eséllyel nagyon sok kis osztályra, akár egyelemű osztályokra bontják a halmazt, ezért úgy tűnik a nyereség számításánál, hogy nagyon fontosak az adott csomópontban. A nyereségarány (gain ratio) kritérium az attribútumokat az általuk hozott információnyereség és a saját belső információtartalmuk arányával méri. A belső információtartalom arra a kérdésre adott válasz, hogy „Mi az értéke ennek az attribútumnak?”. A nyereségarány kritérium ennek megfelelően azt próbálja mérni, hogy mennyire hatékony információt biztosít a példa helyes osztályozásához ez az attribútum. Alkossa meg az attribútum információtartalmának matematikai kifejezését, és módosítsa a Döntési-Fa-Tanulás algoritmust nyereségarány-alapúra!
1	0.37931	1	A mérések mozgás- érzékenységét felhasználva angiogramot akár kontrasztanyag nélkül is elő lehet állítani minden olyan érszakaszról, amelyben a vér kering. Kontrasztanyaggal végzett MR-angiográfia az érrendszeri betegségek nem invazív vizsgálatán túl főként a szív és koszorúerek áramlási viszonyainak elemzésében bizonyult előnyösnek.
14	0.782609	1	A bemeneten fizikai értékek szerepelnek (orvosi tapasztalás) és a kimeneten ismét értékeket kapunk (egy egészségi állapotra vonatkozó megállapítás). A folyamat belső állapotához úgy jutunk, hogy ún. fuzzyfikálást végzünk, vagyis transzformáljuk a változókat a program belső állapotának megfelelően. A kimeneten azután az emberi fogalmakba való tartozás mértékét mérőszámokká alakítjuk vissza.
17	0.066667	0	A következő kérdés az, hogyan néz ki egy megoldás a problémára? Azt már láttuk, hogy egy rögzített cselekvéssorozat nem oldja meg a problémát, mivel az ágens végül más állapotba jut a célállapot helyett. Ezért egy megoldásnak minden, az ágens által elérhető állapotra elő kell írnia, hogy az ágens mit tegyen. Egy ilyenfajta megoldás az eljárásmód (policy). Egy eljárásmódot általában π-vel jelölünk, és a π eljárásmód az s állapotban a π (s) cselekvést javasolja. Ha az ágens egy teljes eljárásmóddal rendelkezik, akkor függetlenül attól, hogy egy cselekvésnek mi is a kimenetele, az ágens mindig tudni fogja, mit tegyen a következő alkalommal.
8	0.096774	0	Emlékezzünk arra a  fejezetből, hogy a logikai nyelvek modelljei azok a formális struktúrák, amelyek a vizsgálat tárgyát képező lehetséges világokat alkotják. Az ítéletkalkulus modelljei csupán az ítéletszimbólumok igazságértékeinek halmazai. Az elsőrendű logika modelljei ennél érdekesebbek. Először is, ezek tartalmaznak objektumokat! A modell tárgyterülete (domain) azoknak az objektumoknak a halmaza, amelyeket a tárgyterület tartalmaz; ezeket az objektumokat szoktuk a tárgyterület elemeinek (domain elements) nevezni. A 8.2. ábra bemutat egy modellt öt objektummal: Oroszlánszívű Richárd, Anglia királya 1189-től 1199-ig; öccse, gonosz János király, aki 1199-től 1215-ig uralkodott; Richárd és János bal lába; végül egy korona.
11	0.961538	0	Egészen eddig feltételeztük, hogy a cselekvések csak a megfelelő helyzetekben kerülnek végrehajtásra. Nézzük, hogy az ítéletlogikai követő állapot axiómák (mint a 11.1 egyenlet axiómája) mit mondanak az olyan cselekvésekről, melyek előfeltételei nem teljesülnek. a. Mutassa meg, hogy az axiómák azt jósolják, hogy semmi sem történik, amikor egy cselekvést olyan állapotban hajtunk végre, melyben az előfeltételei nem teljesülnek. b. Vegyünk egy p tervet, ami tartalmazza a cél eléréséhez szükséges cselekvéseket és illegális cselekvéseket is. Igaz, hogy ebben az esetben
9	0.275862	0	Az ítéletlogikai határozott klózokra már megadtunk egy előrefelé láncolási algoritmust a  alfejezetben. A gondolat egyszerű: kezdjük a tudásbázisban szereplő atomi mondatokkal, és alkalmazzuk a Modus Ponenst előrefelé haladva, új atomi mondatokat hozzáadva, egészen addig, amíg további következtetések már nem végezhetők. Most megmutatjuk, hogyan alkalmazzuk az algoritmust az elsőrendű határozott klózokra, és hogyan valósíthatjuk ezt meg hatékonyan. A határozott klózok, mint például a Helyzet ⇒ Válasz különösen hasznosak az olyan rendszerek számára, amelyek újonnan érkezett információk alapján végeznek következtetéseket válaszként. Számos rendszert tervezhetünk ilyen módon, és ezekben az esetekben az előrefelé láncolással történő következtetés sokkal hatékonyabb lehet, mint a rezolúciós tételbizonyítás. Ebből az következik, hogy gyakran érdemes megpróbálni olyan tudásbázist építeni, amely csak határozott klózokat használ, és így elkerülhetjük a rezolúcióval járó nehézségeket.
6	0.1	1	A fenti fólián még egy lépést tettünk túl azon, hogy i-nek az 1, illetve 2 értéket adtuk: az 1-es játékos u1(q) hasznosságát meghatározó egyenletben kiemeltük az 1-es játékos által „vezérelt” p12 paramétert, pontosabban valószínűséget (amely tehát azt jelöli, hogy milyen valószínűséggel játssza az 1-es játékos q kevert stratégia-kombináció esetén a második tiszta stratégiáját), a 2-es játékos u2(q) hasznosságánál pedig a p22-t emeltük ki hasonlóképpen. Az 1-es tehát csak a p12-t tudja befolyásolni, míg a 2-es játékos csak a p22-t. Látszik tehát, hogy mindkét egyenlet a játékosok szempontjából nézve lineáris, azaz ax+b alakú elsőfokú, egyváltozós polinom egyenlet, ahol x vagy p12 vagy p22 (attól függően az 1-es vagy a 2-es játékosról van szó).
22	0.925926	0	Az utalásfeloldás általunk bemutatott kezelése a (Hobbs 1978)-at követi. A (Lappin és Leass, 1994) által bemutatott összetettebb megoldás egy kvantitatív pontozási módszeren alapszik. Újabb munkák (Kehler, 1997; Ge és társai, 1998) gépi tanulást használnak a kvantitatív paraméterek hangolására. Az utalásfeloldásról szóló két kitűnő áttekintés Hirst és Mitkov könyvei (Hirst, 1981; Mitkov, 2002).
6	0.65	0	Amit max használ, azt általánosságban a „jövőbe látás szerinti átlagolásnak” nevezhetnénk. Az ötlet a cselekvés értékelése nem látott kártyák mellett oly módon, hogy először kiszámítunk minimax értékeket minden lehetséges leosztás esetére, majd várható értéket számítunk a leosztásokra nézve, azok valószínűségét felhasználva.
1	0.137931	1	Sok esetben a képeket nem lehet elemi geometriai fogalmak segítségével leírni, mint például BP 19 esetében, ahol a “nyak” fogalom a megoldás kulcsa. Ebből látható, hogy nem lehet előre megadni az összes objektumot, vagyis a programnak képesnek kell lennie tanulásra, és új fogalmak alkotására.
3	0.208333	0	Bár hatékony célalgoritmusok léteznek ezen probléma és a teljes n-királynő probléma megoldására, a királynőfeladat mindamellett érdekes tesztproblémája marad a keresési algoritmusoknak. Két fő megfogalmazása létezik. Az inkrementális megfogalmazásban (incremental formulation) az operátorok az állapotleírást bővítik, az üres állapottól kezdve. A 8-királynő probléma esetén ez azt jelenti, hogy a királynőket egyenként helyezzük el a sakktáblán. A teljes állapot leírásban (complete-state formulation) először felhelyezzük mind a 8 királynőt, majd mozgatjuk őket. Az útköltség mindkét esetben érdektelen számunkra, mert csak a végső állapot számít. A probléma első inkrementális megfogalmazása lehet a következő: * Állapotok: egy állapot a 0 … 8 királynő, tetszőleges elrendezése a táblán. * Kezdeti állapot: a táblán nincs egy királynő sem. * Állapotátmenet-függvény: helyezz egy új királynőt egy üres mezőre. * Célteszt: 8 királynő a táblán és egyik sincs támadás alatt.
11	0.346154	0	Most, hogy a relevanciát és a konzisztenciát definiáltuk, megadhatunk egy általános módszert a hátrafelé keresés elődállapotának kereséséhez. Adott egy G cél leírása. Legyen az A cselekvés releváns és konzisztens. A megfelelő elődállapot a következő: * Az A minden pozitív következményét, ami szerepel G-ben, töröljük. * Az A minden, még nem szereplő előfeltételét hozzáadjuk.
22	0.481481	0	Most már készen állunk arra, hogy az angol nyelv egy kis részhalmazára megírjuk a szemantikai kibővítést. Első lépésként azzal kezdünk, hogy melyik kifejezéshez milyen szemantikai értelmezéseket akarunk rendelni. A „John loves Mary” egyszerű mondatot fogjuk vizsgálni. A „John” NP szemantikus értelmezése a John logikai term kell legyen, és a mondatnak, mint egésznek, a Loves(John, Mary) logikai állítás kell a szemantikai értelmezése legyen. Ennyi világosnak látszik. A bonyolultabb rész a „loves Mary” VP. Ezen kifejezés szemantikai értelmezése se nem logikai term, se nem teljes logikai mondat. Intuitív módon kezelhetjük úgy, hogy a „loves Mary” egy leírás, ami lehet, hogy egy adott személyre vonatkozik, de lehet, hogy nem. (Jelen esetben Johnra vonatkozik.) Ez azt jelenti, hogy a „loves Mary” egy predikátum (predicate), amit ha egy személyt reprezentáló termmel kombinálunk (a személy, aki szeret), akkor egy teljes logikai mondatot állít elő. A λ jelölésrendszert használva (lásd  alfejezet) a „loves Mary”-t a következő predikátumként reprezentálhatjuk:
5	0.181818	0	A visszalépéses keresés (backtracking search) kifejezést olyan mélységi keresésekre használjuk, melyek egyszerre csak egy változóhoz rendelnek értéket, és visszalépnek, ha már nincs megengedett hozzárendelési lehetőség. Az algoritmus az  ábrán látható. Vegyük észre, hogy az algoritmus lényegében a 115–116. oldalon leírt egyenkénti módszert használja az inkrementális következő állapot generálásra. Továbbá a következő állapot generálásakor kifejti az aktuális állapotot, nem pedig egyszerűen másolja. A kényszerkielégítési problémák szokásos reprezentációja miatt nincs szükség a Visszalépéses-Keresés algoritmus kiegészítésére tárgyterület-specifikus kezdeti állapottal, állapotátmenet-függvénnyel vagy célteszttel. Az  ábrán látható egy részlet az ausztráliai színezési problémához generált keresési fából (a változó-hozzárendelések sorrendje NyA, ÉT, Q, …).
12	0.333333	0	A valódi világban az ágensek a különböző megközelítések kombinációit használják. Az autógyártók pótkereket és tartalék légzsákokat árulnak, amelyek fizikai megtestesítői a feltételes tervágaknak, melyeket a defektek vagy az ütközések kezelésére készítettek. Másrészről a legtöbb autóvezető soha nem veszi figyelembe ezeket a lehetőségeket, így a defektekre vagy az ütközésekre mint újratervező ágensek reagálnak. Általánosságban az ágensek csak azokra az eshetőségekre készítenek feltételes tervet, amelyeknek fontos hatásai vannak, és nem elhanyagolható eséllyel okoznak hibát. Így egy autóvezetőnek, aki a Szaharán keresztül kíván utazni, igencsak figyelembe kell vennie a lerobbanás lehetőségét, míg egy áruházba vezető út jóval kevesebb megelőző tervezést igényel.
26	0.714286	0	Mindeddig arra összpontosítottunk, hogy képesek vagyunk-e kifejleszteni egy mesterséges intelligenciát, most azt is meg kell vizsgálnunk, hogy kell-e ezt tennünk. Amennyiben az MI-technológiák hatásai többségében inkább negatívak, mint pozitívak lennének, akkor morális felelőssége lenne az ezen a területen dolgozóknak, hogy más területekre helyezzék kutatásukat. Sok új technológia járt akaratlanul is negatív mellékhatásokkal: a belső égésű motor a légszennyezést hozta és azt, hogy még az Édenkertet is leaszfaltozták, a maghasadás felfedezése pedig a csernobili és a Three Mile Island-i^[283] atomkatasztrófákat hozta, és a globális pusztulás veszélyének fenyegetését. Minden tudósnak és mérnöknek szembe kell néznie a munkájukkal kapcsolatos etikai kérdésekkel: mely projekteket szabad befejezni, és melyeket nem, és hogyan kell ezeket a projekteket kezelni. Még egy Ethics of Computing (Berleur és Brunnstein, 2001) c. kézikönyv is létezik. A mesterséges intelligencia azonban, úgy tűnik, néhány új problémát is felvet, azon túl, hogy olyan hidakat akarunk építeni, amelyek nem dőlnek össze: * Az emberek az automatizáció miatt elveszíthetik a munkájukat. * Az embereknek túl sok (vagy túl kevés) szabadidejük marad. * Az emberek elveszíthetik az egyediségérzésüket. * Az emberek elveszíthetik a személyiségi jogaik egy részét. * Az MI-rendszerek alkalmazása megszüntetheti a felelősségre vonhatóságot. * A mesterséges intelligencia sikere az emberi faj végét jelentheti.
20	0.785714	1	A sajátérték, sajátvektor, másik bázisra való áttérés fogalma és a rájuk vonatkozó eredmények kritikusak annak megértése érdekében, hogy hogyan működik például a Widrow-Hoff szabály, vagy a backpropagation.
11	0.923077	0	Az összefésülési probléma egyik megoldása a célregressziós tervkészítés volt, ami egy olyan technika, melyben egy teljesen rendezett terv lépéseit a részcélok közötti konfliktusok elkerülése érdekében újrarendezzük. Ezt Waldinger vezette be (Waldinger, 1975), és Warren Warplan rendszerében (Warren, 1974) szintén felhasználták. A Warplan-nel kapcsolatban szintén kiemelendő, hogy ez volt az első tervkészítő, melyet logikai programozási nyelven (Prolog) írtak, valamint az egyik legjobb példa arra a kiemelkedő gazdaságosságra, ami a logikai programozással nyerhető: a Warplan összesen száz kódsor, azaz csak töredéke az abban az időben ismert hasonló tervkészítők méretének. Az Interplan (Tate, 1975a; 1975b) a Sussman-anomália és hasonló problémák elkerülése érdekében, szintén megengedte a tervlépések tetszőleges összefésülését.
5	0.818182	0	A magasabb rendű kényszerek kezelésének külön módszerei elsősorban a kényszerlogikai-programozás (constraint logic programming) keretein belül alakultak ki. Marriott és Stuckey (Marriott és Stuckey, 1998) nagyszerű összefoglalást nyújt erről a kutatási területről. A MindKül kényszert Regin (Regin, 1994) tanulmányozta. Az alsó és felső határokból álló kényszereket Van Hentenryck és társai vezették be a kényszerlogikai programozásba (Van Hentenryck és társai,1998).
21	0.5625	0	Alkalmazhatjuk ezeket a szabályokat arra az esetre, amikor U[θ](1,1) = 0,8 és u[j](1, 1) = 0,4. Ekkor θ[0], θ[1] és θ[2] mindegyike 0,4α-val csökken, ami mind csökkenti az (1, 1)-beli hibát. Vegyük észre, hogy a θ[i]-k változtatása az összes többi állapotra is megváltoztatja U[θ] értékét! Ezt értettük azon, amit mondtunk: a függvényapproximáció lehetővé teszi a megerősítéses tanulást végzőnek, hogy általánosítson a tapasztalataiból.
23	0.388889	0	Az unigram modell az összes szót függetlenként kezeli, azonban mi tudjuk, hogy bizonyos szavak korreláltak: a „dívány” közeli kapcsolatban áll mind a „díványok”-kal, mind a „kanapé”-val. Számos IR-rendszer próbálja figyelembe venni ezeket a korrelációkat.
11	0.5	0	Ez az x változót kötetlenül hagyja. Ez annyit tesz, hogy a cselekvés annyit mond, hogy mozgasd A-t valahonnan, de azt nem, hogy honnét. Ez egy másik példa a legkisebb megkötés elvre: elhalaszthatjuk a döntéseket egészen addig, amíg a terv egy másik lépése ezt meghozza nekünk. Tegyük fel például, hogy a Rajta(A, D) a kiinduló állapotunk. Az x-et D-vel behelyettesítve az Indít cselekvés használható fel, hogy elérjük a Rajta(A, x)-et. A módszer, hogy több információt kivárunk, mielőtt megválasztjuk x-et, gyakran sokkal hatékonyabb, mint az x minden értékének kipróbálása és a visszalépés, ha ez sikertelen.
13	0.272727	0	A véletlen változók – a CSP-változókhoz hasonlóan – tipikusan három csoportba sorolhatók a tartomány fajtájától függően: * (Boole-típusú) logikai véletlen változók (Boolean random variables), mint a Lyuk, amelyeknek az 〈igaz, hamis〉 a tartománya. Az olyan állításokat, mint a Lyuk = igaz gyakran rövidítve, csak a kis kezdőbetűs nevével – lyuk – fogjuk jelölni, míg a Lyuk = hamis állítás rövidített jelölése: ¬lyuk. * Diszkrét véletlen változók (discrete random variables), amelyek speciális esetben logikai változók is lehetnek, egy megszámlálható tartományból vesznek fel értéket. Például az Időjárás tartománya a 〈napos, esős, felhős, havazik〉 lehet. A tartomány értékeinek egymást kizáróknak és összességében kimerítőknek (teljeseknek) kell lenniük. Ha ez nem okozhat félreértést, akkor a havazik rövidítés fogja jelölni például az Időjárás = havazik állítást. * Folytonos véletlen változók (continuous random variables), amelyek valós értéket vehetnek fel. A tartomány lehet akár a teljes valós tengely, akár annak egy részhalmaza, mint a [0, 1] intervallum. Például az az állítás, hogy X = 4,02 azt jelenti ki, hogy az X véletlen változó értéke pontosan 4,02. A véletlen változókra vonatkozó állítások egyenlőtlenségek is lehetnek, mint például X ≤ 4,02.
13	0.090909	0	De még ez a szabály sem lesz helyes, hiszen nem minden lyukas fog okoz fájdalmat. Az egyetlen módja, hogy kijavítsuk a szabályt, az az, hogy logikailag teljessé tesszük: a bal oldalt ki kell bővíteni minden olyan lehetséges okkal, amely lyukas fogak esetén fogfájást okoz. De még ebben az esetben is figyelembe kell venni a diagnózis megállapításánál annak lehetőségét, hogy a betegnek egymástól teljesen függetlenül is lehet fogfájása és lyukas foga.
2	0.894737	0	Az ágensek és ágenstervezés iránti érdeklődés gyorsan növekedett az elmúlt években, részben az internet, valamint az automatizált és mobil szoftbotok iránti igény növekedésével (Etzioni és Weld, 1994). A releváns cikkeket a Readings in Agentsben (Huhns és Singh, 1998), valamint a Foundations of Rational Agencyben (Wooldridge és Rao, 1999) gyűjtötték össze. A Multiagent Systems (Weiss, 1999) nyújtja az ágenstervezés sok aspektusának egységes alapját. Az ágenseknek szentelt konferenciák között van az International Conference on Autonomous Agents, az International Workshop on Agent Theories, Architectures, and Languages, és az International Conference on Multiagent Systems. Végezetül, a Dung Beetle Ecology (Ganajtúró bogár ökológia) (Hanski és Cambefort, 1991) érdekes információk gazdag választékát kínálja a ganajtúró bogarak viselkedéséről.
5	0.181818	1	Az algoritmus a (V, NSW) éllel folytatja. Ezzel is ugyanaz a helyzet, mint ami előbb a (Q, NSW) és (SA, NSW) élekkel volt. A V értékkészletéből is ki kell venni a RED értéket, mert ehhez nincs konzisztens értéke az NSW-nek. A V értékkészlete is {GREEN, BLUE}-ra redukálódik tehát. Ezért pedig az AC3 algoritmus, miután kitörli a listáról a (V, NSW) élet, a lista végére teszi az összes V-be mutató élet. Az él-listánk ennek következtében a következő lesz:
10	0.69697	0	Az olvasó talán felfedezte már a szemantikus háló jelölésnek egy nyilvánvaló hátrányát az elsőrendű logikához képest. A krumplik közötti élek csak bináris relációkat reprezentálnak. A Repül(Shankar, NewYork, Újdelhi, Tegnap) állítást a hálóban közvetlenül megfogalmazni nem tudjuk. Az n értékű állítások hatását megkaphatjuk azonban, ha az állítást magát egy, az események megfelelő kategóriájához tartozó eseményként reifikáljuk (lásd  alfejezet). A  ábra ehhez a konkrét eseményhez tartozó szemantikus hálóstruktúrát mutat. Jegyezzük meg, hogy a bináris relációkra vonatkozó korlátozás a reifikált fogalmak gazdag ontológiáját teszi szükségessé. Az ebben a fejezetben kifejlesztett ontológia zöme ténylegesen a szemantikus hálós rendszerekben gyökerezik.  ábra - A szemantikus háló egy részlete, amely a Repül(Shankar, NewYork, Újdelhi, Tegnap) logikai állítás reprezentációját valósítja meg A szemantikus háló egy részlete, amely a Repül(Shankar, NewYork, Újdelhi, Tegnap) logikai állítás reprezentációját valósítja meg
7	0.96	0	Tekintsük azt a problémát, hogy hogyan dönthető el egy ítéletkalkulus mondat igazsága egy adott modellben. a. Írjon egy IK-Igaz?(s, m) rekurzív programot, amely akkor és csakis akkor ad vissza igazat, ha az s mondat igaz az m modellben (ahol m minden s szimbólumhoz egy igazságértéket rendel). Az algoritmusnak a mondat méretével lineárisan változó időben kell futnia. (Használhatja ennek a függvénynek egy változatát az online kódtárból.) b. Adjon három példát olyan mondatokra, amelyekről meghatározható, hogy igazak vagy hamisak egy részleges modellben, amely nem specifikálja minden szimbólum igazságértékét. c. Mutassa meg, hogy egy részleges modellben egy mondat igazságértéke (ha van ilyen) általánosságban nem határozható meg hatékonyan. d. Módosítsa az IK-Igaz? algoritmust úgy, hogy néha részleges modell alapján is meg tudjon határozni igazságértékeket és közben tartsa meg a függvény igazságértékét és lineáris futási idejét. Adjon meg három példát olyan mondatokra, amelyek igazságértékét a részleges modellben nem állapítja meg az algoritmus. e. Vizsgálja meg, hogy a módosított algoritmus hatékonyabbá teszi-e az IT-Vonzat? eljárást.
25	0.37037	1	Az A mobil objektumon kiválasztunk egy r referenciapontot, amely a keresés során reprezentálja az egész objektumot, s a ponttá zsugorítást kompenzálandó, az akadályokat megnöveljük a megfelelő mértékben. Ezt a növelést azáltal érjük el, hogy a mobil objektumot az akadályok határvonala mentén végigcsúsztatjuk, és a referenciapont mozgási pályájára burkológörbét illesztve, megkapjuk a megnövelt akadályozó objektumot (B[A]). B[A]-ra mint az A objektum által indukált konfigurációs térbeli akadályra hivatkozunk. Mivel a mobil objektum a munkaterület határait sem érintheti, azokat is meg kell növelni. A robot munkaterületének határai akadálynak tekinthetők, így a munkaterület falai befelé növekednek akkora mértékben, amekkorát az A objektum a munkaterület falai mentén körülcsúszva meghatároz. Az akadályok elkerülésének feltétele így már egyszerűen meghatározható: Amíg az r referenciapont a B[A] konfigurációs térbeli akadályon kívül marad, addig az ütközés veszélye nem fenyeget. Így az eredeti problémát, melyben egy kiterjedt objektum számára kellett utat találni, leredukáltuk egy pont útjának keresésére. Ha adott a kiindulási pont és a cél, valamint az egyenes vonalú mozgást végző (A) poligon az r referenciaponttal és B^k (0 < k < m) konvex akadályok, akkor a startponttól a célig vezető pálya szakaszokból áll, és a szakaszok végpontjai a konfigurációs térbeli akadályok csúcspontjainak halmazából választhatók ki.
6	0.1	1	Egy sakkprogram megírása során alapvető fontosságú a teljesítményoptimalizálás. A hatalmas állapotterű keresések rendkívül gyors adatmodellt igényelnek, így nagyon fontos, hogy a program hogyan tárolja a sakktáblát, valamint, hogy hogyan kezeli a szabályokat. A lehetséges lépések felderítésének megvalósításánál a gyorsaságra és a kis memóriaigényre kell törekedni, hiszen ez egy rendkívül gyakori művelet. Ezek azonban csak az alapokat adhatják meg a rendkívül hatékony algoritmusoknak.
4	0.958333	0	Bizonyítsa be az alábbi állításokat: a. A szélességi keresés az egyenletes költségű keresés egy speciális esete. b. A szélességi keresés, a mélységi keresés és az egyenletes költségű keresés a legjobbat-először keresés speciális esetei. c. Az egyenletes költségű keresés az A^* keresés egy speciális esete.
16	0.695652	0	A formula megértése érdekében gondoljuk át azt az egyszerű esetet, mikor csak két cselekvés, A[1] és A[2] közül lehet választani. A cselekvések jelenleg várható hasznosságai U[1] és U[2]. Az E[j] információ új várható hasznosságokat,  -et és  -t fog eredményezni a cselekvésekre, de E[j ]megszerzése előtt már ismerjük a függetlennek feltételezett  és  lehetséges értékeinek valószínűség-eloszlásait.
6	0.1	1	Nash eredményeinek köszönhetően, a XX. század közepe táján indult meg a kooperatív játékelmélet fejlődése Shapley jóvoltából, illetve a Mechanizmus-tervezés, avagy más néven Inverz Játékelmélet (lásd. később) gyökerei is ide nyúlnak vissza, Arrow 1951 körüli munkásságának köszönhetően.
26	0.857143	1	Látható, hogy a betegek jó része együttműködőnek mondható, a lakosság egészségtudatossága, illetve a betegek tájékozottsági szintje azonban alacsony az orvosok visszajelzése alapján. Az orvosok értékelték, hogy tapasztalataik alapján, milyenek találják a magyar lakosság-betegeket és egészségeseket egyaránt beleértve- állapotát a kérdéses szempontokból. Ahogyan az ábrán is látható, az elvárt és tényleges állapotok igen távol esnek egymástól és a magyar lakosság egészségi állapota orvosi értékelések alapján, egy 10-es skálán mindössze 3 és 4 között mozog. Látható, hogy a vizsgált tényezők közül az egészséges életmód szempontjából az orvosok a rendszeres testmozgást és a dohánymentes életet tartják a legfontosabbnak, míg a laikusoknál első helyen a stressz-mentes életvitel szerepel, melyet a dohányzás követ. Mind az orvosok, mind a lakosság körében a mértékletes alkoholfogyasztás és a tájékozódás szerepe alulértékelt leginkább. A vizsgált tényezők fontossága a krónikus betegek esetében magasabb, illetve valamennyi szempont esetében igaz, hogy a káros szokások „hívei” kevésbé tartják fontosnak azokat.
13	0.363636	0	kijelentés azt a hiedelmet fejezi ki, hogy X egyenletes eloszlást mutat 18 és 26 °C között. (Néhány hasznos folytonos valószínűségi változó definícióját az A) függelékben találjuk meg.) A folytonos valószínűségi változókra vonatkozó valószínűségi eloszlást valószínűség-sűrűségfüggvénynek (probability density function) nevezzük. A sűrűségfüggvények jelentése különbözik a diszkrét eloszlásokétól. Például a korábbiakban megadott hőmérsékleteloszlásból kiindulva P(X = 20,5) = U[18, 26](20,5) = 0,125/°C adódik. Ez nem azt jelenti, hogy annak az esélye, hogy a holnapi maximális hőmérséklet pontosan 20,5 °C lesz 12,5%; ennek a valószínűsége természetesen 0. Technikailag ez azt jelenti, hogy annak a valószínűsége, hogy a kérdéses hőmérséklet a 20,5 °C egy kicsiny környezetébe fog esni, határértékét tekintve egyenlő azzal, hogy a 0,125-öt elosztjuk a szakasz °C-ban megadott szélességével:
17	0.066667	0	Ha a probléma determinisztikus volna, a megoldás könnyű lenne: [Fel, Fel, Jobbra, Jobbra, Jobbra]. Sajnos a környezet nem maradna mindig szinkronban ezzel a megoldással, mivel a cselekvések megbízhatatlanok. A véletlenszerű mozgás egy általunk elfogadott modelljét a  (b) ábra mutatja be. Minden cselekvés 0,8 valószínűséggel éri el a kívánt hatását, de a maradék esetben a cselekvések az ágenst a kívánt iránytól jobbra mozgatják. Továbbá, ha az ágens falba ütközik, akkor ugyanazon a mezőn marad. Például ha az (1, 1) kezdő négyzeten áll, a Fel cselekvés az ágenst az (1, 2)-re mozgatja 0,8 valószínűséggel, de 0,1 valószínűséggel a (2, 1)-re kerül, és 0,1 valószínűséggel balra megy, ahol is falnak ütközik és (1, 1)-en marad. Egy ilyen környezetben a [Fel, Fel, Jobbra, Jobbra, Jobbra] sorozat 0,8^5 = 0,32768 valószínűséggel kerüli meg az akadályokat, és éri el a (4, 3) célállapotot. Igen kis eséllyel az is megtörténhet, hogy a célt a másik úton keresztül éri el, 0,1^4 × 0,8, ami összességében 0,32776 valószínűséget jelent (lásd  feladat).
9	0.448276	1	Az biztos, hogy a Prolog nélkül ma nem úgy lenne mesterséges intelligencia kutatás, mint ahogy az van. Alapjaiban teremtette meg a logikai és deklaratív programozás témakörét. A mesterséges intelligencia programok bizonyos típusú problémákat oldanak meg, melyek első pillantásra emberi intuíciót igényelnek, bár némelyiküknek már létezik pontosan algoritmizálható megoldása is. Sok mesterséges intelligencia problémának azonban ma még nem ismert a pontos megoldása, és a programokban nagy szerepet játszanak az emberi tapasztalatokból leszűrt, nem bizonyított (heurisztikus) szabályok [13]. A mesterséges intelligencia pont így működik.
19	0.545455	1	A jegykiválasztás folyamán valamilyen egzakt módon kell lemérnünk egy adott jegyről, hogy milyen hatást fejt ki az osztályozásra. Erre a célra használható az osztályváltozó feltételes valószínűség-eloszlása: P(C|F= f ) , ahol C az osztályváltozót, F a jegyek vektorát, f pedig egy lehetséges érték hozzárendelést jelöli. (Jelen kontextusban jegy alatt egy diszkrét i.i.d. – azaz független, azonos eloszlású – véletlen változót értünk.)
4	0.291667	1	Tekintsük a bal oldali ábrát. Ha a bástya tetszőleges számú mezőt léphet egyenes vonalban, akkor az A (kék) és a B (piros) mező közötti távot két lépésben teheti meg. Az A és B pontok Manhattan-távolsága viszont 4+4=8. A keresési térben találtunk tehát egy olyan helyzetet, amikor a heurisztika nem optimista, viszont az elfogadhatósághoz heurisztikának a tér minden pontjában optimistának kell lennie, kivétel nélkül. Az 1. kérdésre a válasz tehát: nem!
6	0.65	0	A két eset tökéletesen szimmetrikus: a játék lefolyása azonos lesz, kivéve, hogy a második ütésnél max a ♥ 6-ot fogja megjátszani. A játék ugyanúgy döntetlen lesz két-két ütéssel, és a ♣ 9 optimális döntés lesz most is.
12	0.047619	0	Ha adott a cselekvések egy részleges rendezése az időtartamokkal, ahogy a  ábra is mutatja, akkor a kritikus útvonal módszer (critical path method – CPM) felhasználható az egyes cselekvések lehetséges kezdési és befejezési időpontjainak meghatározására. Egy részben rendezett tervben található útvonal, cselekvések egy lineárisan rendezett sorozata, ami az Indít-ból indul és a Befejez-ben fejeződik be (például a  ábra részben rendezett tervében két út található).
12	0.428571	0	A bemutatott algoritmusban kulcsfontosságú a nemdeterminisztikus tervkészítési problémákban gyakran felmerülő ciklusok kezelésének módja (például ha egy cselekvésnek néha nincs következménye vagy egy helytelen következmény kijavítható). Ha az aktuális állapot azonos a gyökértől idáig vezető útvonal egy állapotával, akkor hibával tér vissza. Ez nem jelenti, hogy nincs megoldás az aktuális állapotból, egyszerűen annyit jelent, hogy van egy nemciklikus megoldás, ami elérhető az aktuális állapot korábbi előfordulásából, így az állapot újabb bekövetkezése kihagyható. Ezzel az ellenőrzéssel biztosítjuk, hogy az algoritmus minden véges állapottér esetén leálljon, mivel minden útvonal célt ér, zsákutcába jut, vagy egy állapot ismétlése. Vegyük észre, hogy az algoritmus nem ellenőrzi, hogy az aktuális állapot egy másik útvonalon szereplő állapot ismétlése-e. A  feladat ezt a kérdést járja körül.  ábra - A „tripla-Murphy” porszívóvilág keresési gráfjának első szintje, ahol a ciklusokat explicit megjelöltük. A probléma összes megoldása ciklikus terv. A „tripla-Murphy” porszívóvilág keresési gráfjának első szintje, ahol a ciklusokat explicit megjelöltük. A probléma összes megoldása ciklikus terv.
5	0.181818	1	Az értékadás eredményeképpen előálló {NSW=RED, Q=GREEN, SA=BLUE, NT=RED, WA=GREEN, V=GREEN} behelyettesítés konzisztens, így mehetünk tovább - jöhet az előretekintés. Ennek során az előbbi, WA változós esethez hasonlóan most sem teszünk semmit, hiszen a V változónak sincs olyan behelyettesítetlen szomszédja, melynek értékkészletéből megpróbálhatnánk kivenni a GREEN értéket. Tehát az algoritmus tovább lép, újra meghívja önmagát immár az aktuális, 6 változónak értéket adó behelyettesítéssel.
14	0.086957	1	Bináris döntési függvény (fogalom) tanulás esetén célunk egy f 0 : R d →0,1  beazonosítása. A tanulás folyamatában és az eredményének kiértékelésében is szükség van egy olyan minősítő/jellemző eljárásra, ami egy általános f függvény "jóságát" a célfüggvényhez f 0  -hoz megadja. Általános diszkrét, de nem bináris esetben egy hasznosság/veszteség mátrix megadása teszi ezt lehetővé. A bináris esethez a gyakorlati fontossága miatt azonban egy speciális terminológia is kapcsolódik, amelyet összefoglalunk. Továbbá bemutatunk egy olyan csak bináris esethez tartozó minősítést/jellemzést is, amely a bináris hasznosság/veszteség mátrixtól függetlenül, pontosabban annak lehetséges értékei mellett általában jellemzi az f  függvényt.
11	0.230769	0	Az egyik leghíresebb tervkészítési terület a kockavilág (blocks world) probléma. A terület asztallapon elhelyezett kockákból áll.^[113] A kockákat egymásra rakhatjuk, de egy kockán közvetlenül mindig csak egyetlen másik helyezhető el. A kockákat egy robotkarral mozgathatjuk, amely fel tud venni egy kockát, majd azt vagy az asztalra, vagy egy másik kocka tetejére le tudja tenni. A robotkar egyszerre csak egy kockát tud felemelni, vagyis olyat nem, amelynek a tetején egy másik kocka van. A cél mindig egy vagy több kockaoszlop építése, amelyekben a kockák egymáshoz képesti elhelyezkedése meghatározott. A cél lehet például két oszlop építése, amelyek közül az egyikben az A kocka a B tetején van, a másikban pedig a C kocka van a D tetején.
4	0.583333	0	A nyalábkereséshez hasonlóan, a GA is k véletlen módon generált állapottal indul, aminek populáció (population) a neve. Minden állapotot vagy egyedet (individual) egy véges ábécé fölött értelmezett füzér képvisel – leggyakrabban egy 0-ból és 1-ekből álló füzér. A 8-királynő állapotnak például a 8 királynő pozícióját kell specifikálnia, mindegyik egy 8 négyzetet tartalmazó oszlopban, így 8 × log[2]8 = 24 bitre van szükség. Az állapotot 8 számjeggyel is lehetne jellemezni, melyek mindegyike az 1 − 8 tartományból való (később látni fogjuk, hogy a két kódolás viselkedése eltérő). A  (a) ábra egy olyan populációt mutat be, mely négy, a 8-királynő állapotait reprezentáló 8 számjegyes füzérből áll.  ábra - A genetikus algoritmus. Az (a)-beli kezdeti populációt (b)-ben fitness-függvény alapján rangsoroljuk, aminek eredményét a (c)-ben látható reprodukáló párok adják. A létrehozott utódok a (d)-ben láthatók, melyekre még hat a mutáció (e). A genetikus algoritmus. Az (a)-beli kezdeti populációt (b)-ben fitness-függvény alapján rangsoroljuk, aminek eredményét a (c)-ben látható reprodukáló párok adják. A létrehozott utódok a (d)-ben láthatók, melyekre még hat a mutáció (e).
6	0.1	1	Az előzőekből következik, hogy a Nim játék nimbere a halmokban található elemek számának Nim-összege (hisz a Nim különböző elemszámú halom játékok összege), ily módon annak, aki nyerni akar, úgy kell játszania, hogy minden lépés után ez a Nim-összeg 0 maradjon. Ekkor a Nim játék nimbere 0, vagyis a kezdő (lépő) játékos nyer. Hasonlóan vizsgálható több, a második pontban bevezetett játék is.
16	0.043478	0	Egy nemdeterminisztikus A cselekvésnek az Eredmény[i](A) állapotok a lehetséges következményei, ahol az i index a különböző következményeken fut végig. Az A végrehajtása előtt az ágens egy P(Eredmény[i](A)|Tesz(A), E) valószínűséget rendel minden egyes következményhez, ahol az E az ágens által a világról elérhető tényeket jelöli, és a Tesz(A) egy állítás, hogy az A cselekvés végrehajtódik a jelenlegi állapotban. Ekkor a következő formulával kiszámíthatjuk a cselekvés EU(A|E) várható hasznosságát (expected utility) adott tények esetén:
3	0.25	1	Közismert, hogy a játék állapottere particionált és két, azonos méretű állapottérből tevődik össze, amely részek között legális lépéssel átjárás nincs. Ez volt a játék hírnevét megalapozó kiirt verseny titka.
14	0.826087	1	Számos betegség (például hypertónia, diabetesz és a szívbetegségek) kialakulásában több tényező illetve gén szerepet játszhat, így a kóros eltérések lehetséges variációja is meglehetősen nagy. Nem elég pusztán a betegségek fenotípusos manifesztációját vizsgálni, hanem a pontos diagnózishoz az adott egyén genetikai jellemzőit, a betegség kialakulásának etiológiáját, és az ennek során lejátszódó subcelluláris folyamatokat is ismerni kell.
3	0.083333	1	Altárgyszavak: ezek segítségével a főtárgyszó által jelzett fogalmat csak bizonyos szempont(ok)ból vizsgáljuk. Így például a MÁJBETEGSÉGEK-diagnózis kombináció azt jelzi az indexelő-katalogizáló, visszakereső számára, hogy a cikk nem általában a májbetegségekről szól, hanem annak diagnózisáról. Egy főtárgyszóhoz több altárgyszó is tartozhat, ezek abc sorrendben kerülnek felsorolásra. Egy főtárgyszóhoz nem szükségszerűen ugyanazok az altárgyszavak tartoznak.
20	0.821429	0	 Fontos Bár ennek a kifejezésnek a deriválása nem nagyon fontos pontja a történetnek, de azért van két lényeges tulajdonsága. Először is a kifejezésnek egyetlen, globális maximuma van, ami hatékonyan megtalálható. Másodszor az adatok kizárólag pontpárok skalárszorzataként jelennek meg a kifejezésben. Ez a második tulajdonság magára a szeparátorra is igaz, ha az optimális α[i]-ket kiszámítottuk, akkor:
6	0.1	1	Az adott környezet felett adott mechanizmus által indukált játék még inkább hasonlít az előzőekben definiált Bayes-i játékokhoz. A különbség most már tényleg csak annyi, hogy Si tiszta stratégia-halmazok helyett itt most Mi szerepel. Viszont a kettő jelentése ugyanaz. Ami még szembetűnő lehet, hogy a haszonfüggvény számításában immár a g kimeneteli függvény is szerepet játszik, sőt, az ágensek adott stratégiakombináció esetén vett hasznát a környezetben szereplő értékelési, és a mechanizmusban adott kifizetési függvények összegeként értelmezzük (kvázi lineáris formában).
25	0.777778	0	A hibrid architektúra modellbe épített tudással ötvözi a reaktivitást. Messze a legnépszerűbb hibrid architektúra az úgynevezett háromréteges architektúra (three-layer architecture), amely egy reaktív, egy végrehajtó és egy modellező rétegből áll.
10	0.878788	0	Azon túl, hogy a TMSek a hibás információt visszavonják, felhasználhatók a többszörös hipotetikus helyzet elemzésének a felgyorsításához is. Tegyük fel, hogy a Román Olimpiai Bizottság helyszíneket keres a 2048-ban Romániában megrendezendő olimpiai játékokhoz az úszó, a könnyűatlétikai és a lovas versenyszámok számára. Legyen az első hipotézis a következő: Helyszín(Úszás, Piteşti), Helyszín(Könnyűatlétika, Bukarest) és Helyszín(Lovasverseny, Arad). A választás logisztikai következményeinek kiderítéséhez, és így a helyszínek kívánatosságának meghatározásához igen sok következtetés szükséges. Ha figyelembe akarjuk venni a Helyszín(Könnyűatlétika, Nagyszeben)-t, a TMS elkerüli annak a szükségességét, hogy újra nullából induljunk ki. Egyszerűen viszavonjuk a Helyszín(Könnyűatlétika, Bukarest)-t, és hozzáadjuk a Helyszín(Könnyűatlétika, Nagyszeben)-t, és a TMS a szükséges revíziókat magára vállalja. A Bukarestre vonatkozó következtetési láncok Nagyszeben esetén újrafelhasználhatók, feltéve, hogy a konklúziók ugyanazok lesznek.
8	0.870968	0	Sokféleképpen perturbálhatjuk a tudásbázist, hogy meglássuk, milyen fajta hibás viselkedések fordulhatnak elő. Például tételezzük fel, hogy kihagyjuk az 1 ≠ 0^[86] állítást. A rendszer ebben a pillanatban már nem lesz képes semmilyen kimenetet sem produkálni az áramkörben, kivéve, ha a bemenet a 000 vagy az 110. Rábukkanhatunk a problémára, ha minden egyes kapu kimenetére rákérdezünk. Például, megkérdezhetjük:
14	0.086957	1	Az eszenciális gráfokban szereplő kényszerített élek kapcsán természetes módon vetődik fel az oksági értelmezésük, például ilyen élek triviálisan a (nem bezavart) v-struktúrák X→Y←Z  , amelyek irányítása megfelel az emberi tapasztalatoknak az intranzitív hármasokkal kapcsolatban (nevezetesen, hogy X  és Z  független, Y  -t időben megelőző okok.
24	0.833333	1	A hisztogram számításhoz a következő finomítások használatosak. A vektoroknak a vödörhöz való hozzájárulása általában súlyozott, például a gradiens nagyságával, vagy annak egy függvényével, esetleg a terület középpontjába helyezett Gauss függvénnyel. Célszerű lehet a gradienseket a feldolgozás előtt normalizálni, hogy megvilágítás és egyéb változások ne befolyásolják az eredményt. A normalizálás lokálisan történhet, csak néhány szomszédos terület szolgál viszonyítási alapként.
14	0.913043	0	A Dempster–Shafer-elmélet Arthur Dempster publikációjával kezdődött, amiben a pontszerű valószínűségi értékek általánosítását javasolta intervallumértékekre, és szabályokat javasolt a kombinálásukra (Dempster, 1968). Glenn Shafer későbbi munkája vezetett el a Dempster–Shafer-elmélet és a valószínűség-számítás egymással versengő szemléletéhez (Shafer, 1976). Ruspini a Dempster–Shafer-elmélet és a valószínűség-számítás kapcsolatát elemezte (Ruspini és társai, 1992). Shenoy a Dempster–Shafer bizonyosságfüggvény alapján egy eljárást javasolt a döntéshozatalra (Shenoy, 1989).
14	0.73913	1	Az adott változó értékére a változóhoz tartozó összes fuzzy halmaz esetére el kell végezni a tagsági érték számítását. Általános eset, hogy a változó, adott értékével egyszerre két fuzzy halmaznak is a tagja. Az alsó ábra esetén a Q változó, aktuális értékével, A2 és A3 jelű fuzzy halmazhoz is nullától nagyobb tagsági értékkel tartozik.  ábra - Q változó fuzzy halmazfelosztása Q változó fuzzy halmazfelosztása
24	0.833333	0	Az oldalsó irányításhoz szükséges a gépkocsi pozíciójának és irányítottságának a sávhoz képesti reprezentálása. A  ábrán látható kép esetén éldetektáló algoritmusokkal azonosítjuk a sávhatárokat jelző határoló vonalakhoz tartozó éleket. Ezt követően ezekre az élekre sima görbéket illeszthetünk. Ezen görbék paraméterei információt hordoznak a gépkocsi oldalsó elhelyezkedésére nézve, az autó haladási irányára a sávon belül és a sáv íveltségére. Ez az információ – a gépkocsi dinamikájával együtt – képezi mindazt, amire a kormányzást irányító rendszernek szüksége van. Jegyezzük meg azt is, hogy mivel képkockáról képkockára a sáv képi vetületének pozíciója csupán csekély mértékben változik, tudjuk, hogy a képen a sávhatárjelző vonalakat hol keressük – csak azokon a területeken kell keresnünk, amelyek párhuzamos fehér vonalakkal vannak megjelölve.
12	0.238095	0	A részben rendezett tervkészítő algoritmushoz további módosítások szükségesek, mert a magas szintű cselekvések elrejtik az információt a végső elemi megvalósításukról. Nevezetesen az eredeti részben rendezett tervkészítő algoritmus hibával lép vissza, ha az aktuális terv feloldhatatlan ütközést tartalmaz, vagyis ha egy cselekvés ütközik egy okozati kapcsolattal, de nem helyezhető sem elé, sem pedig mögé. (Erre a  ábra mutat példát.) Másrészről, a magas szintű cselekvések esetén a feloldhatatlan ütközések néha feloldhatók az ütköző cselekvések dekompozíciójával és lépéseik összerendezésével. Erre a  ábra mutat be egy példát. Így előfordulhat olyan eset, ahol dekompozícióval egy teljes és konzisztens alapterv nyerhető, még akkor is, hogyha nem létezik teljes és konzisztensen magas szintű terv. Ez a lehetőség azt jelenti, hogy egy teljes HFH-tervkészítőnek végig kell tekintenie az eredeti részben rendezett tervkészítőhöz található számos metszési lehetőséget. Egyébként használhatjuk bármely metszési eljárást, remélve, hogy nem hagyunk figyelmen kívül lehetséges megoldást.  ábra - Az O. Henrik történetből kiragadott Mágusok ajándéka probléma egy inkonzisztens absztrakt tervet mutat, ami azonban dekomponálható egy konzisztens megoldásra. Az (a) ábra a problémát mutatja be: egy szegény házaspárnak csak két értékes tulajdona van. A férfinek egy aranyórája, a nőnek pedig a gyönyörű hosszú haja. Mindketten azt tervezik, hogy ajándékot vásárolnak a másiknak, hogy az boldog legyen. A férfi úgy dönt, hogy az óráját egy ezüstfésűre cseréli be, míg a nő eladja a haját, hogy aranyláncot vegyen az órához. (Feltételezzük, hogy a „Fésűt ad” cselekvés előfeltétele a Haj, mivel ha a feleségnek nincs hosszú haja, a cselekvés nem éri el a kívánt hatást, hogy boldoggá tegye; és hasonlóképpen a „Láncot ad” cselekvésre.) A (b) ábrán szereplő részleges terv inkonzisztens, mert a „Fésűt ad” és „Láncot ad” absztrakt lépések nem sorrendezhetők konfliktus nélkül. (c) Dekomponáljuk a „Fésűt ad” lépést egy „beilleszt terv” metódussal. A dekompozíció első lépésében a férj megszerzi a fésűt, és odaadja feleségének, miközben az órát egy későbbi időpontban adja oda fizetségül. A második lépésben az órát átadja, és a kötelezettséget teljesíti. Egy hasonló módszer dekomponálja a „Láncot ad” lépést. Amíg mindkét odaadó lépést a szállítási lépés elé sorrendezzük, ez a dekompozíció megoldja a feladatot. (Vegyük észre, hogy ez azon múlik, hogy a lánc használata az órához vagy a fésű használata a hajhoz boldogságot okoz még akkor is, ha a tulajdonjogot már elvesztették.) Az O. Henrik történetből kiragadott Mágusok ajándéka probléma egy inkonzisztens absztrakt tervet mutat, ami azonban dekomponálható egy konzisztens megoldásra. Az (a) ábra a problémát mutatja be: egy szegény házaspárnak csak két értékes tulajdona van. A férfinek egy aranyórája, a nőnek pedig a gyönyörű hosszú haja. Mindketten azt tervezik, hogy ajándékot vásárolnak a másiknak, hogy az boldog legyen. A férfi úgy dönt, hogy az óráját egy ezüstfésűre cseréli be, míg a nő eladja a haját, hogy aranyláncot vegyen az órához. (Feltételezzük, hogy a „Fésűt ad” cselekvés előfeltétele a Haj, mivel ha a feleségnek nincs hosszú haja, a cselekvés nem éri el a kívánt hatást, hogy boldoggá tegye; és hasonlóképpen a „Láncot ad” cselekvésre.) A (b) ábrán szereplő részleges terv inkonzisztens, mert a „Fésűt ad” és „Láncot ad” absztrakt lépések nem sorrendezhetők konfliktus nélkül. (c) Dekomponáljuk a „Fésűt ad” lépést egy „beilleszt terv” metódussal. A dekompozíció első lépésében a férj megszerzi a fésűt, és odaadja feleségének, miközben az órát egy későbbi időpontban adja oda fizetségül. A második lépésben az órát átadja, és a kötelezettséget teljesíti. Egy hasonló módszer dekomponálja a „Láncot ad” lépést. Amíg mindkét odaadó lépést a szállítási lépés elé sorrendezzük, ez a dekompozíció megoldja a feladatot. (Vegyük észre, hogy ez azon múlik, hogy a lánc használata az órához vagy a fésű használata a hajhoz boldogságot okoz még akkor is, ha a tulajdonjogot már elvesztették.)
7	0.04	0	A  ábra egy tudásbázisú ágens programjának vázát mutatja. Mint ahogy az összes ágensünk, ez is észlel valamit bemenetként, és egy cselekvést ad vissza válaszként. Az ágens fenntart egy tudásbázist, TB-t, amely kezdetben bizonyos háttértudást (background knowledge) tartalmazhat. Ha az ágensprogramot meghívják, az három dolgot tesz. Először Kijelent-i a tudásbázisnak, hogy mit észlelt. Másodszor Kérdez-i a tudásbázist, hogy milyen cselekvést kell végrehajtania. A lekérdezés megválaszolásának folyamatában egyre bővülő következtetést lehet végezni a világ pillanatnyi állapotáról, a lehetséges cselekvéssorozatok eredményéről és így tovább. Harmadszor az ágens rögzíti a kiválasztott cselekvést a Kijelent felhasználásával, és végrehajtja a cselekvést. A második Kijelent azért szükséges, hogy a tudásbázissal tudassuk, hogy a feltételezett cselekvés végrehajtása megtörtént.  ábra - Egy általános tudásbázisú ágens Egy általános tudásbázisú ágens
2	0.526316	1	A játék kezdetén elhelyezésre kerül a pályán 4 vízzel elöntött zóna, melyek együtt a játéktér közelítőleg 4%-át fedik le. A vizes zónák alakja téglalap, elhelyezkedésük és oldalaik mérete minden játékban más, véletlenül generált értékek függvényeként határozódik meg. A vízben tartózkodó ágens mozgása és forgása az alaphelyzeti energiához képest 15-szörös költséggel jár. A többi cselekvés költségét a víz nem befolyásolja. Az ágensek nem látják előre a látóterükben található vizet, mindössze akkor érzékelik azt, ha már vizes cellán tartózkodnak.  ábra - Víz a pályán Víz a pályán
3	0.208333	1	Edsger Dijkstra (teljes nevén: Edsger Wybe Dijkstra), (Rotterdam, 1930. május 11. - Hollandia, Nuenen, 2002. augusztus 6.), holland matematikus, informatikus, 1972-ben arra használta ezt a problémát, hogy bemutassa a strukturált programozás előnyeit, erejét. Publikált egy részletes leírást a probléma egy lehetséges megoldását jelentő backtrack algoritmusról („depth-first backtracking algorithm”) [7] [8]. A későbbiekben ez az algoritmus részletesebben is kifejtésre kerül.
23	0.888889	0	Brin és Page leírják egy világhálón kereső gép implementációját, taglalva a PageRank algoritmust is, mely a dokumentumok minőségének weblinkek elemzésén alapuló lekérdezésfüggetlen mértéke (Brin és Page, 1998). Kleinberg leírja, hogyan lehet hiteles forrásokat találni a weben hivatkozáselemzéssel (Kleinberg, 1999). Silverstein és társai megvizsgáltak egy egymilliárd webkeresést tartalmazó logot (Silverstein és társai, 1998). Kukich felmérte a helyesírási hibák javításának irodalmát (Kukich, 1992). Porter leírja a klasszikus szabályalapú szótövesítő algoritmust (Porter, 1980), míg Krovetz egy szótáralapú verziót ír le (Krovetz, 1993).
25	0.851852	0	Ipar és mezőgazdaság. Hagyományosan azok az ágazatok használnak robotokat, amelyek nehéz, fizikai jellegű emberi munkát igényelnek, de mégis megfelelően strukturálhatók és automatizálhatók. A legjobb példa az összeszerelő üzemi gyártósor, ahol a manipulátorok rutinszerűen végzik feladatukat, az összeszerelést, az alkatrészek behelyezését, az anyagkezelést, a hegesztést és a festést. Sok esetben a robotok sokkal költséghatékonyabbak, mint a humán munkaerő.
3	0.916667	1	i) Az ábrán látható, hogy nincs csupa célállapotokat tartalmazó hiedelmi állapot, tehát nincs biztos megoldás. Ennek oka, hogy a szívás művelet eredményére a Murphy-szabály miatt nem tudunk következtetni a kiinduló állapot ismerete nélkül.
8	0.935484	1	A mondat első fele arra vonatkozik, hogy a + jel kommutatív (azaz az operandusok sorrendje felcserélhető), a második fele pedig arra, hogy ez egy függvény, azaz az értéke egyértelműen függ az operandusoktól.
24	0.75	0	Az élek elrendezése egy objektum tulajdonsága – ez az egyik oka, ami miatt a rajzokat könnyedén értelmezni tudjuk (lásd  ábra), még akkor is, ha ilyen képek nem fordulnak elő a természetben! Ezen tudás legegyszerűbb felhasználásának módja egy legközelebbi-szomszéd osztályozóval történhet. Előre kiszámítjuk és eltároljuk az ismert objektumok nézeteihez tartozó élkonfigurációkat. Ha adott egy ismeretlen objektumnak megfelelő élelrendezés a bemeneti képen, akkor meghatározhatjuk az eltárolt nézetekhez mért „távolságát”. A legközelebbi-szomszéd osztályozó a legközelebbi illeszkedőt választja.
3	0.125	1	Az élő és a gépi kereső ágens között talán az a legfontosabb különbség, hogy egy élő ágens nem szívesen vállalkozik a keresésben a nyers erő alkalmazására (azaz minden eshetőség megvizsgálására), akármennyire ez elvi garanciát biztosít a megoldás megtalálására. Egyszerűen kevés az idő, vagy szűkében van más fontos un. erőforrás, amit a nyers erő túlságosan felemésztene. Élő ágens keresési döntései feltétlenül támaszkodnak valamilyen irányt súgó információra, legyen ez egy színes folt a méhecskének, érdekes illatok a szimatoló kutyának, vagy utcanevek a házak sarkán turisták számára (egy ilyen irányt jelző információt heurisztikának és az azt felhasználó kereséseket informáltnak, vagy heurisztikusnak fogjuk nevezni, a nyers erőre támaszkodó un. vak, gyenge, vagy nem informált keresésekkel szemben). Irányt jelző információ elképzelhető absztrakt keresési terekben is. Gondoljuk itt pl. arra, hogy néhány példából általánosítva szeretnénk ágensünket a példák tömör definíciójára megtanítani, és abban az irányban folytatjuk (tanulási) térben a keresést, amerre a definíció tömörebben kezd alakulni (Ockham borotva elve).
1	0	0	Az MI az egyik legújabb tudományterület. A munka közvetlenül a második világháború befejeztével kezdődött. A mesterséges intelligencia elnevezés 1956-ban született meg. A molekuláris biológiával egyetemben az MI az a terület, amiről más tudományterületek kutatói úgy nyilatkoznak, hogy „én legszívesebben ezzel foglalkoznék”. Egy fizikushallgató teljes joggal gondolhatja, hogy Galilei, Newton, Einstein és mások már minden jó ötlettel rég előálltak. Ezzel szemben az MI-ben az Einstein-kaliberű egyéniségek előtt még szabad az út.
1	0.448276	1	Biztosítani kell, hogy pontosan beazonosítható (elektronikus aláírás) legyen az adatokat küldő személye, a fogadó személye, és egyáltalán minden olyan körülmény, amely befolyásolással lehet akár magára a vizsgálatra, akár egy későbbi esetleges vitás kérdés tisztázására.
14	0.695652	1	Az ilyen rendszerek formálisan egy (D, S, [pi], [mu]) négyessel írhatók le, ahol D maga a vizsgált tartomány S a lehetséges világok halmaza, [pi] a definiált függvények és predikátumok interpretációja, [mu] pedig egy eloszlás S felett.
7	0.96	0	Ez a feladat a klózok és az implikációs mondatok közötti kapcsolatot vizsgálja. a. Mutassa meg, hogy a (¬P[1] ∨…∨ ¬P[m] ∨ Q) klóz logikailag ekvivalens a (P[1] ∧ … ∧ P[m] ⇒ Q) implikációs mondattal. b. Mutassa meg, minden klóz (függetlenül a pozitív literálok számától) felírható (P[1] ∧ … ∧ P[m]) ⇒ (Q[1 ]∨…∨ Q[m]) alakban, ahol P-k és Q-k ítéletkalkulus szimbólumok. Az ilyen mondatokat tartalmazó tudásbázist implikatív normál formájúnak (implicative normal form) vagy Kowalski formájúnak (Kowalski form) nevezzük. c. Írja le a teljes rezolúciós szabályt implikatív normál formájú mondatokra.
6	0.1	1	A játék fő szabályai így a következők: * A játékosok a saját körükben a saját színű figuráikból letehetnek egyet a tábla még üresen álló hatszög alakú mezőibe. * Az a játékos nyer, aki egy folytonos hidat tud létrehozni a két saját színű oldala között.
7	0.92	1	A csapdák elhelyezkedésétől függetlenül a wumpus lehet bármelyik mezőn a három közül, vagy egyiken sem. Ez további 4 lehetőség, amit meg kell szorozni az előbb nyolccal, hiszen egymástól függetlenek. Az összes különböző eset tehát 32.
17	0.066667	0	Egy teljesen megfigyelhető környezetben megadott szekvenciális döntési problémát Markov-állapotátmenet-modelljével és additív jutalmakkal Markov döntési folyamatnak neveznek (MDF) (Markov decision process). Egy MDF-et a következő három összetevő határoz meg:
18	0.473684	0	Ezt a kérdést a statisztikai szignifikanciatesztet (significance test) használva válaszolhatjuk meg. Ez a teszt azzal a feltételezéssel indul, hogy a példákban egyáltalán nincs közös mintázat (ez az úgynevezett nullhipotézis). Ezek után az aktuális adathalmazt vizsgáljuk: meg akarjuk határozni annak mértékét, hogy az adathalmaz mennyire tér el a tökéletesen mintázat nélküli helyzettől. Ha az eltérés mértéke statisztikailag már valószínűtlen (rendszerint 5% vagy ennél kisebb valószínűséget értünk ezalatt), akkor ezt annak bizonyítékaként vesszük, hogy az adatokban jelen van egy alapvető mintázat. A valószínűséget a véletlen mintavételezés esetén várható eltérések standard eloszlását feltételezve számítjuk ki.
20	0.892857	0	A statisztikai tanulás továbbra is igen aktív kutatási terület. Mind az elmélet, mind a gyakorlat hatalmas lépésekkel haladt, míg elértünk addig a pontig, hogy szinte bármely modell megtanulható, ha megvalósítható rá egzakt vagy közelítő következtetés.
5	0.181818	1	 ábra - 9. lépés: NT=BLUE értékadás azok után, hogy visszacsináltuk az SA változó Q=BLUE értékadása miatti értékkészlet redukcióját, illetve mivel kifutottunk a Q értékeiből, és vissza kellett lépnünk, ezért az NT=GREEN értékadás miatti, SA-ra és Q-ra vonatkozó értékkészlet redukciókat is vissza kellett csinálnunk 9. lépés: NT=BLUE értékadás azok után, hogy visszacsináltuk az SA változó Q=BLUE értékadása miatti értékkészlet redukcióját, illetve mivel kifutottunk a Q értékeiből, és vissza kellett lépnünk, ezért az NT=GREEN értékadás miatti, SA-ra és Q-ra vonatkozó értékkészlet redukciókat is vissza kellett csinálnunk
21	0.1875	1	A k-karú rabló probléma k karja független egymástól, a karokat egy kontroller/processzor folyamat működteti: minden diszkrét időpillanatban egyet és csak egyet választva ki. A kiválasztott folyamat állapotot vált, a többi állapota változatlan marad.
20	0.107143	1	Ez a módszercsoport alapvetően a hiányzó adatokat kezelő regressziós modelleket foglalja magában [7]. Felépítésüket tekintve általánosan három lépésre bonthatók: (1) a hiányzó adatok pótlására lehetséges értékeket generálnak, és valamilyen eljárás alapján elvégzik a pótlást, (2) a keletkező teljes adathalmazokon elvégzik az elemzést (melyek teljes halmazt igényelnek), (3) a végeredményeket összesítik, amely során figyelembe veszik a pótolt értékek bizonytalanságát. A többszörös pótlás helyes működésének kulcsa a pótló értékeket előállító pótlási modell helyessége, ha ez nem megfelelő, akkor az elemzés eredménye bias-hoz vezet. A csoportba tartozó módszerekre példa a láncolt egyenletek (chained equations) megközelítés [8]. Ennek során minden egyes változóhoz definiálni kell egy pótlási modellt a többi változó felhasználásával. Majd ezt követően az algoritmus minden egyes iterációjában egy érték áll elő egy adott változó hiányzó értékének helyére úgy, hogy a következő változó értékének számításában már a pótolt érték is részt vesz. Az értékek előállítása Gibbs mintavételezési eljárással történik addig, amíg a folyamat konvergálni nem kezd. A többszörös pótlás több lánc egyidejű futtatásával érhető el. Folytonos változóknál a pótlási modell többnyire lineáris regresszió, dichotóm változóknál logisztikus regresszió.
12	0.761905	0	Ha minden madár azonos szabályrendszert hajt végre, a csapat repülése egy kialakuló viselkedést (emergent behavior) mutat, hasonlóan egy nagyjából azonos sűrűségű pszeudomerev test viselkedéséhez, amely nem bomlik fel az idő során. Mint a bogaraknál, itt sincs szükség arra, hogy minden ágens ismerje a teljes összetett tervet, ami a többi ágens cselekvését modellezi.
22	0.333333	0	Van ára is ennek a kényelemnek: a nyelvtan íróját ellátjuk a tételbizonyítók teljes erejével, így feladjuk a szintaktikai elemzők által garantált O(n^3)-at; a kiterjesztésekkel kiegészített elemzés lehet NP-teljes, vagy akár eldönthetetlen, a kiterjesztésektől függően.
10	0.969697	0	A feladata egy tanácsadó rendszer kifejlesztése, amely az informatika szak hallgatóinak ajánlaná, hogy milyen tárgyakat válasszanak a képzés feltételeinek teljesítéséhez (az intézményére jellemző feltételekkel dolgozzon). Először döntse el, hogy az összes információ reprezentálásához milyen szókészletet fog használni, majd végezze el a reprezentáció építését. Megfelelő kérdésekkel érje el, hogy a rendszer egy legális képzési programot adjon vissza. A rendszernek az egyes hallgatók igényeihez kell illeszkednie, például a fakultatív tárgyak javaslatánál.
25	0.037037	0	A második csoportot a mobil robotok (mobile robots) alkotják. A mobil robotok kerekek, lábak vagy hasonló szerkezetek segítségével mozognak a fizikai környezetben. Használják őket kórházakban ételkihordásra, dokkokban árurakodásra és más, hasonló feladatokra. Korábban már említettünk egy példát, a NavLab ember nélküli közúti járművét (unmanned land vehicle, ULV), amely autópályán képes önállóan, sofőr nélkül navigálni. Másfajta mobil robotokat, például az ember nélküli légi járműveket (unmanned air vehicles, UAV) katonai felderítésre, mezőgazdasági permetezésre és megfigyelésre használnak. Az autonóm víz alatti járművek (autonomous underwater vehicles, AUV) nagy szerepet játszanak a mélytengeri felfedezésekben, míg a bolygójárók (planetary rovers), mint például a  (a) ábrán látható Sojourner, az űrkutatásban segédkeznek.  ábra - (a) A NASA Sojourner mobil robotja, amely a Mars felszínét derítette fel 1997 júliusában. (b) A Honda P3 és Asimo elnevezésű humanoid robotjai. (a) A NASA Sojourner mobil robotja, amely a Mars felszínét derítette fel 1997 júliusában. (b) A Honda P3 és Asimo elnevezésű humanoid robotjai.
11	0.384615	0	Sem az előre-, sem pedig a hátrafelé keresés nem hatékony egy jó heurisztika nélkül. Emlékezzünk vissza a  fejezetből, hogy egy heurisztikus függvény egy állapot célállapottól való távolságát becsli; a Strips esetén minden cselekvés költsége 1, így a távolság az alkalmazandó cselekvések száma. Az alapötlet, hogy nézzük a cselekvés következményeit és a célokat, és becsüljük meg, hogy hány lépésre van szükség a célok elérésére. A pontos szám meghatározása NP-teljes probléma, de a legtöbb esetben találhatók kellően pontos becslők, melyek nem nagyon számításigényesek. Szintén képesek lehetünk egy elfogadható (admissable) heurisztika származtatására, azaz olyanra, ami nem becsül túl. Ez az A* kereséssel együtt használható optimális megoldások megkeresésére.
2	0.210526	1	Mielőtt továbbmegyünk, és az intelligenciát definiáló racionalitás különböző válfajait megvizsgáljuk, érdemes megemlítenünk, mit is értünk ágens, racionális ágens, illetve annak jellemző tulajdonságai alatt. Egy ágens nem más, mint valami, ami környezetét érzékeli és cselekedeteivel megváltoztatja azt. Egy racionális ágens ehhez képest annyiban más, hogy helyesen cselekszik [2]. Ehhez rendelkeznie kell információval arról, hogy mi a „helyes”, és mi a „helyesebb”. Teljesítményértéknek nevezzük azt a kritériumot, hogy egy ágens mennyire sikeres, mennyire cselekszik helyesen, a cselekedetei mennyire hozzák közelebb a célhoz. A helyesség megítélése mindenképp csakis a cél, a lehetséges cselekedetek, a megfigyelések és a meglévő tudás tükrében történik (amelyből megtudható, hogy mi a döntések várható hasznossága), vagyis egy nem-mindentudó ágens is lehet teljes mértékben racionális. Ezt illusztrálandó kitűnő példa az, amikor egy ember megnézi a vasúti menetrendet, összepakol és ki is megy a pályaudvarra, hogy a kívánt vonatot elérje - ám ekkor értesítik arról, hogy a járat műszaki okok miatt legközelebb másnap indul. A példabeli ember teljesen racionálisan cselekedett, ám nem volt mindentudó (omniscient) [2].
19	0.409091	0	Következtető rendszerként a  fejezetben leírt egyszerű, hátrahaladó tételbizonyító rendszert fogjuk használni. A Derivált(X^2, X) = 2X bizonyítási fája túlságosan nagy ahhoz, hogy példaként szerepeljen, ezért az általánosítás módszertanát egy valamivel egyszerűbb példával fogjuk illusztrálni. Tegyük fel, hogy az 1 × (0 + X) kifejezést akarjuk egyszerűsíteni. A tudásbázis az alábbi szabályokat tartalmazza:
21	0.9375	0	 Megjegyzés Egy – a 4 × 3-as világhoz hasonló – egyszerű környezetben valósítson meg egy passzív tanuló ágenst! Hasonlítsa össze a közvetlen hasznosságbecslést, az IK-t és az ADP-t előzetesen nem ismert környezeti modellek esetén! Végezze el az összehasonlítást az optimális stratégiára és több, véletlen módon generált stratégiára! Melyikre konvergálnak gyorsabban a hasznosságbecslések? Mi történik, ha növeli a környezet méretét? (Vizsgáljon pályákat akadályokkal és azok nélkül!)
16	0.26087	0	A hasznosságelmélet a közgazdaságtanból származik, a közgazdaságtan pedig egy nyilvánvaló jelöltet kínál a hasznosság mérésére: a pénzt (vagy pontosabban az ágens teljes nettó vagyonát). A pénz majdnem univerzális felcserélhetősége bármely árura és szolgáltatásra azt mutatja, hogy a pénz jelentős szerepet játszik az emberi hasznosságfüggvényekben. (Valójában, a legtöbb ember a közgazdaságtant a pénz tanulmányozásához köti, pedig a közgazdaság szó gyökere a gazdálkodásra vonatkozik, míg jelenleg a hangsúly a választások kezelésén van.)
1	0.172414	1	Problématér paradigma felül megközelítve az intelligencia kérdését azt mondhatjuk, hogy ha a rendszer képes kontrollálni, hogy a generált probléma helyzetek milyen sorrendben kerülnek tesztelésre, akkor kívánatos lenne olyanokkal kezdeni, amelyek nagyobb valószínűséggel garantálják a megoldás korai megjelenését. Egy FSzR-t annyiban tekinthető intelligensnek, amennyire ezt a fajta működést képes megvalósítani. Fontoljuk meg mi lehetne ennek (avagy az intelligencia megjelenésének) a feltétele?
24	0.791667	0	Itt az R a rotációs mátrix, t az eltolás, és ∏ jelöli a perspektivikus vetítést vagy annak egy közelítését, mint például a skálázott ortografikus vetítést. A végső eredmény a Q transzformáció, ami az m[i] modellpontot megfelelteti a p[i] képpontnak. Bár kezdetben nem ismerjük a Q transzformációt, (merev objektumokra) tudjuk, hogy Q-nak minden modellpontra azonosnak kell lennie.
1	0.103448	1	Befejezésként, összegzésként megpróbálok Arisztotelész logikából, gondolkodásmódjából visszaadni egy keveset, hogy mit gondolt a tudományokról, a gondolkodásról - az „okosságról”, a szakmai tapasztalatokról – a „mesterségekről”. Szerinte a gondolkodás segítségével az igazságot felismerhetjük. „Minthogy a tudomány az általános és a szükségszerű dolgok megismerésére vonatkozik, s mindannak, ami bizonyításra szorul, tehát minden tudománynak, megvannak a kiinduló elvei (mert a tudomány következtetésen alapszik) … Tudományos megismerés tárgya mindig bizonyítható … Az okosság nem lehet azonos sem a tudománnyal, sem a mesterséggel. A tudománnyal azért nem, mert a cselekvés tárgya másképp is lehet, mint ahogy van. A mesterséggel pedig azért nem, mert a cselekvés és a létrehozás másnemű fogalmak. Tehát csak egy lehetőség marad: az okosság gondolkodással párosult cselekvő, igaz lelki alkat, amely arra irányul, ami az embernek jó vagy rossz. A létrehozásnak ugyanis önmagán kívül eső célja van, ellenben a cselekvésnek nem, hiszen a jó cselekvés maga a cél … Nyilvánvaló tehát, hogy az okosság valamiféle erény … Tehát az okosság az ésszel éppen ellentétes szerepet játszik; az ész ugyanis azokra a határt alkotó tételekre vonatkozik, amelyek nem okolhatók meg, az okosság viszont a végső egyedi esetre vonatkozik, amelyet nem ragadhat meg a tudomány, hanem csak az észlelés, nem az egyes érzékszervek sajátos tárgyaira vonatkozó észlelés, hanem olyanfajta észlelés, amilyennel a matematikában azt észleljük, hogy az előttünk álló egyedi alak háromszög.”[6]
3	0.916667	0	Nilsson könyvei a klasszikus keresési algoritmusokkal kapcsolatban hasznos információkat tartalmaznak (Nilsson, 1971; 1980). Korf egy átfogó, naprakészebb áttekintést ad a klasszikus keresési algoritmusokról (Korf, 1988). Az új keresési algoritmusokról – amelyek feltárása figyelemre méltó módon folytatódik – olyan folyóiratokban jelennek meg cikkek, mint például az Artificial Intelligence.
5	0.818182	1	Folytatjuk a sor vizsgálatát, és a következő inkonzisztenciát okozó él az (ÚDW, DA) él lesz. A probléma hasonló: ha ÉT zöld, akkor DA-nak nem jut szín. Vegyük ki a 'zöld' értéket ÚDW tartományából is, és tegyük az összes ÚDW felé mutató élt a sor végére! A sor most a következő képpen néz ki:
10	0.515152	1	A C varázslónak vannak szilárd ismeretei, pl. az A és B megfigyelt kalapszíne, de vannak hiedelmei is, ilyen pl. a saját kalapszínéről alkotott elképzelése. A C környezetének része az A és a B, így azok feltételezett hiedelmei is részei lesznek a C hiedelmi állapotának.
8	0.032258	0	Az elsőrendű logika (first order logic) nyelvezete, amelynek a szintaxisát és szemantikáját a következő alfejezetben adjuk meg, objektumok és relációk köré épül. Az elsőrendű logika azért olyan fontos a matematika, a filozófia és a mesterséges intelligencia számára, mert ezeket a területeket – amelyek valójában az emberi lét mindennapjait írják le – tekinthetjük úgy, mint amelyek objektumokkal és a köztük lévő relációkkal dolgoznak. Az elsőrendű logika ezenkívül tényeket közölhet az univerzum néhány vagy összes objektumáról. Ez lehetővé teszi, hogy általános szabályokat vagy törvényszerűségeket tudjunk megfogalmazni, mint például azt az állítást, hogy „A wumpus helyével szomszédos négyzetek büdösek.”
10	0	0	A  alfejezet bevezeti az általános ontológia gondolatát, amely világban mindent a kategóriák hierarchiájába szervez. A  alfejezet az objektumok és a szubsztanciák alapvető kategóriáival foglalkozik. A  alfejezet a cselekvések reprezentációját elemzi, amelyek a tudásalapú ágens megtervezése szempontjából központi fontosságúak, továbbá bemutatja a tér-idő darabkák, az események (events) általánosabb fogalmát. A  alfejezet a hiedelmekkel foglalkozik, a  alfejezet pedig az egészet egybefogja az internetes bevásárlás kontextusában. A  és a  alfejezet a bizonytalan és a változó ismeretekkel dolgozó specializált következtető rendszerekkel foglalkozik.
24	0.125	0	A perspektivikus vetítésben a párhuzamos vonalak a horizontvonalon lévő pontban futnak össze. Nézzük meg, miért szükségszerű ez! Az (X[0], Y[0], Z[0]) ponton keresztül (U, V, W) irányban áthaladó egyenes leírható, mint az (X[0 ]+ λU, Y[0 ]+ λV, Z[0 ]+ λW) pontok halmaza, ahol λ a +∞ és –∞ között változik. Ezen egyenes egy P[λ] pontjának képsíkra vett vetületét az:
25	0.962963	0	 c. Melyek a KL divergencia értékei az (a)-beli eloszlások és a valódi posterior között? d. Milyen változtatást hajtana végre a feladat szövegezésén (nem az algoritmuson!) annak érdekében, hogy garantáljuk a fenti specifikus becslő torzítatlanságát még véges N-ekre is? Legalább két különböző megoldást adjon (mindkettőnek elégségesnek kell lennie).
6	0.9	1	Monopoly: Az állapotnak tükrözni kell az aktuális állást, azaz hogy melyik játékos melyik mezőn áll, mennyi pénze van, mely mezőket birtokolja és azokon milyen épületei vannak, a lépésgenerálás egy véletlen szám generálását jelenti (ennyit kell lépni), majd a megérkezésnél annak eldöntését, hogy a játékos megveszi-e az adott területet, illetve ha az övé, akkor épít-e rá. A kiértékelő függvénybe fontos beleépíteni, hogy noha a játék célja nem csődbe menni, mégis érdemesebb területeket megvásárolni, mint a kézpénzt felhalmozni. Továbbá a különböző területeknek nem egyforma az értéke (és nem is feltétlenül arányos a telek árával), ezt is érdemes felhasználni.
22	0.074074	1	A predikátum kalkulus a számítástudományból (matematikából) ismert logikai modell, melynek alkalmazhatósága nem korlátozódik a természetes nyelvek feldolgozására. Mindazonáltal ezen a területen is felmerül, mint lehetséges tudásreprezentációs módszer. Voltaképpen már az egyszerű ítéletlogika alkalmazása is felmerülhet, ám a predikátumlogika ábrázoló ereje nagyobb.
2	0.105263	1	1. Milyen képességekkel kell felruházni egy technikai rendszert, ha jobban használhatóvá, alkalmazkodóvá,…. (intelligenssé) akarjuk tenni? 2. Milyen tényezők indokolják a technikai érzékelők egyre szélesebb körű alkalmazását?
5	0.818182	1	Unáris kényszerek kiküszöbölése: Unáris kényszerek könnyen kiküszöbölhetőek egyszerűen úgy, hogy az egyetlen változó értékkészletéből elhagyjuk azokat az értékeket, amelyek nem elégítik ki a kényszert.
25	0.074074	1	Elsősorban a hajtórendszerek és a technológiai folyamattal közvetlen kapcsolatban álló megfogószerkezetek és szerszámok működését szabályozzák. Működési elvük a mérőelem alakváltozásán alapul, amely a nyúlásmérő bélyegek segítségével ellenállás változássá, illetve feszültségváltozássá alakítható. Mind egy-, mind többkomponenses erő-, illetve nyomatékérzékelők használatosak.
16	0.695652	0	Tegyük fel, hogy A[1] és A[2] két különböző utat jelent a hegyeken keresztül, téli időben. A[1] egy kényelmes, egyenes autópálya egy alacsony hágón át, míg A[2] egy tekervényes földút a csúcson keresztül. Csak ezt az információt ismerve A[1] egyértelműen előnyben részesíthető, mivel elég valószínű, hogy a második utat lavinák zárják le, miközben az első úton valószínűleg nincsenek torlódások. U[1] ezért egyértelműen nagyobb, mint U[2]. Az utak aktuális állapotáról E[j ]műholdjelentéseket kaphatunk, melyek  és  új várható értékeket adnak az átkelőkre vonatkozóan. A várható hasznosságértékek eloszlását a  (a) ábra mutatja. Nyilvánvalóan ebben az esetben a költségek miatt nem éri meg a műholdas jelentéseket kikérni, mivel nagyon valószínűtlen, hogy ezek a jelentések a terv megváltozását eredményeznék. A tervek változatlansága mellett azonban az információnak nincs értéke.
6	0.9	1	Mindkét játékosnak legalább n-2 lépésbe kerül, hogy az út másik végéig eljusson, mivel legfeljebb egyszer van lehetősége a másik zsetonját átugrani. Továbbá minden esetben csak az egyik játékosnak van lehetősége a másikat átugrani, ha a legkevesebb lépésben próbál az út másik végéig eljutni. Látható, hogy az a játékos nyer, amelyiknek lehetősége van a másik bábúját átugrani. n = 3 esetén az első játékos rögtön a második játékos bábúja mellé lép, így átugorható, tehát a második játékosnak lesz lehetősége ugrani. n = 4 esetén láttuk, hogy az első játékos nyer. Ha n-t kettővel növeljük, a helyzet nyílván nem változik, hisz mindkét játékosnak egyel-egyel növekszik a szükséges lépések száma, hogy a másik bábút elérje. Így tehát általánosságban ha n = 4 + 2*k (azaz n páros), akkor A győz, míg ha n = 3 + 2*k (azaz n páratlan), akkor veszít.
24	0.958333	1	Négy felsorolást adunk és mindegyikben két, három példát: a. mélység: A számítógép monitor és a fal mögötte. Az óratorony oldala és mögötte az ég között. Az előtérben lévő fehér papír és a könyv, valamint a billentyűzet mögötte. b. felületi normális: Az asztalon lévő könyv lapjainak sarkánál. A billentyűzet billentyűinél. c. reflektancia: A fehér lap és a fekete sorok között. A képen lévő aranyhíd és az ég mögötte. d. megvilágítás: Az ablakpárkányon, a központi ablakmező osztásának árnyéka. A görög szöveges papíron az árnyék a bal oldaltól a tetejéig. A számítógép monitoron , a fehér ablak és a kék ablak széle között, amit a CRT különböző megvilágítása okoz.
21	0.125	0	Vegyük észre, hogy mindegyik állapotészlelés mellett – alsó indexként – feltüntettük az elnyert jutalmat. Célunk a jutalmakban rejlő információ felhasználása arra, hogy az egyes s állapotokhoz – amelyek nem végállapotok – rendelhető várható hasznosságot, U^π (s)-t megtanuljuk. A hasznosságot úgy definiáljuk, mint a π stratégia követése esetén az összegzett (leértékelt) jutalom várható értéke. Ez – ahogy a   egyenletben a 17. szakasz - Optimalitás szekvenciális döntési problémákban részben – már felírtuk:
23	0.888889	0	A Brown-korpusz volt az első próbálkozás, hogy tapasztalati nyelvészeti célokra kiegyensúlyozott korpuszt gyűjtsön (Francis és Kucera, 1967). Körülbelül egymillió szót tartalmazott, szófaji információval ellátva. Eredetileg 100 ezer lyukkártyán tárolták. A Penn treebank körülbelül 1,6 millió szó gyűjteménye, kézi elemzéssel fákba rendezve. Elfér egy CD-n. A brit nemzeti korpusz (British National Corpus) kibővíti ezt 100 millió szóra (Leech és társai, 2001). A világháló több mint egybillió szót tartalmaz, több mint 10 millió szerveren tárolódik.
24	0.833333	1	A folt (blob) detektorok a kulcspont detektáló algoritmusok egy jelentős csoportja. Közös tulajdonságuk, hogy kiugró intenzitású pontokat, lokális szélsőértékeket keresnek. A terület némileg átfed a sarokpont detektálással, néhány ott alkalmazott szűrő kis módosítással foltokat is megtalál. A különbség, hogy ezek az algoritmusok képesek nagyobb, elmosottabb objektumok detektálására, amire a sarokpont detektorok általában nem, csak a kép megfelelő átméretezése után. A detektorok jellemzésénél fontosak a különböző – például a perspektivikus transzformációra való – invariáns tulajdonságok.
6	0.1	1	A Mechanizmustervezés célja egy olyan mechanizmus konstruálása, amelyet ha a kiindulási állapotban lévő játékos-közösségre oktrojálunk, akkor a mechanizmus által rájuk kényszerített játékban a játékosok, amennyiben feltételezéseinknek megfelelően viselkednek (pl. Nash-egyensúlyra törekszenek), akkor éppen ugyanazt az alternatívát fogják előállítani, mint f*. A Mechanizmustervezés célja tehát egy-egy adott f* KDF mechanizmus általi implementációja. A mechanizmus egy játékot indukál a játékosok számára, amelyben a játékosok végső soron egy f*-nak megfelelő kimenetelt generálnak. Azaz olyan mechanizmust keresünk, amely az adott játékos-közösség adott viselkedése mellett effektíve leszimulálja f*-ot, bármi is legyen az.
11	0	0	Ebben a fejezetben csak olyan környezetekre szorítkozunk, melyek teljesen megfigyelhetők, determinisztikusak, végesek, statikusak (azaz ahol változások csak akkor történnek, amikor az ágens cselekszik), diszkrétek (időben, cselekvésekben, objektumokban és hatásokban). Ezeket klasszikus tervkészítési (classical planning) környezeteknek nevezzük. Ezzel ellentétben a nem klasszikus tervkészítés a részben megfigyelhető vagy a sztochasztikus környezetek kezelésére szolgál, és itt megjelennek eltérő, a 12. és  fejezetben bemutatott, algoritmusok és ágenstervek.
7	0.92	1	7.2 Tegyük fel, hogy az ágens eljutott a  (a) ábra szerinti állapotba, úgy hogy nem érzett semmit az [1,1]-ben, szellőt érzett a [2,1]-ben és bűzt az [1,2]-ben, és most vizsgálja az [1,3], [2,2] és [3,1] négyzetek tartalmát. Ezek bármelyike tartalmazhat csapdát, és legfeljebb az egyik tartalmazhatja a wumpust. A  ábra példáját követve hozza létre a lehetséges világokat (32 ilyet kell találnia). Jelölje meg azokat a világokat, amelyekben a TB igaz, és azokat, amelyekben a következő mondatok igazak:
21	0.125	1	ahol dℓ (·) jelöli a modell gradiensét, ||·|| az euklideszi távolságot, (L U <x,y>) pedig az L címkézett mintahalmaz és az <x,y> minta unióját jelöli. Ezzel a módszerrel tehát maximalizáljuk a modell változásának várhatóértékét.
7	0.44	0	Minden i-re 1-től k-ig, * Ha létezik egy klóz RC(S)-ben, amely tartalmazza a ¬P[i] literált úgy, hogy minden más literál hamis a választott P[1], …, P[i][–1] hozzárendelés szerint, akkor rendeljünk hamis értéket P[i]-hez. * Egyébként rendeljünk igaz értéket P[i]-hez.
24	0.041667	0	Egy ágens kétféle módon használhatja az érzékeléseit. A tulajdonság kinyerési (feature extraction) megközelítés szerint az ágens néhány kevés számú tulajdonságot észlel az érzékelő bemenetein, és ezeket továbbítja az ágensprogramnak, amely a tulajdonságoknak megfelelően reagál, vagy kombinálja őket más információkkal. A wumpus ágens ily módon működött, öt érzékelővel, amelyek mindegyike egybites információt nyert ki. Ma már ismert, hogy egy légy az optikai bemenetről tulajdonságokat nyer ki, és ezeket direkt módon a kanyarodásban segítő izmokhoz továbbítja, lehetővé téve, hogy 30 milliszekundumon belül reagáljon, és irányt váltson.
20	0.392857	0	Már kimunkáltuk, hogy mi módon tudunk Bayes-hálókat megtanulni, de van egy nehézség: a Bayes-hálóknál minden egyes paraméter elkülönül, a rejtett Markov-modellben viszont időben ismétlődnek az egyes θ[ijt] = P(X[t+1] = j|X[t] = i) állapotátmenet-valószínűségek (annak valószínűsége, hogy a t időpillanatban az i-edik állapotból a j-edikbe jutunk), azaz θ[ijt] = θ[ij] minden t-re. Ahhoz, hogy megbecsüljük az i-edik állapotból a j-edik állapotba való átmenet valószínűségét, egyszerűen kiszámítjuk azon esetek várható arányát, amikor a rendszer az i-edik állapotban van és a j-edik állapotba megy:
1	0.586207	0	Princeton volt az otthona az MI egy másik befolyásos személyiségének, John McCarthynak. Az egyetem befejezése után McCarthy a Dartmouth College-ba került, ami a témakör hivatalos szülőhelye lett. McCarthy meggyőzte Minskyt, Claude Shannont és Nathaniel Rochestert, hogy segítsenek neki azokat az amerikai kutatókat összehozni, akik érdekeltek az automataelméletben, a neurális hálókban és az intelligencia kutatásában. 1956 nyarán egy két hónapos munkatalálkozót szerveztek Dartmouthban. Összesen tíz résztvevő gyűlt össze, beleértve Trenchard More-t Princetonból, Arthur Samuelt az IBM-től, valamint Ray Solomonoffot és Oliver Selfridge-et az MIT-ből.
6	0.1	1	Mielőtt még „belebolondulnánk” a végtelen rekurzióba (ahogyan a játékosok függnek egymástól), helyettesítsük be az u hasznosságértékek helyére a Forintpárosítás játék megfelelő kifizetéseit - azaz határozzuk meg, hogy a Forintpárosítás esetében mi lesz a két fentebbi egyenletben szereplő sima zárójeles kifejezések numerikus értéke! ...ezt láthatjuk a következő dia első két sorában.
3	0.208333	1	Mivel királynőnknek találtunk alkalmas új pozíciót, ezért további visszalépésre nincs szükség. Próbáljuk meg újra elhelyezni a hatodik oszlopba kerülő királynőt. Mint az a fenti ábrán is látható, ez továbbra sem fog sikerülni. Ekkor tehát újra vissza kell lépnünk (36. lépésben). Mivel azonban az eggyel korábbi királynőnknek sem találunk már új pozíciót (hiszen az utolsó sorban volt), ezért ismét vissza kell lépnünk és megpróbálni elhelyezni új pozícióba a negyedik oszlopban lévő királynőt. Ez, illetve a rákövetkező lépések láthatók az alábbi ábrán:
18	0.684211	1	Az AdaBoost tanuló algoritmus ismertetése után vizsgáljuk meg, hogyan változik az egyes iterációkban a tanítási minták súlya. Kezdetben minden minta súlya azonos, majd a gyenge hipotézis alkalmazása után felosztott adathalmazban szereplő minták súlyát újra számoljuk úgy, hogy a rosszul osztályozott minták súlyát növeljük és a jól osztályozott minták súlyát csökkentjük. A leírtakkal összhangban, egy adathalmaz valamilyen gyenge hipotézis szerinti felosztását és a tanítópontok súlyának változását a  ábra szemlélteti. A „körbezárt” minták osztályozására az AdaBoost algoritmus gyenge osztályozó eljárásként lineáris regressziót alkalmaz. Ennek az eljárásnak a lényege, hogy megtalálja a mintákra leginkább illeszkedő egyenest, ami azt jelenti, hogy minden más egyenes esetében a mintapontoktól mért függőleges távolságának négyzetösszege nagyobb, mint a leginkább illeszkedő egyenesnél kapott összeg. A  ábra a,) részén látható, hogy kezdetben minden minta súlya azonos. A  ábra b,) részén megfigyelhetjük a súlyok eloszlását az algoritmus 1. iterációja után. Végül a  ábra c,) részén láthatjuk a súlyok alakulását, valamint a vágási felszínt az algoritmus 120. lépése után. Az ábrán színárnyalatok jelölik a gyenge osztályozók becslésének összegét (Minél fehérebb egy terület annál többször vágták úgy az adathalmazt a regressziós egyenesek, hogy ott a kék mintákra „tippeltek” ).  ábra -  ábra. Tanítóminták súlyainak változása az AdaBoost algoritmus működése során.  ábra. Tanítóminták súlyainak változása az AdaBoost algoritmus működése során.
6	0.1	1	Ha az 1-es játékos, miután C-től a Red-et kapta, mégsem dobja be lapját, hanem emeli a tétet (Raise), azaz betesz még 1 dollárt a közösbe, akkor a 2-es játékosra kerül a sor. Ha a 2-es játékos tartja a tétet (Meet), nem tudván, hogy milyen lapot osztott 1-nek a véletlen, azaz ha ő is betesz még 1 dollárt a közösbe, akkor miután mindketten feltárják lapjaikat, egyértelműen az 1-es nyer, hiszen a Red erősebb, mint ami 2-esnél van. A 2-es tehát elveszti azt a 2 dollárt, amit a közösbe tett, és ezt a nyereményt az 1-es viszi el. Tehát ebben az esetben a kifizetési vektor (2, -2).
27	0.4	1	Az első aszimptotikus korlátozott optimalitás definíció, amelyet bevezetünk, a legrosszabb esetre vonatkozik. Neve ennek megfelelően „legrosszabb-esetben aszimptotikusan korlátozott optimalitás”. Ekkor azt vizsgáljuk, hogy legrosszabb esetben mi egy adott komplexitású Környezet-ekben adott Architektúrá-n futtatott Program várható haszna. Jelölje ezt a legrosszabb, minimális értéket V*(Program, Architektúra, n, Környezet). Azaz ez az érték azt mondja meg, hogy mi a Környezet osztályban lévő n-komplexitású Környezet-ekben adott Architektúrá-n futtatott Program várható hasznának minimuma - a legkisebb várható haszon, amit az adott Architektúrá-n futtatott Program el tud érni a Környezet osztályban lévő n-komplexitású Környezet-ekben. Ez az érték tehát az adott Környezet osztályban lévő konkrét Környezet-ektől, és a V haszon-függvénytől függ (lehet zérus, vagy kevesebb, de akár több is).
10	0.69697	0	Mint korábban, most is óvatosnak kell lennünk, nehogy azt állítsuk, hogy kategóriának van két lába. A  ábra egyszeres vonallal végzett keretezése jelzi az egy kategória minden tagjának tulajdonságaira vonatkozó állítást.
16	0.434783	0	A KHF-ből következik, hogy az ágens viselkedése leírható egy multiplikatív hasznosságfüggvénnyel (multiplicative utility function) (Keeney, 1974). A szorzatalakú hasznosságfüggvény általános alakját egy példán mutatjuk be három attribútum esetén. Az egyszerűség kedvéért, az U[i](X[i]) jelölésére az U[i]-t használjuk:
21	0.5625	0	Ugyanilyen jól alkalmazhatjuk ezeket az elveket az időbeli különbség alapján tanulókra is. Mindössze annyit kell tennünk, hogy a paramétereket úgy módosítjuk, hogy az egymásra következő állapotok időbeli különbségét csökkenteni próbáljuk. A   és   IK- és Q-tanulási egyenleteink új változata:
18	0.684211	1	Kearns és Valiant vetették fel először, hogy ha a gyenge tanuló algoritmusok, amelyeknek becslése csak egy kicsivel jobb, mint a véletlen tippelés a PAC (Probaby Approxiamtly Correct) modellben, akkor a gyenge tanuló algoritmusokból tetszőleges pontosságú tanuló algoritmust nyerhetünk [2], [3]. Schapire 1989-ben bizonyította be az első polinom idejű boosting algoritmust [1]. Egy évvel később Freund kifejlesztett egy hatékonyabb boosting tanuló algoritmust, amelyet a gyakorlatban jobban lehetett alkalmazni [1]. Az AdaBoost tanuló algoritmus megalkotása Freund és Schapire munkásságának köszönhető. A publikált AdaBoost tanuló algoritmus megoldotta a korábbi boosting algoritmusok alkalmazhatóságának nehézségeit. (Az AdaBoost algoritmus az osztályozás során súlyokat is használ, hogy a vágások mentén felosztott adatminták rosszul történő osztályozását csökkentse.)
8	0.032258	0	A modern megközelítés szerint a természetes nyelv kissé más célt szolgál, nevezetesen a nyelv a kommunikáció (communication), és nem annyira a tiszta reprezentáció eszköze. Amikor egy beszélő rámutat valamire, és azt mondja: „Nézd!” a hallgató megtudja azt, hogy mondjuk, Superman végre megjelent a háztetők felett. Mégsem szeretnénk azt kijelenteni, hogy a „Nézd!” mondatban benne foglaltatik ez a tény is. A mondat jelentése mind magától a mondattól, mind attól a szövegkörnyezettől (context) függ, amelyben a mondat elhangzott. Nyilvánvalóan nem várható, hogy csupán a „Nézd!” mondatot az adatbázisban tárolva visszaadható ennek a jelentése a szövegkörnyezet ismerete nélkül – amiből az a kérdés következik, hogy hogyan tudjuk magát a szövegkörnyezetet reprezentálni. A természetes nyelvekből is hiányzik a kompozíciós képesség – egy olyan mondat jelentése, mint az „És akkor meglátta”, függhet az előtte álló és az utána következő mondatok által alkotott szövegkörnyezettől. Végül pedig a természetes nyelvek egyik gyenge pontja a többértelműség (ambiguity), ami nehézségeket okozhatna a következtetésben. Amint azt Pinker megállapítja (Pinker, 1995): „Mikor az emberek az égre gondolnak, bizonyára nem zavarja meg őket, hogy vajon az égboltról van-e szó, vagy valamiről, ami lángol – és ha egy szó két gondolatot is megjeleníthet, akkor a gondolatok nem feleltethetők meg szavaknak.”
24	0.166667	1	A Lincoln Laboratory az MIT (Massachusetts Institute of Technology) részlege volt, melyet az amerikai hadsereg, a tengerészet és a légierő támogatott. A TX-2 (szuper)számítógépet a TX-0 után, a TX-1-gyel párhuzamosan kezdték építeni, 1956-ban, de utóbbi fejlesztése kudarcba fulladt. A számítási teljesítménye 400 000 művelet volt másodpercenként, memóriája 64K 36-bites szót tudott tárolni. [1] [4]
3	0.916667	1	 ábra - [3-19-b-Slide1.jpg]  ábra - [3-19-b-Slide2.jpg]  ábra - [3-19-b-Slide3.jpg]  ábra - [3-19-b-Slide4.jpg]  ábra - [3-19-b-Slide5.jpg]  ábra - [3-19-b-Slide6.jpg]  ábra - [3-19-b-Slide7.jpg]  ábra - [3-19-b-Slide8.jpg]
6	0.9	1	Adja meg és/vagy implementálja az alábbi játékok egyikére vagy akár többre is az állapotleírást, lépésgenerálást és a kiértékelő függvényt: Monopoly, Játék a betűkkel, bridzs (egy konkrét licitet feltételezve) és póker (válassza meg a kedvence változatát).
7	0.92	1	Nincs. Mivel az tudásbázis nem tartalmazott semmiféle állítást az aknák számára, így az algoritmus nem is használt fel semmiféle ilyen tudást. Olyan eset azonban előfordulhat, hogy egy modellel kapcsolatban bizonytalan volt az algoritmus, de azt a módosított algoritmus elvetette volna.
23	0.333333	1	A ROC analízis alkalmas a kiválasztott betegség diagnosztizálásához alkalmazott többféle teszt összehasonlítására, azt vizsgálva, melyiknek jobb a diagnosztikai hatékonysága. Ez a módszer a laboratóriumokban segítheti egy diagnosztikai módszer hatékonyságának megítélését többféle betegség megállapításában. A ROC görbe az elemzési eredményeket szemléletesen mutatja, a diagnosztikai teszt hatékonyságának számszerű értékét a görbe alatti terület adja, ezek alapján jól alkalmazható a döntés hozatalban.
24	0.416667	0	A manipulálási és a navigálási feladatok szempontjából legfontosabb az objektum pozíciójának és térbeli orientációjának (az objektum ún. helyzetének – pose) a meghatározása a megfigyelőhöz képest. Ahhoz, hogy egy nyüzsgő gyárban eligazodjunk, tudnunk kell az akadályok elhelyezkedését, mert akkor egy olyan pályát tudunk tervezni, amely az akadályokat kikerüli. Ha egy tárgyat szeretnénk felvenni és kézben tartani, a kézhez képesti helyzetet kell ismernünk, mert csak így tudjuk generálni a megfelelő pályájú cselekvésszekvenciát. A manipulálást és a navigálást tipikusan szabályozási hurokban oldjuk meg – az érzékelők információja visszacsatolást jelent, amivel a robot vagy a robotkar mozgását befolyásolni tudjuk.
10	0.121212	0	Egyszerű, kvantitatív mértékeket reprezentálni könnyű. Más mértékek több problémát okoznak, mert nincs hozzájuk elfogadott értékskála. A gyakorlat nehéz, a desszert finom és a vers szép, azonban e kvalitásokhoz nehéz számokat rendelni. Valaki megkísérelhetné az ilyen tulajdonságokat teljesen elutasítani, mint olyanokat, melyeknek a logikai következtetés szempontjából nincs hasznuk, vagy – ami még rosszabb – megkísérelhetne a szépségre egy numerikus skálát rákényszeríteni. Ez súlyos hiba lenne, mert ilyen lépésre nincs is szükség. A mértékek legfontosabb tulajdonsága nem az, hogy valamilyen konkrét numerikus értékkel rendelkeznek, hanem, hogy rendezettek.
6	0.6	0	Még ha a fa mélységkorlátja egy kis értékű d is, a minimaxhoz képesti többletköltség miatt irreális túl messzire előrenézni a véletlen játékok többségénél. Ostáblánál n értéke 21, b pedig általában 20 körüli értéket vesz fel, de bizonyos helyzetekben akár 4000 is lehet, a dupla kockadobásoknál. Valószínűleg csak három lépésváltást tudunk kezelni.
9	0.965517	0	Tételezzük fel, hogy egy tudásbázis csak egy mondatot tartalmaz: ∃x OlyanMagasMint(x, Everest). A következők közül melyek a törvényszerű következményei az Egzisztenciális Példányosítás alkalmazásának? a. OlyanMagasMint(Everest, Everest) b. OlyanMagasMint(Kilimandzsáró, Everest) c. OlyanMagasMint(Kilimandzsáró, Everest) ∧ OlyanMagasMint(BenNevis, Everest)
21	0.5625	0	Az eddigiekben azt feltételeztük, hogy az ágens által megtanult hasznosságfüggvények és a Q-függvények táblázatos formában reprezentáltak, amelyben minden egyes bemeneti vektornak egy-egy kimeneti érték felel meg. Ez a megközelítés kis állapotterekre jól működik, de a konvergencia ideje, valamint egy-egy iterációs lépés ideje (ADP esetén) gyorsan nő, ahogy a tér egyre nagyobb lesz. Alaposan kézben tartott közelítő ADP-módszerekkel kezelhető lehet 10 000 állapot vagy annál valamivel több. Ez kielégítő a kétdimenziós útvesztő jellegű problémák esetén, de reálisabb problémák szóba sem jöhetnek. A sakk és az ostáblajáték a valós világ apró részei csupán, mégis állapotterük 10^50–10^120 állapotot tartalmaz. Az teljesen abszurd feltételezés, hogy mindezeket az állapotokat be kell járnunk ahhoz, hogy megtanuljuk a játékot!
17	0.6	0	Mivel dinamikus Bayes-hálókat használunk, visszatérünk a  fejezetbeli jelöléshez, ahol X[t] az állapotváltozók egy halmazát jelölte egy t időpillanatban, E[t] pedig a bizonyítékváltozókat. Így ahol ebben a fejezetben eddig s[t]-t használtunk (a t-beli állapotra), mostantól X[t]-t fogunk használni. A t-beli cselekvést A[t]-vel fogjuk jelölni, így a T(s, a, s′) állapotátmenet-modell ugyanaz, mint a P(X[t+1]|X[t], A[t]), és az O(s, o) megfigyelési modell ugyanaz, mint a P(E[t]|X[t]). A t időpontban kapott jutalmat jelöljük R[t]-vel, és U[t]-vel az állapot hasznosságát a t időpontban. E szerint a jelölés szerint egy dinamikus döntési háló a  ábrán látható módon néz ki.
22	0.777778	0	„After John proposed to Marsha, they found a preacher and got married. For the honeymoon, they went to Hawaii. (Miután John megkérte Marshát, találtak egy papot, és összeházasodtak. Hawaiira mentek nászútra.)”
20	0.714286	0	Ennek az algoritmusnak az az alapgondolata (valójában a neuronháló tanuló algoritmusok legtöbbjének is ez), hogy a tanító mintahalmazon mért hiba valamilyen mértékének minimalizálása érdekében módosítjuk a neuronháló súlyait. Tehát a tanulást formálisan a súlytérben (weight space) végzett optimalizálási keresésként fogalmazzuk meg.^[202] A hiba „klasszikus” mértéke a négyzetes hibaösszeg, amit a lineáris regressziónál a 20. szakasz - Maximum-likelihood paramétertanulás: folytonos eset részben is használtunk. Egyetlen, x bemenettel és y kívánt kimenettel megadott példa négyzetes hibája a következőképpen írható fel:
21	0.1875	1	A szuper folyamatok esetében is igaz, hogy egyetlen kontroller folyamatunk és k gépünk van, és most is egy időpillanatban csak egy gépet működtetünk, azonban az egyes karok esetében nem csak azt tudjuk eldönteni, hogy működtessük-e azokat, hanem minden gépre többféle inputot is megadhatunk. Fix input mellett minden gép úgy működik, mint egy hagyományos félkarú rabló, vagyis jelen esetben minden folyamatnak több (az állapotátmenetet meghatározó) f(·) függvénye van, az inputokkal ezek közül választunk.
18	0.736842	1	Tehát – miközben demonstratív példánk elsősorban didaktiai célból korlátozza éppen így a súlyok halmazát – elvileg nem ritka, sőt tipikus, hogy a hipotézisek köre véges. Természetesen a demonstráció áttekinthetősége kedvéért nagyon erősen leszűkítjük a lehetséges súlykészletet, és az itt kiválasztott készlet nem valós problémából fakad.
4	0.916667	0	Az MA^* algoritmus először Chakrabartinál jelent meg (Chakrabarti és társai, 1989). Az EMA^* vagy Egyszerűsített MA^* az MA^* implementációs kísérleteiből született meg, mint az IK egy összehasonlító algoritmusa (Russell, 1992). Kaindl és Khorsand az EMA^* felhasználásával megalkottak egy kétirányú keresési algoritmust, amely jelentősen gyorsabb, mint a korábbi algoritmusok (Kaindl és Khorsand, 1994). Korf és Zhang az oszd-meg-és-uralkodj megközelítést írják le (Korf és Zhang, 2000). Zhou és Hansen pedig bevezették a memóriakorlátozott A^* gráfkeresést (Zhou és Hansen, 2002). Korf áttekintést ad a memóriakorlátozott keresési technikákról (Korf, 1995).
20	0.857143	0	A virtuális szupport vektor gépet (virtual support vector machine) egy standard SVM-ként indítjuk, majd egy olyan technikával javítjuk, amelyet a probléma struktúrájának kihasználására hoztak létre. Ahelyett hogy az összes lehetséges pixelpárból képzett kernelt megengednénk, ez olyan kernelekre koncentrál, amelyek szomszédos pixelpárokból formálódtak. A LeNethez hasonlóan itt is a példák transzformáltjaival egészítjük ki a tanító halmazt. Egy virtuális SVM érte el az eddigi legjobb hibaarányt, 0,56%-ot.
1	0.103448	0	Az MI-kutatás kezdeti szakaszában a megközelítéseket sokszor össze is keverték. Egy szerző állíthatta például, hogy ha egy algoritmus egy feladaton jól vizsgázik, akkor jó modellje az emberi képességeknek, és megfordítva. A mai szerzők a kétféle igényt elkülönítik. Ez a megkülönböztetés mind az MI, mind a kognitív tudomány gyorsabb fejlődését tette lehetővé. Az MI és a kognitív tudomány folyamatosan termékenyítően hatnak egymásra, különösképpen a látás és a természetes nyelv vonatkozásában. A látás a közelmúltban különösen sokat fejlődött a neurofiziológiai eredményeket és a számítási modelleket összefogó integrált megközelítés révén.
13	0.409091	0	azt jelenti, hogy ha egy betegnél megfigyeltük, hogy fogfájása van, és semmilyen más információnk nincs vele kapcsolatban, akkor annak a valószínűsége, hogy szuvas a foga 0,8. Egy P(lyuk) típusú a priori valószínűség tekinthető a P(lyuk∣) feltételes valószínűség speciális esetének, ahol a feltételt a „semmi bizonyíték” jelenti.
6	0.9	1	Tekintse az alábbi eljárást a lépések megválasztására a véletlen csomópontot is tartalmazó játékokban: * Generáljon egy megfelelő számú (mondjuk 50) kockadobásból álló sorozatot egy megfelelő (mondjuk 8) mélységig. * Ismert kockadobások esetén a játékfa determinisztikussá válik. Minden egyes kockadobás-sorozatra oldja meg az eredményül kapott determinisztikus játékfát az alfa-béta algoritmussal. * Az eredményeket használja fel az egyes lépések értékének megbecslésére, és válassza ki a legjobb lépést.
10	0.090909	1	A rendszertan tágabb értelemben és idegen szóval taxonómia (a görög ταξινομία (taxinomia) és a görög taxis=rend és nomos=törvény) elnevezés vagy a dolgok hierarchikus osztályozására vonatkozik, vagy az osztályozás alapjául szolgáló elvekre. Szinte mindent, élő dolgokat, élettelen tárgyakat, helyeket és eseményeket lehet valamilyen osztályozási keretben rendszerezni. A konkrét osztályozási kereteket és azok alapját a kategorizálási módszerek adják.
5	0.818182	1	b) Órarend-ütemezés: adott számú professzor és terem van, valamint rögzített az órarendi órák listája is a lehetséges időablakokkal együtt. Mindegyik professzorhoz adott az általa tartott órák halmaza.
19	0.909091	0	Bár az előzetes tudás felhasználása a tanulásban természetes témának tűnhet a tudományfilozófusok számára, mostanáig meglepően kevés formális eredmény született. Nelson Goodman filozófus a Fact, Fiction, and Forecast c. művében megcáfolta azt a korábbi feltételezést, miszerint az indukció nem más, mint egy univerzálisan kvantifikált kijelentés megfelelően sok példájának a megszemlélése és hipotézisként való elfogadása (Goodman, 1954).
10	0.030303	0	Az ilyen módosítások révén minden speciális rendeltetésű ontológiában lehetséges egy nagyobb általánosság felé elmozdulni. A nyilvánvaló kérdés ilyenkor az, hogy konvergálnak-e ezek a módosítások egy általános célú ontológiához? Évszázadokon át folyó filozófiai és számítási kutatások után a válasz az, hogy „lehetséges”. Ebben a fejezetben egy lehetséges változatot mutatunk be, amely az évszázadok során született gondolatok szintetizálását képviseli. Az általános célú ontológiának két olyan fő jellemzője van, ami azt a speciális rendeltetésű ontológiák sokaságától megkülönbözteti: * Az általános ontológiát (a tárgytartományra vonatkozó axiómák hozzáadásával) többé-kevésbé minden speciális rendeltetésű tárgytartományban kell tudnunk alkalmazni. Lehetőség szerint tehát egyetlen reprezentációs problémával sem lehet ravaszkodni vagy azt a szőnyeg alá söpörni. * Minden kellően igényes tárgytartományban a tudás egyes részeit egyesíteni kell, hiszen a következtetés és a problémamegoldás egyszerre több területet is igényelhet. Egy robot áramkörjavító rendszer esetén például az áramkörökről a villamos összeköttetések és a fizikai elrendezés szempontjából kell tudnunk következtetni, de az idő az áramkör-időzítési analízis és a munkaköltségek szempontjából egyaránt lényeges. Az időt leíró állításokat tehát össze kell tudnunk kombinálni a fizikai elrendezést leíró állításokkal, és ezeknek az állításoknak egyformán jól kell működniük nanomásodpercekre és percekre is, valamint nanométerekre és méterekre is.
5	0.181818	1	Mivel az imént véghezvitt előretekintés nem eredményezett üres értékkészletet egyik változó esetében sem, ezért folytathatjuk az algoritmus rekurzív meghívásával, azon belül pedig egy újabb, eddig még be nem helyettesített változó kiválasztásával, és a megfelelő értékadással. Tegyük fel, hogy a Q változó kerül kiválasztásra, és egy-elemű értékkészletéből nyilván a GREEN értéket rendeljük hozzá (Q=GREEN).
23	0.722222	0	A modell, hogy képes legyen kezelni azt a tényt, hogy a szavakat nem egy az egyben fordítjuk, bevezeti a szó termékenységének (fertility) fogalmát. Egy n termékenységű szót n-szer lemásolja, és az n másolat mindegyike függetlenül fordítódik. A modell az összes francia szóra tartalmazza a P(termékenység = n|szó) paramétereket. Az „à la maison” „home”-ra történő fordításához a modell 0 termékenységet választana az „à” és „la” szavakra,^[267] míg egyet a „maison”-ra, és utána az unigram modellt alkalmazná a „maison” szó „home”-ra történő fordításához. Ez eléggé indokoltnak tűnik, az „à” és a „la” kis információtartalmú szavak, amelyeket ésszerű üres karakterfüzérré fordítani. A másik irányba történő fordítás már kétségesebb. A „home” szóhoz hármas termékenységet rendelne a modell, „home home home” szekvenciát kapva. Az első „home” „à”-ra, a második „la”-ra, míg a harmadik „maison”-ra fordulna. A fordítási modell szempontjából az „à la maison” és a „maison à la” pontosan azonos valószínűséget kapna. (Pont ez a kétséges rész.) A nyelvi modellre lenne bízva, hogy eldöntse, melyik a jobb. Értelmesebbnek tűnhet a „home”-ot közvetlenül „à la maison”-ra fordítani, mint közvetett módon a „home home home”-on keresztül, azonban ehhez sokkal több paraméterre lenne szükség, amelyeket nehéz lenne a rendelkezésre álló korpuszból meghatározni.
24	0.833333	0	A hosszanti irányításhoz az előttünk haladó gépkocsik távolságára van szükség. Erre a kétkamerás sztereolátás vagy optikai folyam segítségével tehetünk szert. Mindkét megközelítést lényegesen egyszerűsíthetjük, ha kihasználjuk a sík felületen történő haladásból adódó kényszereket. Ilyen technikák felhasználásával a vizuálisan irányított autók nagy sebességgel hosszú ideig tudnak közlekedni. Fontos A gépkocsi-vezetési példa egy szempontot igencsak világossá tesz: egy konkrét feladat esetén a képen elvben található összes információ kinyerése nem szükséges. Nem szükséges a gépkocsik pontos alakjának a meghatározása, az úttal szomszédos füves területekre vonatkozó az-alak-a-textúrából probléma megoldása stb. A feladat információszükséglete csak egy bizonyos típusú információra vonatkozik, és lényeges számítási sebességet és robusztusságot lehet biztosítani, ha csak erre az információra összpontosítunk, és a problémából adódó kényszereket teljes egészében kihasználjuk. Az előbbi részekben bemutatott általános megközelítések célja az volt, hogy egy általános alapelméletet adhassunk, amit majd a konkrét feladat szükségleteihez lehet specializálni.
9	0.448276	1	Egyéb javasolt olvasmányok a témát illetően: * Futó I. (szerk.): Mesterséges intelligencia. Aula Kiadó, Budapest, 1999. * Szeredi P.: VAGY- és ÉS- független és függõ – Párhuzamos logikai programozás. 1996(1), 38–40. * Szeredi P.–Gyimóthy T.: Logikai programozás és alkalmazásai. IX. Neumann centenáriumi Kongresszus kiadványa, NJSZT, 2003. 181–198. o. * Sántáné-Tóth E. (szerk.): Magyar Mesterséges Intelligencia Bibliográfia – Válogatás az 1988–1996 között megjelent publikációkból. NJSZT–OMIKK, Budapest, 1996. aug. (400 referencia) http://www.mek.iif.hu/porta/szint/egyeb/katalog/mi-bibl * Kowalski, R., Predicate logic as a programming language. In Proceedings of the IFIP-74 Congress, pp. 569–574, 1974. Elsevier/North-Holland. * Kowalski, R., Algorithm = logic + control. Communications of the Association for Computing Machinery, 22, 424–436, 1979. * Kowalski, R., Logic for Problem Solving. Elsevier/North-Holland, Amsterdam, London, New York, 1979. * Kowalski, R., The early years of logic programming. Communications of the Association for Computing Machinery, 31, 38–43, 1988. * Cohen, J., A view of the origins and development of PROLOG. Communications of the Association for Computing Machinery, 31, 26–36, 1988.
17	0.666667	0	A megoldások (azaz Nash-egyensúlyok) megtalálása nem zéró összegű véges játékokra kissé bonyolultabb. Az általános megközelítés kétlépéses: (1) Soroljuk fel a cselekvések összes lehetséges részhalmazát, amelyek kevert stratégiákat alkothatnak. Például elsőként próbálkozzunk az összes olyan stratégiaprofillal, amelyekben mindegyik játékos egyetlen cselekvést használ, aztán azokkal, amelyekben mindegyik játékos egy vagy két cselekvést használ és így tovább. Ez a cselekvések számában exponenciális, és így csak viszonylag kis játékoknál alkalmazható. (2) Minden (1)-ben felsorolt stratégiaprofilnál ellenőrizzük, hogy az egyensúlyi-e. Ez olyan egyenletek és egyenlőtlenségek egy rendszerének a megoldásával érhető el, amelyek hasonlók a zérusösszegű játékban használtakhoz. Két játékosra ezek az egyenletek lineárisak, és alapvető lineáris programozási technikákkal megoldhatók, de három vagy több játékosnál már nem-lineárisak, és esetleg nagyon nehezen oldhatók meg.
6	0.1	1	A játékok extenzív alakjának számos vonzata és későbbi felhasználása van. Többek között Harsányi János az 1960-as években arra használta, hogy nem-teljes információjú játékokat nem-tökéletes információjú játékokká alakítson. Az eddig tárgyalt játékok gyakorlatilag mind (pár kivételtől eltekintve) nem-tökéletes információjúak voltak. A tökéletes információjú játék olyan, ahol minden játékos meg tudja figyelni a lejátszás során többi játékos által tett összes előző cselekvést. Ha pedig egy játék nem tesz eleget ennek, úgy nem-tökéletes információs játéknak nevezzük (pl. az 1-lapos póker is ilyen, hiszen a 2-es játékos nem tudja megfigyelni a játék kezdetén a C cselekvését).
4	0.25	0	Egy átlagos megoldás véletlen módon generált 8-as kirakójáték példányok esetén kb. 22 lépésből áll. Az elágazási tényező nagyjából 3 (amikor az üres lapka középen van, akkor négy, amikor a sarokban van, akkor kettő, és amikor valamelyik szélső középső pozícióban van, akkor pedig három mozgatás lehetséges). Ebből adódóan egy 22 mélységig menő kimerítő keresés közelítőleg 3^22 ≈ 3,1 × 10^10 állapotot vizsgálna meg. Az ismétlődő állapotok nyilvántartásával ezt a számot 170 000-ed részére le lehet csökkenteni, mert csak 9!/2 = 181 440 különböző elérhető elrendezés létezik (lásd  feladat). Ez egy kezelhető szám, azonban ugyanez a szám a 15-ös kirakójáték esetén már durván 10^13, így a következő teendő egy jó heurisztika megkeresése. Amennyiben a legrövidebb megoldásokat akarjuk megtalálni A^* bevetésével, olyan heurisztikus függvényre van szükségünk, ami soha sem becsüli túl a célállapot eléréséhez szükséges lépések számát. Az ilyen heurisztikák keresésének a 15-ös kirakójáték esetén nagy a múltja. Íme két lehetséges függvény: * h[1] = a rossz helyen lévő lapkák száma. A  ábrán a 8 lapkából egyik sincs a helyén, így a kiinduló állapotban h[1] = 8 lenne. h[1]elfogadható heurisztikus függvény, mivel nyilvánvaló, hogy minden rossz helyen lévő lapkát legalább egyszer mozgatni kell. * h[2] = a lapkáknak a saját célhelyeiktől mért távolságaik összege. Mivel a lapkákat nem lehet átlók mentén mozgatni, az általunk kiszámított távolság a vízszintes és függőleges távolságok összege lesz. Ezt néha háztömb- (city block distance) vagy Manhattan-távolságnak (Manhattan distance) is szokás nevezni. h[2] szintén elfogadható heurisztikus függvény, mivel minden egyes mozgatással egy lapkát csak egy lépéssel lehet közelebb vinni a célhoz. A kiinduló állapotban az 1–8 lapkákra számított Manhattan-távolság:
25	0.925926	0	A korai mobil robot helymeghatározási technikákat Borenstein és társai tekintették át (Borenstein és társai, 1996). Annak ellenére, hogy a Kalman-szűrő évtizedeken át jól ismert helymeghatározási módszer volt az irányításelméletben, a helymeghatározás problémájához tartozó általános valószínűségi szabály csak jóval később jelent meg az MI-irodalomban, Tom Dean és kollégái (Dean és társai, 1990), valamint Simmons és Koenig (Simmons és Koenig, 1995) munkássága révén. Ez utóbbi páros vezette be a Markov-helymeghatározás (Markov localization) fogalmát. A technika első, valósvilág-beli alkalmazását Burgard és társai mutatták be (Burgard és társai, 1999) egy sor roboton keresztül, amelyeket múzeumokba telepítettek. A részecskeszűrő-alapú Monte Carlo helymeghatározás, amelyet Fox és társai fejlesztették ki (Fox és társai, 1999), manapság széles körben használatos. A Rao-Blackwellized részecskeszűrő kombinálja a részecskeszűrést a robot lokalizációval, valamint az egzakt szűrést a térképalkotással (Murphy és Russell, 2001; Montemerlo és társai, 2002).
4	0.916667	0	A TRTA^* algoritmust, a valós idejű keresés (real-time search) vizsgálatának részeként olyan környezetekben, ahol az ágensnek cselekednie kell egy rögzített idejű keresést követően (a kétjátékos játékokban egy megszokottabb helyzet) Korf (Korf, 1990) fejlesztette ki. A TRTA^* valójában a megerősítéses tanulási algoritmus egy speciális esete sztochasztikus környezetekben (Barto és társai, 1995). Az optimizmus bizonytalanság melletti stratégiája – mindig a legközelebbi még nem meglátogatott állapotok felé tartani – olyan feltárási mintát eredményezhet, amely a nem informált esetben kevésbé hatékony, mint az egyszerű mélységi keresés (Koenig, 2000). Dasgupta (Dasgupta és társai, 1994) kimutatta, hogy egy kiegyensúlyozott fában a cél megkeresésére, amikor heurisztikus információ nincs, az online iteratívan mélyülő keresés optimálisan hatékony. A TRTA^* számos informált változatát is kifejlesztették, különböző módszereket alkalmazva, a gráf már ismert részein belüli keresésre és frissítésre (Pemberton és Korf, 1992). Egyelőre még nem sikerült megérteni, hogy heurisztikus információ alkalmazása esetén hogyan kell a célokat optimális hatékonysággal megkeresni.
3	0.208333	0	A kirakójáték a csúsztatós kirakójátékok (sliding-block puzzles) családjába tartozik, amelyeket gyakran új kereső algoritmusok tesztelésére alkalmaznak az MI-ben. Ez az általános osztály NP-teljes, így nem várható, hogy lényegesen jobb módszert lehet találni az itt és a következő bekezdésben leírt keresési algoritmusoknál. A 8-as kirakójátéknak 9!/2 = 181 440 elérhető állapota van, és így e játék könnyen megoldható. A 15-ös kirakójátéknak (a 4 × 4-es táblán) kb. 10 billió állapota van, és a legjobb algoritmusok a véletlenül generált eseteket optimálisan néhány milliszekundum alatt oldják meg. A 24-es játéknak (az 5 × 5-ös táblán) kb. 10^25 állapota van, és a véletlenszerűen kiválasztott esetek optimális megoldása még mindig kemény dió a jelenlegi gépek és algoritmusok számára.
8	0.354839	0	Mivel az ∀ igazából egy konjunkció minden univerzumbeli objektum felett, az ∃ pedig egy diszjunkció ugyanezen objektumok felett, ezért nem meglepő, hogy eleget tesznek a De Morgan-szabályoknak. A kvantorral és a kvantor nélkül álló mondatokra vonatkozó De Morgan-szabályok a következők:
10	0.060606	1	OWL FULL, az OWL DL kiterjesztése, annak néhány hibájának kiküszöbölésével, a maximális kifejező erő érdekében, annak ellenére, hogy ezzel a kedvező logikai következtetés képessége sérül, tehát a garancia arra, hogy a leírás kiszámítható [12]
25	0.148148	1	A szenzorok, a környezet és a robot leíró modelljének jellemzői, pontatlansága gyakran okoz hibát, vagy tévedést a pályabejárás során. A navigálás témakörében hiba (error) alatt valamilyen előírt értéktől történő mennyiségi eltérést értenek, míg a tévedés (mistake) arra utal, hogy valamely útjelzőt nem azonosított a szenzorrendszer, vagy félreértelmezte azt.
3	0.916667	0	A problémamegoldás nem informált keresési algoritmusai központi szerepet töltenek be a klasszikus számításelméletben (Horowitz és Sahni, 1978), az operációkutatásban (Dreyfus, 1969). Deo és Pang, továbbá Gallo és Pallottino egy frissebb áttekintést adnak erről a területről (Deo és Pang, 1984; Gallo és Pallottino, 1988). A szélességi keresést labirintusok megoldására Moore (Moore, 1959) fogalmazta meg. A dinamikus programozás (dynamic programming) módszere (Bellman és Dreyfus, 1962), amely szisztematikusan jegyzi meg az összes növekvő nagyságú részprobléma megoldását, egy gráfokon futó szélességi keresésnek tekinthető. A Dijkstra-féle kétpontos legrövidebb út algoritmus (Dijkstra, 1959) az egyenletes költségű keresés kiindulópontja.
16	0.956522	1	Az informatikai szisztémák felépítéséhez igazodva mindenképpen szükség van adatátvitelre, amely segítségével az előbb felsorolt egységekből nyert adatokat eljuttathatjuk és elemezzük azokat.  ábra - Aneszteziológiai adatgyűjtés rendszere (LAN) Aneszteziológiai adatgyűjtés rendszere (LAN)
2	0.526316	1	Az ágensek a következő információk birtokában működnek. Az aktuális játékban tudják a virtuális időt (az aktuális kör sorszámát). Saját magukról tudják a nevüket, a csapatukat, az energiaszintjüket, saját pozíciójukat, orientációjukat és azt, hogy éppen vízben állnak-e (a víz hatásáról lásd a  fejezetet). Ezen felül ismerik a csapattársaik nevét, tehát tudnak nekik azok helyzetétől függetlenül üzeneteket küldeni. Az ágensek érzékelik a látóterükbe kerülő más ágenseket, tudják azok távolságát, azonosító számát, csapatát, energiaszintjét, pozícióját és orientációját. A látóterükben található ennivalónak ismerik a pozícióját és értékét. Az ágensek látótávolsága 10 cella, a látótér alakját a jobb oldali ábra szemlélteti. Ezen információk alapján az ágensek az alábbi cselekvések közül választhatnak: * várakozás – nem kerül energiába * lépés tetszőleges oldalszomszédos cellára az ágens orientációjától függetlenül (átlósan, illetve ellenfél ágens által elfoglalt cellára nem lehet lépni) – 5 egység energia * fordulás tetszőleges irányba – 2 egység energia * evés – ha az ágens éppen ennivalón áll, körönként legfeljebb 200 egységet fogyaszthat, amivel közvetlenül növeli saját energiáját * energiaátadás – két azonos csapatba tartozó ágens azonos cellán tartózkodva 5% veszteség mellett tud egymásnak energiát átadni (tehát a fogadó ágensnél a küldő ágens energiacsökkenésének csak 95%-a íródik jóvá). * támadás – az ágens 300 egység energia feláldozásával megtámadhat egy másik (éppen a látóterében tartózkodó) nála gyengébb ágenst, mely ilyenkor 100 egység energiát veszít, illetve eredeti pozíciójához képest 10 egység távolságra ellökődik a támadó ágenssel ellentétes irányba. Támadás során nem lehet az ágenseket kilökni a pályáról, illetve olyan pozícióba se kerülhetnek, ahova egyébként nem léphetnének (például ellenséges ágens által elfoglalt cellára): amennyiben a lökés hatására az ágens egy ilyen tiltott cellára kerülne, akkor a tiltott cella egyik szomszédjára kerül.
6	0.1	1	Mit tegyünk tehát - valljunk, vagy tagadjunk? Mi lenne logikus, ésszerű, racionális? Ha vallunk, akkor minden esetben jobban járunk. Ha a másik is vall, akkor 1-et kapunk 0 helyett. Ha pedig a másik tagad, akkor 3-at kapunk 2 helyett. Tehát minden esetben, függetlenül attól, hogy a másik (többi) játékos mit tesz, a Vall stratégia jobb eredményt ad, mint az összes többi stratégiánk. A Vall stratégia tehát dominálja a Tagad stratégiát, és így ennek a játéknak mindkét játékos esetén (hiszen a játék szimmetrikus) a Vall stratégia az egyetlen domináns stratégiája. A Vall-Vall kimenetel tehát domináns egyensúly. Ilyen értelemben logikus lenne vallani, nem igaz? ...no de, ha vallunk, akkor 6-6 év börtönt kapunk (a fenti táblázatban ezt az 1-1 kifizetési vektor jelöli), míg ha mindketten tagadnánk, csak fél-fél évet kapnánk (a fenti táblázatban 2-2 jelöli). A Tagad-Tagad kimenetel, avagy stratégia-kombináció tehát a játék egy úgynevezett kooperatív, más néven Pareto-optimuma. Ha a két játékos kooperálna, akkor el tudnák érni ezt a kimenetelt, de sajnos nincs köztük együttműködés. Ha pedig nincs, akkor a Tagad-Tagad kimenetel esetén mindkét játékosnak érdekében állna különálló módon stratégiát változtatnia, azaz áttérnie Tagad-ról Vall-ra. Ekkor ugyanis 2 helyett 3 lenne a haszna. A másik játékos ekkor természetesen nagyon rosszul járna, ha kitart a Tagadás mellett (0 lenne a haszna). Így ebben az esetben neki is érdemes lenne áttérnie Vall-ra, ahol így 0 helyett 1-et kapna. Vall-Vall esetén azonban már egyetlen játékosnak sem érné meg egyedülálló módon stratégiát változtatnia. Ezért is nevezzük ezt a kimenetelt, avagy stratégia-kombinációt Nash-egyensúlynak (később formálisan is definiálni fogjuk).
14	0.086957	1	Döntési fák kialakítása példák alapján Sajnálatos módon a legkisebb döntési fa megtalálása általánosságban nem megoldható feladat, de némi heurisztika segítségével megkísérelhetjük, hogy egy meglehetosen egyszeru fát találjunk. Az alapötlet: eloször a legfontosabb attribútumot teszteljük. Itt legfontosabb = amelyik a legnagyobb eltérést okozza egy példa besorolásában. Ilyen módon azt reméljük, hogy kisszámú teszt alapján korrekt besoroláshoz jutunk, ami egyben azt is jelenti, hogy a bejárási utak rövidek lesznek, és az egész fa kicsi lesz.
14	0.913043	0	A Markov lánc Monte Carlo (MCMC) módszerek a Metropolis algoritmussal kezdődtek, ami Metropolisnak köszönhető (Metropolis és társai, 1953), ami a  fejezetben leírt szimulált lehűtés algoritmusának szintén a forrása. A Gibbs-mintavételezőt Geman és Geman fejlesztette ki irányítatlan Markov-hálókban történő következtetésre (Geman és Geman, 1984). Az MCMC Bayes-hálókban történő alkalmazása Pearlnek köszönhető (Pearl, 1987). A Gilks és társai által összegyűjtött cikkek MCMC-alkalmazások széles skáláját ölelik fel, számos közülük a jól ismert Bugs csomaggal lett kifejlesztve (Gilks és társai, 1996).
3	0.208333	1	A következő táblázatban az n-királynő probléma különböző, illetve lényegesen különböző megoldásainak száma látható (N <= 21) értékekre. Lényegesen különböző megoldások alatt azt értjük, amelyek nem vihetők át egymásba forgatással és tükrözéssel. A táblázat utolsó oszlopában az is látható, hogy az összes megoldás megtalálása mennyi időt venne igénybe backtrack algoritmussal, egy mai modern processzoron (Athlon XP 2100+ (1.73 GHz)) végezve a számolást.
5	0.181818	1	1. Először is a keresés során aktuálisan értékadással ellátott Xi változó értékkészletét leszűkíti arra az értékre, amit éppen kapott, majd... 2. A KKP-ben szereplő összes (Xj, Xi) élet beleteszi egy sorba, és ezzel - mint kiindulással - futtatja a tankönyv  ábráján szereplő AC3 algoritmust.
14	0.652174	0	Az RVM-ek megengednek konstans szimbólumokat, amelyek objektumokat neveznek meg. Például legyen KovácsProf egy professzor neve, János pedig egy diák neve. Minden objektum az osztály egy példánya: például KovácsProf egy Professzor és János egy Diák. Feltesszük, hogy minden konstans szimbólum osztálya ismert.
8	0.935484	1	∀x,y ( x = y )  . (Az egyértelmű létezés bizonyításánál gyakran alkalmazunk indirekt megközelítést, azaz feltesszük, hogy létezik az adott feltételeknek megfelelő több objektum is, majd belátjuk, hogy ezek szükségszerűen megegyeznek. Ebből következően csak egy ilyen objektum létezik.)
4	0.625	0	Sok módszer található, melyek megkísérlik a felszín gradiensét (gradient) felhasználni a maximum megtalálásához. A célfüggvény gradiense egy ∇f vektor, amely a legmeredekebb emelkedő nagyságát és irányát adja meg. Problémánk esetén:
12	0.428571	0	Példaként a porszívóvilág (vacuum word) problémakört használjuk, amelynek állapotterét a determinisztikus esetre a  szakasz - Példaproblémák részben fektettük le. Emlékezzünk vissza, hogy a Balra, a Jobbra és a Szív a rendelkezésre álló cselekvések. Szükségünk lesz néhány propozícióra, hogy definiáljuk az állapotokat: legyen az OttBal (OttJobb) igaz, ha az ágens a bal (jobb) állapotban van, és legyen a TisztaBal (TisztaJobb) igaz, ha a bal (jobb) állapot tiszta.^[122] Az első feladatunk a Strips nyelv kiterjesztése, hogy megengedje a nemdeterminisztikusságot. Ennek érdekében megengedjük a cselekvésekben a diszjunktív következményeket (disjunctive effects), ami azt jelenti, hogy egy cselekvést bármikor végrehajtva annak kettő vagy több különböző kimenetele is lehet. Tegyük fel például, hogy a Balra lépés néha sikertelen. Ekkor a
2	0.421053	0	Ahogy várható, a legnehezebb a részlegesen megfigyelhető, sztochasztikus, sorozatszerű, dinamikus, folytonos és többágenses eset. Az is kiderül, hogy a valós helyzetek legtöbbje olyan bonyolult, hogy valódi determinisztikusságuk vitatott kérdés; gyakorlati okokból sztochasztikusként kezelendők. A taxivezetés mindezen szempontok szerint nehéz.
9	0.758621	0	Az elmélet bizonyításában az alapklózokról az elsőrendű klózokra történő kiterjesztés az állítás erejének igen jelentős növelése. Ez abból következik, hogy az elsőrendű bizonyításban már csak annyiszor kell a változókat helyettesíteni, amennyiszer ez a bizonyításhoz szükséges, míg az alapklózmódszereknél szükséges volt nagyszámú önkényes példányosítást megvizsgálni.
14	0.869565	1	A referencia rendszert figyelve azt látjuk a szimulációból, hogy visszacsatolással a vízszint beáll.  ábra - Az XCos példákból vett minta rendszer Az XCos példákból vett minta rendszer  ábra - A fenti minta rendszerben a tartály szimulációja A fenti minta rendszerben a tartály szimulációja
26	0.714286	0	A mesterséges intelligencia sikere az emberi faj végét jelentheti. Gyakorlatilag bármely technológiában benne rejlik a lehetőség, hogy kárt okozzon rossz kezekben, de a mesterséges intelligencia és a robotika esetében ezek a rossz kezek akár magához a technológiához is tartozhatnak. Számtalan sci-fi szól figyelmeztető jelként arról, hogy robotok vagy robot-ember kiborgok ámokfutást rendeznek. Marry Shelley Frankenstein, or the Modern Prometheus (Shelley, 1818)^[286] c. műve és Karel Capek R.U.R. c. drámája, amelyben a robotok meghódítják a világot, korai példái az ilyen történeteknek. Mozifilmek is szólnak erről: a The Terminator (1984) a robotok-leigázzák-a-világot kliséit az időutazással ötvözi, a The Matrix (1999) pedig ugyanezt az agyak-a-tartályban-nal kombinálja.
7	0.92	0	Stephen Cook (Cook, 1971) mutatta meg, hogy a kielégíthetőség eldöntése az ítéletlogikában NP-teljes. Mivel a vonzat meghatározása ekvivalens a kielégíthetetlenség eldöntésével, ez is NP-teljes. Az ítéletlogika számos részhalmaza ismert, amelyről tudnuk, hogy bennük a kielégíthetőség problémája polinomiális időben megoldható. A Horn-klózok az egyik ilyen rézhalmaz. A Horn-klózokon működő, lineáris időben futó előreláncolási algoritmust Dowlingnak és Galliernek (Dowling és Gallier, 1984) köszönhetjük, akik az algoritmusokat egy adatfolyam-eljárásként írták le, hasonlóan a jelek terjedéséhez az áramkörökben. A kielégíthetőség ellenőrzése alapvető módszerré vált a problémák NP-teljességének vizsgálatában; például Kaye (Kaye, 2000), megmutatta, hogy az Aknakereső játék (lásd  feladat) NP-teljes.
16	0.913043	0	A döntéselmélet már az 1950-es évek óta szabványos eszköz a közgazdaságtanban, a pénzügyben és a menedzsment tudományban. Az 1980-as évekig az egyszerű döntési szituációk reprezentálására a döntési fák voltak a fő eszközök. A döntési hálókat vagy hatásdiagramokat Howard és Matheson vezette be (Howard és Matheson, 1984), bár a szükséges fogalmakat már korábban kifejlesztette egy csoport (benne Howard és Matheson) az SRI-nél (Miller és társai, 1976). Howard és Matheson eljárása azonban egy közbenső lépést, a döntési hálónak egy döntési fára történő átírását tartalmazta, ahol általános esetben a fa exponenciális méretű volt. Shachter kifejlesztett egy eljárást, ami közvetlenül a döntési hálókon alapult anélkül, hogy egy közbeeső döntési fát hozna létre (Shachter, 1986). Ez az algoritmus volt az első, amely teljes következtetést tudott elvégezni többszörösen összekötött Bayes-hálókban. Egy mostani munkában Nilsson és Lauritzen összekapcsolta a döntési hálókhoz tartozó algoritmusokat a Bayes-hálóknál kifejlesztett klaszterezési algoritmusokkal (Nilsson és Lauritzen, 2000). Oliver és Smith gyűjteménye számos hasznos cikket tartalmaz a döntési hálókról, mint ahogy a Networks folyóirat 1990-es különkiadása is hasznos cikkekből áll (Oliver és Smith, 1990). Döntési hálókról és hasznosságmodellezésről szóló cikkek a Management Science-ben is rendszeresen megjelennek.
15	0.592593	0	Nem meglepő, hogy egy tartós hiba kezeléséhez szükségünk lesz egy tartóshiba-modellre (persistent failure model), ami leírja, hogyan működik az érzékelő normális körülmények között és meghibásodás után. Ennek eléréséhez ki kell egészítenünk a rendszer rejtett állapotát egy további változóval, mondjuk egy AMHibás-sal, ami megadja az akkumulátormérő állapotát. A hiba tartós megmaradását egy nyíllal kell modellezni, ami az AMHibás[0]-t az AMHibás[1]-hez kapcsolja. Ennek a megmaradási nyílnak (persistence arc) olyan FVT-je van, ami minden időlépésben megengedi a meghibásodást egy kis valószínűséggel, mondjuk 0,001-gyel, de leírja, hogy ha egy érzékelő elromlott, akkor az rossz is marad. Amikor az érzékelő rendben van, akkor az AMérő érzékelő modellje megegyezik az átmenetihiba-modellel; amikor az érzékelő rossz, az AMérő mindig 0, függetlenül az akkumulátor aktuális töltöttségétől.
24	0.958333	1	A Lambert-féle felület fényessége I(x, y) = kn(x, y)s. Most az s fényforrás iránya a z tengely. A 24.  ábra a henger egy vízszintes metszetét mutatja (az x-z síkban). Ekkor a fényesség I = k cosθ(x) a henger minden jobb oldali részén. A baloldali rész árnyékban van. Mivel x = rcosθ, a fényesség függvény I(x) = kx/r, amely megmutatja, hogy az azonos fényességű kontúrok a henger fényes felén egyenlő távolságra helyezkednek el (24.  ábra (b)).  ábra - (a) A jelenet geometriai viszonyai az y tengely irányából, (b) a z tengely irányából (a) A jelenet geometriai viszonyai az y tengely irányából, (b) a z tengely irányából
5	0.181818	1	7. lépés: ebben a lépésben LCV nélkül a Q=BLUE értékadás történt. Ugyanez a választás történik akkor is, ha LCV heurisztika szerint választunk értéket, hiszen ekkor Q-nak már csak egy-elemű az értékkészlete: {BLUE}.
6	0.1	1	Az adatstruktúra megválasztása nélkülözhetetlen a tábla reprezentálásához. Nagy mértékben befolyásolhatja a lépésgenerálást és a pozíció kiértékelést is. Olyan metódusokat különböztetünk meg, mint a tömbbe rendezés (SARGON), listába rendezés (piece list), és a Huffman kódolt pozíciók. [6]
12	0.52381	0	Eddig a monitorozást és újratervezést a teljesen megfigyelhető környezetek esetére mutattuk be. A részlegesen megfigyelhető környezetek esetén jóval komplikáltabb problémák léphetnek fel. Először is olyan hibák léphetnek fel, amelyet az ágens nem tud érzékelni. Másodszor „az előfeltételek ellenőrzése” érzékelő cselekvések végrehajtását teheti szükségessé, amelyet tervezni kell vagy a tervkészítési időben, ami a feltételes tervkészítéshez vezet vissza, vagy a végrehajtási időben. A legrosszabb esetben az érzékelési cselekvések végrehajtása összetett tervet igényel, melyhez monitorozás, így további érzékelési cselekvések szükségesek. És ez így megy tovább. Ha az ágens ragaszkodik minden előfeltétel ellenőrzéséhez, akkor elképzelhető, hogy sohasem jut hozzá, hogy valójában tegyen is valamit. Az ágensnek csak a fontos változók ellenőrzését kellene szem előtt tartani, melyek jó eséllyel okoznak hibát, és nem túl drága a megfigyelésük. Ez lehetőséget ad az ágensnek, hogy megfelelőképpen reagáljon a fontos fenyegetésekre, de ne vesztegessen időt annak ellenőrizgetésére, hogy összeomlik-e az ég.
17	0.066667	0	Az egyes állapotokban végrehajtott egyes akcióknak a kimeneti valószínűségeit állapotátmenet-modellnek (transition model) nevezzük, (vagy csak „modell”-nek, ha nem értelemzavaró). A T(s, a, s′) jelölést fogjuk használni annak a valószínűségnek a jelölésére, hogy az s állapotban az a cselekvés végrehajtása s′ állapotot eredményez. Feltesszük, hogy az átmenetek teljesítik a  fejezetben megfogalmazott Markov-tulajdonságot, azaz, hogy s′ elérése s-ből csak s-től függ, más korábbi állapotoktól már nem. Egyelőre a T(s, a, s′)-t tekinthetjük a valószínűségek egy nagy háromdimenziós táblázatának. Később, a  alfejezetben látni fogjuk, hogy az állapotátmenet-modell reprezentálható dinamikus Bayes-hálókkal (dynamic Bayesian network), csakúgy mint a  fejezetben.
8	0.516129	0	A számok talán a leglátványosabb példái annak, hogy hogyan építhetünk fel egy hatalmas elméletet axiómák kicsi darabjait használva. Le fogjuk írni a természetes számok (natural numbers), vagyis a nem negatív egész számok elméletét. Szükségünk van egy predikátumra TermSzám, amely igaz lesz minden természetes számra; szükségünk van továbbá egy konstansszimbólumra, ez lesz a 0; valamint egy függvényszimbólumra, az S rekurziót leíró függvényre. A Peano-axiómák (Peano axioms) meghatározzák a természetes számokat és az összeadást.^[81] A természetes számoknak egy rekurzív definícióját adjuk meg:
20	0.107143	1	A likelihood alapú megközelítés szoros kapcsolatban áll a Bayes-hálókkal, megvalósításuk legtöbbször Bayes-hálós alapokon nyugszik. E módszerek feltevése, hogy az alapvető cél a célváltozó feltételes valószínűségi eloszlását leíró paraméterek meghatározása. Az eljárás az EM (expectation-maximization) algoritmus elvein alapszik. Minden egyes hiányzó adat esetén több lehetséges értékkel kell elvégezni a pótlást, ezáltal egy kibővített adathalmazt hozva létre. Ezt követően minden egyes pótolt értékre meg kell becsülni, hogy az mennyire valószínű a megfigyelt értékek függvényében. Ezt nevezzük az EM algoritmus becslési lépésének. A következő lépés az együttes valószínűség-eloszlás várható log-likelihoodjának maximalizálása a becslések felhasználásával. Ennek eredményeként meghatározott értékek lesznek a következő becslési lépés kiindulópontjai. Az algoritmus a maximum-likelihood becsléshez konvergál, a lokális maximumokba való beragadás lehetőségével azonban számolni kell.
13	0.318182	1	Ha az adatok számának növelésével az eloszlás Gaussivá válik, akkor a korábban leírt módszerek alkalmazhatók. Ellenkező esetben megoldást adhat az adatok transzferálása (logaritmizálás, reciprok képzés), ugyanis bizonyos paraméterek esetén a transzferált adatok Gaussi eloszlást mutatnak.
4	0.916667	1	A feladat relaxált verzióját kell megoldani. Ha az üres mező nincs a helyén, akkor cseréljük ki azzal a mezővel, amelynek a helyén van. Ha az üres mező a helyén van, de még nem vagyunk célállapotban, cseréljük ki az üres mezőt egy véletlenszerű, nem a helyén levő mezővel. Ismételjük ezt addig, amíg célállapotba nem jutunk.
9	0.793103	0	Az egyenlőség kezelésének másik módja egy további következtetési szabály alkalmazása. A legegyszerűbb szabály, a demoduláció (demodulation) vesz egy egységklózt, x = y és helyettesíti az y-t bármely termmel, ami x-szel egyesíthető egy másik klózban. Formálisabban kifejezve ezt kapjuk: * Demoduláció. Bármely x, y és z termekre, ahol Egyesít (x, z) = θ, és az m[n][z] egy literál, ami tartalmazza a z-t.
24	0.833333	1	Az algoritmus alapváltozata igen lassú, de gyorsítható a konvolúció frekvenciatartományban való elvégzésével, illetve egy több skálán dolgozó iteratív megoldást alkalmazva, mely kezdetben kisebb felbontású képeken keres durvább alakzatokat.
22	0.111111	0	Létrehozás (generation). A beszélő megtervezi, hogy P propozíciót hogyan alakítsa át olyan kijelentéssé, amely valószínűvé teszi, hogy a hallgató, fogadva a kijelentést a jelenlegi szituációban, kikövetkeztetheti P jelentést (vagy egy hozzá közelit). Tételezzük fel, hogy a beszélő képes a következő szavakat létrehozni: „The wumpus is dead” (A wumpus halott), és jelöljük ezt W-vel.
1	0.172414	1	A mesterséges intelligencia feladata lenne az intelligenciának számítási modellekkel való megvalósítása, azonban intelligencia összetett, nincs olyan dolog, ami önmagában felelős lenne intelligenciáért annak minden megnyilvánulásában. A rendszer intelligenciáját abban a képességben szokás látni, vagy ezzel a képességgel mérni, ahogy a rendszer a kitűzött célokat éri el a környezete által mutatott változások, nehézségek, és komplexitások ellenére (ld. racionalitás kérdése). Ez nyilván nem fedi az intelligencia összes lehetséges megnyilvánulását, de ez a megközelítés kellően széles és gazdag, hogy akár az emberi, akár a gépi viselkedés terén lehetőséget teremtsen pragmatikusan fontos kérdések tanulmányozásához. Az egyik ilyen kérdés az intelligens viselkedés és a szimbolikus információ kezelésének a viszonya.
5	0.181818	1	Namármost ez jókora visszalépés volt, beláthatjuk, de sajnos szükségszerű, mivel az AC3/MAC algoritmus a 4. lépés környékén még nem volt képes előre jelezni számunkra, hogy az {NSW=RED, WA=RED} behelyettesítés végül inkonzisztenciát fog eredményezni. Azaz végső soron ez a részleges behelyettesítés, még hogyha közvetlenül nem is mond ellent a korlátoknak, magasabb szinten „inkonzisztens”, mivel ezek után/e mellett a KKP-nek már nincs megoldása.
16	0.913043	1	Az egyéni egészségügyi rekordok és kórlapok adataiból nagyméretű adatbázisokat hozhatunk létre. Ezek prototípusa az Egyesült Államokban működő HuGENet (Human Genome Epidemiology Network) hálózat, de számos hasonló projekt fut Európa különböző országaiban is. Ezen epidemiológiai adatbázisok elsősorban statisztikai jellegűek. Ezekben az összegző adatbázisokban különböző hozzáférési jogosultságokat határoznak meg.
14	0.956522	0	 Megjegyzés Három focicsapat, A, B és C játszik egymás ellen. Minden meccsen két csapat vesz részt, az eredmény pedig győzelem, vereség vagy döntetlen lehet. Minden csapatnak egy rögzített, ismeretlen fokozatú játékszintje van – ami egy 0 és 3 közötti egész érték –, és egy meccs eredménye a két csapat játékszintje közötti különbségtől függ sztochasztikusan. a. Hozzon létre egy relációs valószínűségi modellt a tárgyterületre, és javasoljon értékeket az összes szükséges valószínűség-eloszlásra. b. Hozzon létre egy ekvivalens Bayes-hálót. c. Tegyük fel, hogy az első két meccsen A megveri B-t, C-vel pedig döntetlent játszik. Egy tetszőleges egzakt következtetést felhasználva, számítsa ki a harmadik meccs a posteriori eloszlását. d. Tegyük fel, hogy n csapat vesz részt a bajnokságon, és minden eredményünk megvan, kivéve az utolsót. Hogyan változik az utolsó meccs megjóslásának a komplexitása az n függvényében? e. Vizsgálja meg az MCMC alkalmazását ezen a problémán. Milyen gyorsan konvergál az MCMC a gyakorlatban, és hogyan skálázható fel?
6	0.1	1	Az algoritmus alapötlete, hogy a szekvenciális játékot reprezentáló fa levelei felől indul el, és a gyökér felé haladva csúcsról-csúcsra, csomópontról-csomópontra megállapítja, hogy mi lenne ott, az adott csomópontban a játék szabályai szerint döntésre hivatott játékos ésszerű (haszonmaximalizáló) döntése a fa alacsonyabb szintjein, időben később esedékes ésszerű döntések fényében.
5	0.181818	1	A következőkben vegyünk szemügyre egy másik jól ismert heurisztikát, amivel az eddigi, előretekintő következtetéssel ellátott visszalépéses mélységi keresésünket még kiegészíthetjük. Ezúttal nem a változók kiválasztásáért felelős eljárást módosítjuk (mint például az előzőekben bemutatott DEG, vagy éppenséggel MRV heurisztikák esetén), hanem egy-egy változó értékeinek sorba-rendezését próbáljuk meg heurisztikus úton megoldani (ami talán hatékonyabb lehet, mint ha önkényesen, vagy éppen véletlenszerűen rendeznénk a változók értékkészletét, és a keresés során e sorrendnek megfelelően haladnánk végig a változók értékein, amennyiben rájuk kerül a sor).
9	0.517241	0	 ábra - A Csatol predikátum fordításának pszeudokódos reprezentációja. Az Új-Változó függvény egy új változót ad vissza, amely különbözik a korábban visszaadott változóktól. A Hív (folytatás) eljárás folytatja a végrehajtást a megadott folytatással. A Csatol predikátum fordításának pszeudokódos reprezentációja. Az Új-Változó függvény egy új változót ad vissza, amely különbözik a korábban visszaadott változóktól. A Hív (folytatás) eljárás folytatja a végrehajtást a megadott folytatással.
2	0.263158	0	A sikeres ágensek három különböző periódusra bontják az ágensfüggvény kiszámításának feladatát: amikor az ágenst tervezik, a számítás egy részét tervezőik végzik; amikor megfontolja a következő cselekvését, az ágens további számításokat végez; és amikor tanul a tapasztalataiból, még további számításokat végez annak eldöntésére, hogy hogyan módosítsa a viselkedését. Fontos Addig a szintig, míg az ágens a tervezői által beépített tudásra épít és nem saját megfigyeléseire, azt mondjuk, hogy az ágens nem autonóm (autonom). Egy racionális ágensnek autonómnak kell lennie – mindent, amit csak megtanulhat, meg kell tanulnia ahhoz, hogy a hiányos vagy hibás előzetes tudását kompenzálja. Például az a porszívóágens, amelyik megtanulja előrelátni, hogy hol és mikor tűnik fel további szemét, jobban fog dolgozni, mint amelyik nem. Praktikus okból ritkán kell teljes autonómiát biztosítani már a kezdetektől: amikor egy ágensnek nincs tapasztalata, vagy csak kevés van, akkor véletlenszerűen kellene cselekednie, hacsak a tervezője nem ad valamilyen segítséget. Így, mint ahogy az evolúció ellátja az állatokat elegendő beépített reflexszel a túléléshez addig, míg saját maguk is megtanulják mindazt, ami a túléléshez szükséges, a mesterséges intelligens ágensek kezdő tudással és tanulási képességgel való ellátása is ésszerű lenne. Miután elegendő tapasztalatot szerzett a környezetéről, a racionális ágens viselkedése gyakorlatilag függetlenné válhat a beépített előzetes tudásától. Ily módon a tanulás alkalmazásával olyan ágens tervezhető, amely sokféle környezetben is sikeres lesz.
8	0.548387	0	A diagnosztikus szabályok a megfigyelt hatásoktól a rejtett okokhoz vezetnek minket. A csapdák megtalálásához a legkézenfekvőbb diagnosztikai szabályok azt mondják ki, hogyha a négyzet szellős, akkor valamelyik szomszédos négyzet biztosan tartalmaz csapdát:
1	0.862069	0	Logisztikai tervkészítés: 1991-ben, az Öböl-válság idején az amerikai haderő automatikus logisztikai tervkészítésre és a szállítás ütemezésére egy DART – Dynamic Analysis and Replanning Tool – nevű rendszert alkalmazott. A rendszer működése egyidejűleg 50 ezer (teher- és személyszállító-) járműre terjedt ki, figyelembe vette a kiindulási és célállomásokat, útvonalakat és az összes paraméter közötti konfliktusfeloldást is. MI-technikák révén a terv órák alatt kész volt, szemben a heteket igénylő korábbi megoldásokkal. A Védelmi Kutatási Ügynökség (Defense Advanced Research Project Agency, DARPA) közleménye szerint, csupán ezen egyetlen alkalmazás kapcsán megtérült a DARPA által 30 éven keresztül az MI-re fordított befektetés.
8	0.225806	0	Összetett mondatok létrehozásához használhatunk logikai összekötőjeleket (logical connectives) úgy, mint az ítéletkalkulusban. A logikai kötőszavakkal formált mondatok szemantikája azonos az ítéletkalkulusban látott szemantikával. Íme négy mondat, amelyek igazak a  ábra modelljében, a szándékolt interpretációnk szerint.
24	0.166667	1	A számítógép kijelzője, egy egyaránt 1024 sor és oszlop megjelenítésére és másodpercenként akár maximum 100 000 frissítésre képes, tulajdonképpen oszcilloszkóp volt. A megjelenítéshez szükséges képpontok koordinátái egy táblázatban vannak tárolva, így kirajzolásuk és feldolgozásuk független más műveletektől. 36 bit áll rendelkezésre minden pixelhez, amiből 20 a koordinátákat adja meg, a fennmaradó 16 azonosítja az n-es alakzatot, amely felelős az adott képpont tartalmáért. A körkörösen linkelt pointerek segítségével egy hivatkozott n-es objektum könnyen bejárható és kirajzolható. A nagyítás nagyságrendjét illetően egy 7 hüvelykes (18 cm-es) ábra félmérföldnyire (800 méteresre) nagyítható.
2	0.105263	1	Itt jegyeznénk meg, hogy ez a definíció általános. Nyilván nem minden ágensnek kell az adott időpillanatig beérkező összes érzetet (teljes érzet-történetet) mérlegelnie, vagy felhasználnia ahhoz, hogy eldöntse, hogy mit cselekedjen, főleg nem explicite. Elképzelhető, hogy egy ágens (pl. reflex-szerű ágens) csak a legutóbbi beérkező érzetet használja fel explicite. Viszont egy belső állapottal rendelkező ágens mindenkor aktuális belső állapotára, és így arra alapozott cselekvésére elvben akár a teljes addig beérkezett érzet-történet is hatással lehet (kumulálódva az ágens belső állapotában, implicite). Általánosságban tehát a fenti definíció helyénvaló, hiszen lefedi azt az esetet is, amikor az ágens minden egyes addig beérkezett érzetet figyelembe vesz (explicite, vagy implicite), illetve azt is, amikor nem. Végső soron még egy olyan ágens is megfelel ennek a definíciónak, amelyik például teljesen véletlenszerűen cselekszik (és így egyáltalán nem veszi figyelembe a beérkező érzeteket). Ez az ágens minden lehetséges érzet-sorozatra véletlenszerűen reagál, és így egy ilyen ágens-függvénynek felel meg, ami nem mond ellent a fentieknek.
8	0.967742	0	Reprezentálja a következő mondatokat az elsőrendű logikában úgy, hogy egy következetes szótárt használ (amelyet előzőleg definiálnia kell): a. Néhány diák felvette a franciát 2001 tavaszi félévében. b. Minden diák, aki felveszi a franciát, átmegy a vizsgán. c. Csak egy diák vette fel a görögöt 2001 tavaszi félévében. d. A görögben elért legmagasabb pontszám mindig magasabb a franciában elért legmagasabbnál. e. Minden személy okos, aki biztosítást köt. f. Senki nem köt drága biztosítást. g. Van egy ügynök, aki csak azokkal köt biztosítást, akiknek még nincs kötvényük. h. Van egy borbély, aki minden férfit megborotvál a városban, aki nem borotválkozik. i. Az a személy, aki az Egyesült Királyságban születik, és akinek mindkét szülője brit állampolgár vagy ottani lakos, születésénél fogva brit állampolgár. j. Az a személy, aki az Egyesült Királyságon kívül születik, és egyik szülője született brit állampolgár, az származása alapján brit állampolgár. k. A politikusok bármikor bolonddá tehetnek néhány embert, és minden embert bolonddá tehetnek egy kis időre, de nem tehetnek bolonddá mindenkit örökre.
1	0.103448	1	Arisztotelésztől mindig az egyetemes igazságok megismerését kutatta, kerülte a feltételezéseket. Ezért első úttörő alakja volt a tudományoknak. Munkássága felöleli az ókori görög világ ismeretanyagát. Foglalkozott többek között filozófiával, biológiával, fizikával, matematikával, csillagászattal, pszichológiával, közgazdaságtannal, politikával, retorikával. Megfigyelései, vizsgálatai a kor korlátozott lehetőségei miatt kerültek később esetleges pontosításra, helytállóak maradtak az idők folyamán. Inspirációt adott a későbbi korok embereinek, ösztönző erőként hatott a tudományok fejlődésére.
2	0.894737	0	A környezetek tulajdonságainak gondos figyelembevétele és hatásuk a racionális ágensek tervezésére leginkább a szabályozáselméleti tradícióban látható – például a klasszikus szabályozó rendszerek (Dorf és Bishop, 1999) teljesen megfigyelhető, determinisztikus környezeteket kezelnek; a sztochasztikus optimális vezérlés (Kumar és Varaiya, 1986) részlegesen megfigyelhető, sztochasztikus környezeteket kezel; és a hibrid szabályozó (Henzinger és Sastry, 1998) olyan környezetekkel foglalkozik, amelyek mind diszkrét, mind folytonos elemeket tartalmaznak. A teljesen és a részlegesen megfigyelhető környezetek közötti különbségtétel az operációkutatás területén kifejlődött dinamikus programozás (dynamic programming) irodalmában szintén központi kérdés (Puterman, 1994), amit a  fejezetben fogunk tárgyalni.
5	0.454545	0	A visszalépéses megközelítés intelligens alkalmazása lenne, ha ahhoz a változóhalmazhoz mennénk vissza, amely a meghiúsulást okozta. Ezt a halmazt konfliktushalmaznak (conflict set) nevezik; esetünkben a DA-hoz tartozó konfliktushalmaz a {Q, ÚDW, V}. Általános esetben egy X változó konfliktushalmaza a korábban értéket kapott változók egy halmaza, melyeket X-hez kényszerek kötnek. A visszaugrás (backjumping) a konfliktushalmaz-beli legutolsó változóhoz lép vissza; esetünkben a visszaugrás átugorná Tasmaniát, és V számára próbálna új értéket keresni. Ezt egyszerű implementálni a Visszalépéses-Keresés olyan módosításával, hogy az összegyűjtse a konfliktushalmazt, miközben hozzárendelhető értékeket keres. Ha nem talál ilyen értéket, akkor a konfliktushalmaz legutolsó elemét kell visszaadnia (a meghiúsulás jelzésével együtt).
24	0.916667	0	A második világháború utáni szakaszt megújult aktivitás jellemezte. A legfontosabb J. J. Gibson munkája volt, aki rámutatott az optikai folyam és a textúragradiensek fontosságára olyan környezeti változók becslésénél, mint a dőlés és a lejtés (Gibson, 1950; 1979). Ő újból hangsúlyozta az ingerek fontosságát és gazdagságát. Gibson, Olum és Rosenblatt rámutattak, hogy az optikai folyammező elegendő információt tartalmaz ahhoz, hogy a megfigyelő meghatározhassa saját mozgását a környezetben (Gibson és társai, 1955). A számítógépes látásban a kutatás ezen területen és a (matematikailag ekvivalens) struktúra-a-mozgásból területen főleg az 1980-as években ment végbe, Koenderink, Van Doorn, Ullman és Longuet-Higgins alapozó eredményeit követve (Koendrink és Van Doorn, 1975; Ullman, 1979; Longeut-Higgins, 1981) adott lendületet e tevékenységnek. A kezdeti aggodalmakat a mozgásból származtatott struktúra stabilitásával kapcsolatban Tomasi és Kanade munkája (Tomasi és Kanade, 1992) csillapította, akik megmutatták, hogy több képkocka felhasználásával és az ebből származó széles alapvonallal az alak egészen pontosan felismerhető.
23	0.166667	0	A feladat sokkal nehezebb, ha csak elemzetlen szöveggel rendelkezünk. Először is két problémával szembesülünk: a nyelvtani szabályok struktúrájának és az egyes szabályok valószínűségének megtanulásával. (Ugyanezt a megkülönböztetést tesszük neurális hálózatok, valamint Bayes-hálók tanulása esetén is.)
16	0.26087	0	Annak eldöntéséhez, hogy mit is tegyünk, az egyes kimeneteli állapotokhoz hasznosságot kell rendelnünk. A hasznosság nem közvetlenül arányos a pénzügyi értékkel, mivel a hasznosság – az okozott pozitív változás az életstílusban – az első millió dollár esetén nagyon nagy (vagy legalábbis azt mondják), ezzel szemben a további milliók hasznossága sokkal kisebb. Tételezzük fel, hogy 5-ös hasznosságot rendel a jelenlegi (S[k]) pénzügyi helyzethez, 10-et az S[k+3 000 000] állapothoz, 8-at az S[k+1 500 000 ]állapothoz. Ekkor a racionális döntés az elutasítás lenne, mivel az elfogadás várható hasznossága 7,5 (kisebb, mint az elutasításhoz tartozó 8). Most tételezze fel, hogy már van a számláján 500 000 000 dollár (és a játékban való részvétel csak a móka kedvéért történik). Ebben az esetben a hazárdjáték valószínűleg elfogadható, feltéve, hogy a több pénzt preferálja a kevesebbel szemben, mivel az 503-adik millió haszna valószínűleg ugyanakkora, mint az 501-edik millióé.
3	0.625	0	Nézzük most, hogy mit is jelent az, hogy „cél”, ha a célállapotból hátrafelé kell keresni. A 8-as kirakójáték és a romániai útkeresés esetén egyetlenegy célállapot létezik csak, így a hátrafelé keresés és az előrefelé keresés igen hasonlítanak egymásra. Amennyiben létezik a célállapotoknak egy explicit listája, mint például a  ábra két koszmentes célállapota, akkor megkonstruálhatunk egy olyan ál-célállapotot, amelynek közvetlen követői az aktuális célállapotok. Más módon, néhány redundáns csomópont-generálás elkerülhető azzal, hogy a célállapotok halmazát egyetlenegy célállapotnak tekintjük, amelynek minden elődje szintén egy állapothalmaz – konkrétan azon állapotok halmaza, amelyek követője a célállapothalmaz eleme (lásd még  alfejezet).
12	0.428571	0	alakú. (A „while OttJobb do Balra” kifejezés egy jobb szintaxis a terv ciklikus részére.) Az És-Vagy-Gráf-Keresés-ben szükséges módosításokat a  feladat dolgozza fel. A megvalósítás kulcsa, hogy az állapottérben egy L állapotba visszalépő hurok a tervben egy arra a pontra visszamutató hurkot jelent, ahol az L állapotba vezető résztervet végrehajtjuk.
21	0.5625	0	Azt várjuk, hogy az ágens gyorsabban fog tanulni, ha függvényapproximátort használ, feltéve, hogy a hipotézistér nem túl nagy, de van benne néhány olyan függvény, amely kielégítően illeszkedik az igazi hasznosságfüggvényre. A  feladatban azt várjuk az olvasótól, hogy értékelje a közvetlen hasznosságbecslést mind a függvényapproximáció felhasználásával, mind anélkül. A 4 × 3-as világban a javulás érzékelhető, de nem drámai, mivel nagyon kicsi az állapottér, amivel dolgozni kell. A javulás sokkal nagyobb a 10 × 10-es világban, ha +1 jutalom van a (10, 10) mezőn. Ez a világ jól illeszthető a lineáris hasznosságfüggvényhez, mivel az igazi hasznosságfüggvény sima és közel lineáris (lásd  feladat). Ha a jutalmat az (5, 5) mezőre tesszük, akkor az igazi hasznosságfüggvény piramis jellegű, és a   egyenletben felvett függvényapproximátor szánalmas kudarcot vall. Mindamellett nem veszett el minden! Emlékezzünk vissza, hogy a lineáris függvényapproximációnál az számít, hogy a függvény paramétereiben legyen lineáris – a használt tulajdonságok önmagukban az állapotváltozók tetszőleges nemlineáris függvényei lehetnek. Tehát használhatunk egy  típusú tagot, amely a céltól való távolságot méri.
18	0.210526	0	A döntési fa egy tesztsorozat elvégzése során jut el a döntéshez. A fa minden egyes belső csomópontja valamely tulajdonság értékére vonatkozó tesztnek felel meg, a csomópontból kilépő ágakat pedig a teszt lehetséges kimeneteivel címkézzük. Minden egyes levélcsomópont megadja azt az értéket, amelyet vissza kell adnunk, ha ezt a levelet elértük. Úgy tűnik, hogy a döntési fa reprezentáció az emberek számára rendkívül természetes; valójában számos „Hogyan csináljuk?” kézikönyvet (például az autójavítási kézikönyveket) írtak meg egyetlen hatalmas, több száz oldalra kiterjedő döntési faként.
11	0.346154	0	kiindulási állapot a {p/P[12]} behelyettesítéssel teljesíti. A behelyettesítéseket arra a cselekvésre kell végrehajtani, ami az állapottól a célhoz vezet, így eredményezve a [Kirakodás(C[1], P[12], B)] megoldást.
19	0.909091	0	A MAT gyökerei a tervkészítésnél használt Strips módszereihez nyúlnak vissza (Fikes és társai, 1972). Egy terv elkészítésével a terv egy általánosított változatát a tervek könyvtárában tárolták, és később makróoperátorként (macro-operator) a tervkészítésnél felhasználták. Hasonló ötletek Anderson ACT^* architektúrájában is megjelentek, tudáskompilálás (knowledge compilation) címen (Anderson, 1983) és Soar architektúrájában tudásdarabolás (chunking) címen (Laird és társai, 1986). A sémabeszerzés (schema acquisition) (DeJong, 1981), az analitikus általánosítás (analytical generalization) (Mitchell, 1982) és a kényszeralapú általánosítás (constraint-based generalization) (Minton, 1984) a MAT tanulás irányában jelentkező és a (Mitchell és társai, 1986; DeJong és Mooney, 1986) publikációk stimulálta gyorsan növekvő érdeklődésnek közvetlen előfutárai voltak. A szövegben bemutatott MAT algoritmust Hirsh (Hirsh, 1987) vezette be, aki azt is megmutatta, hogy az algoritmust hogyan kell egy logikai programozási rendszerbe ágyazni. Van Harmelen és Bundy a MAT-ot a programelemző rendszerekben (Jones és társai, 1993) használt részleges kiértékelő (partial evaluation) módszer variánsaként magyarázzák (Van Harmelen és Bundy, 1988).
14	0.652174	0	Az utolsó elem, amire szükségünk van, az a valószínűségi információ. Minden egyszerű függvényhez specifikáljuk a szülők egy halmazát, csakúgy, mint a Bayes-hálóknál. A szülők lehetnek ugyanannak az objektumnak más egyszerű függvényei; például egy Professzor-nak a Finanszírozás-a függhet a Hírnév-től. A szülők lehetnek még kapcsolódó objektumok egyszerű függvényei – például egy diák Sikere függhet a diák Intelligenciá-jától és a diák konzulensének Hírnév-től. Ezek valóban univerzálisan kvantifikált állítások egy osztály minden objektumának szüleiről. Így írhatjuk azt, hogy
7	0.08	0	A  feladatban definiálni kell egy wumpus környezetet a  fejezetben megadott különböző dimenziók mentén. Az alapvető nehézség az ágens számára, hogy kezdetben semmit sem tud a környezet konfigurációjáról. Úgy tűnik, hogy logikai következtetésre van szüksége az ágensnek ahhoz, hogy felülkerekedhessen a tudatlanság okozta hátrányon. A wumpus világok legtöbb példányában az ágens számára lehetséges az arany biztonságos megszerzése. Néhány környezetben azonban az ágensnek választania kell, hogy hazamegy-e üres kézzel, vagy kockázatot vállal, ami vagy az aranyhoz vagy a halálhoz vezet. És a környezetek 21%-a teljesen tisztességtelen (mivel az arany egy csapdában van vagy csapdákkal körülvett mezőben).
8	0.548387	0	és így tovább. A szabályok a következtetési folyamat egy triviális formáját mutatják, amit érzékelésnek (perception) nevezünk, és amelyet a  fejezetben fogunk részletesen tanulmányozni. Vegyük észre az univerzális kvantort az idő (t) felett. Az ítéletlogikában minden egyes időlépéshez szükségünk volt a mondatok másolatára.
18	0.052632	0	Ezeket a szempontokat rendre elemezni fogjuk. Láttuk, hogy számos lehetőség van a cselekvő elemek építésére, a  fejezetben számos ágenskialakítást megismertünk (lásd 2.9., 2.11.,  és  ábra). Ezeknek az ágenseknek a komponensei a következőket tartalmazzák: 1. Az aktuális állapot feltételeinek közvetlen leképezése cselekvésekre. 2. Olyan lehetőség, amely egy megfigyelési szekvenciából a világ releváns tulajdonságaira képes következtetni. 3. A világ alakulására vonatkozó, valamint az ágens lehetséges cselekvéseinek következményeit leíró információ. 4. A világ lehetséges állapotainak számunkra kívánatos voltát megadó hasznosság- információ. 5. Cselekvés-hasznosság információ, amely az egyes cselekvések kívánatosságát jelzi számunkra. 6. Célok: ezek olyan állapotosztályokat adnak meg, amelyek elérése az ágens hasznosságát maximálja.
4	0.916667	0	Prieditis a Jack Mostow-val végzett korábbi kutatásokra építve (Mostow és Prieditis, 1989) sikeresen automatizálta a probléma relaxálási folyamatát (Prieditis, 1993). A mintaadatbázisok használatát az elfogadható heurisztikák előállítására Gasser, valamint Culberson és Schaeffer kezdeményezték (Gasser, 1995; Culberson és Schaeffer, 1998). A diszjunkt mintaadatbázisokat Korf és Felner írják le (Korf és Felner, 2002). A heurisztikák valószínűség-alapú értelmezését Pearl és Hansson és Mayer mélyrehatóan vizsgálták (Pearl, 1984; Hansson és Mayer, 1989).
10	0.727273	0	Az elsőrendű logika szintaxisát úgy tervezték, hogy egyszerű legyen objektumokról kijelentéseket tenni. A leíró logikák (description logics) olyan jelölések, amelyeket a kategóriák definícióinak és tulajdonságainak könnyebb leírására terveztek. A leíró logikák a szemantikus hálókból alakultak ki, válaszul arra a nyomásra, hogy a hálók jelentését formalizáljuk, hangsúlyozva emellett a taxonómia szervezési elvként való használatát.
25	0.074074	1	A szabadságfok minden olyan irány, amelyben a robot vagy egyik beavatkozó szerve mozogni képes. A da Vinci robotnak hét szabadságfoka van. A hét szabadságfok közül három a pozícionálásra, három az orientációra (csavarás, billentés, forgatás= roll, pitch, yaw) használatos, egy pedig a sebészeti eszköz megfogási képességét (grasp) jelenti. Az egyik robotkar tartja, irányítja az endoszkópos, nagy felbontású, sztereó videokamerát, két robotkar kezeli a sebész jobb és bal kezének megfelelő eszközöket, az újabban hozzáadott negyedik robotkar (da Vinci-S) pedig asszisztensi feladatok megoldására teszi alkalmassá a rendszert.
1	0.586207	1	GUIDON az első olyan intelligens orvosi oktató rendszer, amelyet a mesterséges intelligencia technológiai bázisán építettek meg. A GUIDON kifejlesztése és alkalmazása során összegyűltek a megfelelő tapasztalatok ahhoz, hogy a MYCIN- t átkonfigurálják, és az így nyert NEOMYCIN rendszerre épített GUIDON2 már gyakorlati téren is jól alkalmazható oktató rendszer lett.
1	0.068966	1	A sejtautomaták diszkrét dinamikus rendszerek, mivel helyük, idejük és állapotuk is diszkrét [ACA]. Ezt a modellt használják többek között a számításelméletben, matematikában, fizikában, elméleti biológiában és mikroszerkezet modellezésben is.
11	0.923077	1	 A  ábra a kockavilág problémát mutatja, ami Sussman-anomáliaként (Sussman anomaly) ismert. A problémát azért tekintették anomáliának, mert az 1970-es évek nem összefésülős tervkészítői nem tudták megoldani. Írjuk fel a probléma definícióját Strips alakban, és oldjuk meg, kézzel vagy egy tervkészítő programmal. A nem összefésülő tervkészítő egy olyan tervkészítő, ami ha két G[1] és G[2] részcélt kap, akkor vagy egy G[1] elérésére szolgáló tervet fűz hozzá egy G[2] elérésére szolgáló tervhez, vagy fordítva. Magyarázza meg, hogy egy nem összefésülő tervkészítő miért nem tudja megoldani a kockavilág problémát.
20	0.035714	0	A hipotéziskomplexitás és az adatokra való illeszkedési képesség közötti kompromisszumot új módon világítja meg, ha a   egyenlet logaritmusát képezzük. A h[MAP] hipotézis olyan kiválasztása, amely maximálja a P(d|h[i])P(h[i])-t ugyanaz, mint amikor minimalizáljuk a következő kifejezést:
20	0.714286	0	ahol α a bátorsági faktor (vagy tanulási faktor, learning rate). Intuitíve ez nagyon ésszerű. Ha a hiba Err = y – h[W](x) pozitív, akkor a háló kimenete túl kicsi, tehát a pozitív bemenetekhez tartozó súlyokat növeljük, a negatívakhoz tartozókat pedig csökkentjük. Ha a hiba negatív, akkor éppen ennek ellenkezője történik.^[204]
6	0.9	0	A korai számítógépes korszak számos prominens személyét kíváncsivá tette a számítógépes sakk lehetősége. Konrad Zuse – aki elsőként tervezett programozható számítógépet – igen részletes ötleteket dolgozott ki arra, hogy ezt hogyan lehetne megvalósítani (Zuse, 1945). Norbert Wiener nagy befolyású Cybernetics c. könyve (Wiener, 1948) tartalmazta egy számítógépes sakkprogram működésének egy lehetséges vázlatát, a minimax keresést, a mélységi levágást és a kiértékelő függvényt is beleértve. Claude Shannon a modern számítógépes játékok elvi alapjait sokkal részletesebben fejtette ki, mint Wiener (Shannon, 1950). Shannon bevezette az egyensúlyi állás fogalmát, és néhány ötletet vázolt fel a szelektív (nem kimerítő) játékfakeresésre vonatkozólag. Slater és az ugyanabban a kötetben a cikkére reflektáló szerzők szintén megvizsgálták a számítógépes sakkozás lehetőségeit (Slater, 1950). I. J. Good Shannontól függetlenül kidolgozta az egyensúlyi állás fogalmát (Good, 1950).
14	0.086957	1	Hasznos, hogy a csak Érzékenység (Sensitivity) a "beteg" és Specifikusság (Specificity) csak a "nem beteg" alpopulációkon belül definiált, azaz nem függ a "beteg"/"nem beteg" aránytól. Emiatt ennek a két mutatónak van kitüntetett szerepe, amely az aránnyal együtt már a több mutatót is meghatározza.
14	0.956522	0	Végezze el a jelzett számításokat, és ellenőrizze, hogy helyes-e a válasz. b. Számolja össze az elvégzett aritmetikai műveletek számát, és hasonlítsa össze a felsorolási algoritmus által elvégzettek számával. c. Tegyük fel, hogy a háló egy láncot alkot: bináris változók szekvenciáját, ahol Szülők(X[i]) = {X[i–1]} i = 2, ..., n esetén. Mi a P(X[1]∣X[n] = igaz) kiszámításának a komplexitása a felsorolást használva? És mi, ha változó eliminálást használunk? d. Bizonyítsa be, hogy a változó eliminálás futásának komplexitása egyszeresen összekötött hálóban lineáris a háló méretében bármely, a háló struktúrájával konzisztens változó sorrendezés mellett.
26	0.285714	0	Dreyfus nézete szerint az emberi szakértelemnek ugyan része néhány szabály ismerete, de ezek csak „holisztikus kontextust” vagy „hátteret” alkotnak az emberi tevékenységhez. Példaként az ajándék adásakor és fogadásakor illő társas viselkedést hozza fel: „Általában az ember a megfelelő körülmények között úgy reagál, hogy egy megfelelő ajándékot ad.” Az embernek láthatólag „közvetlen érzéke van ahhoz, hogy miként történnek a dolgok, és mit lehet elvárni.” Hasonló állítást tehetünk a sakkjáték vonatkozásában is: „Egy átlagos sakkmesternek lehet, hogy gondolkodnia kell azon, mit tegyen, de egy nagymester látja, hogy a tábla egy bizonyos lépést követel (…) a helyes reakció egyszerűen csak beugrik a fejébe.” Minden bizonnyal igaz, hogy egy ajándékozó vagy egy sakknagymester gondolati folyamata azon a szinten zajlik, amely rejtett a tudatos elme önismerete elől. Ez azonban nem jelenti, hogy ez a gondolati folyamat nem létezik. Lényeges, hogy Dreyfus nem válaszolja meg azt, hogy a helyes lépés miként kerül a nagymester fejébe. Mindez Daniel Dennett (Dennett, 1984) megjegyzésére emlékeztet:
2	0.947368	0	Az alábbi ágensek mindegyikére dolgozza ki a feladatkörnyezetek TKBÉ-leírását! a. Robot focijátékos; b. Internetes könyvvásárló ágens; c. Autonóm Mars terepjáró; d. Matematikusok tételbizonyító segítője.
21	0.4375	0	Las Vegasban a félkarú rabló egy pénzbedobós játékautomata. A játékos bedob egy érmét, meghúzza a kart, és elveszi a nyereményt (ha nyer). Egy n karú rablónak (n-armed bandit) n karja van. A játékosnak minden érme bedobásakor választania kell, hogy melyik kart húzza meg – azt, amelyik eddig a legjobban fizetett, vagy talán egy olyat, amelyet még nem próbált?
6	0.1	1	Első lépésben a normál lefolyású Nim nyerő stratégiáját vizsgáljuk meg, azaz az nyeri a játékot, aki az utolsó kavicsot elveszi. Ehhez vezessük be a „vesztő helyzet” fogalmát: vesztő helyzet a játéknak az az állása, amikor nem tud a soron következő játékos olyan lépést tenni, melynek folyománya, hogy megnyerheti a játékot, ha az ellenfél jól (hibátlnul) játszik. Nyerő helyzet az az állás, amiből lehet lépni az előbb definiált tulajdonságú vesztő állásba. A nyerő stratégia ugyanazon a dolgon múlik, ám látszólag többféle stratégia is segít. Ezek közül a legáltalánosabbat, és talán a legjobban figyelhetőt vizsgálom. Írjuk fel kettes számrendszerben az egyes kupacokban lévő kavicsok számát. Ezzel kvázi látjuk a kettőhatvány-csoportokat a kupacokban, és a célunk az, hogy a lépés végén minden kettőhatvány csoportnak legyen egy párja, hogy a későbbiekben utánozni tudjuk ellenfelünk lépését, ebből az is következik, hogy ha ő tud lépni, akkor mi is, így megnyerjük a játékot. A feladat mindössze az, hogy miután felírtuk kettes számrendszerben a kupacok elemszámát, végezzünk el egy „Nim-összeadást”, amely alatt egy XOR-összeadást értünk. Ekkor ha csupa nullát kapunk, vesztő állásban vagyunk. Mint játékos az a célunk, hogy miután léptünk, az ellenfél vesztő állásban legyen, és mivel ő is köteles lépni, szükségképpen amikor ránk kerül a sor, mi nyerő állásban leszünk, és újra ki tudjuk alakítani ellenfelünk számára a vesztő állást. Ha a gyakoribb misère Nim játékot játsszuk, mindössze annyi a különbség a stratégiánkban, hogy a csupa nulla Nim-összeg helyett csupa nulla és a végén egy egyes Nim-összegre törekszünk.
1	0.068966	1	Minsky a következő pontban a cenzorokkal foglalkozik, amik szintén fontos szerepet játszhatnak a Mesterséges Intelligenciákban. A cenzorok feladata a hibás eredményre vezető gondolatok kiszűrése, és azok tiltása. A cenzorokat Minsky két főbb csoportra osztja, az első csoport a már létrejött gondolatok tiltja le, a második csoport pedig előre megtiltja, hogy az agy bizonyos következtetésekre jusson. Az első csoport működése viszonylag egyszerű, ha egy adott gondolat megjelenik, akkor azt automatikusan tiltja. A második csoport az, aminek bonyolultabb a feladata, és pont ezek fontosak az MI szempontjából is. Az ilyen típusú cenzor előállítása azért nehézkes, mert szükség van hozzá olyan előfutárokra, amik egyértelműen jelzik az adott gondolat következtét. A cenzor készítőnek tehát ismernie kell azokat az előfutárokat, amik a nem kívánt gondolathoz vezetnek, és az előfutár gondolatnál a lehetséges következő lépések közül úgy kell választania, hogy jó következtetésre lépjünk tovább. A cenzornak természetesen tudnia kell tanulni is, és ehhez memóriára van szüksége. Szüksége van egy rövid távú memóriára, így emlékezni fog, hogy pontosan mi előzte meg az adott nem kívánt eseményt, ezen kívül pedig egy hosszú távúra, amiben tárolja az előfutárokat. Ennek a mérete egy tapasztalt cenzor esetében elég nagyra nőhet ennek következtében. Ezek alapján ha az első típusú cenzornak egy viccet mesélnénk, akkor csak a csattanó után jönne rá, hogy ezt már hallotta, de a második típusú már menet közben rájönne, hogy ismeri a viccet. A cenzoros felfogásmód magyarázza azt is, hogy miért találunk egy olyan viccet kevésbé viccesnek amit már előzőleg hallottunk. Ilyenkor vagy eleve felismerjük, hogy ismerjük a viccet, vagy egy új cenzor jön létre, vagy egy előző bővül, mivel az ismétlés egyértelművé teszi az előfutár kilétét. A Mesterséges Intelligenciák esetében ilyen cenzorok alkalmazása jelentősen megkönnyíti és meggyorsítja a helyes következtetésre jutást, mivel a cenzor felismeri, ha egy hibás eredményre vagy következtetésre jellemző előfutár jelentkezik, és a műveletet olyan irányba tereli, amivel közelebb, de legalábbis nem távolabb kerülünk a megoldástól. A cenzorok mérete főleg itt érdekes, mivel az agyban az erőforrások jóval nagyobbak, mint amit ténylegesen kihasználunk, azonban egy számítógépes rendszerben ez már nem mindig van így. A formális logikai cenzorok mérete nem kell, hogy túl nagy legyen, mivel viszonylag kevés ellentmondással paradoxszal találkozunk, de ahhoz, hogy minden nem kívánt eseményt elkerüljünk, már jóval nagyobb memóriára van szükség.[5]
10	0.939394	1	 Feltételezhető, hogy egy szemantikus hálóban a sima és az egy vonallal bekeretezett kapcsolat közötti szintaktikai különbségtétel felesleges, mert az utóbbi kapcsolatok csak a kategóriákhoz tartoznak. Az öröklődési algoritmusnak elég lenne feltételeznie, hogy a kategóriákhoz csatolt sima kapcsolat szándékoltan a kategória minden tagjára vonatkozik. Mutassa meg a lehetséges hibák megadásával, hogy az érv hamis.
8	0.935484	1	8.19 Kérjen útlevéligénylő lapot az Ön saját országába, nevezze meg azokat a szabályokat, amelyek az igénylés jogosultságát meghatározzák, és fordítsa le az elsőrendű logika nyelvére a  alfejezetben felvázolt lépéseket követve.
1	0	0	Amelyben megkíséreljük megmagyarázni, hogy miért tartjuk a mesterséges intelligenciát olyan területnek, amit igenis érdemes tanulmányozni, és amelyben azt is megkíséreljük eldönteni, hogy vajon mi is ez a terület.
6	0.1	1	A hasznosság/kifizetés értékek ilyetén átírása látható módon nem változtatott a táblázat által modellezett dilemmán. Nyilván még számos ehhez hasonló dilemma is elképzelhető, aminek lényegében ugyanígy alakulnának a kimenetelei és játékos-preferenciái (azaz táblázata). Ha például a Tagad stratégiát, mint olyat, amelyik közelebb áll a történetben a „betyárbecsülethez”, tekintjük kooperatívnak, és a Vall stratégiát versengőnek (nem-kooperatívnak), akkor bármely olyan szimmetrikus helyzetet jellemezne ez a fentebbi bimátrix, amelyben a kölcsönös kooperativitás jobb, mint a kölcsönös versengés, ámde a versengő fél maximálisan ki tudja használni a másikat, ha az kooperatív. A természetben például ilyen helyzetek adódnak, amikor két ragadozó egy zsákmányért harcol. A szelídebb (pl. galamb), amelyik harc nélkül megosztozna, kooperál, míg az agresszívebb (pl. héja) harcolna, versengene. A békés megosztozás nyilván jobb mindkettejük számára, mint a marakodás általi osztozkodás, ám ha valamelyik fél szelíd, és a másik agresszív, úgy a szelíd félnek jóval kevesebb, vagy akár semennyi sem juthat, míg az agresszív, versengő fél mindent vihet. A kérdés tehát az, hogy ki hogyan viselkedik, viselkedjen egy ilyen helyzetben?
8	0.096774	0	A modellben található objektumok többféle relációban lehetnek egymással. A  ábrán Richárd és János testvérek. Formálisan, egy reláció csak egymással kapcsolatban lévő objektumok n-eseinek (tuple) halmaza. (Egy n-es az objektumok egy rögzített sorrendben felsorolt gyűjteménye, amely objektumokat a 〈〉 zárójelpár vesz körbe.) Így tehát ebben a modellben a testvérreláció a következő halmaz:
5	0.818182	0	A kényszerkielégítési problémák lokális keresését Kirkpatrick és társai (Kirkpatrick és társai, 1983) szimulált lehűtésről (simulated annealing) (lásd  fejezet) szóló munkája tette népszerűvé, és ezt széles körben alkalmazták az ütemezési problémáknál. A min-konfliktusok heurisztikát először Gu (Gu, 1989) javasolta, és tőle függetlenül Minton és társai (Minton és társai, 1992) is kifejlesztették. Sosic és Gu (Sosic és Gu, 1994) megmutatta, hogyan lehet ennek a heurisztikának az alkalmazásával a 3 000 000-királynő problémát kevesebb, mint egy perc alatt megoldani. A bámulatos siker, amit a min-konfliktusokat használó lokális keresés ért el az n-királynő problémában, a „könnyű” és a „nehéz” problémák természetének és elterjedtségének újraértékeléséhez vezetett. Peter Cheesman és társai (Cheesman és társai, 1991) feltérképezték a véletlenszerűen generált kényszerkielégítési problémák nehézségét, és azt találták, hogy majdnem minden ilyen probléma vagy triviálisan könnyű, vagy megoldhatatlan. Csak akkor találunk „nehéz” probléma példányokat, ha a problémagenerátor paramétereit egy bizonyos szűk tartományba állítjuk be, melyen belül a problémák közelítőleg fele megoldható. Ezzel a jelenséggel a  fejezetben foglalkozunk részletesebben.
6	0.1	1	Vegyük észre, hogy pi(t)-ben a t egy stratégia-kombináció, nem pedig egy aktív típus-kombináció! Itt tehát t az, amit az ágensek/játékosok bejelentenek. Viszont az a ti, ami az ui(f(t),ti) haszonnál szerepel, az természetesen már nem stratégiát, hanem aktív típust jelöl.
7	0.16	1	A „C” tudásbázis tartalma nyílván szintén igaz, ha „emlős” jelentése egy kutya, „kutya” jelentése egy emlős, „piros” a fekete szín, „zöld” a barna szín, „Som” a Bodri, „Bodri” pedig a Som kutyám, és TÉNYLEG van egy Bodri nevű fekete és Som nevű barna kutyám. És a rendszer vígan le fogja vezetni, hogy:
12	0.571429	0	Az ágens most kihasználhatja a „segítő” közbeavatkozást, észrevéve, hogy a  okozati kapcsolat helyettesíthető az Indít-ból a Befejez állapotba mutató direkt kapcsolattal. Ezt a folyamatot az okozati kapcsolat kiterjesztésének (extension) nevezzük, és akkor alkalmazzuk, amikor egy feltétel egy későbbi helyett egy korábbi lépéssel biztosítható, új ütközés okozása nélkül.  ábra - Az állapotok sora, amint a folytonos tervkészítő ágens megpróbálja a (d)-nek megfelelő Rajta(C, D) ∧ Rajta(D, B) célállapotot elérni. A kiinduló állapot az (a). A (b) állapotnál egy másik ágens közbelépett és (d)-t (b)-re helyezte. A (c) állapotban az ágens a Mozgat(C, D) cselekvést hajtotta végre, ami sikertelen volt, (c)-t az (a)-ra ejtette. Újrapróbálja a Mozgat(C, D) cselekvést, amivel eléri a (d) célállapotot. Az állapotok sora, amint a folytonos tervkészítő ágens megpróbálja a (d)-nek megfelelő Rajta(C, D) ∧ Rajta(D, B) célállapotot elérni. A kiinduló állapot az (a). A (b) állapotnál egy másik ágens közbelépett és (d)-t (b)-re helyezte. A (c) állapotban az ágens a Mozgat(C, D) cselekvést hajtotta végre, ami sikertelen volt, (c)-t az (a)-ra ejtette. Újrapróbálja a Mozgat(C, D) cselekvést, amivel eléri a (d) célállapotot.  ábra - A folytonos tervkészítő ágens által készített kiinduló terv. A terv egyelőre nem különbözik egy átlagos részben rendezett tervkészítő által készítettől. A folytonos tervkészítő ágens által készített kiinduló terv. A terv egyelőre nem különbözik egy átlagos részben rendezett tervkészítő által készítettől.  ábra - Miután valaki más elmozdította a D kockát a B-re, a Tiszta(B) és a Rajta(D, G) biztosítására szolgáló kapcsolatokat eldobjuk, ami ezt a tervet eredményezi Miután valaki más elmozdította a D kockát a B-re, a Tiszta(B) és a Rajta(D, G) biztosítására szolgáló kapcsolatokat eldobjuk, ami ezt a tervet eredményezi
5	0.181818	1	Most tehát az algoritmus vezérlése a WA változó szintjén jár, azon belül is a FOR-ciklusban, ahol éppen a WA=RED értékadás utáni „romeltakarítást” végeztük el, hogy tovább léphessünk a WA változó következő értékére, a GREEN-re (WA=GREEN).
27	0.4	1	A Cselekvések itt nyilván a környezetben kivitelezhető összes lehetséges cselekvést jelölik. Az ágens egy adott érzettörténet alapján egy-egy ilyen cselekvést állít elő. Ezt specifikálja az f[Ágens] ágens-függvény.
20	0.035714	0	Egy adott új zsák cukorka esetén a H (hipotézist jelölő) véletlen változó a zsák típusát jelenti, lehetséges értékei h[1]-től h[5]-ig terjednek. Természetesen H közvetlenül nem figyelhető meg. Ahogy a cukorkákat felbontjuk és megvizsgáljuk, adatokat gyűjtünk – amelyeket D[1], D[2], …, D[N] jelöl. Mindegyik D[i] egy olyan véletlen változó, amelynek lehetséges értékei a meggy, illetve a citrom. Az ágens feladata, hogy jóslást adjon a következő cukorka ízére.^[194] Ez a nyilvánvalóan triviális feladat érdekes módon mégis jó betekintést nyújt a legfontosabb problémák közül többre is. Az ágensnek valóban elméletet kell alkotnia a világról, bár csak nagyon egyszerűt.
6	0.1	1	* Az eredeti SARGON kibővítette a 64 byte-os tömböt két réteggel, melyeket álnégyzeteknek – bogus square – neveztek. Ezek olyan őrszem értékeket tartalmaztak, amelyek illegálisnak minősítettek mezőket. Ezzel a trükkel gyorsult a lépésgenerálás. Például egy futó lépést generál úgy, hogy felcsúszik egy mezőt addig, amíg nem ér el egy illegális mezőt, majd megáll. Így nincs szükség bonyolult a priori számításokra, hogy biztosítva legyen, hogy a lépés nem használ fölösleges memóriát. A második réteg a huszárok miatt fontos, mert ha egy huszár a tábla sarkában van, akár két mezőt is kiugorhat a tábláról, tehát az egy réteg ebben az esetben már nem elég. [6] * MYCHESS megfordította a folyamatot és csupán 32 byte-ot használt, melyek mindegyikéhez egy-egy figurát és egy számot rendelt, hogy melyik mezőn tartózkodik a bábu, vagy egy őrszemet, amennyiben már leütötték. [7]
6	0.1	1	A játék állásainak nimbereire nem ismert zárt formula, mely i és j ismeretében megadja a nimbert, de ismert pár állítás róluk: * Minden sor (és oszlop) pontosan egyszer tartalmaz egy számot. * Ugyanez igaz a főátlóval párhuzamos átlókra, hogy nem tartalmazza kétszer ugyanazt a számot. * Minden sor (és oszlop) összeadva periodikus, azaz minden x sorra létezik n és p, hogy G(x,y+p)=G(x,y)+p minden y>=n-re, ahol G(x,y) megadja a táblázat x. sorának és y. oszlopának metszéspontjában álló nimbert. Például a harmadik sorra: 3 4 5 6 2 0 1 9 10 12 8 7 15 11 16 18 14 13 21 17 22 24 20 19 27 23... n=8, p=6.
24	0.75	1	Az élek az intenzitás hirtelen változásai egy görbe mentén a kétdimenziós képen. Okozói általában az objektumhatárok, a mélységi változások, a felületek megtörése, a felület anyagának, textúrájának megváltozása vagy a megvilágítás különbsége. Előbbiek miatt az élek hasznos információt szolgáltatnak a struktúra meghatározásakor.
2	0.368421	0	A következő: mi a taxi vezetési környezete? Minden taxisofőrnek több típusú úttal kell szembenéznie, a vidéki és városi utaktól egészen a tizenkét sávos autópályákig. Az utak más forgalommal, gyalogosokkal, kóbor állatokkal, útkarbantartással, rendőrautókkal, tócsákkal és gödrökkel is rendelkeznek. A taxinak a lehetséges és a jelenlegi utasokkal is kapcsolatban kell állnia. Van továbbá néhány opcionális lehetőség. Lehet, hogy a taxinak Dél-Kaliforniában kell üzemelnie, ahol a hó ritkán jelent problémát, vagy Alaszkában, ahol ritkán nem. Közlekedhet mindig az út jobb oldalán, vagy szeretnénk, hogy elég rugalmas legyen ahhoz, hogy a bal oldalon is vezessen abban az esetben, ha Nagy-Britanniában vagy Japánban akarjuk működtetni. Nyilvánvalóan minél korlátozottabb a környezet, annál egyszerűbb a tervezési probléma.
8	0.548387	0	Emlékezzünk arra, hogy egy wumpus ágens egy öt elemből álló érzetvektort kap. Az ezt leíró elsőrendű logikai mondat, amelyet a tudásbázisban tárolunk, tartalmazza mind az érzetet, mind az időpontot amikor ez bekövetkezett, különben az ágens összekeverné, hogy mikor látta azt, amit látott. Az időpontokat jelölő lépésekre egész számokat használunk. Egy tipikus érzetmondat ilyen lesz:
2	0.894737	1	Tanuló ágens: Bármely olyan élőlény megfelel egy tanuló ágensnek, amely képes a tapasztalatait beépíteni a viselkedési sémájába, azaz tanul. Előfordulhat persze olyan helyzet, hogy valaki hibásan tanul meg valamit. Ilyenkor kudarccal végződik a tanulás.
15	0.962963	0	Vizsgáljuk meg a szórásnégyzet-frissítés alakulását a   egyenletben. a. Ábrázolja a σ[ t]^2 értékét a t függvényében, adott σ[x]^2 és σ[z]^2 értékek mellett. b. Mutassa meg, hogy a frissítésnek létezik egy σ^2 határértéke úgy, hogy t → ∞ esetén σ[t]^2 → σ^2,^ és számítsa ki ezt a σ^ 2 értéket. c. Adjon kvalitatív magyarázatot arra, hogy mi történik, ha σ[ x]^2 → 0 és σ[ z]^2 → 0.
8	0.935484	1	8.12 Írjon le egy mondatot, amely azt állítja, hogy a + jel egy kommutatív funkció. Következik ez a mondat Peano axiómáiból? Ha igen, magyarázza meg, hogy miért, ha nem, adjon meg egy modellt, amelyben az axiómák igazak, az Ön mondata pedig hamis.
11	0.346154	0	A hátrafelé keresés fő előnye az, hogy lehetővé teszi számunkra, hogy csak a releváns (relevant) cselekvéseket vegyük figyelembe. Egy cselekvés releváns egy konjunktív cél szempontjából, ha eléri a cél egy konjunktját. Például a 10-repülőteres légi csomagszállítási problémánk esetében a cél az, hogy a 20 csomag a B repülőtéren legyen, vagy pontosabban
7	0.12	0	Most, hogy van egy képünk az igazság fogalmáról, tudunk beszélni a logikai következtetésről. Ennek része a mondatok közötti logikai vonzat (entailment) reláció, annak kifejezése, hogy egy mondat logikusan következik egy másik mondatból. Matematikai jelöléssel ezt így írjuk:
4	0.916667	0	A genetikus algoritmusok fejlődésének fontos előfutára volt Sewall Wright munkája a fitness tájfelszín (fitness landscape) fogalmáról. Néhány statisztikus, Boxot (Box, 1957) és Friedmant (Friedman, 1959) is beleértve, az ’50-es években használt már evolúciós technikákat optimalizálási problémákra, e megközelítés azonban csak akkor kezdett népszerűvé válni, amikor Rechenberg (Rechenberg, 1965; 1973) az evolúciós stratégiákat (evolution strategies) a szárnyprofilok optimalizálási problémáinak megoldásába bevezette. Az 1960-as és 1970-es években John Holland (Holland, 1975) kiállt a genetikus algoritmusok mellett, azt tartva, hogy a genetikus algoritmusok hasznos eszköznek bizonyulnak és segítenek abban, hogy jobban megértsük a biológiai és egyéb adaptációt (Holland, 1995). A mesterséges élet (artificial life) mozgalom (Langton, 1995) ezt a gondolatot egy lépéssel tovább viszi, a genetikus algoritmusokkal létrehozott eredményeket nem problémamegoldások, hanem inkább szervezeteknek tekintve. Hinton és Nowlan (Hinton és Nowlan, 1987), valamint Ackley és Littman (Ackley és Littman, 1991) munkája ezen a területen sokban hozzá járult, hogy a Baldwin-hatás következményeit feltárjuk. Smith és Szathmáry (Smith és Szathmáry, 1990) munkáját mint az evolúció általános hátterét bemutató munkát ajánljuk.
15	0.148148	0	Egy általános időbeli modellstruktúra kidolgozása után, most már megfogalmazhatjuk a megoldandó alapvető következtetési feladatokat: * Szűrés (filtering) vagy ellenőrző megfigyelés (monitoring). Ez a bizonyossági állapot (belief state) kiszámításának a feladata – ami a jelenlegi állapot feletti a posteriori eloszlás, az adott időpontig vett összes bizonyíték ismeretében. Azaz szeretnénk kiszámítani a P(X[t]|e[1:t]) mennyiséget, feltéve, hogy a bizonyítékok folyamatos sorozatban érkeznek kezdve a t = 1 időponttól. Az esernyős példában ez az aznapi eső valószínűségének a kiszámítását jelentené, az esernyőhordozó eddigi összes megfigyelésének az ismeretében. A szűrés az, amit egy racionális ágensnek el kell végeznie ahhoz, hogy a jelenlegi állapotot követni tudja, és így racionális döntéseket hozhasson (lásd  fejezet). Kiderül, hogy majdnem azonos számítás szolgáltatja a bizonyítéksorozat megfigyelésének a valószínűségét (likelihood), P(e[1:t])-t. * Előrejelzés (prediction). Ez egy jövőbeli állapot feletti a posteriori eloszlás kiszámításának a feladata, az adott időpontig vett összes bizonyíték ismeretében. Azaz, szeretnénk kiszámítani a P(X[t+k]|e[1:t]) mennyiséget valamely k > 0 esetén. Az esernyős példában ez jelentheti az eső valószínűségének a kiszámítását három napra előre, az esernyőhordozó eddigi összes megfigyelésének az ismeretében. Az előrejelzés hasznos a cselekedetek lehetséges sorozatainak a kiértékelésében. * Simítás (smoothing) vagy visszatekintés (hindsight). Ez egy múltbeli állapot feletti a posteriori eloszlás kiszámításának a feladata, a jelen időpontig vett összes bizonyíték ismeretében. Azaz szeretnénk kiszámítani a P(X[k]|e[1:t]) mennyiséget valamely 0 ≤ k < t esetén. Az esernyős példában ez jelentheti az eső valószínűségének a kiszámítását múlt szerdára, ha ismerjük az esernyőhordozónak a mai napig történő összes megfigyelését. A visszatekintés az állapotnak egy jobb becslését adja, mint ami akkor elérhető volt, mivel több bizonyítékot használ fel. * Legvalószínűbb magyarázat (most likely explanation). A megfigyelések egy sorozatának ismeretében lehet, hogy szeretnénk megtalálni azt az állapotsorozatot, ami a leginkább valószínű, hogy az adott megfigyeléseket generálta. Azaz szeretnénk kiszámítani az  P(x[1:t]|e[1:t]) értékét. Például ha az esernyő feltűnik az első három nap mindegyikén, és hiányzik a negyediken, akkor a legvalószínűbb magyarázat az, hogy az első három napon esett és a negyediken nem esett. Az erre a feladatra szolgáló algoritmusok számos alkalmazásban hasznosak, ideértve a beszédfelismerést – ahol a cél a szavak legvalószínűbb sorozatának a megtalálása hangok sorozatának ismeretében – és egy zajos csatornán továbbított bináris szekvenciák rekonstrukcióját.
9	0.931034	1	c. 2: Kékszakáll és Charlie. Azon túl, hogy Kékszakáll ló, azt is tudjuk, hogy Charlie szülője, ekkor pedig Charlie Kékszakáll leszármazottja. Azt is tudjuk még, hogy egy ló leszármazottja is ló. Ebből következik, hogy Charlie is ló.
2	0.263158	1	A teljesítménymérték határozza meg általánosságban közvetve az ágensek által adott környezetben megoldandó feladatot. Az ágensek célja az, hogy minél inkább megfeleljenek ennek a teljesítménymértéknek, azaz úgy cselekedjenek, úgy változtassák a környezet állapotát, hogy az a legjobb legyen (maximalizálja a teljesítménymértéket).
16	0.956522	1	A CLIA (Clinical Laboratory Improvment Amandment) laboratóriumi vizsgálatokat szabályozva kimondja, hogy nem a vizsgálat végzésének helye a fontos, hanem az, hogy azokat a szakmai irányelvek alapján végezzék.
2	0.947368	0	Valósítson meg egy teljesítménymérő környezetszimulátort a  ábrán mutatott és 2. szakasz - Racionalitás specifikált porszívóvilágra! Implementációja legyen moduláris, hogy könnyen megváltoztathassa az érzékelőket, a beavatkozókat és a környezeti jellemzőket (méret, alak, piszok elhelyezkedése stb.). (Megjegyzés: Bizonyos operációs rendszerekre és programozási nyelvekre vannak kész implementációk az internetes kódtárban.)
14	0.869565	1	A kockázatkezelő rendszerek általában komplex, többmenetes rendszerek, amelyeknél a nagy számú bemenet és a bonyolult szabályrendszer megnehezíti a kockázati szint kiszámítását, vagy a kockázat illetve a veszély elhárítására vonatkozó más javaslat megadását. Ha ezen felül figyelembe vesszük, hogy akár a paraméterek megadásánál akár a szabályok megadásának sok a bizonytalanság, a paraméterek jellegéből eredő pontatlanság, vagy hogy esetleg csak szavakkal fejezhetünk ki bizonyos helyzeteket, akkor belátható, hogy a lágy számítási módszerek, közöttük a fuzzy is, alkalmas lehet ezeknek a nehézségeknek a kezelésére.
25	0.740741	0	Az alárendelt architektúra további primitíveket szolgáltat az AFSM-ek szinkronizálásához, és a többszörös, esetleg ellentmondásban lévő AFSM-ek kimenetének összehangolásához. Ezáltal lehetővé válik a programozó számára, hogy egyre bonyolultabb szabályozókat építsen fel bottom-up, alulról felfelé technikával. Példánkban egy-egy AFSM-mel kezdhetünk az egyes lábak vezérléséhez, majd a következő AFSM már több láb működésének összehangolását végezheti. Mindezekfölött megvalósíthatunk valamilyen magas szintű viselkedést, mondjuk, egy ütközés elkerülését, amely már hátrálást és visszafordulást is tartalmaz.
23	0.111111	0	A PCFG-vel az a probléma, hogy környezetfüggetlen. Ez azt jelenti, hogy a különbség a P(„eat a banana”) és a P(„eat a bandanna”)^[243] között mindössze a P(„banana”) és P(„bandanna”) közti különbségtől függ, és nem az „enni” ige és a megfelelő objektumok közti kapcsolattól. Hogy megkapjuk ezt a kapcsolatot, szükség van valamilyen környezetfüggő modellre, mint például a szókinccsel ellátott PCFG-re (lexicalized PCFG), amelyben a kifejezés feje^[244] szerepet játszhat a kifejezés valószínűségének meghatározásában. Elegendő tanító adat esetén a VP → VP NP szabály kondicionálható a beágyazott VP fejére („enni”) és az NP fejére („banán”). Ezáltal a szókinccsel ellátott PCFG-k képesek az n-gram modellek közös előfordulási megszorításai egy részének a megragadására, megtartva a CFG-modellek nyelvtani megszorításait.
18	0.736842	0	Első feladatunk annak megmutatása, hogy a k-DL nyelvek megtanulhatók, azaz bármely k-DL függvény pontosan közelíthető, ha kellő számú tanító mintán tanultunk. Ehhez ki kell számítanunk a nyelvben felvehető hipotézisek számát. Legyen a tesztek nyelve – n attribútumot használva, legfeljebb k literális konjunkciója – Conj(n, k). A döntési listákat tesztekből építjük fel, és minden teszthez egy Igen vagy Nem választ rendelhetünk, illetve harmadik lehetőségként a teszt hiányozhat a listáról, ezért legfeljebb 3^|Conj(n,k)| különböző teszthalmaz létezhet. Ezek a tesztek tetszőleges sorrendben alkalmazhatók, így
17	0	0	Ebben a fejezetben a döntéshozatalhoz kapcsolódó számítási kérdéseket tárgyaljuk meg. Míg a  fejezetben egyszeri vagy epizodikus döntési problémákkal foglalkoztunk, ahol az egyes cselekvések kimeneteleinek a hasznossága jól ismert volt, a  fejezetben szekvenciális döntési problémákkal (sequential decision problems) fogunk foglalkozni, ahol az ágens hasznossága a döntések sorozatától függ. A szekvenciális döntési problémák, amelyek hasznosságot, bizonytalanságot és érzékelést is magukban foglalnak, a keresés és tervezés problémáját általánosítják, melyeket a II., illetve a IV. részben írtunk le. A  alfejezet kifejti, hogyan definiálhatunk szekvenciális döntési problémákat, a  és a  alfejezet elmagyarázza ezek megoldását, hogy optimális viselkedést eredményezzenek, amely kiegyensúlyozza a bizonytalan környezetben meghozott cselekvések kockázatát és jutalmát. A  alfejezet kiterjeszti ezeket az ötleteket a részlegesen megfigyelhető környezetekre, és a  alfejezet egy teljes tervezési módot fejleszt ki részlegesen megfigyelhető környezetben lévő döntéselméleti ágensek tervezésére, összekapcsolva a dinamikus Bayes-hálókat a  fejezetből a  fejezetbeli döntési hálókkal.
5	0.181818	1	Az él-listán szereplő 13 él mindegyike konzisztens, hiszen az SA változó kivételével mindegyik változó értékkészlete {GREEN, BLUE}, így akárhogy állítjuk őket párba (ugyebár a T változó nem jelenik meg a fenti él-listában), mindenképpen mindegyik értékükhöz találunk a másik változónál konzisztens párt. Tehát, ha az NSW, WA, NT, Q, vagy V változók közül bármelyiket párba állítanánk a másikkal, úgy az egyik GREEN értékéhez ott lenne a másik BLUE értéke, és fordítva, az egyik BLUE értékéhez ott lenne a másik GREEN értéke. Ha az SA változóból indítanánk az élet bármelyikükbe, úgy a RED értékhez mindkét értékük, a GREEN is, és a BLUE is jó volna. Fordított irányban, ha a felsorolt változókból indítanánk élet az SA-ba, akkor mindkét értékükhöz, a GREEN-hez is, és a BLUE-hoz is jó volna az SA változó egyetlen RED értéke. Ebből tehát az következik, hogy az aktuális él-listában szereplő összes él rendre konzisztens, így sorban törölhetők a listáról, mígnem a lista kiürül, és az AC3/MAC alapú következtetés sikeresen véget nem ér. Ekkor tehát a következő állapot áll elő.
24	0.166667	1	Míg a PET-felvétel azt mondja meg, hogy mi történik egy 4 mm^3–es térfogatban 30 másodperces időközönként, a CT azt tudja megmutatni, hol van ez a térfogat. A központi idegrendszer vizsgálatában a keringési és érbetegségek, liquor-keringési zavarok, gyulladásos és daganatos folyamatok leképezése mellett a nukleáris diagnosztika az epileptogén gócok felderítésében és az agy finomabb működésének elemzésében is egyre fontosabb szerepet játszik. A szívizom vonatkozásában a PET vizsgálatok érdemelnek figyelmet, szívműtét előtt meghatározható velük a még életképes szívizomzat kiterjedése. A máj- és eperendszer morfológiai vizsgálatára inkább csak bizonytalan echográfiás lelet birtokában van szükség, de PET- vizsgálattal adott esetben a máj- resectiót követő regenerációt is jól lehet nyomon követni.
6	0.1	1	Látható, hogy a játéknak 2 szimmetrikus Nash-egyensúlya van: (Gyáva, Bátor) és (Bátor, Gyáva). Emiatt a játékot vegyes motivációjúnak nevezik. Ez azért is probléma, mert ha a játékosok stratégia-választása nem koordinált (ha nem koordináljuk, hogy melyik Nash-egyensúly szerint játsszanak), akkor elképzelhető, hogy akár a legrosszabb eset is előállhat, pl. hogyha az 1-es játékos úgy gondolja, hogy a (Bátor, Gyáva) egyensúly fog realizálódni, és ezért ennek megfelelően a Bátor stratégiát követi, míg a 2-es játékos a másik, (Gyáva, Bátor) Nash-egyensúlyra tippel, és így ő is Bátor. Ekkor mindketten bátrak, a történetben szereplő két autó tehát összeütközik, és mindkét vezető életét veszti - ez a legrosszabb lehetséges kimenetel (a vegyes motiváció eredménye).
19	0.954545	1	A laboratóriumi gyakorlatban a véletlen és rendszeres hibák felismerésére, valamint a mérőrendszer teljesítményének folyamatos követéséhez a Westgard-szabályokat alkalmazzuk. Ez a kontrollmérések statisztikai jellemzőinek figyelésén alapuló szabálykészlet, mely segítségével optimalizálható a mért analit és az annak mérésére használt mérőrendszer jellemzői alapján a minőség – ellenőrzési eljárás.
26	0.714286	0	Definiáljuk az ultraintelligens gépet olyan gépként, amely messze túlhaladja a lehető legintelligensebb ember intellektuális tevékenységét is. Mivel a gépek tervezése az intellektuális tevékenységek egyike, egy ultraintelligens gép még jobb gépeket tud tervezni; nem kérdés, hogy egy „intelligenciarobbanás” történne, ami messze lehagyja az emberi intelligenciát. Az ultraintelligens gép így egyben az emberiség utolsó szükséges felfedezése, feltéve persze, hogy a gép elég engedelmes, és elmondja, hogyan tarthatjuk ellenőrzésünk alatt.
24	0.083333	1	Legyen A∈ ℝ I 1 ×...× I N  egy az α i 1 ,..., i N , 1≤ i n ≤ I n , 1≤n≤N  elemek által meghatározott N dimenziós tenzor és U egy K n × I n  mátrix. A ⊠ n U  az ún n-módú tenzor mátrix szorzat az alábbi tulajdonságokkal: 1. Eredménye egy I 1 ×...× I n−1 × K n × I n+1 ×...× I N  méretű tenzor 2. (A ⊠ n U) i 1 ,..., i n−1 , k n , i n+1 ,..., i N = def ∑ 1≤ i n ≤ I n a i 1 ,..., i n ,..., i N U k n , i n  3. A ⊠ n=1 N U n  az ún. többszörös szorzat, amely a következő alakban is felírható [6]: A ⊠ 1 U 1 ⊠ 2 U 2 ... ⊠ N U N  .
17	0.466667	0	Az algoritmus leáll, amikor az eljárásmód-javítás lépése nem eredményez változást a hasznosságokban. Ennél a pontnál tudjuk, hogy az U[i] hasznosságfüggvény a Bellman-frissítés egy fix pontja, így a Bellman-egyenletek egy megoldása, és π[i]-nek egy optimális eljárásmódnak kell lennie. Mivel csak véges sok eljárásmód létezik a véges állapottérben, és megmutatható, hogy minden iteráció jobb eljárásmódot eredményez, az eljárásmód-iterációnak le kell állnia. Az algoritmus a  ábrán látható.
5	0.181818	1	11. lépés: ebben a lépésben LCV nélkül a Q=GREEN értékadás történt. Ugyanez a választás történik akkor is, ha LCV heurisztika szerint választunk értéket, hiszen ekkor Q-nak már csak egy-elemű az értékkészlete: {GREEN}.
11	0.461538	1	Az első ábrán látszik egy védett kapcsolat (bal oldali ábra, vastag zöld nyíl), amit fenyeget a jobboldali parallel ágban található, a kérdéses feltételt negáló Cselekvés-3. A fenyegetettség azért fennáll, mert a parallel tervágak elvileg egymáshoz képest tetszőleges módon sorba rakhatók, és így elvileg kiszámítható a fizikailag kivitelezhetetlen Cselekvés-1 --> Cselekvés-3 --> Cselekvés-2 terv is.
23	0.888889	0	Az információkeresés (informational retrieval) területe iránti érdeklődés újra nő, amelyet az internetes keresés széles körű elterjedése inspirál. Robertson egy korai áttekintést ad, és bevezeti a valószínűségi rangsorolási elvet (Robertson, 1977). Manning és Schütze az NLP statisztikai megközelítésének kontextusában tárgyalja röviden az IR-t (Manning és Schütze, 1999). Baeza-Yates és Ribeiro-Neto általános célú áttekintést ad (Baeza-Yates és Ribeiro-Neto, 1999), helyettesítve az olyan régi klasszikusokat, mint Salton és McGill (Salton és McGill, 1983), valamint Frakes és Baeza-Yates (Frakes és Baeza-Yates, 1992). A Gigabájtok kezelése (Managing Gigabytes) c. könyv pont azt teszi, amit a címe mond: elmagyarázza hogyan lehet hatékonyan indexelni, tömöríteni és lekérdezni gigabájtos méretű korpuszokat (Witten és társai, 1999). Az amerikai kormány Nemzeti Szabványügyi és Technológiai Intézete (National Institute of Standards and Technology, NIST) által szervezett TREC konferencia minden évben megrendezi az IR-rendszerek versenyét, és kiadványában publikálja az eredményeket. A verseny első hét évében a részt vevő rendszerek teljesítménye körülbelül megduplázódott.
2	0.947368	0	Tervezzen és valósítson meg egy tiszta reflexszerű ágenst a  feladat környezetére! Minden lehetséges kezdeti koszeloszlásra és ágenselhelyezkedésre futtassa le a környezetszimulátort ezzel az ágenssel! Jegyezze fel az ágens teljesítménymértékét minden egyes konfigurációra és az átlagos pontszámát is!
15	0.888889	0	Ez a fejezet az ábrázolás és a következtetés általános problémáját tárgyalta időbeli valószínűségi folyamatok esetében. A legfőbb pontok a következők: * A világ változó állapotát valószínűségi változók halmazának a felhasználásával kezeljük, amelyek az állapotot ábrázolják minden időpontban. * Kidolgozhatók olyan reprezentációk, amelyek eleget tesznek a Markov-tulajdonságnak (Markov property), nevezetesen, hogy a jövő független a múlttól a jelen ismeretében. Ez együttesen a folyamat stacionaritásának (stationary) feltevésével – azaz azzal, hogy a dinamika az idővel nem változik – nagyban egyszerűsíti a reprenzentációt. * Egy időbeli valószínűségi modellt felfoghatunk egy állapotátmenet-modell (transition model) és egy érzékelő modell (sensor model) együttesének, ahol az első az állapot alakulását, a második pedig a megfigyelés folyamatát írja le. * Időbeli modellekben az alapvető következtetési feladatok a szűrés (filtering), az előrejelzés (prediction), a simítás (smoothing) és a legvalószínűbb magyarázat kiszámítása (most likely explanation). Ezek mindegyike elvégezhető egyszerű, rekurzív algoritmusokkal, melyek futási ideje a szekvencia hosszában lineáris. * Időbeli modellek három családját tanulmányoztuk részletesebben: a rejtett Markov-modelleket (hidden Markov modell), a Kalman-szűrőket (Kalman filters), és a dinamikus Bayes-hálókat (dynamic Bayesian networks) (ami magában foglalja a másik kettőt, mint speciális esetet). * A beszédfelismerés (speech recognition) és a követés (tracking) az időbeli valószínűségi modellek két fontos alkalmazási területe. * Hacsak nincsenek speciális feltételezéseink, mint a Kalman-szűrőknél, egzakt következtetés több állapotváltozó esetén nem kivitelezhető. A gyakorlatban a részecskeszűrő (particle filtering) algoritmus tűnik egy hatékony közelítő algoritmusnak.
6	0.1	1	A legtöbb sakkállást nem tudja előre kiértékelni a számítógép, ehelyett pár lépéssel előrébb tekint és a végső helyzetet vizsgálja. A kiértékelő függvények fejlesztői csapatonként meglehetősen eltérőek. Általában anyagi értéket rendelnek minden egyes figurához, tipikus értékeik: paraszt – 1, huszár és futó – 3, bástya – 5, vezér – 9 és a király, hogy a matt, azaz a játék vége domináns szerepet kapjon 200-as értéket is kaphat, de volt olyan program, ahol 10^9-t rendeltek hozzá (1961 USSR program).
4	0.916667	1	A* algoritmus esetén f(n) = g(n) + h(n), ahol g(n) a csomópontig megtett út költsége, h(n) pedig a heurisztikus függvény értéke az adott csomópontban. Előbbi a (könyvbeli)  ábráról olvasható le, utóbbi a  ábra táblázatában található meg.
4	0.041667	0	A legjobbat-először keresés egy nagy múltú, azonban pontatlan elnevezés. Amenynyiben valóban képesek lennénk a legjobb csomópontot kifejteni, akkor egyáltalán nem kellene keresnünk, nyílegyenesen elmasíroznánk a célhoz. Ezzel szemben csak a kiértékelő függvény szerint legjobbnak tűnő csomópontot tudjuk kiválasztani. Ha kiértékelő függvényünk mindentudó, akkor a kiválasztott csomópont egyben a legjobb csomópont is. A valóságban azonban a kiértékelő függvény néha pontatlan, és félrevezetheti a keresést. Azonban a továbbiakban is ragaszkodni fogunk a legjobbat-először keresés elnevezéshez, mert a legjobbnak tűnőt először keresés egy kicsit furcsán hangzana.
24	0.583333	0	Induljunk ki egy olyan példából, ahol az alakot tényleg visszanyerhetjük az árnyalásból. Tekintsünk egy Lambert-féle felületet, amit egy távoli, pontszerű fényforrás világít meg. Tételezzük fel azt is, hogy a felület messze van a kamerától, így függőleges síkú vetítést fogunk használni a perspektivikus vetítés megközelítésére. A kép fényessége:
2	0.526316	1	Keressünk meg minden telepített JRE verziót a számítógépen, és ezeken belül helyezzük el a .so fájlokat a /lib/i386/, a jogl.jar fájlt a /lib/ext könyvtárakban. A jdk könyvtárak is tartalmazhatnak jre alkönyvtárat, ezekbe is kerüljenek be a fájlok!
5	0.181818	1	A kapott {SA=RED, NSW=GREEN, NT=GREEN, WA=BLUE, Q=BLUE} behelyettesítés már konzisztens, így tovább léphetünk a következő behelyettesítetlen változó kiválasztására. Két lehetőségünk is van: V és T (mindkettő fokszáma zérus). Tegyük fel, hogy az algoritmus a V-t választja, és ehhez is szokás szerint a RED értéket rendeli először (V=RED).
26	0.714286	0	Az embereknek túl sok (vagy túl kevés) szabadidejük marad. Alvin Toffler a Future Shock-ban (Toffler, 1970) ezt írta: „A századforduló óta a munkahét 50%-kal csökkent. Nem lóg ki a sorból ha azt jósoljuk, hogy 2000-re ismét felével csökken.” Arthur C. Clarke (Clarke, 1968b) azt írta, hogy 2001-ben az emberek talán már a „teljes unalommal néznek szembe, ahol az élet legnagyobb problémája a több száz tv-csatorna közti választás lesz”. Az egyetlen ezen jóslatok közül, amelyik közel áll a megvalósuláshoz, az a tv-csatornák száma (Springsteen, 1992). Valójában a tudásintenzív iparágakban dolgozó emberek egy 24 órában működő, integrált számítógépesített rendszer részévé válnak, és ahhoz, hogy lépést tartsanak, hosszabb munkaórákra lettek kényszerítve. Az ipari gazdaságban a jutalom közelítőleg egyenesen arányos a befektetett idővel; 10%-kal több munka többé-kevésbé 10%-os bevételnövekedést jelent. Az információs gazdaságban, amelyet a nagy sávszélességű kommunikáció és a szellemi tulajdon könnyű replikációja jellemez (ezt nevezi Frank és Cook „a-győztes-mindent-visz társadalom”-nak) (Frank és Cook, 1996), nagy jutalom jár azért, ha valaki csak egy kicsit is jobb a versenyben: 10%-kal több munka akár 100%-os bevételnövekedést is jelenthet. Ezért egyre növekvő nyomás nehezedik mindenkire, hogy keményebben dolgozzon. A mesterséges intelligencia növeli a technológiai innováció ütemét, tehát hozzájárul ehhez az általános trendhez, de egyben a mesterséges intelligencia tartalmazza annak ígéretét is, hogy az automatizált ágensek kicsit átvállalják a teendőket és egy kis időhöz juttatnak minket.
2	0.526316	1	A forráskód utolsó blokkja felelős azért, hogy az ágens véletlenszerűen bolyongjon. Ezek a tervek ismét csak akkor aktiválódnak, ha korábban egy terv se illeszkedett, vagyis az ágens nem áll ennivalón, nincs kinézett ennivaló célja, és nem is lát potenciális célként kitűzhető ennivalót maga előtt. Ilyenkor 5% valószínűséggel véletlen irányba halad az ágens, illetve addig halad előre, amíg falnak nem ütközik, ahol aztán visszafordul.
10	0.242424	0	Az axiómák megállapításával tudjuk-e bizonyítani, hogy a tervünk biztosítja a cél elérését? Sajnos még nem! Először minden jól működik: a Megy([1, 1], [1, 2]) valójában lehetséges az S[0]-ban, és a Megy hatásaxiómája meggyőzhet minket, hogy az ágens tényleg eléri az [1, 2]-t:
15	0	0	A bizonytalan környezetben lévő ágenseknek – a logikai ágensekhez hasonlóan – képesnek kell lenniük környezetük aktuális állapotának nyomon követésére. Ezt a feladatot nehezebbé teszi a részleges és zajos érzékelés, és az a bizonytalanság, ahogyan a környezet az idő előrehaladtával változik. Az ágens a legjobb esetben is a jelenlegi helyzetnek csak egy valószínűségi értékeléséhez képes hozzájutni. Ez a fejezet olyan reprezentációkat és következtetési algoritmusokat ír le, amelyek lehetővé teszik ezt az értékelést, a  fejezetben bemutatott ötletekre építve.
3	0.25	1	A bizonyítás a [2] cikkben található, ám az nem elérhető az Interneten. A bizonyítás elvét és az áramköri elemek megvalósításának egy részét a [3] és [4] oldalakról szerezetem, egy részét (és a NOR-kapu bizonyítását) én dolgoztam ki.
14	0.826087	1	A módszer képes egy időben több logikai szabályt, úgynevezett szabálybázist alkalmazni. Ennek feltétele, hogy definiáljuk a fogalmakat és a kategóriákat egy „Kockázatbecslési Mátrix”-ban, valamint definiáljuk a súlyossági és valószínűségi fogalmakat. Fontos arra is odafigyelnünk, hogy az egyes kategóriák nevei illetve azok meghatározása, leírása konkrét folyamathoz kapcsolódjon. Annak nyelvi úton történő értését, megértését is kielégítse. Az is lehetséges, hogy a bekövetkezési kategóriákat statisztikailag vagy szakértői becslések alapján becsült valószínűségi értékek alapján határozzuk meg.
5	0.181818	1	A 2-2. táblázat tehát immár egy kvaternális érték-korlátot foglal össze, amely tehát 4 változó, az imént bevezetett ZCF segédváltozó, és a ChesterfieldsHouse, FoxHouse, és CHC változók lehetséges értékkombinációit sorolja fel (amik közül bármelyik előállhat - arra nincs megkötés, hogy melyik, de csak az egyik). Látható, hogy a ZCF változó értékkészlete {1, 2, 3, 4, 5, 6, 7, 8}.
16	0.130435	0	A ≻ B ⇒ (p ≥ q ⇔ [p, A; 1 – p, B] ≿ [q, A; 1 – q, B] * Felbonthatóság (Decomposability): Összetett szerencsejátékok egyszerűbbekre bonthatók a valószínűség-számítás szabályai szerint. Ezt „a hazárdjáték unalmas” szabálynak nevezték el, mivel ez azt mondja ki, hogy két egymást követő szerencsejátékot össze lehet olvasztani egyetlen ekvivalens szerencsejátékba, ahogyan azt a  ábra mutatja.^[165]
1	0.689655	0	A valós alkalmazások széles körű elterjedése a működőképes tudásreprezentációs sémák iránti igények növekedéséhez vezetett. Számos különböző reprezentációs és következtető nyelvet fejlesztettek ki. Egyes megoldások a logikán alapultak – például a Prolog nyelv, amely Európában, és a Planner nyelvcsalád, amely az Egyesült Államokban lett népszerű. Mások, a Minsky által bevezetett keretek (frames) (Minsky, 1975) ötletét követve, inkább strukturált megközelítést választottak. Egybegyűjtöttek bizonyos eseménytípusokra vagy objektumokra jellemző tényeket, majd azokat a biológiai taxonómiára hasonlító nagy taxonomikus típushierarchiákba rendezték.
9	0.965517	0	A Szereti( János, Fagylalt) mondatból kiindulva logikusnak tűnik arra következtetni, hogy ∃x Szereti(x, Fagylalt). Adjon meg egy általános következtetési szabályt, az egzisztenciális bevezetést (Existential Introduction), amely megerősíti ezt a következtetést. Gondosan vizsgálja meg a feltételeket, amelyeket ki kell elégíteni a felhasznált változókkal és termekkel.
12	0.47619	0	Figyeljük meg az és-vagy gráf felépítését. Az A hiedelmi állapotból a Balra mozgás kimenetelét mutatjuk. (A többi cselekvésnek nincs értelme.) Mivel az ágens piszkot hagyhat maga után, a két kiinduló világból négy lehetséges világ adódhat, ahogy az a B és C állapotokban látható. A rendelkezésre álló érzékelő információk alapján a világ két különálló hiedelmi állapotra osztható.^[127] A B-ben, az ágens tudása a TisztaBal, míg C-ben a ¬TisztaBal. A piszok feltakarítása C-ben az ágenst a B-be mozgatja. A B-ből a jobbra mozgás vagy hagy piszkot maga után, vagy nem, így az ágensnek azon tudása alapján, hogy TisztaJobb igaz (vissza az A-ra) vagy hamis (D hiedelmi állapot), ismét négy lehetséges világ adódik.
4	0.875	0	Ebben a fejezetben áttekintettük, hogyan lehet a keresési költséget heurisztikus függvények használatával csökkenteni. Megvizsgáltunk számos heurisztikus függvényt alkalmazó algoritmust, és láttuk, hogy az optimalitásért a keresési költség viszonylatában drága árat kell fizetnünk, még akkor is, ha sikerült jó heurisztikus függvényt találnunk. * A legjobbat-először keresés (best-first search) egyszerűen egy olyan Gráf-Keresés, ahol először (valamilyen mérték szerint) a legkisebb költségű, még ki nem fejtett csomópontokat fejtjük ki. A legjobbat-először algoritmusok tipikusan egy h(n) heurisztikus (heuristics) függvényt használnak, amely a cél költségét becsüli az n állapotból kiindulva. * A mohó legjobbat-először keresés (greedy best-first search) a minimális h(n) értékű csomópontokat fejti ki. Nem optimális, azonban sokszor hatékony. * Az A^*^ keresési algoritmus (A^*^ search) a minimális f(n) = g(n) + h(n) értékű csomópontokat fejti ki. Az A^* algoritmus teljes és optimális, feltéve, hogy garantálni tudjuk, hogy h(n) elfogadható (a Fa-Keresés számára) vagy konzisztens (a Gráf-Keresés számára). Az A^* algoritmus tárkomplexitása még mindig elfogadhatatlan. * A heurisztikus algoritmusok hatékonysága a heurisztikus függvény minőségétől függ. Jó heurisztikus függvények készíthetők néha például a probléma definíciójának relaxálásával, a mintaadatbázis részproblémáihoz tartozó megoldási költségek előzetes kiszámításával vagy a problémaosztályon belül a tapasztalatból való tanulással. * Az RLEK (RBFS) és az EMA^* (SMA^*) robusztus, optimális keresési algoritmusok, amelyek korlátozott mennyiségű memóriát használnak. Ha elegendő idő áll rendelkezésre, olyan problémákat is megoldanak, melyeket az A^* algoritmus nem képes megoldani, mert elfogy a memóriája. * A lokális keresési módszerek, mint például a hegymászó keresés (hill climbing) teljes állapotleírásokkal dolgoznak, de a memóriában csak csekély számú csomópontot tartanak. Több sztochasztikus algoritmust is kifejlesztettek, beleértve a szimulált lehűtést (simulated annealing), amely megfelelő hűtési karakterisztika esetén optimális megoldással tér vissza. A folytonos térbeli problémákra számos lokális keresési algoritmus is használható. * A genetikus algoritmus (genetic algorithm) egy olyan sztochasztikus hegymászó keresés, ahol az állapotok nagy populációjával dolgozunk. Új állapotokat mutációval (mutation) és a populációbeli állapotpárokat összekombináló keresztezéssel (crossover) generálunk. * Felfedezési problémákról (exploration problems) akkor van szó, ha az ágensnek fogalma sincs környezete állapotairól és cselekvéseiről. Biztonságosan feltárható környezetek esetén az online kereső (online search) ágens felépítheti a környezetek térképét, és megtalálja a célt, ha az létezik. A heurisztikus becslések tapasztalat alapján történő frissítése hatékony módszer, az ágens lokális minimumokból való kimeneküléséhez.
24	0.166667	1	A kliensek a központi számítógéphez csak egy terminálként kapcsolódnak. A leletező meghibásodása esetén nem történik adatvesztés, mert nem tartalmaz fontos információt. További kliensek még a digitális leolvasó számítógépei. Ezek átmenetileg tárolják a képeket.
22	0.666667	0	Az ilyen metaforák megközelítésének két módja lehetséges. Az egyik az, hogy a metafora teljes tudását beépítjük a szótárba – új jelentéseket adunk az emelkedik, esik, mászik stb. szavakhoz, melyek úgy írják le őket, hogy mindenféle mértékre vonatkozhatnak, nem csak a magasságra. Ez a módszer sok alkalmazás számára elegendő, de nem ragadja meg a metafora azon generálóképességét, amely az emberek számára lehetővé teszi új kifejezések használatát – mint például az „alábukik” vagy a „kirobbantja a tetőt” – anélkül hogy félreértéstől tartanának. A másik módszer a gyakori metaforákról explicit tudást illeszt be a rendszerbe, és ezeket használja az új kifejezések olvasás közbeni megértéséhez. Például tegyük fel, hogy egy rendszer ismeri a „több felfelé van” metaforáját. Azaz tudja, hogy az olyan logikai kifejezések, melyek egy függőleges skálán értelmezett pontra vonatkoznak, értelmezhetők egy mennyiségi skála megfelelő pontjaira vonatkozóként. Ezek után az „eladások magasak” kifejezéshez tartozna egy Altitude(Sales, High) szó szerinti értelmezés, amit metafora segítségével Quantity(Sales, Much)-ként értelmezhetünk.
6	0.1	1	Egy játékot nem részrehajlónak hívunk, ha minden állapotban mindkét játékos részére ugyanannyi lehetséges lépés áll rendelkezésre, vagyis a következő lépés nem függ a soron következő játékostól, csak a játék jelenlegi állapotától [10].
9	0.965517	1	Az adatbázis célja: olyan orvostechnikai termékek adatainak összegyűjtése, amelyek Magyarországon már forgalomban vannak, illetve a jövőben perspektivikusak. Ezen adatállomány alapján az ORKI tanácsadó szolgáltatással áll az egészségügyi intézmények rendelkezésére, mivel gép-műszer beruházásokhoz gyors információt tud szolgáltatni, ami nagymértékben hozzájárulhat a típusválaszték optimalizálásához, illetve a gazdaságosabb beszerzésekhez.
18	0.052632	0	Nem ellenőrzött tanulási (unsupervised learning) probléma esetén bemeneti minták tanulása történik, de a kimeneti kívánt minták nem biztosítottak. Például egy taxivezető ágens apránként kialakíthatja a „jó közlekedési napok” és a „rossz közlekedési napok” koncepcióját, anélkül hogy bármikor címkézett példákat kapott volna bármelyikről. Egy tisztán nem ellenőrzött tanulást végző ágens nem képes megtanulni, hogy mit cselekedjék, mivel nincs olyan információja, amely egy cselekvést helyesnek vagy egy állapotot kívánatosnak minősítene. A nem ellenőrzött tanulást elsősorban a valószínűségi következtető rendszerek kapcsán fogjuk tárgyalni (lásd  fejezet).
3	0.25	0	Az utazó ügynök probléma (Travelling Salesperson Problem – TSP) egy körutazási probléma, amelyben minden várost pontosan egyszer kell meglátogatni. A cél a legrövidebb út megkeresése. A probléma NP-nehéz, de hatalmas erőfeszítések történtek a TSP-algoritmusok képességeinek javítására. Ezen algoritmusokat az utazó ügynökök útjainak megtervezése mellett nyomtatott áramkörök furatainak készítésénél a fúró automata mozgatásának megtervezésére, továbbá áruházak rakodógépeinek útvonaltervezésére is alkalmazták.
3	0.25	1	A játéknak van egy kétszemélyes változata is, amely leginkább az MSN Messenger szoftverbe épített kliens által ismert. Ebben a változatban ellentétes a cél: a játékosoknak az aknamentes mezők helyett az aknákra kell kattintaniuk. Ha valaki eltalál egyet, újra ő jön; ha nem aknára kattint, a másik játékos használhatja fel a kattintás során szerzett új információkat az aknák keresésére. A két játékmód között alapvető különbségek vannak – míg egyjátékos módban csak arra kell ügyelnünk, hogy nem biztos kattintás esetén minél nagyobb valószínűséggel kattintsunk aknamentes mezőre, két játékos esetén azt is figyelembe kell vennünk, hogy minél kevesebb információt szolgáltassunk a másik játékosnak.
3	0.25	1	Az előző két bekezdés során kiderült, hogy ha a kapu bemenetére két „hamis” értéket kapcsolunk, akkor a kimenete „igaz” lesz, és ha a kimenet „igaz”, akkor a bemeneten biztosan két „hamis” érték van. Ennek a jellemzésnek a kétváltozós logikai függvények közül kizárólag a NOR felel meg, így az ábrán látható összeállítás valóban egy NOR kaput valósít meg.
8	0.935484	1	8.16 Írja meg a wumpus helyzetének meghatározásához szükséges axiómákat a Wumpus konstansszimbólum és a Be(Wumpus, Helyzet) bináris predikátum felhasználásával. Ne felejtse el, hogy csak egy wumpus van.
14	0.565217	0	Alkalmazzuk az algoritmust a  (a) ábrán látható háló esetén a P(Eső∣Locsoló = igaz, VizesPázsit = igaz) kérdésre. A folyamat a következőképpen halad: először a w súlyt 1,0-ra állítjuk. Aztán generálunk egy eseményt: 1. Sorsoljunk a P(Felhős) = 〈0,5, 0,5〉 eloszlásból; tegyük fel, hogy igaz-at kapunk. 2. A Locsoló egy bizonyítékváltozó igaz értékkel. Ezért beállítjuk, hogy
11	0.576923	0	A tervkészítési gráfokat egy egyszerű példán mutatjuk be. (Az összetettebb feladatok olyan gráfhoz vezetnek, amelyek nem férnének ki egy oldalra.) A  ábra a feladatot, míg a  ábra az ehhez tartozó gráfot mutatja. Az S[0] állapotszintről indulunk, ami a probléma kiinduló állapotának felel meg. Ezt az A[0] cselekvésszinttel folytatjuk, amibe azokat a cselekvéseket helyezzük, melyek előfeltételei az előző szinten teljesülnek. Minden cselekvés össze van kötve az S[0]-ban található előfeltételeivel, illetve az S[1]-ben található következményeivel, ami ebben az esetben az S[0]-ban nem szereplő literálok bevezetését jelenti S[1]-ben.  ábra - A „legyen süti és együnk is” probléma A „legyen süti és együnk is” probléma
14	0.826087	1	Egyes képletekkel egy bizonyos időtartományban kellő megbízhatósággal ki tudjuk számítani a szívizominfarktus valószínűségét, ha ismerjük a beteg nemét, életkorát, szérumkoleszterin-szintjét és dohányzási szokásait. Ezekkel, az előrejelzésekkel azonban rendszerint az a probléma, hogy csupán bizonyos demográfiai, klinikai és kockázati tényezőket, illetve azok kombinációját tartalmazzák, és a fenti esetben például már semmit sem mondanak arról, hogy ez a kockázat miként alakulnak más krónikus betegeknél, vagy olyanoknál, akik valamilyen gyógyszert szednek.
3	0.916667	1	Pozitív él költségek esetén igaz volt, hogy egy kört végigjárni biztosan növeli az út összköltségét. Ha egy kör össz él költsége negatív, akkor ez már nem igaz: a kört tetszőleges sokszor végigjárva akármilyen kis költséget elérhetünk. Ilyenkor matematikai értelemben nem létezik optimális megoldás.
7	0.44	0	A rezolúción alapuló következtetési eljárások az ellentmondásokra vezető bizonyítások elvén működnek, ahogy azt a  alfejezet végén tárgyaltuk. Tehát annak megmutatásához, hogy ΤΒ ⊨ α, azt mutatjuk meg, hogy a (TB ∧ ¬α) kielégíthetetlen. Ezt az ellentmondás bizonyításával végezzük el.
10	0.030303	0	„Játék” tárgyterületeken a reprezentáció megválasztása nem annyira lényeges. Könnyű egy konzisztens fogalomkészletet kialakítani. Az olyan komplex területeken azonban, mint például az interneten történő bevásárlás vagy egy robot vezérlése változó fizikai környezetben, általánosabb és rugalmasabb reprezentációra van szükség. Ebben a fejezetben megmutatjuk, hogy ilyen reprezentációkat hogyan lehet létesíteni, olyan általános fogalmakra fókuszálva, mint a Cselekvés, az Idő, a FizikaiObjektum és a Hiedelem, amelyek számos tárgyterületen fordulnak elő. Ezen absztrakt fogalmak reprezentálását néha ontológiaszervezésnek (ontological engineering) nevezik. Az ontológiaszervezés kapcsolatban áll a  alfejezetben leírt tudásszervezés folyamatával, de a hatása szélesebb körű.
11	0.846154	0	A mesterséges intelligencia területén belül, a tervkészítés jelenleg nagy figyelemnek örvend. Ennek egyik oka, hogy egyesíti az eddig bemutatott két nagy területet, a keresést és a logikát. A tervkészítő tekinthető egy programnak, ami vagy egy megoldást keres, vagy (konstruktívan) bizonyítja egy megoldás létezését. A két terület alapötleteinek keresztezése az utóbbi évtizedben több nagyságrendnyi javulást hozott a hatékonyság tekintetében, és egyúttal megnövelte a tervkészítők ipari alkalmazásokban való felhasználhatóságát. Sajnos még mindig nincs tiszta képünk arról, hogy mely problémákra mely megoldások a legalkalmasabbak. Később valószínűleg új technikák kerülnek majd előtérbe, melyek dominálnak majd a meglévők felett.
15	0.666667	0	Most a mintavételi lépés jön. Mivel minden egyes minta a súlyával arányos valószínűséggel ismétlődik, az újramintavételezés után az x[t+1]állapotban lévő minták száma arányos az x[t+1] állapotban lévő minták teljes súlyával az újramintavételezés előtt:
17	0.666667	0	Vannak más stratégiák, amelyek megbocsátóbbak. A leghíresebb a „szemet szemért” (tit-for-tat), ami szerint tagadás-sal kell kezdeni, majd megismételni a másik játékos előző lépését az összes elkövetkező lépésben. Így Aliz tagadna, ameddig Bendegúz tagadna, és a Bendegúz tanúskodása utáni lépésben ő is tanúskodna, de visszatérne a tagadáshoz, ha Bendegúz visszatért. Bár nagyon egyszerű, ez a stratégia igen robusztusnak és hatékonynak bizonyult stratégiák széles köre ellen.
11	0.769231	0	A teljes kizárás helyett alkalmazhatunk csupán részleges kizárást, amikor az egyidejű cselekvéseket csak akkor zárjuk ki, ha kölcsönhatásba kerülnek. A feltételek a mutex cselekvések megfelelői: két cselekvés nem hajtható végre egyidejűleg, ha az egyik negálja a másik egy előfeltételét vagy következményét. Például a Repül(P[2], JFK, LAX)^0 és a Repül(P[2], JFK, SFO)^0 együtt nem következhet be, mert mindkettő negálja a másik előfeltételét. Másrészről azonban a Repül(P[2], JFK, SFO)^0 és a Repül(P[2], JFK, SFO)^0 együtt is bekövetkezhet, hiszen a járatok nem zavarják egymást. A részleges kizárás a teljes rendezés kényszere nélkül kiküszöböli a hibás terveket.
10	0.69697	0	Egy rögzített háló esetén ez szemantikusan megfelelő, azonban ha sok kivételünk lesz, kevésbé tömör lesz a felírásunk, mint a hálós jelölés maga. Több állítással frissített háló esetén az ilyen megközelítés sajnos kudarcra van ítélve – amit valójában mondani szeretnénk az az, hogy minden, egyelőre még ismeretlen egylábú személy szintén kivételnek számít. Ezzel a témával és az alapeseti következtetéssel általában bővebben a  alfejezet foglalkozik.
10	0.969697	0	Mértékeket reprezentáló alternatív sémában az egységfüggvényeket egy absztrakt hosszúság objektumra alkalmazzuk. Az ilyen sémában azt lehetne írni, hogy: Centiméterek(Hossz(L[1])) = 15. Hogyan viszonyul ez a séma a fejezetbelihez? A szempontok többek között az átváltási axiómák, az absztrakt mennyiségek elnevezései (mint például „ezer forint”) és az eltérő egységekben kifejezett absztrakt mérések összehasonlítása (50 hüvelyk több, mint 50 cm).
17	0.533333	0	ahol P(b′|o, a, b) 1, ha b′ = Előre(b, a, o), egyébként pedig 0. Fontos A (17.2.) egyenletet felfoghatjuk egy állapotátmenet-modellnek a hiedelmi állapot térben. Definiálhatunk egy jutalomfüggvényt is a hiedelmi állapotokra (azaz azon aktuális állapotok várható jutalmát, amelyekben az ágens lehet):
2	0.894737	1	Más a helyzet viszont egy belső állapottal rendelkező reflexszerű ágenssel! Egy ilyen ágens esetében ugyanis megtehető, hogy az útvonalat nem a tervezési fázisban, hanem az első időpillanatban teszi meg, amikor már ismeri a kosz elrendeződését. A megtervezett útvonalat a belső állapotban nyilvántartva már képes lesz az ágens elkerülni a felesleges kerülőket.
3	0.583333	0	Az iteratívan mélyülő keresés (iterative deepening search) – vagy iteratívan mélyülő mélységi keresés – egy általános stratégia, amit sokszor a mélységi kereséssel együtt alkalmaznak a legjobb mélységkorlát megtalálására. Az algoritmus képes erre, mert fokozatosan növeli a mélységkorlátot – legyen az először 0, majd 1, majd 2 stb. – amíg a célt meg nem találja. Ez akkor következik be, ha a mélységkorlát eléri a d-t, a legsekélyebben fekvő célcsomópont mélységét. Az algoritmust a  ábra mutatja. Az iteratívan mélyülő keresés ötvözi a szélességi és a mélységi keresés előnyös tulajdonságait. A mélységi kereséshez hasonlóan szerény, pontosabban O(bd) memóriaigénnyel rendelkezik. A szélességi kereséshez hasonlóan teljes, ha elágazási tényezője véges, és optimális, ha az útköltség a csomópontok mélységének nem csökkenő függvénye. A  ábra az Iteratívan-Mélyülő-Keresés első négy iterációját mutatja egy bináris fán, ahol az algoritmus a megoldást a negyedik iterációban találja meg.
8	0.129032	0	A szemantika a mondatokat a modellekhez kapcsolja, és képesnek kell lennie az igazság meghatározására. Hogy ez megtörténjen, szükségünk van egy interpretációra, amely pontosan megjelöli, hogy mely objektumok, relációk és függvények felelnek meg a konstans-, predikátum- és függvényszimbólumoknak. Egy lehetséges interpretáció – amit szándékolt interpretációnak (intended interpretation) nevezünk – a mi esetünkben a következő: * Richárd Oroszlánszívű Richárdra, míg János a gonosz János királyra vonatkozik. * A Testvér a testvéri kapcsolatra vonatkozik, ami a   egyenletben megadott n-es halmazban látható; a Fején arra a „fején” relációra vonatkozik, ami a korona és János király között áll fenn; a Személy, Király és Korona pedig arra az objektumhalmazra vonatkoznak, amelyek személyek, királyok és koronák. * A BalLáb azt a „bal láb” függvényt jelenti, aminek a leképezését a   egyenletben adtuk meg.
26	0.071429	0	Alan Turing azt javasolta Computing Machinery and Intelligence c. híres cikkében (Turing, 1950), hogy ne azt kérdezzük, tudnak-e a gépek gondolkodni, hanem azt vizsgáljuk, hogy átmennek-e a gépek egy viselkedési intelligenciateszten, amelyet később Turing-tesztnek neveztek el. A teszt szerint a programnak öt percen át kell (gépelt online üzenetekkel) beszélgetnie egy kérdezővel. A kérdezőnek ezután választania kell, hogy egy programmal vagy egy személlyel beszélgetett-e, és egy program akkor felel meg a teszten, ha az idő 30%-ában megtéveszti a kérdezőt. Turing azt a sejtést fogalmazta meg, hogy 2000-re egy 10^9 táregységből álló számítógépet be lehet úgy programozni, hogy megfeleljen a teszten, ámde nem lett igaza. Az ugyan megtörtént már, hogy néhány embert öt percig becsaptak; például az Eliza program és az Mgonz internetes csevegőrobot becsapott olyan embereket, akik nem gondoltak arra, hogy talán egy programmal beszélhetnek, és az Alice program becsapott egy zsűritagot a 2001-es Loebner-díjért zajló versenyben. De egyetlenegy program sem került annak közelébe, hogy 30%-ot érjen el képzett zsűrivel szemben, és az MI-kutatás egésze nem is szentel túl nagy figyelmet a Turing-teszteknek.
7	0.92	1	A logikai formalizálás lényege éppen az, hogy a szimbólumokat megfosztjuk eredeti tartalmuktól, a rezolúció ereje pedig abban rejlik, hogy az eredeti tartalomra nincs szüksége az állítások levezetéséhez. Pontosan ez a hátulütője is: az eredeti tartalom segíthetne ügyes heurisztikák szerkesztésében, amelyek jó irányba terelhetik a keresést.
20	0.928571	0	Az 1990-es években megjelent szupport vektor gépeknek (Cortes és Vapnik, 1995) napjainkban gyorsan növekvő az irodalmuk, amely olyan tankönyveket is magában foglal, mint Cristianini és Shawe-Taylor könyve (Cristianini és Shawe-Taylor, 2000). Nagyon népszerűnek és bizonyos feladatokra nagyon hatékonynak bizonyultak, ilyenek például a szövegkategorizálás (Joachims, 2001), a bioinformatikai kutatás (Brown és társai, 2000), a természetes nyelvű szöveg feldolgozása, mint a kézzel írt számjegyek DeCoste és Schölkopf által megvalósított felismerése (DeCoste és Schölkopf, 2002). A szavazó perceptron szintén egy olyan technika, amely a kerneltrükköt alkalmazza az exponenciális tulajdonságtér implicit reprezentációjára (Collins és Duffy, 2002).
6	0.45	0	Az itt leírt technikák kombinált alkalmazásával egy elfogadható szinten sakkozó (vagy más játékot játszó) programot kaphatunk. Tegyük fel, hogy a sakk esetére implementáltunk egy kiértékelő függvényt, egy értelmes kereséslevágást egyensúlyi kereséssel és egy nagy transzpozíciós táblát. Tegyük fel azt is, hogy hónapokig tartó munkás bitfaragással, a legújabb PC-n tudunk generálni és kiértékelni másodpercenként kb. egymillió csomópontot, ami kb. 200 millió csomópont megvizsgálását teszi lehetővé lépésenként a standard időkorlátok mellett (3 perc lépésenként). A sakk elágazási tényezője átlagosan kb. 35. Mivel 35^5 kb. 50 millióval egyenlő, a minimax keresést alkalmazva így csak öt lépésváltásig tudnánk előrenézni. Bár egy ilyen program nem hasznavehetetlen, egy átlagos emberi játékos, aki esetenként hat vagy nyolc lépésváltásig tud előrenézni, könnyűszerrel bolondot tudna belőle csinálni. Az alfa-béta nyeséssel kb. 10 lépésváltást kapunk, ami a játék mesteri színvonalának felel meg. A  alfejezet további nyesési technikákat ír le, amikkel az effektív keresési mélység durván 14 lépésváltásig kiterjeszthető. A nagymesteri minősítéshez egy lényegesen finomított kiértékelő függvény kellene továbbá az optimális megnyitások és a végjátékok nagy adatbázisa. És az sem ártana, ha lenne egy szuperszámítógépünk, amin a programot futtatnánk.
25	0.407407	0	Ha megvizsgáljuk azt a pályát, amit a  ábrán kaptunk, láthatjuk, hogy még további nehézségeket kell leküzdenünk. Először is, vegyük észre, hogy a pálya mentén nagyon éles kanyarok vannak. A robot bármilyen véges sebesességgel mozog, nem tudja ezeket „bevenni”. Másodszor, az út helyenként nagyon közel halad el az akadályok mellett. Mindenki, aki már vezetett autót, tudja, hogy egy olyan parkolóhely, ahol csak egy-egy milliméter szabad hely van mindkét oldalon, valójában nem is parkolóhely. Éppen ezért olyan megoldásokra törekszünk, amelyek robusztusak a kis mozgási hibákra nézve.  ábra - (a) A taszító potenciáltér távol tartja a robotot az akadályoktól. (b) A megoldásként kapott pálya, ha egyszerre minimalizáljuk az úthosszt és a potenciálfüggvényt. (a) A taszító potenciáltér távol tartja a robotot az akadályoktól. (b) A megoldásként kapott pálya, ha egyszerre minimalizáljuk az úthosszt és a potenciálfüggvényt.
22	0.925926	1	A beszédfelismerés külföldi egészségügyi alkalmazási tapasztalatai szerint használata a radiológiai diagnosztikai centrumokban a leletkészítést minimum 35-50%-al felgyorsítja. A SpeechMagic alkalmazásából a betegellátás minden szereplője profitál. A szoftver rendszer használatának általános előnyei: * megújítja hazánkban is az orvosi dokumentációs tevékenységet * nem szükséges egyidejűleg két munkaerő (orvos-írnok) lefoglalása * nincs rossz hangfelvétel miatti leletezés ismétlése * javítható a szöveges orvosi dokumentum minősége * csökken a betegek várakozási ideje
7	0.84	0	A következtetésalapú és az áramkörön alapuló ágensek a deklaratív és procedurális megközelítés szélsőséges esetei az ágens tervezésében. Számos szempont szerint összehasonlíthatjuk őket: * Tömörség. Az áramkörön alapuló ágensnek, ellentétben a következtetésalapú ágenssel, nincs szüksége a „tudásának” önálló másolataira minden időlépésben. Ehelyett, mindig csak a pillanatnyi és a megelőző időlépésre hivatkozik. A „fizika” leírásához mindkét ágensnek szüksége van minden egyes négyzetre vonatkozó másolatokra (mondatok vagy áramkörök formájában), és így nem könnyű nagyobb környezeteket leírni. Azokban a környezetekben, ahol számos objektum összetett kapcsolatait kell leírni, a kijelentések száma eláraszt bármilyen ítéletkalkulus ágenst. Ezek a környezetek már igénylik az elsőrendű logika kifejezőerejét (lásd  fejezet). Mindkét típusú ítéletkalkulus ágens rosszul alkalmazható egy biztonságos négyzettel szomszédos helyre vezető útvonal megtalálásának kifejezésére vagy megoldására. (Emiatt az IK-Wumpus-Ágens keresési algoritmusokat alkalmaz.) * Számítási hatékonyság. A legrosszabb esetben a következtetés időigénye exponenciálisan függ a szimbólumok számától, míg az áramkör futtatása az áramkör méretétől lineárisan függő időt igényel (vagy a mélységtől lineárisan függő időt, ha fizikai eszközként megvalósítjuk). Láthattuk azonban, hogy a gyakorlatban a DPLL igen gyorsan elvégezte a szükséges következtetéseket.^[73] * Teljesség. Azt sugalltuk korábban, hogy az áramköralapú ágens lehet, hogy nem teljes a ciklusmentességgel kapcsolatos korlátozás miatt. A teljesség hiányának okai azonban még alapvetőbbek. Először is, emlékezzünk, hogy az áramkör a méretével lineárisan arányos időben oldja meg a feladatot. Ez azt jelenti, hogy bizonyos környezetek esetében egy teljes áramkörnek (egy olyannak, amely minden meghatározható állításhoz kiszámítja az igazságértéket) exponenciálisan nagyobbnak kell lennie, mint a következtetésalapú ágens tudásbázisának. Egyébként lenne módszerünk arra, hogy hogyan oldjuk meg az ítéletkalkulus vonzat problémáját kisebb mint exponenciális idő alatt, ami nagyon valószínűtlen. A második érv az ágens belső állapotainak a jellege. A következtetésalapú ágens emlékezik minden érzetre, és implicit vagy explicit módon ismer minden mondatot, ami az érzetekből és a kezdeti adatbázisból következik. Például ha adott S[1,1] és ismeri a C[1,2] ∨ C[2,1 ]állítást, abból S[2,2 ]következik. Ezzel szemben az áramköralapú ágens elfelejt minden korábbi érzetet és csak a regiszterekben tárolt egyedi állításokra emlékszik. Ekképpen az első érzet után a C[1,2 ]vagy a C[2,1][ ]önmagában ismeretlen marad, és így semmilyen következtetés nem vonható le S[2,2]-re vonatkozóan. * A létrehozás egyszerűsége. Ez egy nagyon fontos kérdés, amelyet nehéz pontosan megítélni. A könyv szerzője számára a „fizika” leírása bizonyára sokkal egyszerűbb deklaratív úton, miközben kisméretű, hurokmentes, majdnem teljes áramkörök tervezése a csapdák megtalálására igen nehéznek bizonyult.
7	0.6	0	Számos lokális keresés algoritmust láttunk már a könyvben, beleértve a Hegymászó algoritmust 4. szakasz - Hegymászó keresés részben és a Szimulált-Lehűtés-t 4. szakasz - Szimulált lehűtés részben. Ezek az algoritmusok alkalmazhatók közvetlenül is kielégíthetőségi problémákra, feltéve, hogy megfelelő kiértékelő függvényt választunk. Mivel a cél egy olyan hozzárendelés megtalálása, amely kielégít minden klózt, megfelel számunkra egy olyan kiértékelő függvény választása, amely a kielégítetlen klózok számát számolja. Valóban, ez pontosan az a mérték, amit a Min-Konfliktus algoritmus használt kényszerkielégítési problémáknál  szakasz - Lokális keresés kényszerkielégítési problémáknál részben. Minden ilyen algoritmus a teljes hozzárendelések terében végez lépéseket, cserélgetve egy-egy lépésben egy-egy szimbólum igazságértékét. A tér rendszerint számos lokális minimumot tartalmaz, amelyekből a meneküléshez a véletlenszerű lépések különféle formái szükségesek. Az utóbbi években nagyon sokat foglalkoztak azzal a kérdéssel, hogy hogyan lehet egy jó egyensúlyt találni a mohóság és a véletlenszerűség között.
26	0.642857	0	Legutolsó gondolatkísérletünk valószínűleg egyben a leghíresebb is. John Searle (Searle, 1980) gondolta ki, és egy olyan hipotetikus rendszert ír le, amely látnivalóan egy programot futtat, és megfelel a Turing-teszten; de ugyanilyen világos az is (legalábbis Searle szerint), hogy semmit sem ért meg a bemenetei és kimenetei közül. Konklúziója szerint tehát a megfelelő program futtatása (azaz a megfelelő válaszok megléte) önmagában még nem elégséges feltétele az elmemivoltnak.
9	0.931034	1	Az előző feladattól eltérően itt az egzisztenciális kvantorok univerzális kvantor hatáskörében vannak, így tehát nem használhatunk konstansokat. Ehelyett Skolem-függvényeket kell bevezetnünk a kvantorok eliminálására. Az eredmény a következő:
14	0.086957	1	Ha a jelentett és a referencia értékek x ^ i , x i  értelmezhetőek egy diszkrét valószínűségi eloszlásnak p ^ i , p i  , akkor egy gyakori veszteség/hiba függvény a logaritmusos veszteség, ami a kereszt-entrópiához H  vezet és a Kullback-Leibler (semi)távolsághoz KL  , ami mindig pozitív és mind az L 1  és L 2  távolságot dominálja [?, ?]
19	0.954545	0	Az alábbi meghatározás mindegyikére írja fel a meghatározás logikai reprezentációját, és magyarázza meg, hogy a meghatározás miért igaz (ha igaz egyáltalán). a. A postai kód meghatározza a megyét. b. A külső kialakítás és a névleges érték meghatározzák az érme tömegét. c. Adott program esetén a bemenetek meghatározzák a kimeneteket. d. A klíma, a táplálkozás, a fizikai gyakorlat és a metabolizmus meghatározzák, hogy valaki fogyni vagy súlyban gyarapodni fog. e. A kopaszságot (vagy annak hiányát) az anyai ágon az egyik nagyszülőnek a kopaszsága határozza meg.
8	0.032258	0	A programnyelvek – mint például a C++, a Java vagy a Lisp – a használatban lévő formális nyelvek messze legnagyobb csoportját alkotják. A programok önmagukban, szó szerinti értelemben, csak számítási folyamatokat reprezentálnak. A programokon belüli adatstruktúrák tényeket reprezentálhatnak; például egy program használhatja a 4 × 4-es négyzetrács-elrendezést a wumpus világ elemeinek reprezentálásához. Így tehát az a programnyelvi állítás, hogy Világ[2, 2] ← Csapda viszonylag természetes módja annak a kijelentésnek, hogy van egy csapda a [2, 2] négyzetben. (Az ilyesfajta reprezentációkat ad hoc jellegűnek vélhetjük; az adatbázisrendszereket pontosan azért fejlesztették ki, hogy általánosabb, tárgyterület-független módját biztosítsák a tények tárolásának és visszakeresésének.) A programnyelvek hiányossága, hogy nem rendelkeznek általános mechanizmussal arra, hogy tényeket más tényekből levezessenek; az adatstruktúra minden frissítése egy tárgyterület-specifikus eljárás segítségével történik, amelynek részleteit a programozó vezeti le a tárgyterületről meglévő ismereti alapján. Ez a procedurális (procedural) megközelítés szembeállítható az ítéletkalkulus deklaratív (declarative) természetével, amelyben a tudás és az interferencia különálló fogalmak, a következtetés pedig teljes mértékben tárgyterületfüggő.
14	0.869565	1	A következő példa tartalmaz egy fuzzy logikai szabályozót, aminek bemenete a szabályozási hiba, a mért vagy megfigyelt állapotváltozók, kimenete pedig egy szabályzandó rendszer bemenete lesz. A rendszer ennek hatására állapotot változtat, paramétereit újra mérjük, értékeljük és visszacsatoljuk a fuzzy szabályzóba, hogy ezáltal a visszacsatolás által tovébb közelítsünk a rendszer elvárt állapotához. A cél, hogy az aktuális érték (állapot) a kívánt, előírt értéket (állapotot) elérje, ennek megfelelően végzi el a következtetést a szabályozó.
7	0.44	0	ahol ℓ egy literál, ℓ[i] és m pedig kiegészítő literálok (complementary literals) (például az egyik negáltja a másiknak). Tehát az egységrezolúció vesz egy klózt (clause) – literálok diszjunkcióját – meg egy literált, és létrehoz egy új klózt. Vegyük észre, hogy egy egyedi literált tekinthetünk egy literál diszjunkciójának, amit szoktak egységklóznak (unit clause) is nevezni.
24	0.166667	1	A PET-vizsgálatokhoz legelterjedtebben használt radiofarmakon a fluor-dezoxiglükóz bejut az élénk cukor-anyagcseréjű sejtekbe, így az agy, szívizom és a rosszindulatú daganatok szöveteibe, de a molekula felépítése miatt ott csapdába esik. Emiatt különösen jól jelöli a tüdő és emlő daganatokat, a melanoma malignum, Hodgkin-kór, colorectalis carcinomák és áttéteik előfordulását. Használható még a szívizom életképességének vagy dementiák eredetének megítélésében is. A PET olyan molekuláris biológiai folyamatok megjelenítését teszi lehetővé, amelyek nem invazív módon, más eljárással nem közelíthetők meg.
5	0.181818	1	Az előálló {NSW=RED, WA=GREEN, NT=RED, Q=GREEN} behelyettesítés is nyilván konzisztens, így rá lehetne térni a következtetésre, de ahogy már előbb láttuk, az AC3/MAC algoritmus ilyen esetekben, mikor 1-elemű értékkészlettel rendelkező változónak adunk értéket, olyankor nem tesz semmit. Tehát a keresés az újabb behelyettesítéssel újfent rekurzíve meghívja magát, és azon a szinten az SA változót választja, és annak is nyilván az egyetlen BLUE értékét (SA=BLUE).
4	0.125	0	Ez az általános háromszög egyenlőtlenség (triangle inequality) egy formája, amely azt fejezi ki, hogy egy háromszög egy oldala sem lehet hosszabb, mint a két másik oldal összege. Itt a háromszöget az n, az n′ és az n-hez legközebbi cél határozza meg. Könnyű megmutatni ( feladat), hogy minden konzisztens heurisztika egyben elfogadható is. Fontos A konzisztencia legfontosabb következménye az, hogy: a Gráf-Keresés-t használó A^* algoritmus optimális, ha h(n) konzisztens.  ábra - Az A* keresés lépései Bukarest keresése során. A csomópontok az f = g + h értékekkel vannak felcímkézve. A h-értékek a Bukaresttől légvonalban mért távolságokat jelölik, melyeket a  ábrából vettünk át. Az A* keresés lépései Bukarest keresése során. A csomópontok az f = g + h értékekkel vannak felcímkézve. A h-értékek a Bukaresttől légvonalban mért távolságokat jelölik, melyeket a  ábrából vettünk át.
27	0.4	1	Mikor ágenst szeretnénk tervezni, akkor célszerű ezzel az ágens-függvénnyel szemben is támasztanunk pár elvárást. Az egyik legfontosabb ilyen elvárás az, hogy az ágens-függvénynek megfelelő ágens legyen intelligens. Mindazonáltal az intelligenciának mind a mai napig nincs kellőképpen egzakt definíciója, így inkább a racionalitást szokás előtérbe helyezni. Az ágens tehát akkor jó, ha racionális, azaz mindig azt teszi, ami a legjobb, ami helyes.
5	0.181818	1	Láthatjuk, hogy az MRV heurisztika a WA, NT, Q, és V változókat javasolja (mivel ezeknek minimális számosságú az értékkészlete), és ezen a halmazon a DEG heurisztika sem tud most szűkíteni, mivel mindegyik változó fokszáma azonosan zérus. Tehát ezek szerint az említett változók közül a fix sorrend szerint haladva a WA változóra kerül a sor.
17	0.6	0	Ebben a fejezetben egy átfogó szemléletmódot vázolunk fel az ágensek megtervezésére részlegesen megfigyelhető, sztochasztikus környezetek esetén. A tervezés alapelemei már ismertek: * Az állapotátmenet- és megfigyelési modelleket egy dinamikus Bayes-hálóval (dynamic Bayesian network) ábrázoljuk (a  fejezetben leírtak szerint). * A dinamikus Bayes-háló kiegészült döntési és hasznossági csomópontokkal, amelyek megegyeznek a  fejezetben szereplő döntési hálókban használatosakkal. A kirajzolódó modellt dinamikus döntési hálónak vagy DDH-nak (dynamic decision network, DDN) nevezzük. * Egy szűrési algoritmust használunk az új érzékelések és cselekvések befogadására és a hiedelmi állapot reprezentációjának a frissítésére. * Döntéseket hozunk lehetséges cselekvéssorozatok elgondolásával és a legjobb kiválasztásával.
14	0.043478	0	A  fejezetben láttuk, hogy az együttes valószínűség-eloszlás függvény alapján minden kérdés megválaszolható a modellezett tárgytartománnyal kapcsolatban, de a változók számának növekedésével ez általában kivitelezhetetlenné válik. Továbbá az elemi események valószínűségének megadása is igen mesterkélt és nehéz is lehet, hacsak nem áll rendelkezésre nagy mennyiségű adat a valószínűségek statisztikai becsléséhez.
25	0.148148	1	A megvalósított manipulátorok esetében sokszor előfordul, hogy a szomszédos mozgástengelyek metszik egymást. Ilyenkor, az általános esethez hasonlóan, az x[i] egységvektor a z[i-1] és z[i] vektorokra egyaránt merőleges és a keresztszorzat segítségével számítható.
7	0.4	0	A jelölés azt jelenti, hogy ha bármikor adott egy α ⇒ β formájú mondat és adott egy α, akkor a β mondat ebből következik. Például a (WumpusElőrefelé ∧ WumpusÉl) ⇒ Lövés és a (WumpusElőrefelé ∧ WumpusÉl) adott, akkor a Lövés kikövetkeztethető.
3	0.041667	0	Mielőtt a részletekbe belemerülnénk, egy pillanatra álljunk meg és nézzük meg, hogy a problémamegoldó ágens hogyan illik bele a  fejezetben tárgyalt ágensek és környezetek sokaságába. A  ábrán látható ágenstervezet feltételezi, hogy a környezet statikus (static), mivel a probléma megfogalmazása és megoldása semmilyen változásról nem vesz tudomást, amely esetleg a környezetben beáll. Az ágenstervezet azt is feltételezi, hogy a kezdeti állapot ismert. Ennek ismerete akkor a legkönnyebb, amikor a környezet megfigyelhető (observable). Az „alternatív cselekvések számontartása” tulajdonképpen azt tételezi fel, hogy a környezet diszkrét (discrete). Végül a legfontosabb: az ágenstervezet azt is feltételezi, hogy a környezet determinisztikus (deterministic). A problémamegoldások egyedi cselekvéssorozatok, így a váratlan eseményeket nem is tudják figyelembe venni. A megoldások végrehajtása ráadásul az érzékelésről nem is vesz tudomást! Annak az ágensnek, amely mondhatni csukott szemmel hajtja végre a terveit, eléggé biztosnak kell lennie a dolgában (szabályozáselméletben az ilyen rendszereket nyílt hurkúnak – open-loop – hívják, mert az érzékelések figyelmen kívül hagyása az ágens és a környezete közötti hurkot felbontja). E feltételezések azt jelentik, hogy a környezetek lehető legegyszerűbbikével foglalkozunk, és ez egyben indokolja azt is, hogy e fejezet miért a könyv elején található. A  alfejezet rövid bepillantást ad abba, hogy mi történik, amikor a megfigyelhetőség és a determinizmus feltételezéséről lemondunk. Ezt a témát sokkal mélyebben a 12. és a  fejezet tárgyalja.
6	0.1	1	Vegyük észre, hogy a 2-es játékos hasznossága valóban függ a típusától egy-egy stratégia-kombináció esetén, viszont az 1-es játékos hasznossága nem függ a 2-es típusától, sem fordítva. A játékosok hasznossága egy-egy stratégia-kombináció esetén csak magától a kombinációtól és saját típusuktól függ. Ezt szemlélteti a következő két fólia.
17	0.533333	0	Példaként gondoljuk át újra a  ábra 4 × 3-as világát, de most tegyük fel, hogy az ágensnek egyáltalán nincsenek érzékelői, és elképzelése sincs arról, hogy hol lehet. Pontosabban, tegyük fel, hogy az ágens kezdeti állapota egyenlő valószínűséggel valamelyike a kilenc nem végállapotnak ( (a) ábra). Világos, hogz ha az ágens tudná, hogy (3, 3)-ban van, akkor Jobbra mozgást hajtana végre; ha tudná, hogy (1, 1)-ben van, akkor Fel mozogna; de mivel bárhol lehet, mit is kellene tennie? Egy lehetséges válasz, hogy az ágensnek először olyan cselekvéseket kell végrehajtani, amelyek csökkentik a bizonytalanságát, és csak ezután kell megpróbálni a +1 kijárat felé tartani. Például ha az ágens öt alkalommal Balra mozgást hajt végre, akkor igen valószínű, hogy a bal oldali falnál van ( (b) ábra). Ezután öt alkalommal Fel mozgást hajt végre, akkor igen valószínű, hogy a felső falnál van, valószínűleg a bal felső sarokban ( (c) ábra). Végül öt Jobbra mozgást hajt végre, ekkor jó eséllyel – körülbelül 77,5%-kal – eléri a +1 kijáratot ( (d) ábra). A Jobbra mozgás ezt követő folytatása az esélyét 81,8%-ra növeli. Ez az eljárásmód így meglepően biztonságos, de ebben az esetben az ágens igen lassan éri el a kijáratot, és a várható hasznossága csupán 0,08 körül van. Az optimális eljárásmód, amit hamarosan leírunk, sokkal jobban teljesít.
14	0.086957	1	Egy tipikus döntési helyzetben a választásnak több kimenetele lehetséges, amelyek a döntés hozó szempontjából különböző mértékben kívánatosak és bekövetkezési esélyeik is különbözők, azaz a választható alternatívák különböző esélyű és kivánatosságú kimenetelek kombinációja. Az alternativák közötti preferenciáknak ekkor "racionálisnak" kell lennie a döntési helyzetben jelenlevő bizonytalanság szempontjából is. Továbbá a preferenciák rendszerének racionálátásán túl, megkövetelhetjük, hogy ennek a racionalitásnak teljesülnie kell az alternatívák egy természetes kiterjesztésére is. Ezáltal a preferenciákra vonatkozó "racionalitás" axiomatizálható és az így adódó kvantitatív koherencia elveiből formálisan származtathatók a következők: a döntés hozó által a különböző kimenetelekhez rendelt bekövetkezési esélyeket egy valószínűségi eloszlásnak kell leírnia, a kimenetelekhez rendelt kivánatosságot egy hasznosság függvénynek kell leírnia és az optimális választás a maximális várható hasznosságú alternatíva. Ezek formalizálásához tekintsük a következő döntési helyzetet:
15	0.740741	0	A háromállapotú és hármashangzó modellek együttes hatása megnöveli az időbeli folyamat lehetséges állapotainak a számát az eredeti beszédhang készletbeli n beszédhangról 3n^3-ra (az ARPAbet-ben n ≈ 50). A tapasztalatok azt mutatják, hogy a megnövelt pontosság bőven ellensúlyozza a következtetés és a tanulás megnövekedett költségeit.
24	0.166667	0	A gerincesek szeme és a modern kamerák is lencséket használnak. A lencse a sötétkamra nyílásánál nagyobb, így több fényt enged át. Ennek az az ára, hogy egyidejűleg a jelenet minden részének az élességét nem lehet biztosítani. A jelenet egy Z távolságban lévő pontjának a képe a lencsétől egy rögzített Z' távolságban keletkezik, és a Z és a Z' között az:
1	0.068966	1	A viccek és a humor tehát több kutatás szerint is kognitív folyamatnak tekinthetők, és megértésükhöz is szükség van bizonyos kognitív fejlettségre és képességekre. Ezeknek a folyamatoknak a megértése sokat segíthet az agy felépítésének és működésének megismerésében, az agy megértése pedig fontos lépés ahhoz, hogy reprodukálni tudjuk a működését. A Mesterséges Intelligenciák létrehozásához az agy és a kognitív folyamatok megértése elengedhetetlen, az igazán hatékony programok elkészítéséhez ismerni kell, hogy az agyunk hogyan működik, illetve hogyan kerüli el azokat az általános hibákat, amikkel a mindennapi következtetések során találkozunk. Ezekre a hibákra a legtöbb példát a viccekben találjuk, ahol a humor pontosan az ilyen hibás következtetésekből származik. A viccek megértése és kutatása tehát egy fontos terület lehet, a kutatások azonban még nem elég szerteágazóak ahhoz, hogy látványos eredményekkel szolgáljanak.
6	0.1	1	1997. május 11-én megtörtént az, amire kevesen számítottak. Vagy legalábbis csak későbbre várták. Emberek által készített számítógép legyőzte a világ legjobb sakkjátékosát. Ez döntő mérföldkő volt a mesterséges intelligencia fejlesztések számára.
20	0.642857	0	A neurális hálók irányított kapcsolatokkal (link) összekötött csomópontokból vagy egységekből (unit) állnak. A j-edik egységtől az i-edik felé vezető kapcsolat hivatott az a[j] aktivációt j-től az i-ig terjeszteni. Minden egyes kapcsolat rendelkezik egy hozzá aszszociált W[j,i] numerikus súllyal (weight), ami meghatározza a kapcsolat erősségét és előjelét. Minden egyes i egység először a bemeneteinek egy súlyozott összegét számítja ki:
10	0.212121	1	A CTL (Computation Tree Logic) egy elágazó idejű temporális logika, széles körben használt formalizmus egyszerűsége és kifejezőereje miatt. A PLTL-hez hasonlóan a CTL kifejezései is atomi kijelentésekből, logikai operátorokból és temporális operátorokból állnak össze, azonban a CTL-ben értelmezett temporális operátorok a PLTL operátoraitól eltérnek, mivel az ottani operátorok (állapotkvantorok) kiegészülnek útvonalkvantorokkal. A CTL-ben használatos két útvonalkvantor a következő: * A: az adott állapotból kiindulva minden lehetséges útra (for all futures) * E: az adott állapotból kiindulva legalább egy útra (for some future)
5	0.090909	0	(A kényszert tömörebben is ki lehet fejezni a NyA ≠ ÉT egyenlőtlenséggel, feltéve persze, hogy a kényszermegoldó algoritmus valamiképpen ki tudja értékelni az ilyen kifejezéseket.) Sok lehetséges megoldás adódik, mint például az
3	0.25	1	Az alábbi ábra az 5 x 5 sakktáblán mutatja az N-királynő problémának a megoldását a tankönyvben említett tömörített állapottérreprezentáció mellett (oszloponként egy-egy királynőt helyezünk szabad helyre, balról jobbra haladva).
18	0.736842	1	Nézzünk meg egy konkrét esetet: 10 bemenetű logikai függvényeket tanítunk minták alapján, és azt szeretnénk, ha a tanítómintáinkkal konzisztens (ami az N esetben helyes választ ad, minden esetben az adott példa kimenetére meghatározott 0-át vagy 1-et) hipotézis a későbbiekben 1%-nál kisebb hibával működne. Ezt legalább 98% biztonsággal szeretnénk állítani. Ez számszerűen:
8	0.064516	1	A rendszer célja, hogy bármikor meghatározzon egy adott klinikai paraméter alapján egy értéket. A végén, ha a klinikai paraméter alapján nem talál értéket, az előre számított szabály alapján, akkor kérdést tesz fel a felhasználóhoz, hogy megszerezze a hiányzó értéket.
18	0.947368	0	Tegyük fel, hogy egy tanulási algoritmus konzisztens hipotézist keres, és az osztályozandó példákat véletlen módon generáljuk. A példákat egyenletes eloszlással választjuk az n Boole-attribútum alapján kialakított 2n példa lehetőségből. Számítsa ki, hány példa kell ahhoz, hogy egy ellentmondás felmerülésének a valószínűsége 0,5 legyen!
6	0.1	1	Az Alfa-béta keresés (még az iteratívan mélyülő verzója is) egy fát jár be. Ez a fa, azonban bizonyos helyeken ismétléseket tartalmazhat, hiszen akár különböző lépéssorokkal ugyanazt a végeredményt is elérhetjük. Ebben próbál segítséget nyújtani a transzpozíciós tábla [1], amely gyakorlatilag egy gyorsítótárként funkcionál a kereséshez. Ahelyett, hogy a részfát másodszor is feleslegesen bejárjuk, inkább ebből a táblázatból olvassuk ki az eredményt. Ezzel számottevő gyorsulást lehet elérni. Az iteratívan mélyülő megoldások esetén a tábla hatása még szembetűnőbb, hiszen ott újra és újra be kell járni az előző szinteket is. Ezeket ezzel a táblával lényegesen meggyorsíthatjuk.
7	0	0	A  alfejezetben az ágens általános tervezésével kezdünk. A  alfejezet egy egyszerű új környezetet, a wumpus világot mutatja be, amelyben illusztrálni fogjuk a tudásbázisú ágens működését a technikai részletek ismertetése nélkül. Ezután a  alfejezetben elmagyarázzuk a logika (logic) általános elveit. A könyv III. részében végig a logika lesz az elsődleges eszköz a tudás reprezentálására. A logikai ágensek tudása mindig határozott, minden kijelentés vagy igaz, vagy hamis a világban, habár az ágens lehet agnosztikus néhány kijelentéssel kapcsolatban.
5	0.181818	1	Egy-egy értékadást követően pedig következhet majd az AC3/MAC alapú következtetés pontosan úgy, ahogy az  szakasz -  Visszalépéses keresés élkonzisztencia ellenőrzéssel (AC3/MAC) láthattuk. Hangsúlyozni szeretnénk, hogy az előző kapcsolódó szakaszok, de főként az ott leírt módszerek (heurisztikák, következtetési eljárások) működésének ismerete véleményünk szerint elengedhetetlen ennek a szakasznak a maradéktalan megértéséhez, mivel a jelen anyag keretein messze túlmutatna, ha most itt újra az alapoktól kezdenénk magyarázni az előzőleg már bemutatott módszereket. Megkérnénk tehát a Tisztelt Olvasót, hogy amennyiben bizonytalan valamely jelen szakaszban felhasználásra kerülő módszert illetően, lapozzon vissza ahhoz a szakaszhoz, ahol az adott módszerrel tüzetesebben foglalkoztunk. Addig is álljon itt egy rövid emlékeztető/összefoglaló arról, hogy miképpen működnek a jelen szakaszban felhasználásra kerülő heurisztikák.
1	0.310345	0	A közgazdaságtan és az operációkutatás nagyban hozzájárult a racionális ágens felfogásunkhoz, mégis az MI-kutatás évekig egészen más pályán haladt. Az egyik ok a racionális döntéshozatal látszólag igen nagy komplexitása (complexity) volt. Herbert Simon (1916–2001), az MI-kutatás egyik úttörője azzal nyerte meg 1978-ban a közgazdasági Nobel-díjat, hogy egy korai munkájában kimutatta, a kielégítő döntéshozatalon (satisfying), azaz az „elegendően jó” döntéseken alapuló modellek a tényleges emberi viselkedés jobb leírói, mint azok, amelyek hosszadalmas számításokkal meghatározott optimális döntések eredményeképp születtek (Simon, 1947). Az 1990-es években az ágensrendszerek területén a döntéselméleti technikák iránt fokozott érdeklődés mutatkozott (Wellman, 1995).
8	0.516129	0	A halmazelmélet hagyományos szókincsét fogjuk használni szintaktikai édességként. Az üres halmaz egy konstans, amelynek a jele: { }. Definiálunk egy unáris predikátumot, a Halmaz-t, amely minden halmaz esetében igaz. A bináris predikátumok az x ∈ s (az x az s halmaz része) és az s[1] ⊆ s[2] (az s[1] halmaz egy részhalmaza, nem feltétlenül valódi részhalmaza az s[2]-nek). A bináris függvények az s[1 ]⋂ s[2] (két halmaz metszete), az s[1] ∪ s[2] (két halmaz uniója) és az {x∣s} (a halmaz az x elem s halmazhoz való csatlakozásának eredménye). Az axiómák egy lehetséges sorozata a következő: 1. Egy halmaz vagy az üres halmaz, vagy azok, amelyeket egy halmaz bővítésével hoztunk létre:
21	0.1875	1	Az előrefele következtetés a τ leállási idő számításával a következőképpen alakul: 1. Ki kell választani egy stratégiát, a stratégia ebben az esetben egyetlen gép működtetését jelenti. 2. Ki kell számítani egy τ leállási időt 3. A τ leállási időig követjük az 1. pontban választott stratégiát. τ után az 1. lépéssel folytatjuk.
6	0.1	1	Most pedig, miután belekóstoltunk a játékelmélet által érintett problémákba, próbáljuk meg formalizálni őket! Próbáljuk meg közös matematikai modellbe önteni az eddig látottakat. Ragadjuk meg a játék, játszma, játékosok, stratégiák, kifizetések fogalmát formálisan is! Ismerkedjünk meg a Játékelmélet matematikai alapjaival (egyelőre az iterált játékoktól eltekintve, csak úgynevezett statikus, normál formájú játékokkal kezdve).
9	0.689655	1	Minden asztal egyben bútor is. Következik belőle, hogy ha valami az asztalon van, akkor a bútoron is van. Írjuk le mindkét állítást elsőrendű logikával: Asztal(x), Rajtavan(y, x) és Bútor(x) predikátumokat felhasználva. A konklúziót tagadva lássuk be rezolúciós bizonyítással, hogy a konklúzió helyes.
3	0.458333	0	Az egyenletes költségű keresés nem foglalkozik azzal, hogy hány lépésből áll egy bizonyos út, hanem csak az összköltségükkel törődik. Emiatt mindig végtelen hurokba kerül, ha egy csomópont kifejtése zérus költségű cselekvéshez és ugyanahhoz az állapothoz való visszatérést eredményez (például a NoOp cselekvés). A teljességet csak úgy garantálhatjuk, hogy minden lépés költsége egy kis pozitív e konstansnál nagyobb, vagy azzal egyenlő. Ez a feltétel egyben az optimalitás elégséges feltétele is. Ez azt jelenti, hogy egy út költsége az út mentén mindig növekszik. Ebből a tulajdonságból látszik, hogy az algoritmus a csomópontokat mindig a növekvő útköltség függvényében fejti ki. Azaz az első kifejtésre kiválasztott célcsomópont egyben az optimális megoldás is (emlékezzünk arra, hogy a Fa-Keresés a célállapottesztet csak a kifejtésre megválasztott csomópontokra alkalmazza). Javasoljuk, hogy próbálják ki az algoritmust, hogy a Bukarestbe vezető legrövidebb utat megtalálják.
25	0.666667	0	Technikailag a reaktív irányítás csak egy implementációja az MDF-ek (illetve ha vannak belső állapotok, akkor POMDF-ek) stratégiáinak. A  fejezetben számos technikát ismertettünk, amelyek alkalmasak a robot modelljéből és a robot környezetének a modelljéből stratégiák generálására. A robotikában az ilyen stratégiák kézzel történő megszerkesztésének nagy gyakorlati jelentősége van, mivel képtelenek vagyunk tökéletes modelleket alkotni. A  fejezetben leírt megerősítéses tanulási módszerek segítségével tapasztalati úton lehet stratégiákat szerkeszteni. Néhány ezen módszerek közül – például a Q-tanulás és a stratégiakereső módszerek – nem igényel környezeti modellt, hanem a tanulás során összegyűjtött, nagy mennyiségű adatra támaszkodik. Így alkalmas jó minőségű szabályozók létrehozására robotok számára.
3	0.916667	1	Egy nagyon egyszerű példa: adott egy ajtó, mögötte a gardrób, ahol a létrát tartjuk. A feladat a létra kivétele a gardróbból. A kezdő állapotban a gardrób ajtaja csukva, a létra pedig bent van. Ebben az állapotban legális cselekvés, hogy kinyitjuk az ajtót. Ha az ajtó nyitva van, legális cselekvés az ajtót becsukni vagy a létrát kivenni. Tegyük fel, hogy az ajtót becsukjuk. Ekkor megint legális cselekvés az ajtót kinyitni. Stb., a cselekvés-sorozat a végtelenségig folytatható, ezáltal a keresési fa pedig végtelen nagy lesz.
4	0.708333	0	Vegyük észre azt is, hogy az ágens nem képes egy állapot követőit másképpen elérni, mint úgy, hogy az adott állapotban az összes cselekvését kipróbálja. A  ábrán látható labirintusproblémában az ágens nem tudja, hogy a Fel cselekvés (1,1)-ből elvezeti őt az (1,2)-be, valamint ennek végeztével, hogy a Le cselekvés visszaviszi őt az (1,1)-be. Bizonyos alkalmazásokban a tudatlanság ezen szintje mérsékelhető – egy felfedező robot ismerheti a mozgási cselekvéseinek mechanizmusát, és csak az akadályok hollétéről nincs tudomása.
1	0.413793	0	Az MI a számítógép-tudományok szoftveroldalának is adósa, hiszen ez szolgáltatja az operációs rendszereket, a programozási nyelveket és a korszerű programok írásához szükséges eszközöket (és a róluk szóló cikkeket). Ez azonban egy olyan terület, ahol az adósságot törlesztették is. Az MI-kutatásokban megjelent sok ötlet visszakerült a számítógépes tudományok „fő áramlatába”, beleértve az időosztásos (time-sharing) operációs rendszereket, az interaktív értelmezőket, a személyi számítógépeket ablakokkal és egérrel, a gyors fejlesztést lehetővé tevő fejlesztői környezeteket, a láncolt listás adatszerkezeteket, az automatikus tárolókezelést és az objektumorientált, szimbolikus, funkcionális és dinamikus programozás kulcsfontosságú fogalmait.
23	0.055556	0	ahol c[3 ]+ c[2 ]+ c[1] = 1. A c[i] paraméterek lehetnek rögzítettek vagy EM algoritmussal taníthatók. Az is lehetséges, hogy a c[i] értékeket az n-gram gyakoriságoktól függőnek választjuk, azaz nagyobb súlyt adunk azoknak a valószínűségi becslőknek, amelyeket nagyobb gyakoriságokból számítunk.
10	0.727273	0	A Classic nyelv (Borgida és társai, 1989) egy tipikus leíró logika. A  ábra mutatja a Classic leírások szintaxisát (az érthetőség kedvéért a nyelv kulcsszavait magyar fordításban adjuk meg – a ford.).^[102] Azt az állítást például, hogy az agglegények nőtlen, felnőtt férfiak, következőképpen írhatnánk le:
7	0.4	0	Ez az alfejezet végigveszi a következtetés standard mintáit, amelyek alkalmazhatók arra, hogy következmények láncolatait vezethessük le, amelyek elvezetnek a kívánt célhoz. Ezeket a következtetési mintákat következtetési szabályoknak (inference rules) hívjuk. A legjobban ismert szabály a Modus Ponens és a következőképpen írható le:
17	0.266667	0	A   egyenletet Bellman-egyenletnek (Bellman equation) nevezik Richard Bellman tiszteletére (Bellman, 1957). Az állapotok hasznosságai – mint a bekövetkező állapotsorozatok várható hasznossága a   egyenlet szerint – a Bellman-egyenletek egy rendszerének a megoldásai. Valójában ezek egyértelmű megoldások, ahogyan a következő két alfejezetben megmutatjuk.
3	0.375	1	* Miért van szükség kereső algoritmusokra a mesterséges intelligencia létrehozásához? * Tudnak-e heurisztikát alkalmazni a számítógépek? + Miért nehéz probléma eldönteni, hogy az egyes feladatok melyik probléma osztályba
14	0.565217	0	A w valószínűségi súly pótolja ki a különbséget a valódi és a kívánt mintavételi eloszlás között. Egy adott z-ből és e-ből álló x minta súlya az összes bizonyítékváltozó valószínűségének szorzata a szülei értékei mellett (amelyek közül néhány vagy akár az összes a Z[i]-k között lehet):
5	0.181818	1	Az előretekintés során tehát most az NT változóval szomszédos, momentán még nem behelyettesített változók értékkészletéből kell kivennünk azokat az értékeket, amelyek ellentmondanának az iménti NT=BLUE értékadásnak. Magyarán az SA és Q változók értékkészletéből kell eltávolítanunk a BLUE értéket, mindkét változó értékkészletét {GREEN}-re redukálva.
9	0.931034	0	A logikai programozásról és a Prologról számos könyvet írtak. A Logika a problémamegoldáshoz (Logic for Problem Solving) (Kowalski, 1979b) egy korai általános tanulmány a logikai programozásról. A Prologgal foglalkozó könyvek közé tartoznak Clocksin és Mellish (Clocksin és Mellish, 1994), Shoham (Shoham, 1994) és Bratko (Bratko, 2001) írásai. Marriott és Stuckey (Marriott és Stuckey, 1998) kitűnő leírását adják a CLP-nek. A 2000-ben történt megszűnéséig a Journal of Logic Programming volt a téma legfontosabb folyóirata; helyét mára átvette a Theory and Practice of Logic Programming. A logikai programozások konferenciái között a legjelentősebbek az International Conference on Logic Programming (ICLP) és az International Logic Programming Symposium (ILPS).
11	0.923077	0	A mesterséges intelligenciában a tervezés az állapottér-keresések vizsgálatából, tételbizonyításból, szabályozástechnikából, illetve a robotika, ütemezés és más területek gyakorlati szükségleteiből ered. Az első számottevő tervkészítő rendszer a Strips (Fikes and Nilsson, 1971), ezen hatások kölcsönhatását példázza. A Strips-et, az SRI-ben zajló Shakey robot projekt szoftverének tervkészítő komponenseként fejlesztették ki. Ennek teljes szabályozási struktúráját egy eszköz-cél analízist használó állapottér-kereső rendszer, a GPS, azaz az általános problémamegoldó (general problem solver) (Newell és Simon, 1961) mintájára készítették. A Strips a QA3 tételbizonyító rendszer egy verzióját (Green, 1969b) használta fel a cselekvések előfeltételeinek teljesítésére. Lifschitz a Strips precíz definícióit és elemzéseit adja meg (Lifschitz, 1986). Bylander bizonyította, hogy az egyszerű Strips tervkészítés PSPACE-teljes (Bylander, 1992). Fikes és Nilsson történelmi áttekintést adnak a Strips projektről, és feltárják ennek kapcsolatait az újabb tervkészítési törekvésekkel (Fikes és Nilsson, 1993).
12	0.904762	0	A fejezetben bemutatott feltételes tervkészítési megközelítés a Jimenez és Torras (Jimenez és Torras, 2000), valamint Hansen és Zilberstein (Hansen és Zilberstein, 2001) által kifejlesztett ciklikus és-vagy gráfok hatékony keresési algoritmusán alapul. Bertoli és társai (Bertoli és társai, 2001b) egy BDD-alapú megközelítést mutatnak be, ami ciklikus feltételes terveket készít. A C-Buridan rendszer (Draper és társai, 1994) egy folytonos tervkészítést végez valószínűségi kimenetelű cselekvésekre, melynek problémája a POMDP vezérlése során is felmerült (lásd  fejezet). Szoros kapcsolat van a feltételes tervkészítés és az automatizált programkészítés között. A  fejezet számos ilyen hivatkozást tartalmaz. A két területet egymástól függetlenül tárták fel, aminek oka az az óriási költségkülönbség, ami egy gépi utasítás végrehajtása, valamint robot- vagy manipulátorcselekvések végrehajtása között fennáll. Linden (Linden, 1991) a két terület közötti tudásmegosztást szorgalmazza.
6	0.25	0	Most a nem terminális állapotokkal foglalkozunk. Nézzük meg a  ábrán látható játékfában az X jelzésű csomópontot. Ebben az állapotban a C játékos dönti el, hogy mit csináljon. Egyik választása a 〈v[A] = 1, v[B] = 2, v[C] = 6〉, míg a másik a 〈v[A] = 4, v[B] = 2, v[C] = 3〉 vektorokkal rendelkező végállapothoz vezet. Mivel 6 több, mint 3, C-nek az első lépést kellene választania. Ez azt jelenti, hogy ha a játék az X csomópontot eléri, a következő lépés a 〈v[A] = 1, v[B] = 2, v[C] = 6〉 hasznosságú végállapothoz fog vezetni. X visszaadott értéke így ez a vektor. Általánosságban egy n csomópont visszaadott értéke annak a követőnek a hasznosságvektora, amely követőnek az n csomópontnál választó játékos szempontjából legnagyobb az értéke.  ábra - Három játékos (A, B, C) játékfája a három első fél lépés esetén. Minden csomópontot az összes játékos szemszegéből számított értékkel címkéztük meg. A legjobb lépést a gyökérnél jelöltük be. Három játékos (A, B, C) játékfája a három első fél lépés esetén. Minden csomópontot az összes játékos szemszegéből számított értékkel címkéztük meg. A legjobb lépést a gyökérnél jelöltük be.
2	0.421053	0	A  ábra ismerős környezetek tulajdonságait sorolja fel. Vegyük észre, hogy a válaszok nem mindig egyértelműek. Például a sakkot teljesen megfigyelhetőnek tüntettük fel; szigorúan véve ez hibás, mivel a rosálásra, menet közbeni ütésre és ismétléses döntetlenre vonatkozó egyes szabályok megkövetelik a játék menetével kapcsolatos adatok megjegyzését, amelyek a táblázat állapotának részeként nem figyelhetők meg. A megfigyelhetőség ezen kivételei persze csekélyek egy taxivezető, egy angol nyelvtanár vagy egy orvosi diagnosztikai rendszerhez képest.
25	0.222222	0	A  (b) ábra egy példát mutat be négyirányú távolságmérő szkennerre, két különböző pozíció esetén. A kettő közül az egyik sokkal nagyobb valószínűséggel adhatta a megfigyelés négy értékét. Összehasonlítva a pásztázó távolságméréses modellt a referenciapontos modellel látható, hogy az előbbinek az az előnye az utóbbival szemben, hogy nincs szükség egy referenciapont azonosítására mielőtt egy tartománypásztázás értelmezhető lenne. Sőt az is előfordulhat – ahogy a  (b) ábra esetében is –, hogy a robot egy jellegtelen fallal találkozik. Ugyanakkor, ha van egy tisztán látható, azonosítható referenciapont, akkor abból azonnal megkapható a pontos helyzet.
10	0.272727	0	Egy további technikai nehézséggel számolnunk kell. Az ilyen axiómákat felhasználó következtetési eljárásnak képesnek kell lennie az azonosság hiányát kimutatni.A legegyszerűbb eset a két konstans esete, például Ágens ≠ G[1]. Az elsőrendű logika általános szemantikája lehetővé teszi, hogy a különböző konstansok ugyanazt az objektumot jelentsék, a tudásbázisnak tartalmaznia kell tehát az ilyen eseteket kitiltó axiómát. Az egyedi elnevezések axiómája (unique names axiom) a konstansok azonossághiányát fejezi ki, a tudásbázisban létező minden konstanspárra. Ha a tételbizonyító rendszer az azonossághiányt feltételezi, ahelyett hogy explicit módon a tudásbázisban ez le lenne írva, az egyedi elnevezések feltételezésről (unique names assumption) beszélünk. Az azonossághiányát ki kell jelentenünk a cselekvésekre is: a Megy([1, 1], [1, 2]) cselekvés és a Megy([1, 2], [1, 1]), vagy a Megfog(G[1]) cselekvés nem ugyanaz. Először azt fogjuk mondani, hogy a cselekvések minden típusa különböző – semmilyen Megy cselekvés nem lehet egy Megfog cselekvés. A cselekvésnevek minden párjára:
6	0.1	1	A sakkprogramozás hosszú ideje kihívást jelent az emberiség számára [6]. Már a 18. században szenzációt jelentett Kempelen Farkas „A Török” nevű gépezete ( ábra), amely kitűnő eredménnyel győzte le kihívóit - sajnos később azonban kiderült, hogy a gép egy emberi játékost rejtett magában, így ez még nem a sakkprogramozás igazi kezdete volt.
6	0.1	1	A játékban két szín van, legyen ez most piros és kék. Mindkét játékos birtokolja a színéhez tartozó oldalakat. Mindkét játékos a saját színéből tehet le figurákat a táblára. A tábla alap esetben üres, tehát nincsenek rajta figurák.
14	0.73913	1	Azon változó értékek, amik nem a meghatározott intervallumba esnek, és így nem tagjai egyetlen fuzzy halmaznak sem, a fenti logika szerint nem vesznek részt a tanítás fázisában. Ez eltérés a Wang-Mendel módszerhez képest, mivel ott két darab végtelen nagy fuzzy halmaz segítségével ezeket az eseteket is kezelik.
3	0.916667	1	A probléma megfogalmazásának része a cél meghatározása is, azaz meg kell adnunk egy módszert annak eldöntésére, hogy egy adott állapot célállapot-e (célteszt). Ehhez először is tisztában kell lennünk azzal, mi is a cél.
4	0.916667	1	Tehát ennek az egyenlőtlenségnek kell teljesülnie ahhoz, hogy a megoldás garantáltan optimális legyen. Mivel E nemnegatív, ezért wE pontosan akkor lesz nemnegatív, ha 0 ≤ w. 2(1-w)g(n,n’) pedig pontosan akkor lesz nemnegatív, ha w ≤ 1, továbbá az útköltségekről feltesszük, hogy nem negatívak.
25	0.518519	0	Az utolsó példában, amennyiben a lyuk mélysége és szélessége bizonytalan, úgy ezeket újabb két szabadságfok formájában hozzávehetjük a konfigurációs térhez. Az nem lehetséges, hogy a robotot ezekbe az irányokba elmozdítsuk a konfigurációs térben, és a robot pozícióját sem tudjuk közvetlenül érzékelni. Azonban mindkét korlátozást figyelembe vehetjük, amikor ezt egy FMT-problémaként írjuk le, megfelelően specifikálva a vezérlés és az érzékelés bizonytalanságait. Ez egy összetett, négydimenziós tervezési problémához vezet, azonban azonos tervezési technikák alkalmazhatók. Megjegyezzük, hogy a  fejezetben ismertetett döntéselméleti módszerektől eltérően ez a fajta megközelítés a legrosszabb esetre vonatkozó terveket eredményezi ahelyett, hogy a terv várható minőségét maximalizálná. A legrosszabb esetre vonatkozó tervek döntéselméleti értelemben csak akkor optimálisak, ha a végrehajtás közbeni kudarc sokkal költségesebb, mint bármely más, a végrehajtás során felmerülő költség.
24	0.416667	0	Használjunk most matematikai jelölést a pozíció és az orientáció leírására. A jelenet egy P pontjának a pozícióját három szám jellemzi, a P pont (X, Y, Z) koordinátái a sötétkamra nyílásában elhelyezett origójú és az optikai tengellyel parallel Z tengelyű koordináta-rendszerben (lásd  ábra). Amivel rendelkezünk, az a kép egy pontjának (x, y) perspektivikus vetülete. Ez egyben a fénysugarat is definiálja a nyílás felől, amely mentén valahol elhelyezkedik a P pont. A P pont távolságát azonban nem ismerjük. Az „orientáció” fogalmát kétféle értelemben lehet használni: 1. Az objektum egészének az orientációja. Ezt egy háromdimenziós forgatási függvényben specifikálhatjuk, az objektum koordináta-rendszerét a kameráéhoz viszonyítva. 2. Az objektum felületének az orientációja a P pontban. Ez egy n normál vektorral adható meg, amely a felületre merőleges irányt határozza meg. A felület orientációját sokszor a lejtéssel (slant) és a dőléssel (tilt) fejezzük ki. A dőlés az n és a Z tengely által bezárt szög. A lejtés az X tengely és az n képsíkra vett vetülete által bezárt szög.
19	0.909091	0	A felfedező rendszerek egy másik csoportja a valós fizikai adatokkal való munkát célozza és új törvények felfedezését kísérli meg. A Dalton, a Glauber és a Stahl (Langley és társai, 1987) olyan szabályalapú rendszerek, amelyek fizikai rendszerekből származó adatokban kvantitatív összefüggéseket keresnek. Mindegyik rendszer képes volt egy tudomány történetéből jól ismert felfedezés újbóli meghozatalára. A probabilisztikus technikákon – különösképpen az új kategóriákat felfedező klaszterező algoritmusokon – alapuló felfedező rendszerekkel a  fejezetben foglalkozunk.
9	0.241379	0	A Kijelent és a Kérdez függvények, amelyek szerepe, hogy informálják és lekérdezzék a tudásbázist, két egyszerűbb függvényt, a Tárol és a Betölt függvényeket használják fel. A Tárol (s) eltárol egy s mondatot a tudásbázisban, míg a Betölt (q) visszaadja az összes egyesítést, amelyet a q lekérdezés felhasználásával lehet létesíteni a tudásbázis illeszthető mondataival. A probléma, amivel illusztráltuk az egyesítést – az összes olyan tény megtalálása, amely egyesíthető az Ismer(János, x)-szel – a Betölt egyik példája.
11	0.384615	0	Vizsgáljuk meg, hogyan származtathatunk relaxált tervkészítési problémákat. Mivel az előfeltételek és a következmények explicit megadásai rendelkezésre állnak, az eljárás ezeket a reprezentációkat módosítja. (Vessük össze ezt a megközelítést a keresési feladatokkal, ahol az állapotátmenet-függvény egy fekete doboz.) A legegyszerűbb ötlet, hogy lazítsuk a problémát úgy, hogy eltávolítjuk az összes előfeltételt a cselekvésekből. Ekkor minden cselekvés mindig alkalmazhatóvá válik, és minden literál elérhető egy lépésben (ha van alkalmazható cselekvés, egyébként a cél elérése lehetetlen). Úgy tűnhet, ez azt jelenti, hogy a célok konjunkciójához vezető lépésszám azonos a kielégítetlen célliterálok számával, de nem egészen; (1) lehet két cselekvés, melyek kölcsönösen törlik a másik által teljesített célliterált, (2) néhány cselekvés több célt is elérhet. Ha kombináljuk a relaxált problémát és a részcél függetlenségi feltételezést, mindkét problémát kiküszöböltnek vehetjük, és az előálló heurisztika pontosan a még kielégítetlen célok száma.
4	0.916667	0	A genetikus algoritmusokról és a genetikus programozásról az Evolutionary Computation és az IEEE Transactions on Evolutionary Computation folyóiratok írnak. Idevágó cikkeket még a Complex Systems, az Adaptive Behavior és az Artificial Life folyóiratokban is találunk. A legfontosabb konferenciák az International Conference on Genetic Algorithms és a Conference on Genetic Programming, amelyek a közelmúltban Genetic and Evolutionary Computational Conference néven fuzionáltak. A terület jó áttekintését adják Melanie Mitchell és David Fogel írásai (Mitchell, 1996; Fogel, 2000).
1	0.068966	1	Ennek ellenére nem bízhatunk meg teljesen ezekben a titkosítási rendszerekben. A fenti módszerrel szinte egy időben jelent meg olyan cikk, amely éppen a sejtautomatákon alapuló kriptográfiai rendszerek gyengeségét mutatja meg [CFB].
17	0.466667	0	Kis állapotterekre az eljárásmód-kiértékelés egzakt megoldómódszerekkel gyakran a leghatékonyabb megközelítés. Nagy állapotterekre az O(n^3) idő megengedhetetlen lehet. Szerencsére nem szükséges egzakt eljárásmód-kiértékelést végezni. Ehelyett elvégezhetünk bizonyos számú egyszerűsített értékiterációs lépést (egyszerűsített, mivel az eljárásmód rögzített), hogy a hasznosságok elfogadhatóan jó becsléséhez jussunk. Az egyszerűsített Bellman-frissítés ehhez a folyamathoz a következő
25	0.074074	1	1985-ben a londoni Imperial College kutatóorvosai használtak először egy Unimation Puma 200 robotot az idegsebészeti beavatkozásoknál (agybiopszia). Azóta az agysebészet és gerincsebészet területén is megnőtt az érdeklődés a robotizálás iránt, melynek következtében több rendszert is kifejlesztettek.
9	0.931034	0	A rezolúció kifejlesztése után az elsőrendű következtetéssel foglalkozó munkák különböző irányokban ágaztak el. Az MI-ben a rezolúciót a kérdés-válasz rendszerekre adoptálta Cordell Green és Bertram Raphael (Green és Raphael, 1968). Egy kevésbé formális megközelítést alkalmazott Carl Hewitt (Hewitt, 1969). Az ő Planner nyelve, habár sohasem valósították meg teljességében, előfutára volt a logikai programozásnak, és útmutatásokat tartalmazott az előrefelé és hátrafelé láncoláshoz, valamint a negáltak sikertelenségének vizsgálati módszeréhez. Az eredeti nyelv egy részét, a Micro-Planner-t (Sussman és Winograd, 1970) megvalósították és felhasználták az Shrdlu természetes nyelvek megértését segítő rendszerben (Winograd, 1972). A korai MI-alkalmazások jelentős erőfeszítést tettek olyan adatstruktúrák előállítására, amelyek lehetővé teszik tények hatékony előhívását. Ezeket a munkákat is bemutatják az MI-programozással kapcsolatos cikkek (Charniak és társai, 1987; Norvig, 1992; Forbus és de Kleer, 1993).
20	0.928571	1	Súlyozás hozzárendelése az asszociatív, és a döntési cellák közötti összekapcsolásokhoz, melyek a HEBB szabály miatt változva lehetővé teszik a tanulást, amely inkább (be) tanításnak nevezhető. Ugyanis a HEBB szabály szerint, ha két összekapcsolt neuron egyszerre aktíválódik, akkor a kapcsoltauk megerősítést nyer.
12	0.52381	0	Példaként térjünk vissza a  ábra dupla-Murphy porszívóvilágához. Ebben a világban egy tiszta cellára lépés néha bepiszkolja azt. De mi történik, ha az ágens ezt nem tudja vagy nem foglalkozik vele? Akkor egy nagyon egyszerű megoldással áll elő: [Balra]. Ha a terv végrehajtásánál érkezéskor nem történik piszkítás, akkor az ágens a cél elérését detektálja. Ellenkező esetben azonban, mivel az implicit Befejez lépés TisztaBal előfeltétele nem teljesül, az ágens új tervet készít: [Szív]. Ennek a tervnek a végrehajtása mindig sikeres.
13	0.318182	0	Az elemi esemény (atomic event) jelölés hasznos a valószínűség-elmélet alapjainak megértésében. Egy elemi esemény a világ – amely tekintetében az ágens bizonytalan – állapotának egy teljes leírását jelenti. Úgy is tekinthetjük, mint a világot alkotó összes változóhoz való konkrét érték hozzárendelését. Például, ha a világomat csak a Lyuk és a Fogfájás logikai változók alkotják, akkor pontosan négy különböző elemi esemény létezik; amelyek közül a Lyuk = hamis ∧ Fogfájás = igaz egy esemény.^[135]
11	0.576923	0	A tervkészítési gráfnak a nem cselekvést ugyanúgy kell reprezentálni, mint a cselekvéseket. Ez annyit tesz, hogy a szituációkalkulus keretaxiómáinak megfelelő működésre van szükség, ami alapján egy literál két állapon keresztül igaz maradhat, ha nincs ezt módosító cselekvés. Egy tervkészítési gráfban ezt megőrző cselekvésekkel (persistence actions) oldjuk meg. Minden pozitív és negatív C literálhoz egy megőrző cselekvést szúrunk be C előfeltétellel és C következménnyel. A  ábra az A[0] szinten egyetlen „valós” cselekvést az Eszik(Süti)-t tartalmazza, két megőrző cselekvéssel, amit kicsi négyzetek jelölnek.
16	0.695652	0	Most tételezzük fel, hogy két, kissé eltérő hosszúságú kanyargós földút közül választunk, és súlyosan sérült utasokat viszünk. Ekkor bár lehet, hogy U[1] és U[2] elég közel esnek egymáshoz, az  és  széles tartományon belül vehetnek fel értékeket. Jelentős esélye van annak, hogy a második út tiszta lesz, míg az első le lesz zárva, és ebben az esetben a hasznosságok különbsége nagyon nagy lesz. A TIÉ formula azt jelzi, hogy a műholdjelentéseket megéri kikérni. Ezt a helyzetet a  (b) ábra mutatja.  ábra - Három általános eset az információ értékére. Az (a) esetben A[1] majdnem teljes bizonyossággal jobb marad A[2]-höz képest, így az információ nem szükséges. A (b) esetben a választás nem egyértelmű, és az információ döntő fontosságú. A (c) esetben a választás bizonytalan, de igazából nem számít, így az információ is kevésbé értékes. Három általános eset az információ értékére. Az (a) esetben A1 majdnem teljes bizonyossággal jobb marad A2-höz képest, így az információ nem szükséges. A (b) esetben a választás nem egyértelmű, és az információ döntő fontosságú. A (c) esetben a választás bizonytalan, de igazából nem számít, így az információ is kevésbé értékes.
14	0.869565	1	1. Elsőként nézzük egy olyan példát, amelyben az ügyfél feltehetően nem fog kölcsönt kapni, hiszen a kockázati tényező igen magas lesz az alábbi bemenő adatokat figyelembe véve: A Matlab munkafelületén (Workspace) megadjuk a bemeneti paraméterek értékeit, mégpedig a következő módon: név=[0.1 változóérték]. (A 0.1 a szimulációban a paraméterérték beolvasását "időzíti" ).
6	0.9	1	Az első jelet még kilenc különböző helyre lehet letenni, a másodikat már csak nyolc helyre, stb. Ez összesen 9! = 362880. Ennél azonban lényegesen kevesebb a lehetséges játékok száma, ez az összegzés ugyanis külön játéknak számítja azokat az eseteket, amikor a játék már befejeződött, mikor még nem minden van kitöltve, ennél tehát lényegesen kevesebb lehetőség van.
6	0.1	1	A fentebb bevezetett modellekben, mint láttuk nem jelent meg az állapotok valószínűsége. Természetesen ennek a kiegészítésnek a bevezetésére is lehetőség van - a modellt a Bayes-i játékokhoz hasonlóan ebben az esetben is ki lehetne egészíteni. Mindazonáltal mi most nem ebbe az irányba folytatjuk utunkat, hanem inkább veszünk egy radikális fordulatot, és megvizsgáljuk, hogy mi lenne, ha megfordítanánk az eddigi megközelítés irányát: mi lenne, ha immár nem azt vizsgálnánk, hogy egy-egy játéknak mi a megoldása, hanem pont fordítva, azt vizsgálnánk, hogy egy-egy megoldáshoz milyen játék tartozik?
19	0.545455	1	A beágyazott módszerek esetében a releváns jegyhalmaz keresése az osztályozó építésének a része, emiatt mindenképpen tanuló algoritmus specifikus a megvalósításuk. Egy jelentős előnyük, hogy a jegyek közötti függéseket ugyanúgy képesek modellezni, mint a burkoló módszerek, ugyanakkor azoknál kisebb számítási komplexitásúak. Legismertebb képviselői a különféle szupport vektor gépek (SVM) [5].
5	0.181818	1	A jelen szakasznak megfelelően a KÖVETKEZTETÉS során most az előretekintést hajtjuk végre. Az előretekintés sorra végighalad az NSW-hez korlátok útján kapcsolódó még behelyettesítetlen változókon (Q, SA, és V), és lehetőség szerint kiveszi az értékkészletükből azokat az értékeket, melyek ellentmondanának az előbbi, NSW=RED értékadásnak. Mivel az NSW változót a szomszédos Q, SA, és V változóval csak nem-egyenlő korlátok kötik össze, ezért nyilván egyetlen érték lesz csak az említett 3 változó értékkészletében, amely ellentmondana az előbbi, NSW=RED értékadásnak: nyilván a RED. Tehát az előretekintés most, a következő lépésben ezt az értéket (esetleg csak ideiglenesen) kitörli az említett változók értékkészletéből.
5	0.181818	1	* Ötféle nemzetiség létezik: Angol, Spanyol, Norvég, Ukrán, és Japán * Ötféle színű ház létezik: Piros, Sárga, Kék, Zöld, és Elefántcsont * Ötféle háziállat van: Zebra, Kutya, Róka, Csigák, és Ló * Ötféle ital van: Tej, Kávé, Tea, Narancslé, és Víz * Ötféle cigarettamárka van: Kools, Chesterfields, Winston, LuckyStrike, és Parliaments
19	0.318182	0	A szakértőt figyelő orvostanhallgató esetében feltételezzük, hogy a hallgató előzetes tudása elegendő ahhoz, hogy a páciens D betegségét a tünetekből megállapítsa. Ez azonban nem elegendő annak indoklására, hogy az orvos miért éppen az M orvosságot írta fel. A hallgatónak egy másik szabályt kell javasolnia, azaz, hogy az M orvosság a D-vel szemben hatásos. Ezzel a szabállyal és a hallgató előzetes tudásával most már képes magyarázatot adni, hogy az orvos ebben a konkrét esetben miért az M gyógyszert írja fel. A példát általánosíthatjuk egy vonzatkényszer megadásával:
22	0.925926	1	A SpeechMagic 22 nyelven készült el, a világban több mint 6000 helyszínen alkalmazzák. Az alkalmazási területei: egészségügy, mely lehet radiológia, és általános orvosi továbbá jogi, biztosítási. A radiológiai informatikai rendszerek (RIS) 80%-ában az orvosok a SpeechMagic rendszert használják.
24	0.791667	1	Az agyműködés egyik legfontosabb szerepe, hogy megértsük a külvilág információit és ezekre megfelelő és adaptív viselkedéses válaszokat produkáljunk. A fizikai környezetből származó ingerek az érzékszervek receptoraiban fordítódnak át az idegrendszer elektrokémiai kódjába. Ez a szenzoros kódolás folyamata. Minden érzékszerv bizonyos típusú környezeti energiára reagál leginkább megfelelően. Az idegrendszerben az ingerületek neurális impulzusok, jellemzőikben rögzített akciós potenciálok formájában továbbítódnak az agyba. Ez azt jelenti, hogy a szenzoros kódolás kettős folyamat: részben anatómiai, részben idői jellegű: például az idegi információ kisülési aránya (gyors vagy lassú) tükrözi az inger eredeti intenzitását. Így a különböző ingerek eltérő akciós potenciálokba fordítódnak át, ami számszerűen alig megragadható variabilitást tesz lehetővé. Ily módon válik lehetségessé hogy, például pontosan, észleljük, hogy testünk melyik részét és hogyan (erősen, gyengéden) érintette meg valami és így tovább. 1. táblázat - Az érzékszervekben lezajló transzdukció típusai (Carlson)
11	0.769231	0	Kezdjük a nagyon egyszerű légi szállítási problémával. A kiinduló állapotban (0. időpont) a P[1] repülő az SFO repülőtéren van, míg a P[2 ]repülő a JFK-n. A cél, hogy a P[1] legyen a JFK, a P[2] pedig az SFO reptéren, azaz a repülőgépeknek helyet kell cserélniük. Először egymástól eltérő ítéletlogikai szimbólumokra van szükségünk az egyes időlépések kijelentéseihez. Az időpillanatok jelöléséhez felső indexeket használunk, mint a  fejezetben. Így a kiinduló állapot felírása az
25	0.407407	1	Ha az akadályokat poligonokkal közelítjük és az akadályok csúcsait pontoknak, az éleiket szakaszoknak tekintjük, akkor az általánosított Voronoi-diagram három elméleti alaptípusát különböztethetjük meg, amelyekből felépíthetjük majd a teljes pályát. * két pont által meghatározott GVD, * szakasz és pont által kijelölt GVD, * két csatlakozó szakasz által definiált GVD.
14	0.869565	1	Az eredmények kiértékelésére három különböző elven alapuló matematikai eljárást alkalmaztak az esettanulmány során.. 1. Lineáris (Fisher) diszkriminancia analízis: az analízis a Statgraphics programcsomag DISCRIM moduljával készült el. Két diszkrimináló faktort határozták meg a normál, dysplasiás és tumoros esetek elkülönítésére. 2. Fuzzy alapú szakértő rendszer: A diagnosztikai valószínűségi függvények meghatározására mindig az adott változó átlagát és standard deviációját vették figyelembe. A standard deviáció az átlagtól való eltérés mértékének a mérőszáma.
12	0.47619	0	Kimutatható, hogy a második és harmadik lehetőségek durván azonosak, de mi a harmadik tudás, az ítéletállítás lehetőséget használjuk, mert ez az érzékelés egy erősebb leírását adja, és mert már tudjuk, hogy hogyan írhatunk a zárt világ feltételezés (closed-world assumption) mellett Strips kifejezéseket. Fontos Mindkét esetben, minden ítéletszimbólum háromféleképpen jelenhet meg: lehet pozitív, negált vagy ismeretlen. Ezért így pontosan 3^n lehetséges hiedelmi állapot adható meg. A hiedelmi állapotok halmaza így a hatványhalmaza (az összes részhalmaz halmaza) a fizikai állapotoknak. Összesen 2^n fizikai állapot van, ezért 2^2^n hiedelmi állapot, ami sokkal több, mint 3^n, így a 2. és 3. választás eléggé korlátozottan alkalmas a hiedelmi állapotok leírására. Ez jelenleg használhatatlannak tűnik, hiszen bármely séma, ami képes minden lehetséges hiedelmi állapot reprezentálására, O(log[2](2^2^n)) = O(2^n) bitet igényel, hogy legrosszabb esetben mindegyiket leírhassa. A mi egyszerű sémánk csak O(n) bitet igényel a hiedelmi állapotok leírásához, mert a kifejezőképességet a tömörségre cseréltük. Nevezetesen, ha egy cselekvés megjelenik, amelynek az előfeltételei ismeretlenek, akkor az eredményként kapott hiedelmi állapot nem lesz pontosan reprezentálható, és a cselekvés kimenetele ismeretlen lesz.
14	0.826087	0	Voltak arra irányuló kísérletek, hogy a fuzzy logikát a valószínűség-számítás keretein belül értelmezzék. Az egyik elgondolás az, hogy az olyan kijelentéseket, mint „Nóri magas” úgy fogjuk fel, mint egy folytonos rejtett változó, Nóri valódi Magasság-ának diszkrét megfigyeléseit. A valószínűségi modell meghatározza a P(„Megfigyelő állítja, hogy Nóri magas”∣Magasság) valószínűséget, például az 14. szakasz - Bayes-hálók folytonos változókkal részben leírt probit eloszlás (probit distribution) felhasználásával. Ekkor az a posteriori eloszlás Nóri magassága felett a megszokott módon számolható ki, például ha a modell része egy hibrid Bayes-hálónak. Egy ilyen megközelítés természetesen nem igazságfüggvényen alapuló. Például a feltételes eloszlás
24	0.833333	1	A folt (blob) detektorok a kulcspont detektáló algoritmusok egy jelentős csoportja. Közös tulajdonságuk, hogy kiugró intenzitású pontokat, lokális szélsőértékeket keresnek. A terület némileg átfed a sarokpont detektálással, néhány ott alkalmazott szűrő kis módosítással foltokat is megtalál. A különbség, hogy ezek az algoritmusok képesek nagyobb, elmosottabb objektumok detektálására, amire a sarokpont detektorok általában nem, csak a kép megfelelő átméretezése után. A detektorok jellemzésénél fontosak a különböző – például a perspektivikus transzformációra való – invariáns tulajdonságok.
11	0.769231	0	kiinduló állapotot specifikáljuk. A célt magát egy megadott időlépéshez kell kapcsolni. Mivel nem tudjuk a priori, hogy hány lépésre van szükség a cél eléréséhez, megpróbálhatjuk feltételezni, hogy a cél igaz a kiinduló állapotban, T = 0 időpontban. Azaz a következőt állítjuk: Ott(P[1], JFK)^0 ∧ Ott(P[2], SFO)^0. Ha ez sikertelen, újra próbálkozunk T = 1-gyel, és így tovább, amíg a legkisebb megfelelő tervhosszt el nem érjük. T minden értékére a tudásbázis a 0. időponttól a T-ig tartó lépéseket fedő mondatokat fogja tartalmazni. Hogy biztosítsuk a leállást, egy önkényes T[max] felső korlátot kell állítanunk. Ezt az algoritmust mutatja a  ábra. Egy másik lehetséges megközelítést, mely elkerüli a többszörös megoldási kísérleteket, a  feladatban tárgyalunk.  ábra - A SATplan algoritmus. A tervkészítési feladatot egy konjunktív normál formájú mondatra fordítjuk le, amelyben minden cél egy megadott T időpillanatban teljesül, és T-ig minden lépésre tartalmazza az axiómákat. (A fordítás részleteit a szövegben írjuk le.) Ha a kielégíthetőségi algoritmus talál modellt, akkor a tervet a modellben az igaz értéket kapott ítéletlogikai szimbólumokhoz tartozó cselekvések kinyerésével kapjuk meg. Ha nem létezik modell, akkor a folyamatot ismételjük, a célt egy lépéssel későbbre mozgatva. A SATplan algoritmus. A tervkészítési feladatot egy konjunktív normál formájú mondatra fordítjuk le, amelyben minden cél egy megadott T időpillanatban teljesül, és T-ig minden lépésre tartalmazza az axiómákat. (A fordítás részleteit a szövegben írjuk le.) Ha a kielégíthetőségi algoritmus talál modellt, akkor a tervet a modellben az igaz értéket kapott ítéletlogikai szimbólumokhoz tartozó cselekvések kinyerésével kapjuk meg. Ha nem létezik modell, akkor a folyamatot ismételjük, a célt egy lépéssel későbbre mozgatva.
6	0.1	1	Ha adott egy extenzív alakú játékunk, például a fentebbi 1-lapos póker, akkor végső soron enumerálhatjuk benne minden játékos minden tiszta stratégiáját. Például az 1-lapos póker esetén az 1-es játékosnak a következő stratégiái vannak:
27	0.4	1	Jelölje továbbá Környezet a környezetek egy osztályát (Környezet-ek egy halmazát). Ekkor V(Program, Architektúra, Környezet) az adott Környezet osztályban lévő Környezet-ekben, adott Architektúrá-n futtatott Program várható hasznosságainak várható értékét jelöli (valószínűségi értelemben, természetesen, minthogy feltesszük, hogy a Környezet osztályban lévő Környezet-eknek rendre megvan a maguk valószínűsége). Magyarán V(Program, Architektúra, Környezet) azt jelöli, hogy a Környezet osztályban mi az adott Architektúrá-n futtatott Program várható haszna. A Környezet osztálynak egy és csakis egy eleme lehet igaz (a környezet egyszerre csak egyféle lehet), ámde legtöbbször nem tudjuk egyértelműen megmondani, hogy aktuálisan, egészen pontosan milyen-melyik is ez, és így több különböző környezetet is lehetségesnek tarthatunk különböző valószínűségekkel (a lehetséges világokhoz hasonlóan).
3	0.208333	0	Az első vizsgált példa a  fejezetben bevezetett porszívóvilág (vacuum world) (lásd  ábra). Ezt problémaként az alábbi módon definiálhatjuk: * Állapotok: az ágens két hely egyikében lehet. Mindegyik lehet piszkos, de lehet tiszta is. Így 2 × 2^2 = 8 lehetséges állapotról beszélhetünk. * Kezdeti állapot: akármelyik állapot lehet kezdeti állapot. * Állapotátmenet-függvény: a három (Balra, Jobbra, Szív) cselekvés alkalmazásából adódó legális állapotokat generálja. A teljes állapottér a  ábrán látható. * Célteszt: ellenőrzi, hogy minden négyzet tiszta-e. * Útköltség: minden lépés költsége 1, így az út költsége megegyezik az út lépéseinek a számával.
6	0.15	0	Adott játékfa mellett az optimális stratégia meghatározásához az egyes csomópontok minimax értékét kell megvizsgálni, amit Minimax-Érték (n)-ként írunk le. Egy csomópont minimax értéke a csomópont hasznossága max szemszögéből, feltéve, hogy innen kezdve egészen a játék befejezéséig mindkét játékos optimálisan lép. Egy végállapot minimax értéke természetesen a saját hasznossága. Továbbá, adott minimax értékek mellett, max szeretne a maximális értékű, min pedig a minimális értékű állapotba jutni. Rendelkezünk tehát az alábbi függvénnyel:
19	0.681818	0	Vegyük észre, hogy egy attribútumalapú tanuló algoritmus, mint például a Döntési-Fa-Tanulás sehogy sem fog ezzel a problémával boldogulni. Ahhoz, hogy a Nagyszülője-t attribútumként (azaz egy unáris predikátumként) fejezzük ki, az embereket párosával objektumként kell tudnunk kezelni:
14	0.869565	1	Meg kell tehát adnunk, hogy az ügyfél fiatal, középkorú, vagy idős-e (Eletkor). Házas-e (1) vagy sem (0) (Hazas). Valamint, hogy van e gyereke (0), és ha igen mennyi (Gyerekek). Egy (1) vagy több (>2)? Mindezek függvényében megkapjuk az ügyfél személyiségi jellemzőjét.
11	0.076923	0	Most hogy a tervkészítők reprezentációjának szintaxisát definiáltuk, adjuk meg a szemantikát is. Ennek legegyszerűbb módja, ha leírjuk, hogy a cselekvések hogyan módosítják az állapotot. (Egy másik lehetséges módszer, hogy egy direkt fordítást specifikálunk a következő állapot axiómákra, melyek szemantikája az elsőrendű logikából származik. Lásd  feladat.) Először is azt mondjuk, hogy egy cselekvés alkalmazható (applicable) minden állapotban, ami kielégíti az előfeltételeket; egyébként a cselekvés hatástalan. Egy elsőrendű séma esetében az alkalmazhatóság elérése az előfeltételek egy θ behelyettesítését vonja maga után. Tegyük fel például, hogy a jelen állapot leírása:
14	0.73913	0	Számos kísérlet történt olyan bizonytalansági következtetések kifejlesztésére, ahol ezek az előnyös tulajdonságok megmaradnak. Az elképzelés szerint a bizonyosság mértékét hozzárendeljük állításokhoz és szabályokhoz, és kifejlesztünk tisztán lokális sémákat a bizonyosságmértékek kombinálására és terjesztésére. A sémák egyben igazságfüggvények, például az A ∨ B bizonyosságmértéke, az A- és B-beli bizonyosságok függvénye. Fontos A rossz hír a szabályalapú rendszerek számára, hogy a lokalitás, a leválasztás és az igazságfüggvény egyszerűen nem alkalmas a bizonytalansági következtetés számára. Vizsgáljuk először az igazságfüggvényt. Legyen F[1] az az esemény, hogy fejet kapunk egy szabályos érme feldobásakor, legyen I[1] az az esemény, hogy ugyanekkor írást kapunk, és legyen F[2] az az esemény, hogy fejet kapunk egy szabályos érme második feldobásakor. Világos, hogy mindhárom esemény valószínűsége 0,5, és egy igazságtartó rendszernek ugyanazt az értéket kell hozzárendelnie bármely kettő konjunkciójához. De láthatjuk, hogy a konjunkció valószínűsége függ maguktól az eseményektől is, nem csak a valószínűségektől.
2	0.894737	1	Ilyenkor elő fognak fordulni olyan esetek, amikor a porszívó a hibás érzékelés miatt koszt csinál, ahelyett, hogy takarítana. Nem jelent megoldást erre a problémára az sem, ha takarítás után ellenőrizzük az eredményt, hiszen ekkor is lehet téves az érzékelés. Jó módszer lehet, ha az ágens az esetek 90%-ában feltételezi, hogy sikeres volt az érzékelés, és 10% eséllyel újra érzékel.
18	0.947368	0	Vizsgálja meg a beszélni, illetve egy nyelvet megérteni tanuló gyerek problémáját! Magyarázza meg, hogy ez a folyamat hogyan illeszkedik az általános tanulási modellhez, és megfelelően azonosítsa a modell egyes komponenseit!
10	0.515152	0	Az ágensek és a „mentális objektumok” közötti olyan kapcsolatokkal kezdünk, mint a Hiszi, a Tudja és az Akarja. Az ilyen relációkat ítéletlogikai attitűdöknek (propositional attitudes) nevezzük, mert egy ágens attitűdjét írják le egy ítéletlogikai állítással szemben. Tegyük fel, hogy Lujza hisz valamit, azaz Hiszi(Lujza, x). Vajon milyenfajta dolog az x? Először is világos, hogy x logikai állítás nem lehet. Ha Repül(Superman) egy logikai állítás, akkor nem mondhatjuk azt, hogy Hiszi(Lujza, Repül(Superman)), mert predikátumok argumentumaként csak termeket (és nem állításokat) fogadunk el. Ha azonban a Repül egy függvény, akkor a Repül(Superman) már jó jelölt egy mentális objektumra, és a Hiszi lehet az a reláció, amely egy ágenst összekapcsol ezzel az ítélet jellegű folyó eseménnyel. Egy állítás átalakítása objektummá nem más, mint reifikálás^[99] (reification).
25	0.592593	0	Első ránézésre egyszerűnek tűnik az a feladat, hogy adott pályán tartsuk a robotot. A gyakorlatban azonban még ennek a látszólag könnyű feladatnak is vannak buktatói. A  (a) ábrán láthatjuk, hogy mik adódhatnak. A fekete vonal a robot által befutott út, ahogy próbálja a kinematikai pályát követni. Ha eltérés keletkezik – zaj vagy a robot mozgása során fellépő erőkre vonatkozó korlátozások miatt –, a robot ellenkező irányú, az eltéréssel arányos nagyságú erővel igyekszik azt kompenzálni. Elsőre ez a megoldás kézenfekvőnek tűnik, mivel az eltéréseket ellenerőkkel kompenzáljuk, így a robot a pályán marad. Ugyanakkor mindez azt eredményezi, hogy robotunk erőteljesen vibrálni kezd, ahogy az a  (a) ábrán is látszik. Ez a vibráció a robotkar természetes tehetetlenségéből következik: amikor a robot visszaér a referenciapálya adott pontjára, túllendül, ami a korábbihoz hasonló, de ellentétes előjelű hibát eredményez. Ahogy az ábrán is látható, ez a fajta túllendülés akár az egész trajektória mentén folytatódhat, és az eredményül kapott mozgás nem éppen ideális. Világos, hogy jobb szabályozásra van szükség.
5	0.181818	1	Mivel tehát a következtetés/előretekintés során nem jött létre üres értékkészlet, ezért újabb, még be nem helyettesített változót kell választanunk. Tegyük fel, hogy az algoritmus az eddigi sorrendnek megfelelően a Q-t választja, és ennek az első lehetséges értéket adja, a GREEN-t.
14	0.434783	0	Szoros kapcsolat áll fenn a Bayes-hálókban történő következtetés komplexitása és a kényszerkielégítési problémák (CSP) komplexitása között. Amint az  fejezetben tárgyaltuk, egy diszkrét CSP megoldásának nehézsége ahhoz kapcsolódik, hogy a kényszergráf mennyire „faszerű”. Olyan mértékek, mint a hiperfaszélesség (hypertree width), amelyek a CSP megoldási komplexitását határolják, közvetlenül alkalmazhatók Bayes-hálóknál is. Ezenfelül a változó eliminálás algoritmusa általánosítható úgy, hogy kényszerkielégítési problémákat is és Bayes-hálókat is megoldjon.
1	0.827586	0	Valószínűleg az MI részproblémáiban elért sikereken felbátorodva a kutatók elővették a „teljes ágens” problémakörét. A teljes ágensarchitektúra legismertebb esete a Soar, Allen Newell, John Laird és Paul Rosenbloom munkája (Newell, 1990; Laird és társai, 1987). Az ún. beágyazott mozgalom célul tűzte ki a valós környezetbe ágyazott, folytonos szenzorikus adatokat fogadó ágensek működésének a megértését. Az intelligens ágensek szempontjából az egyik legfontosabb környezet az internet. A világhálós alkalmazásokban az MI-rendszerek annyira mindennaposak lettek, hogy a „-bot” szóvégződés már a mindennapi nyelvbe is beépült. Ráadásul az MI-technológiák sok olyan internetes eszköznek képezik az alapját, amilyenek a keresőgépek, az ajánló rendszerek és a weboldalszerkesztő rendszerek.
22	0.851852	0	A nyelvtan indukciós (grammar induction) tanulása annak feladata, hogy adatokból nyelvtant tanuljunk. Nyilvánvaló, hogy meg kell kísérelni, hiszen bebizonyosodott, hogy nagyon nehéz egy nyelvtant kézzel elkészíteni, és az interneten mintaként használható kijelentések milliárdjai állnak ingyenesen rendelkezésre. Ez egy nehéz feladat, mivel a lehetséges nyelvtanok tere végtelen, és azért is, mivel annak ellenőrzése, hogy egy adott nyelvtan generálja-e a mondatok egy adott halmazát, számításigényes feladat.
14	0.869565	1	A cél: Többszintű Mamdani típusú fuzzy szabályzón alapuló következtetési rendszer felépítése és annak beillesztése Matlab Simulink környezetbe. A rendszer jól használható kockázatkezelő rendszerekben a kockázati szint számítására.
3	0.916667	1	Pozitív költségek esetén egy algoritmus biztosan megmondhatja egy útról, hogy rontaná a végeredményt, amennyiben annak költsége eleve nagyobb, mint az eddigi legrövidebb megoldási út költsége, így az abból a csúcsból elérhető állapotokat már nem kell figyelembe venni. Ha lehetségesek negatív élek, akkor ez már nem igaz. Előfordulhat ugyanis, hogy egy költséges él után kellően nagy negatív élek következnek, amelyek olcsóbbá teszik azt az utat. Emiatt szükségessé válik a teljes állapottér felderítése.
22	0.074074	1	A neurális hálók egy jól ismert tulajdonsága, hogy hatékonyan képesek megoldani a bemenetek kategorizálásának feladatát. Ebből következően egy kézenfekvő alkalmazásuk a természetes nyelvű szövegbeli szavak kategorizálása, vagyis például nyelvtani rendeltetésük vagy szófajuk meghatározása. („part-of-speech tagging”) Ezt természetesen nagy mennyiségű tanító bemeneti szöveg alapján tudják megtenni, tehát jelen esetben korpusz alapú, empirikus megközelítésű felhasználásról beszélhetünk. Ezzel a módszerrel már a '90-es évek közepén igen jó, 96-97%-os eredményeket sikerült elérni. [9] Természetesen a neurális hálók számos más feladat megoldására is alkalmasak. Tulajdonképpen minden olyan feladatra, ahol nagy mennyiségű szöveg elemzése során trendeket figyelhetünk meg, és azokat fel tudjuk használni. [1]
23	0.722222	0	Bármely elfogadható valószínűségi értékhalmaz esetén a „the dog”^[264] lenne a „le chien” maximum-likelihood becslője. A legtöbb esetben azonban a modell megbukik. Az egyik probléma a szórend. Franciában a „dog” megfelelője a „chien”, a „brown”-é a „brun”, azonban a „brown dog”-é a „chien brun”.^[265] A másik probléma az, hogy a szóválasztás nem egy az egyes leképezés. Az angol „home” szót gyakran „à la maison”-nak^[266] fordítják, ami egy hármas leképezés (illetve három az egybe a másik irányban). Ezen problémák ellenére az IBM Model 3 makacsul ragaszkodik az alap unigram modellhez, bár, hogy javítson rajta, hozzátesz néhány kiegészítést.
9	0.448276	1	Például, ha azt állítjuk, hogy minden villamos sárga, és azt, hogy a BKV 4-es járata az villamos, akkor ebből következik, hogy a BKV 4-es járata az sárga. A fenti példában láthatjuk is a rendszer hibáit: Írhatunk olyan tételt (axiómát), ami valójában nem igaz. Hisz léteznek szürke, kék, piros villamosok, sőt a 4-es járat akár lehetne metró is.
1	0.137931	1	Miután meghatároztuk az objektumokat, már csak az osztályokat megkülönböztető szabályt kell megtalálni. Erre Hofstadter kidolgozott egy módszert, amit a következőkben ismertetek [2] alapján. Alkossunk egy sémát, ami egy osztály minden tagján értelmezhető, például soroljuk fel az összes előforduló objektum típust. Ezt a sémát töltsük ki adatokkal minden kép alapján, vagyis gyűjtsük össze az adott objektum típusból megjelenő példányok számát, méretét, színét, helyzetét, stb. Ezután keressünk hasonlóságokat a leírások között, amik alapján a sémákat tovább bonthatjuk alsémákra.  ábra - BP 49: belső pontok egymáshoz közel, külsők távol BP 49: belső pontok egymáshoz közel, külsők távol
12	0.428571	0	A feltételes tervektől elvárjuk, hogy működjenek, függetlenül attól, hogy valójában a cselekvés mely kimenetele következik be. Ezzel a problémával egy másik köntösbe bújtatva már találkoztunk korábban. A kétszemélyes játékokban (lásd  fejezet) olyan lépéseket szeretnénk, amelyek az ellenfél lépéseitől függetlenül győzelemhez vezetnek. A nemdeterminisztikus tervkészítési problémákat ezért gyakran természet elleni játékoknak (games against nature) nevezik.
6	0.1	1	Ez az elmélet magába a programba is be van építve (egy kis változtatással), vagyis első megközelítésben tételezzük fel, hogy a CHINOOK az emberekhez hasonlóan rendelkezik egy megnyitási (opening book), egy taktikai (tactics table) és egy végjáték adatbázissal (endgame database) [6][7][9].
20	0.857143	0	A következő ábra összegzi a tárgyalt hét eljárás esetén a hibaarányt, a futási időt, a memóriaigényt és a szükséges tanítási időt. Még egy mértéket ad ezekhez, a számjegyek azon arányát, amelyet vissza kell utasítanunk, hogy a 0,5% hibaarányt elérjük. Ha például egy SVM-nek megengedjük, hogy bemeneti képeinek 1,8%-át visszautasítsa – azaz átpasszolhatja valakinek, hogy az hozza meg a végső döntést –, akkor a képek többi 98,2%-án a hibaarány 1,1%-ról 0,5%-ra csökken.
1	0.448276	1	A telehealth elnevezés ettől tágabb fogalomkört ír le. Általában az információs és kommunikációs technológiák alkalmazását jelenti az egészségügyben, nemcsak a gyógyító tevékenység, hanem általában a működés, így a gazdálkodás, adatszolgáltatás, során is.
14	0.782609	1	A fenti táblázat mutatja, hogy egy beteg állapotára nagyon jól következtethetünk abból, ha megfigyelés alatt tartjuk, hogy ki hányszor volt orvosnál, milyen a súlyossági kategóriák szerint beosztott hatóanyagot szed, mekkora adagban, és van-e diagnosztizált szervi elváltozása, vagy valamilyen állapottal járó kategóriába beletartozik e, vagy sem. Az ábra szerint feltételeztük, hogy xy2 és xy3 páciensek nem szednek gyógyszert, de van diagnosztizált elváltozásuk.
27	0.4	1	Most pedig térjünk rá az ágensek felépítésére! Tekintsük az ágenst egy olyan, belső állapottal rendelkező rendszernek, mely egy architektúra és egy program együttese. Az architektúra felelős a környezet és a program közti kapcsolat biztosításáért, továbbá a program futtatásáért. Például egy intelligens porszívó architektúrája a robot hardvere, míg programja a hardveren futó szoftver.
2	0.368421	1	A szervezetben, szövetekben, sejtekben az ionizáló sugárzások biológiai hatását váltanak ki. A hatás mértéke függ a különböző sugárzások minőségétől is. Csak az elnyelődő fotonok, illetve elemi részecskék váltanak ki biológiai reakciót. A testszövetekben viszonylag kevésbé elnyelődő rendkívül nagy energiájú és áthatolóképességű és ezért kemény sugárzások kevésbé hatásosak, mint a nagyszámú iont létrehozó és rövid úthosszon elnyelődő részecske sugárzások.
5	0.181818	1	Az előző szakaszban bemutatott algoritmus volt az eddigi leggyorsabb módszer az  ábrán szereplő KKP megoldására, viszont még ezen is lehet még tovább gyorsítani. Az ötlet lényege: nem feltétlen szükséges garantálnunk, hogy amennyiben van megoldás, úgy azt véges sok lépésben meg is találjuk. Az eddigi keresések ugyanis teljesek voltak abban az értelemben, hogy garantálták, hogy amennyiben van megoldás, úgy azt véges sok (a keresési tér méretével arányos) lépésben megtalálják, és ezért akár az egész keresési teret is bejárták, ha szükséges, azaz globálisak voltak.
18	0.684211	0	Kiderült, hogy kulcskérdés a hipotézistér mérete. Mint korábban láttuk, ha H az n attribútumon felvehető Boole-függvények halmaza, akkor  . Tehát a tér minta komplexitása 2^n szerint nő. Mivel a lehetséges példák száma szintén 2^n, ebből az következik, hogy a Boole-függvények terében egyetlen tanuló algoritmus sem tud jobb eredményt elérni, mint egy táblázat, ha csupán arra szorítkozik, hogy egy olyan hipotézist adjon vissza, amely az összes ismert példával konzisztens. Ennek megmutatására egy másik lehetőség az, hogy megfigyeljük: egy tetszőleges ismeretlen példára a hipotézistér ugyannyi pozitív kimenetelt jósoló konzisztens hipotézist tartalmaz, mint amennyi negatív kimenetelt jósol.
3	0.958333	0	Bizonyítsa be, hogy az egyenletes költségű keresés és a szélességi keresés konstans lépésköltség mellett optimálisak, ha azokat a Gráf-Keresés algoritmusával együtt alkalmazzuk. Mutasson egy olyan állapotteret változó lépésköltséggel, ahol a Gráf-Keresés algoritmus, iteratív mélyülést használva, csak egy szuboptimális megoldást talál.
9	0.448276	1	A Prologot elkezdték terjeszteni. A Prolog eljutott a világ sok részébe, többek között Budapestre, Varsóba, Torontóba, Kanadába, Belgiumba, Párizsba. Innentől kezdve nem volt megállás, ahogy mondani szokták:
20	0.964286	0	Vegyen egy tetszőleges Bayes-hálót, egy ehhez a hálóhoz tartozó teljes adathalmazt és az adathalmaznak a háló által megadott likelihood-értékét. Adjon egyszerű bizonyítást arra, hogy az adathalmaz likelihood-értéke nem csökkenhet, ha a hálóhoz hozzáadunk egy új kapcsolatot, majd újraszámoljuk a maximum-likelihood paramétereket.
9	0.482759	0	A Prolog tervezésénél meghozott döntések kompromisszumot jelentenek a deklarativitás és a végrehajtási hatékonyság között – mármint amit hatékonyságon értettünk a Prolog tervezésének idején. Visszatérünk majd ehhez a témához, miután megvizsgáltuk, hogyan valósítják meg a Prologot.
3	0.625	0	A kétirányú keresés szempontjából a legnehezebb eset, amikor a célállapottesztnél a feltehetően nagy célállapothalmazról csak implicit leírás áll rendelkezésünkre, például a sakkban az összes állapot, ami kielégíti a „matt” célt. A hátrafelé keresésnek az „m[1] cselekvés révén a »matt« állapotba vezető összes állapot” tömör leírását kellene tudnia megkonstruálni, és hasonló módon folytatni. E leírásokat az előrefelé haladó keresés által generált állapotokkal kellene tesztelni. Ennek nincs általánosan hatékony módja.
6	0.1	1	A domináns egyensúly erősebb fogalom, mint a Nash-egyensúly, azonban sajnos nem mindig létezik. Nem minden esetben van minden játékosnak domináns stratégiája (lásd. később pl. a Forintpárosítás játékot). Amennyiben nincs domináns egyensúly, a Nash-egyensúly az utána következő, leginkább ésszerű, ismert megoldási elv. Egy s* stratégiakombináció egyensúly, ha minden játékos esetén az általa előírt si* stratégiától egyik másik stratégiára sem éri meg áttérni (azaz az i játékos nem kap nagyobb hasznot, ha áttér). Vegyük figyelembe, hogy itt feltételezzük, hogy a többi játékos is s* kombináció szerint játszik. A domináns egyensúly esetében ezzel nem foglalkoztunk. Ott azt feltételeztük, bármilyen stratégia szerint játszhat a többi játékos. A Nash-egyensúly viszont nem egy ilyen értelemben vett egyváltozós maximum, hanem inkább egy fix-pont. Egy önbeteljesítő jóslat, önhivatkozó fogalom, önmagát igazoló. Ha viszont már többen is eltérnének tőle (pl. kooperáció folytán, vagy pusztán csak irracionalitásból, esetleg a Nash-egyensúlyok multiplicitása miatt, más egyensúly szerint játszva), úgy már egyáltalán nem biztos, hogy a fenti feltétel teljesül. Mindenképp szükséges, hogy a játékosokra különálló módon teljesüljön, hogy ne érje meg eltérniük az egyensúlyi stratégiától (amit az egyensúlyi stratégia-kombináció előír számukra) HA a többiek is az egyensúly szerint cselekszenek.
2	0.894737	1	Most tekintsünk el a korábbi megszorításoktól, és tervezzünk olyan robotot, amely más hasonló robotokkal alkot egy csapatot. Ekkor nem szükséges például, hogy a kommunikációhoz az élő szóra hagyatkozzunk, megoldhatjuk rádióval is, sokkal gyorsabban! Igyekezzünk továbbra is emberszerű architektúrát kiépíteni, hogy a futball szabályai (pl. a labdát csak rúgni szabad, megfogni nem) alkalmazhatók maradjanak.
5	0.181818	1	Az egyértelmű értékadás következtében kapott {NSW=RED, WA=GREEN, NT=RED, Q=GREEN, SA=BLUE} behelyettesítés is konzisztens, így jöhet a következtetés, ami az egyértelmű értékadás miatt nem tesz semmit. A keresés tehát a jelenlegi behelyettesítéssel még tovább megy, újra meghívja önmagát, és azon a szinten a V változót választja, és annak is egyértelműen a GREEN értéket adja (V=GREEN).
14	0.565217	0	Azaz az elutasító mintavétel az igazi valószínűség konzisztens becslését adja.  ábra - Az elutasító mintavétel algoritmusa, ami Bayes-hálós lekérdezéseket válaszol meg bizonyítékok esetén Az elutasító mintavétel algoritmusa, ami Bayes-hálós lekérdezéseket válaszol meg bizonyítékok esetén
14	0.565217	0	A valószínűségi súlyozás (likelihood weighting) elkerüli az elutasító mintavételezés gyengeségét azáltal, hogy csak az e bizonyítékkal konzisztens eseményeket generál. Az algoritmus működésének a leírásával kezdjük; majd megmutatjuk, hogy helyesen működik – azaz, hogy konzisztens valószínűség becsléseket generál. A Valószínűségi-Súlyozás (lásd  ábra) rögzíti az E bizonyítékváltozók értékeit, és csak a maradék X és Y változókat mintavételezi. Ez garantálja, hogy minden generált esemény konzisztens a bizonyítékkal. Azonban nem minden esemény egyenlő. Mielőtt megállapítanánk a számlálási eredményeket a célváltozó eloszlásában, minden eseményt súlyozunk azzal a valószínűséggel, amely megadja, hogy az esemény mennyire van összhangban a bizonyítékkal. Ezt a valószínűséget az egyes bizonyítékváltozók feltételes valószínűségeinek a szorzatával mérjük, a szüleik ismeretében. Szemléletesen, azoknak az eseményeknek, ahol a bizonyíték valószínűtlennek tűnik, kisebb súlyt kell adni.
3	0.916667	1	- Ennél a feladatnál szinte garantált, hogy az útköltségek különbözőek lesznek, így a szélességi keresés nem ajánlott. Egy egyenletes költségű keresés jobb megoldást biztosít, de várhatóan lassan. Amennyiben a feladatban az akadályok a kezdő és a végpont között vannak, érdemes lehet mélységi keresést alkalmazni, ekkor ugyanis várhatóan elég gyorsan eljutunk egy megoldáshoz: a mélységi keresés gyorsan át lavírozik az akadályok között, majd a túloldalt körülnéz (az akadályok konvexitása miatt nem tud zsákutcába futni). Ha viszont a feladat ennél általánosabb, és a célállapot bárhol lehet, érdemes az egyenletes költségű keresésnél maradni. (Általában ha kevés az információ, jobb az esetleg lassú, de biztonságos egyenletes költségű keresést használni. Ha a memória kapacitás is kevés, akkor ehelyett ajánlott mélységi korlátos keresést választani.)
2	0.263158	1	Jelölje az ágens környezetét E, a vizsgált ágensnek megfelelő ágens-függvényt pedig f. Az ágens cselekvései nyomán előálló környezeti állapot-történetet Hatás(f, E) jelölje. Itt az állapot-történetet nyilván egy adott T időpillanat-halmaz (időszak) felett értelmezzük, ami lehet véges, de elvben akár végtelen is. Ekkor egy adott ágens-függvénynek megfelelő ágens adott környezetben vett hasznát a következőképp számíthatjuk:
15	0.740741	0	 ábra - Az akusztikus jel átalakítása keretek sorozatává; mindegyik keretet három akusztikus jellemzővel írunk le Az akusztikus jel átalakítása keretek sorozatává; mindegyik keretet három akusztikus jellemzővel írunk le
16	0.956522	0	Mennyit ér egy mikrohalál önnek? Fejlesszen ki protokollt ennek meghatározására. Fogalmazzon meg kérdéseket abból a szempontból, hogy mennyit ér a kockázat elkerülése, és abból a szempontból is, hogy mennyiért vállalja a kockázatot.
19	0.909091	1	Fontos a bizonyítékokon alapuló szakmai irányelvek kidolgozása. A rendelet szerint „az egészségügyben dolgozó szakemberek naponta számos, az adott egészségügyi probléma és a probléma valamennyi megoldási lehetőségének mérlegelésén, a lehetőségek kimeneti eredményének („outcome”) valószínűségi becslésén és a beteg preferenciáinak figyelembevételén alapuló klinikai döntést hoznak. Napjainkban az egyedi beteg érdekében hozott döntéseknek azonban a fentieken túl kollektív, etikai, esélyegyenlőségi és szervezési szempontokat, valamint a rendelkezésre álló erőforrásokat, és az ellátó rendszer teherbíró képességét is figyelembe kell venniük.
